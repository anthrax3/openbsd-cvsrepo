head	1.3;
access;
symbols
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.06.07.17.28.53;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2012.06.10.13.21.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.17.50;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.17.50;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@
#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "xaa.h"
#include "xaalocal.h"
#include "xaacexp.h"
#include "xf86.h"

/********** byte swapping ***************/

#ifdef FIXEDBASE
#define DEST(i)	*dest
#define RETURN(i)	return(dest)
#else
#define DEST(i)	dest[i]
#define RETURN(i)	return(dest + i)
#endif

#ifdef MSBFIRST
#define SOURCE(i)	SWAP_BITS_IN_BYTES(src[i])
#else
#define SOURCE(i)	src[i]
#endif

typedef CARD32 *(*BitmapScanlineProcPtr) (CARD32 *, CARD32 *, int, int);

#ifdef TRIPLE_BITS
static CARD32 *
BitmapScanline(CARD32 *src, CARD32 *base, int count, int skipleft)
{
    CARD32 bits;

    while (count >= 3) {
        bits = *src;
        WRITE_BITS3(bits);
        src++;
        count -= 3;
    }
    if (count == 2) {
        bits = *src;
        WRITE_BITS2(bits);
    }
    else if (count == 1) {
        bits = *src;
        WRITE_BITS1(bits);
    }

    return base;
}

static CARD32 *
BitmapScanline_Inverted(CARD32 *src, CARD32 *base, int count, int skipleft)
{
    CARD32 bits;

    while (count >= 3) {
        bits = ~(*src);
        WRITE_BITS3(bits);
        src++;
        count -= 3;
    }
    if (count == 2) {
        bits = ~(*src);
        WRITE_BITS2(bits);
    }
    else if (count == 1) {
        bits = ~(*src);
        WRITE_BITS1(bits);
    }

    return base;
}

static CARD32 *
BitmapScanline_Shifted(CARD32 *src, CARD32 *base, int count, int skipleft)
{
    CARD32 bits;

    while (count >= 3) {
        bits = SHIFT_R(*src, skipleft) | SHIFT_L(*(src + 1), (32 - skipleft));
        WRITE_BITS3(bits);
        src++;
        count -= 3;
    }
    if (count == 2) {
        bits = SHIFT_R(*src, skipleft) | SHIFT_L(*(src + 1), (32 - skipleft));
        WRITE_BITS2(bits);
    }
    else if (count == 1) {
        bits = SHIFT_R(*src, skipleft) | SHIFT_L(*(src + 1), (32 - skipleft));
        WRITE_BITS1(bits);
    }

    return base;
}

static CARD32 *
BitmapScanline_Shifted_Inverted(CARD32 *src, CARD32 *base,
                                int count, int skipleft)
{
    CARD32 bits;

    while (count >= 3) {
        bits =
            ~(SHIFT_R(*src, skipleft) | SHIFT_L(*(src + 1), (32 - skipleft)));
        WRITE_BITS3(bits);
        src++;
        count -= 3;
    }
    if (count == 2) {
        bits =
            ~(SHIFT_R(*src, skipleft) | SHIFT_L(*(src + 1), (32 - skipleft)));
        WRITE_BITS2(bits);
    }
    else if (count == 1) {
        bits =
            ~(SHIFT_R(*src, skipleft) | SHIFT_L(*(src + 1), (32 - skipleft)));
        WRITE_BITS1(bits);
    }

    return base;
}

#define BitmapScanline_Shifted_Careful BitmapScanline_Shifted
#define BitmapScanline_Shifted_Inverted_Careful BitmapScanline_Shifted_Inverted

#else
static CARD32 *
BitmapScanline(CARD32 *src, CARD32 *dest, int count, int skipleft)
{
    while (count >= 4) {
        DEST(0) = SOURCE(0);
        DEST(1) = SOURCE(1);
        DEST(2) = SOURCE(2);
        DEST(3) = SOURCE(3);
        count -= 4;
        src += 4;
#ifndef FIXEDBASE
        dest += 4;
#endif
    }

    if (!count)
        return dest;
    DEST(0) = SOURCE(0);
    if (count == 1)
        RETURN(1);
    DEST(1) = SOURCE(1);
    if (count == 2)
        RETURN(2);
    DEST(2) = SOURCE(2);
    RETURN(3);
}

static CARD32 *
BitmapScanline_Inverted(CARD32 *src, CARD32 *dest, int count, int skipleft)
{
    while (count >= 4) {
        DEST(0) = ~SOURCE(0);
        DEST(1) = ~SOURCE(1);
        DEST(2) = ~SOURCE(2);
        DEST(3) = ~SOURCE(3);
        count -= 4;
        src += 4;
#ifndef FIXEDBASE
        dest += 4;
#endif
    }

    if (!count)
        return dest;
    DEST(0) = ~SOURCE(0);
    if (count == 1)
        RETURN(1);
    DEST(1) = ~SOURCE(1);
    if (count == 2)
        RETURN(2);
    DEST(2) = ~SOURCE(2);
    RETURN(3);
}

static CARD32 *
BitmapScanline_Shifted(CARD32 *bits, CARD32 *base, int count, int skipleft)
{
    while (count--) {
        register CARD32 tmp = SHIFT_R(*bits, skipleft) |
            SHIFT_L(*(bits + 1), (32 - skipleft));
        WRITE_BITS(tmp);
        bits++;
    }
    return base;
}

static CARD32 *
BitmapScanline_Shifted_Inverted(CARD32 *bits, CARD32 *base,
                                int count, int skipleft)
{
    while (count--) {
        register CARD32 tmp = ~(SHIFT_R(*bits, skipleft) |
                                SHIFT_L(*(bits + 1), (32 - skipleft)));
        WRITE_BITS(tmp);
        bits++;
    }
    return base;
}

static CARD32 *
BitmapScanline_Shifted_Careful(CARD32 *bits, CARD32 *base,
                               int count, int skipleft)
{
    register CARD32 tmp;

    while (--count) {
        tmp = SHIFT_R(*bits, skipleft) | SHIFT_L(*(bits + 1), (32 - skipleft));
        WRITE_BITS(tmp);
        bits++;
    }
    tmp = SHIFT_R(*bits, skipleft);
    WRITE_BITS(tmp);

    return base;
}

static CARD32 *
BitmapScanline_Shifted_Inverted_Careful(CARD32 *bits, CARD32 *base,
                                        int count, int skipleft)
{
    register CARD32 tmp;

    while (--count) {
        tmp =
            ~(SHIFT_R(*bits, skipleft) | SHIFT_L(*(bits + 1), (32 - skipleft)));
        WRITE_BITS(tmp);
        bits++;
    }
    tmp = ~(SHIFT_R(*bits, skipleft));
    WRITE_BITS(tmp);
    return base;
}

#endif

/*  
    When the accelerator is TRANSPARENCY_ONLY, WriteBitmap can do
    the fill in two passes, inverting the source on the second pass.  
    For GXcopy we can fill the backing rectangle as a solid rect and
    avoid the invert.
*/

void
#ifdef TRIPLE_BITS
 EXPNAME(XAAWriteBitmapColorExpand3) (
#else
 EXPNAME(XAAWriteBitmapColorExpand) (
#endif
                                        ScrnInfoPtr pScrn,
                                        int x, int y, int w, int H,
                                        unsigned char *src,
                                        int srcwidth,
                                        int skipleft,
                                        int fg, int bg,
                                        int rop, unsigned int planemask) {
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_SCRNINFOPTR(pScrn);
    CARD32 *base;
    unsigned char *srcp = src;
    int SecondPassColor = -1;
    int shift = 0, dwords;
    BitmapScanlineProcPtr firstFunc;
    BitmapScanlineProcPtr secondFunc;
    int flag;
    int h = H;

#ifdef TRIPLE_BITS
    if ((bg != -1) &&
        ((infoRec->CPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY) ||
         ((infoRec->CPUToScreenColorExpandFillFlags & RGB_EQUAL) &&
          (!CHECK_RGB_EQUAL(bg))))) {
#else
    if ((bg != -1) &&
        (infoRec->CPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY)) {
#endif
        if ((rop == GXcopy) && infoRec->SetupForSolidFill) {
            (*infoRec->SetupForSolidFill) (pScrn, bg, rop, planemask);
            (*infoRec->SubsequentSolidFillRect) (pScrn, x, y, w, h);
        }
        else
            SecondPassColor = bg;
        bg = -1;
    }

#ifdef TRIPLE_BITS
    if (skipleft) {
#else
    if (skipleft &&
        (!(infoRec->CPUToScreenColorExpandFillFlags & LEFT_EDGE_CLIPPING) ||
         (!(infoRec->
            CPUToScreenColorExpandFillFlags & LEFT_EDGE_CLIPPING_NEGATIVE_X) &&
          (skipleft > x)))) {
#endif
        if ((skipleft + ((w + 31) & ~31)) > ((skipleft + w + 31) & ~31)) {
            /* don't read past the end */
            firstFunc = BitmapScanline_Shifted_Careful;
            secondFunc = BitmapScanline_Shifted_Inverted_Careful;
        }
        else {
            firstFunc = BitmapScanline_Shifted;
            secondFunc = BitmapScanline_Shifted_Inverted;
        }
        shift = skipleft;
        skipleft = 0;
    }
    else {
        firstFunc = BitmapScanline;
        secondFunc = BitmapScanline_Inverted;
        w += skipleft;
        x -= skipleft;
    }

#ifdef TRIPLE_BITS
    dwords = (3 * w + 31) >> 5;
#else
    dwords = (w + 31) >> 5;
#endif

 SECOND_PASS:

    flag = (infoRec->CPUToScreenColorExpandFillFlags
            & CPU_TRANSFER_PAD_QWORD) && ((dwords * h) & 0x01);
    (*infoRec->SetupForCPUToScreenColorExpandFill) (pScrn, fg, bg, rop,
                                                    planemask);
    (*infoRec->SubsequentCPUToScreenColorExpandFill) (pScrn, x, y, w, h,
                                                      skipleft);

    base = (CARD32 *) infoRec->ColorExpandBase;

#ifndef FIXEDBASE
    if ((dwords * h) <= infoRec->ColorExpandRange)
        while (h--) {
            base = (*firstFunc) ((CARD32 *) srcp, base, dwords, shift);
            srcp += srcwidth;
        }
    else
#endif
        while (h--) {
            (*firstFunc) ((CARD32 *) srcp, base, dwords, shift);
            srcp += srcwidth;
        }

    if (flag) {
        base = (CARD32 *) infoRec->ColorExpandBase;
        base[0] = 0x00000000;
    }

    if (SecondPassColor != -1) {
        h = H;                  /* Reset height */
        fg = SecondPassColor;
        SecondPassColor = -1;
        firstFunc = secondFunc;
        srcp = src;
        goto SECOND_PASS;
    }

    if (infoRec->CPUToScreenColorExpandFillFlags & SYNC_AFTER_COLOR_EXPAND)
        (*infoRec->Sync) (pScrn);
    else
        SET_SYNC_FLAG(infoRec);
}

#ifndef FIXEDBASE

void
#ifdef TRIPLE_BITS
 EXPNAME(XAAWriteBitmapScanlineColorExpand3) (
#else
 EXPNAME(XAAWriteBitmapScanlineColorExpand) (
#endif
                                                ScrnInfoPtr pScrn,
                                                int x, int y, int w, int h,
                                                unsigned char *src,
                                                int srcwidth,
                                                int skipleft,
                                                int fg, int bg,
                                                int rop,
                                                unsigned int planemask) {
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_SCRNINFOPTR(pScrn);
    CARD32 *base;
    unsigned char *srcp = src;
    int SecondPassColor = -1;
    int shift = 0, dwords, bufferNo;
    BitmapScanlineProcPtr firstFunc;
    BitmapScanlineProcPtr secondFunc;

#ifdef TRIPLE_BITS
    if ((bg != -1) &&
        ((infoRec->ScanlineCPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY)
         || ((infoRec->ScanlineCPUToScreenColorExpandFillFlags & RGB_EQUAL) &&
             (!CHECK_RGB_EQUAL(bg))))) {
#else
    if ((bg != -1) &&
        (infoRec->
         ScanlineCPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY)) {
#endif
        if ((rop == GXcopy) && infoRec->SetupForSolidFill) {
            (*infoRec->SetupForSolidFill) (pScrn, bg, rop, planemask);
            (*infoRec->SubsequentSolidFillRect) (pScrn, x, y, w, h);
        }
        else
            SecondPassColor = bg;
        bg = -1;
    }

#ifdef TRIPLE_BITS
    if (skipleft) {
#else
    if (skipleft &&
        (!(infoRec->ScanlineCPUToScreenColorExpandFillFlags &
           LEFT_EDGE_CLIPPING) ||
         (!(infoRec->ScanlineCPUToScreenColorExpandFillFlags &
            LEFT_EDGE_CLIPPING_NEGATIVE_X) && (skipleft > x)))) {
#endif
        if ((skipleft + ((w + 31) & ~31)) > ((skipleft + w + 31) & ~31)) {
            /* don't read past the end */
            firstFunc = BitmapScanline_Shifted_Careful;
            secondFunc = BitmapScanline_Shifted_Inverted_Careful;
        }
        else {
            firstFunc = BitmapScanline_Shifted;
            secondFunc = BitmapScanline_Shifted_Inverted;
        }
        shift = skipleft;
        skipleft = 0;
    }
    else {
        firstFunc = BitmapScanline;
        secondFunc = BitmapScanline_Inverted;
        w += skipleft;
        x -= skipleft;
    }

#ifdef TRIPLE_BITS
    dwords = (3 * w + 31) >> 5;
#else
    dwords = (w + 31) >> 5;
#endif

 SECOND_PASS:

    (*infoRec->SetupForScanlineCPUToScreenColorExpandFill) (pScrn, fg, bg, rop,
                                                            planemask);
    (*infoRec->SubsequentScanlineCPUToScreenColorExpandFill) (pScrn, x, y, w, h,
                                                              skipleft);

    bufferNo = 0;

    while (h--) {
        base = (CARD32 *) infoRec->ScanlineColorExpandBuffers[bufferNo];
        (*firstFunc) ((CARD32 *) srcp, base, dwords, shift);
        (*infoRec->SubsequentColorExpandScanline) (pScrn, bufferNo++);
        srcp += srcwidth;
        if (bufferNo >= infoRec->NumScanlineColorExpandBuffers)
            bufferNo = 0;
    }

    if (SecondPassColor != -1) {
        fg = SecondPassColor;
        SecondPassColor = -1;
        firstFunc = secondFunc;
        srcp = src;
        goto SECOND_PASS;
    }

    SET_SYNC_FLAG(infoRec);
}

#endif
@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.1
log
@Initial revision
@
text
@a1 1

a10 1

a12 1

d14 2
a15 2
# define DEST(i)	*dest
# define RETURN(i)	return(dest)
d17 2
a18 2
# define DEST(i)	dest[i]
# define RETURN(i)	return(dest + i)
d22 1
a22 1
# define SOURCE(i)	SWAP_BITS_IN_BYTES(src[i])
d24 1
a24 1
# define SOURCE(i)	src[i]
d27 1
a27 2

typedef CARD32 *(* BitmapScanlineProcPtr)(CARD32 *, CARD32 *, int, int);
d30 2
a31 4
static CARD32*
BitmapScanline(
   CARD32 *src, CARD32 *base,
   int count, int skipleft )
d33 1
a33 1
     CARD32 bits;
d35 20
a54 21
     while(count >= 3) {
	bits = *src;
	WRITE_BITS3(bits);
	src++;
	count -= 3;
     }
     if (count == 2) {
	bits = *src;
	WRITE_BITS2(bits);
     } else if (count == 1) {
	bits = *src;
	WRITE_BITS1(bits);
     }
     
     return base;
}

static CARD32*
BitmapScanline_Inverted(
   CARD32 *src, CARD32 *base,
   int count, int skipleft )
d56 1
a56 1
     CARD32 bits;
d58 16
a73 15
     while(count >= 3) {
	bits = ~(*src);
	WRITE_BITS3(bits);
	src++;
	count -= 3;
     }
     if (count == 2) {
	bits = ~(*src);
	WRITE_BITS2(bits);
     } else if (count == 1) {
	bits = ~(*src);
	WRITE_BITS1(bits);
     }
     
     return base;
d76 22
d99 3
a101 4
static CARD32*
BitmapScanline_Shifted(
   CARD32 *src, CARD32 *base,
   int count, int skipleft )
d103 1
a103 1
     CARD32 bits;
d105 17
a121 23
     while(count >= 3) {
	bits = SHIFT_R(*src,skipleft) | SHIFT_L(*(src + 1),(32 - skipleft));
	WRITE_BITS3(bits);
	src++;
	count -= 3;
     }
     if (count == 2) {
	bits = SHIFT_R(*src,skipleft) | SHIFT_L(*(src + 1),(32 - skipleft));
	WRITE_BITS2(bits);
     } else if (count == 1) {
	bits = SHIFT_R(*src,skipleft) | SHIFT_L(*(src + 1),(32 - skipleft));
	WRITE_BITS1(bits);
     }
     
     return base;
}

static CARD32*
BitmapScanline_Shifted_Inverted(
   CARD32 *src, CARD32 *base,
   int count, int skipleft )
{
     CARD32 bits;
d123 1
a123 15
     while(count >= 3) {
	bits = ~(SHIFT_R(*src,skipleft) | SHIFT_L(*(src + 1),(32 - skipleft)));
	WRITE_BITS3(bits);
	src++;
	count -= 3;
     }
     if (count == 2) {
	bits = ~(SHIFT_R(*src,skipleft) | SHIFT_L(*(src + 1),(32 - skipleft)));
	WRITE_BITS2(bits);
     } else if (count == 1) {
	bits = ~(SHIFT_R(*src,skipleft) | SHIFT_L(*(src + 1),(32 - skipleft)));
	WRITE_BITS1(bits);
     }
     
     return base;
d130 2
a131 4
static CARD32*
BitmapScanline(
   CARD32 *src, CARD32 *dest,
   int count, int skipleft )
d133 7
a139 7
   while(count >= 4) {
	DEST(0) = SOURCE(0);
	DEST(1) = SOURCE(1);
	DEST(2) = SOURCE(2);
	DEST(3) = SOURCE(3);
	count -= 4;
	src += 4;
d141 1
a141 1
	dest += 4;
d143 24
a166 23
   }
   
   if(!count) return dest;
   DEST(0) = SOURCE(0);
   if(count == 1) RETURN(1);
   DEST(1) = SOURCE(1);
   if(count == 2) RETURN(2);
   DEST(2) = SOURCE(2);
   RETURN(3);
}

static CARD32*
BitmapScanline_Inverted(
   CARD32 *src, CARD32 *dest,
   int count, int skipleft )
{
   while(count >= 4) {
	DEST(0) = ~SOURCE(0);
	DEST(1) = ~SOURCE(1);
	DEST(2) = ~SOURCE(2);
	DEST(3) = ~SOURCE(3);
	count -= 4;
	src += 4;
d168 1
a168 1
	dest += 4;
d170 24
a193 9
   }
   
   if(!count) return dest;
   DEST(0) = ~SOURCE(0);
   if(count == 1) RETURN(1);
   DEST(1) = ~SOURCE(1);
   if(count == 2) RETURN(2);
   DEST(2) = ~SOURCE(2);
   RETURN(3);
d196 12
d209 3
a211 4
static CARD32*
BitmapScanline_Shifted(
   CARD32 *bits, CARD32 *base,
   int count, int skipleft )
d213 11
a223 7
     while(count--) {
	register CARD32 tmp = SHIFT_R(*bits,skipleft) | 
			      SHIFT_L(*(bits + 1),(32 - skipleft));
	WRITE_BITS(tmp);
	bits++;
     }
     return base;
d226 3
a228 4
static CARD32*
BitmapScanline_Shifted_Inverted(
   CARD32 *bits, CARD32 *base,
   int count, int skipleft )
d230 1
a230 8
     while(count--) {
	register CARD32 tmp = ~(SHIFT_R(*bits,skipleft) | 
				SHIFT_L(*(bits + 1),(32 - skipleft)));
	WRITE_BITS(tmp);
	bits++;
     }
     return base;
}
d232 9
a240 31
static CARD32*
BitmapScanline_Shifted_Careful(
   CARD32 *bits, CARD32 *base,
   int count, int skipleft )
{
     register CARD32 tmp;
     while(--count) {
 	tmp = SHIFT_R(*bits,skipleft) | SHIFT_L(*(bits + 1),(32 - skipleft));
	WRITE_BITS(tmp);
	bits++;
     }
     tmp = SHIFT_R(*bits,skipleft);
     WRITE_BITS(tmp);

     return base;
}

static CARD32*
BitmapScanline_Shifted_Inverted_Careful(
   CARD32 *bits, CARD32 *base,
   int count, int skipleft )
{
     register CARD32 tmp;
     while(--count) {
	tmp = ~(SHIFT_R(*bits,skipleft) | SHIFT_L(*(bits + 1),(32 - skipleft)));
	WRITE_BITS(tmp);
	bits++;
     }
     tmp = ~(SHIFT_R(*bits,skipleft));
     WRITE_BITS(tmp);
     return base;
d250 1
a250 1
*/ 
d254 1
a254 1
EXPNAME(XAAWriteBitmapColorExpand3)(
d256 1
a256 1
EXPNAME(XAAWriteBitmapColorExpand)(
d258 7
a264 10
    ScrnInfoPtr pScrn,
    int x, int y, int w, int H,
    unsigned char *src,
    int srcwidth,
    int skipleft,
    int fg, int bg,
    int rop,
    unsigned int planemask 
)
{
d266 1
a266 1
    CARD32* base;
d276 15
a290 13
    if((bg != -1) && 
	((infoRec->CPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY) ||
	((infoRec->CPUToScreenColorExpandFillFlags & RGB_EQUAL) && 
	(!CHECK_RGB_EQUAL(bg))))) {
#else
    if((bg != -1) && 
	(infoRec->CPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY)) {
#endif
	if((rop == GXcopy) && infoRec->SetupForSolidFill) {
    	    (*infoRec->SetupForSolidFill)(pScrn, bg, rop, planemask);
            (*infoRec->SubsequentSolidFillRect)(pScrn, x, y, w, h);
	} else SecondPassColor = bg;
	bg = -1;
d294 1
a294 1
    if(skipleft) {
d296 23
a318 20
    if(skipleft && 
	(!(infoRec->CPUToScreenColorExpandFillFlags & LEFT_EDGE_CLIPPING) || 
	(!(infoRec->CPUToScreenColorExpandFillFlags & LEFT_EDGE_CLIPPING_NEGATIVE_X) && 
		(skipleft > x)))) {
#endif
	if((skipleft + ((w + 31) & ~31)) > ((skipleft + w + 31) & ~31)) {
	    /* don't read past the end */
	    firstFunc = BitmapScanline_Shifted_Careful;
 	    secondFunc = BitmapScanline_Shifted_Inverted_Careful;
	} else {
	    firstFunc = BitmapScanline_Shifted;
 	    secondFunc = BitmapScanline_Shifted_Inverted;
	}
	shift = skipleft;
	skipleft = 0;
    } else {
	firstFunc = BitmapScanline;
 	secondFunc = BitmapScanline_Inverted;
	w += skipleft;
	x -= skipleft;
d327 1
a327 1
SECOND_PASS:
d329 6
a334 6
    flag = (infoRec->CPUToScreenColorExpandFillFlags 
	     & CPU_TRANSFER_PAD_QWORD) && ((dwords * h) & 0x01);
    (*infoRec->SetupForCPUToScreenColorExpandFill)(
					pScrn, fg, bg, rop, planemask);
    (*infoRec->SubsequentCPUToScreenColorExpandFill)(
					pScrn, x, y, w, h, skipleft);
d336 1
a336 1
    base = (CARD32*)infoRec->ColorExpandBase;
d339 5
a343 5
    if((dwords * h) <= infoRec->ColorExpandRange)
	while(h--) {
	    base = (*firstFunc)((CARD32*)srcp, base, dwords, shift);
	    srcp += srcwidth;
    	}
d346 23
a368 22
	while(h--) {
	    (*firstFunc)((CARD32*)srcp, base, dwords, shift);
	    srcp += srcwidth;
	}

    if(flag){
        base = (CARD32*)infoRec->ColorExpandBase;
	base[0] = 0x00000000;
    }

    if(SecondPassColor != -1) {
	h = H; /* Reset height */
	fg = SecondPassColor;
	SecondPassColor = -1;
	firstFunc = secondFunc;
	srcp = src;
	goto SECOND_PASS;
    }

    if(infoRec->CPUToScreenColorExpandFillFlags & SYNC_AFTER_COLOR_EXPAND) 
	(*infoRec->Sync)(pScrn);
    else SET_SYNC_FLAG(infoRec);
d375 1
a375 1
EXPNAME(XAAWriteBitmapScanlineColorExpand3)(
d377 1
a377 1
EXPNAME(XAAWriteBitmapScanlineColorExpand)(
d379 8
a386 10
    ScrnInfoPtr pScrn,
    int x, int y, int w, int h,
    unsigned char *src,
    int srcwidth,
    int skipleft,
    int fg, int bg,
    int rop,
    unsigned int planemask 
)
{
d388 1
a388 1
    CARD32* base;
d396 16
a411 13
    if((bg != -1) &&
	((infoRec->ScanlineCPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY) 
	|| ((infoRec->ScanlineCPUToScreenColorExpandFillFlags & RGB_EQUAL) && 
	(!CHECK_RGB_EQUAL(bg))))) {
#else
    if((bg != -1) && 
	(infoRec->ScanlineCPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY)){
#endif
	if((rop == GXcopy) && infoRec->SetupForSolidFill) {
    	    (*infoRec->SetupForSolidFill)(pScrn, bg, rop, planemask);
            (*infoRec->SubsequentSolidFillRect)(pScrn, x, y, w, h);
	} else SecondPassColor = bg;
	bg = -1;
d415 1
a415 1
    if(skipleft) {
d417 23
a439 21
    if(skipleft && 
	(!(infoRec->ScanlineCPUToScreenColorExpandFillFlags & 
		LEFT_EDGE_CLIPPING) || 
	(!(infoRec->ScanlineCPUToScreenColorExpandFillFlags &
		 LEFT_EDGE_CLIPPING_NEGATIVE_X) && (skipleft > x)))) {
#endif
	if((skipleft + ((w + 31) & ~31)) > ((skipleft + w + 31) & ~31)) {
	    /* don't read past the end */
	    firstFunc = BitmapScanline_Shifted_Careful;
 	    secondFunc = BitmapScanline_Shifted_Inverted_Careful;
	} else {
	    firstFunc = BitmapScanline_Shifted;
 	    secondFunc = BitmapScanline_Shifted_Inverted;
	}
	shift = skipleft;
	skipleft = 0;
    } else {
	firstFunc = BitmapScanline;
 	secondFunc = BitmapScanline_Inverted;
	w += skipleft;
	x -= skipleft;
d448 1
a448 1
SECOND_PASS:
d450 4
a453 3
    (*infoRec->SetupForScanlineCPUToScreenColorExpandFill)(pScrn, fg, bg, rop, planemask);
    (*infoRec->SubsequentScanlineCPUToScreenColorExpandFill)(
					pScrn, x, y, w, h, skipleft);
d457 7
a463 7
    while(h--) {
	base = (CARD32*)infoRec->ScanlineColorExpandBuffers[bufferNo];
	(*firstFunc)((CARD32*)srcp, base, dwords, shift);
	(*infoRec->SubsequentColorExpandScanline)(pScrn, bufferNo++);
	srcp += srcwidth;
	if(bufferNo >= infoRec->NumScanlineColorExpandBuffers)
	    bufferNo = 0;
d466 6
a471 6
    if(SecondPassColor != -1) {
	fg = SecondPassColor;
	SecondPassColor = -1;
	firstFunc = secondFunc;
	srcp = src;
	goto SECOND_PASS;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
