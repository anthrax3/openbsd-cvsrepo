head	1.5;
access;
symbols
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.06.07.17.28.53;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.27;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.28;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.17.45;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.17.45;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@
/*
   A CopyPlane function that handles bitmap->screen copies and
   sends anything else to the Fallback.

   Also, a PushPixels for solid fill styles.

   Written by Mark Vojkovich (markv@@valinux.com)

*/

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <string.h>

#include "misc.h"
#include "xf86.h"
#include "xf86_OSproc.h"
#include "servermd.h"

#include <X11/X.h>
#include "scrnintstr.h"
#include "mi.h"
#include "pixmapstr.h"
#include "xf86str.h"
#include "xaa.h"
#include "xaalocal.h"
#include "xaawrap.h"

static void XAACopyPlane1toNColorExpand(DrawablePtr pSrc, DrawablePtr pDst,
                                        GCPtr pGC, RegionPtr rgnDst,
                                        DDXPointPtr pptSrc);
static void XAACopyPlaneNtoNColorExpand(DrawablePtr pSrc, DrawablePtr pDst,
                                        GCPtr pGC, RegionPtr rgnDst,
                                        DDXPointPtr pptSrc);

static unsigned long TmpBitPlane;

RegionPtr
XAACopyPlaneColorExpansion(DrawablePtr pSrc,
                           DrawablePtr pDst,
                           GCPtr pGC,
                           int srcx, int srcy,
                           int width, int height,
                           int dstx, int dsty, unsigned long bitPlane)
{
    if ((pSrc->type == DRAWABLE_PIXMAP) && !XAA_DEPTH_BUG(pGC)) {
        if (pSrc->bitsPerPixel == 1) {
            return (XAABitBlt(pSrc, pDst, pGC, srcx, srcy,
                              width, height, dstx, dsty,
                              XAACopyPlane1toNColorExpand, bitPlane));
        }
        else if (bitPlane < (1 << pDst->depth)) {
            TmpBitPlane = bitPlane;
            return (XAABitBlt(pSrc, pDst, pGC, srcx, srcy,
                              width, height, dstx, dsty,
                              XAACopyPlaneNtoNColorExpand, bitPlane));
        }
    }

    return (XAAFallbackOps.CopyPlane(pSrc, pDst, pGC, srcx, srcy,
                                     width, height, dstx, dsty, bitPlane));
}

static void
XAACopyPlane1toNColorExpand(DrawablePtr pSrc,
                            DrawablePtr pDst,
                            GCPtr pGC, RegionPtr rgnDst, DDXPointPtr pptSrc)
{
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
    BoxPtr pbox = RegionRects(rgnDst);
    int numrects = RegionNumRects(rgnDst);
    unsigned char *src = ((PixmapPtr) pSrc)->devPrivate.ptr;
    int srcwidth = ((PixmapPtr) pSrc)->devKind;

    while (numrects--) {
        (*infoRec->WriteBitmap) (infoRec->pScrn, pbox->x1, pbox->y1,
                                 pbox->x2 - pbox->x1, pbox->y2 - pbox->y1,
                                 src + (srcwidth * pptSrc->y) +
                                 ((pptSrc->x >> 5) << 2), srcwidth,
                                 pptSrc->x & 31, pGC->fgPixel, pGC->bgPixel,
                                 pGC->alu, pGC->planemask);
        pbox++;
        pptSrc++;
    }
}

static void
XAACopyPlaneNtoNColorExpand(DrawablePtr pSrc,
                            DrawablePtr pDst,
                            GCPtr pGC, RegionPtr rgnDst, DDXPointPtr pptSrc)
{
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
    BoxPtr pbox = RegionRects(rgnDst);
    int numrects = RegionNumRects(rgnDst);
    unsigned char *src = ((PixmapPtr) pSrc)->devPrivate.ptr;
    unsigned char *data, *srcPtr, *dataPtr;
    int srcwidth = ((PixmapPtr) pSrc)->devKind;
    int pitch, width, height, h, i, index, offset;
    int Bpp = pSrc->bitsPerPixel >> 3;
    unsigned long mask = TmpBitPlane;

    if (TmpBitPlane < (1 << 8)) {
        offset = 0;
    }
    else if (TmpBitPlane < (1 << 16)) {
        offset = 1;
        mask >>= 8;
    }
    else if (TmpBitPlane < (1 << 24)) {
        offset = 2;
        mask >>= 16;
    }
    else {
        offset = 3;
        mask >>= 24;
    }

    if (IS_OFFSCREEN_PIXMAP(pSrc))
        SYNC_CHECK(pSrc);

    while (numrects--) {
        width = pbox->x2 - pbox->x1;
        h = height = pbox->y2 - pbox->y1;
        pitch = BitmapBytePad(width);

        if (!(data = calloc(height, pitch)))
            goto ALLOC_FAILED;

        dataPtr = data;
        srcPtr = ((pptSrc->y) * srcwidth) + src + ((pptSrc->x) * Bpp) + offset;

        while (h--) {
            for (i = index = 0; i < width; i++, index += Bpp) {
                if (mask & srcPtr[index])
                    dataPtr[i >> 3] |= (1 << (i & 7));
            }
            dataPtr += pitch;
            srcPtr += srcwidth;
        }

        (*infoRec->WriteBitmap) (infoRec->pScrn,
                                 pbox->x1, pbox->y1, width, height, data, pitch,
                                 0, pGC->fgPixel, pGC->bgPixel, pGC->alu,
                                 pGC->planemask);

        free(data);

 ALLOC_FAILED:

        pbox++;
        pptSrc++;
    }
}

void
XAAPushPixelsSolidColorExpansion(GCPtr pGC,
                                 PixmapPtr pBitMap,
                                 DrawablePtr pDraw,
                                 int dx, int dy, int xOrg, int yOrg)
{
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
    int MaxBoxes = RegionNumRects(pGC->pCompositeClip);
    BoxPtr pbox, pClipBoxes;
    int nboxes, srcx, srcy;
    xRectangle TheRect;
    unsigned char *src = pBitMap->devPrivate.ptr;
    int srcwidth = pBitMap->devKind;

    if (!RegionNumRects(pGC->pCompositeClip))
        return;

    TheRect.x = xOrg;
    TheRect.y = yOrg;
    TheRect.width = dx;
    TheRect.height = dy;

    if (MaxBoxes > (infoRec->PreAllocSize / sizeof(BoxRec))) {
        pClipBoxes = malloc(MaxBoxes * sizeof(BoxRec));
        if (!pClipBoxes)
            return;
    }
    else
        pClipBoxes = (BoxPtr) infoRec->PreAllocMem;

    nboxes = XAAGetRectClipBoxes(pGC, pClipBoxes, 1, &TheRect);
    pbox = pClipBoxes;

    while (nboxes--) {
        srcx = pbox->x1 - xOrg;
        srcy = pbox->y1 - yOrg;
        (*infoRec->WriteBitmap) (infoRec->pScrn, pbox->x1, pbox->y1,
                                 pbox->x2 - pbox->x1, pbox->y2 - pbox->y1,
                                 src + (srcwidth * srcy) + ((srcx >> 5) << 2),
                                 srcwidth, srcx & 31,
                                 pGC->fgPixel, -1, pGC->alu, pGC->planemask);
        pbox++;
    }

    if (pClipBoxes != (BoxPtr) infoRec->PreAllocMem)
        free(pClipBoxes);
}
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d33 2
a34 2
					GCPtr pGC, RegionPtr rgnDst,
					DDXPointPtr pptSrc);
d36 2
a37 2
					GCPtr pGC, RegionPtr rgnDst,
					DDXPointPtr pptSrc);
d39 1
a39 2

static unsigned long TmpBitPlane; 
d42 19
a60 20
XAACopyPlaneColorExpansion(
    DrawablePtr	pSrc,
    DrawablePtr	pDst,
    GCPtr pGC,
    int	srcx, int srcy,
    int	width, int height,
    int	dstx, int dsty,
    unsigned long bitPlane 
){
    if((pSrc->type == DRAWABLE_PIXMAP) && !XAA_DEPTH_BUG(pGC)) {
	if(pSrc->bitsPerPixel == 1) {
	   return(XAABitBlt(pSrc, pDst, pGC, srcx, srcy,
			width, height, dstx, dsty, 
			XAACopyPlane1toNColorExpand, bitPlane));
	} else if(bitPlane < (1 << pDst->depth)){
	   TmpBitPlane = bitPlane;
	   return(XAABitBlt(pSrc, pDst, pGC, srcx, srcy,
			width, height, dstx, dsty, 
			XAACopyPlaneNtoNColorExpand, bitPlane));
	}
d63 2
a64 2
    return (XAAFallbackOps.CopyPlane(pSrc, pDst, pGC, srcx, srcy, 
			width, height, dstx, dsty, bitPlane));
d67 4
a70 8

static void 
XAACopyPlane1toNColorExpand(
    DrawablePtr   pSrc, 
    DrawablePtr	  pDst,
    GCPtr	  pGC,
    RegionPtr     rgnDst,
    DDXPointPtr   pptSrc )
d75 12
a86 10
    unsigned char *src = ((PixmapPtr)pSrc)->devPrivate.ptr;
    int srcwidth = ((PixmapPtr)pSrc)->devKind; 
    
    while(numrects--) {	
	(*infoRec->WriteBitmap)(infoRec->pScrn, pbox->x1, pbox->y1, 
		pbox->x2 - pbox->x1, pbox->y2 - pbox->y1, 
		src + (srcwidth * pptSrc->y) + ((pptSrc->x >> 5) << 2), 
		srcwidth, pptSrc->x & 31, 
		pGC->fgPixel, pGC->bgPixel, pGC->alu, pGC->planemask);
	pbox++; pptSrc++;
d90 5
a94 9

static void 
XAACopyPlaneNtoNColorExpand(
    DrawablePtr   pSrc, 
    DrawablePtr	  pDst,
    GCPtr	  pGC,
    RegionPtr     rgnDst,
    DDXPointPtr   pptSrc 
){
d98 1
a98 1
    unsigned char *src = ((PixmapPtr)pSrc)->devPrivate.ptr;
d100 1
a100 1
    int srcwidth = ((PixmapPtr)pSrc)->devKind; 
d105 15
a119 42
    if(TmpBitPlane < (1 << 8)) {
	offset = 0;
    } else if(TmpBitPlane < (1 << 16)) {
	offset = 1;
	mask >>= 8;
    } else if(TmpBitPlane < (1 << 24)) {
	offset = 2;
	mask >>= 16;
    } else {
	offset = 3;
	mask >>= 24;
    }

    if(IS_OFFSCREEN_PIXMAP(pSrc))
	SYNC_CHECK(pSrc);
    
    while(numrects--) {	
	width = pbox->x2 - pbox->x1;
	h = height = pbox->y2 - pbox->y1;
	pitch = BitmapBytePad(width);

	if(!(data = calloc(height, pitch)))
	   goto ALLOC_FAILED;

	dataPtr = data;
        srcPtr = ((pptSrc->y) * srcwidth) + src + 
                        ((pptSrc->x) * Bpp) + offset;

	while(h--) {
	    for(i = index = 0; i < width; i++, index += Bpp) {
	       if(mask & srcPtr[index])
		  dataPtr[i >> 3] |= (1 << (i & 7));
	    }
	    dataPtr += pitch;
	    srcPtr += srcwidth;
	}

	(*infoRec->WriteBitmap)(infoRec->pScrn, 
		pbox->x1, pbox->y1, width, height, data, pitch, 0, 
		pGC->fgPixel, pGC->bgPixel, pGC->alu, pGC->planemask);
	
	free(data);
d121 2
a122 1
ALLOC_FAILED:
d124 31
a154 1
	pbox++; pptSrc++;
d159 4
a162 6
XAAPushPixelsSolidColorExpansion(
    GCPtr	pGC,
    PixmapPtr	pBitMap,
    DrawablePtr pDraw,
    int	dx, int dy, 
    int xOrg, int yOrg )
d164 23
a186 34
   XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
   int MaxBoxes = RegionNumRects(pGC->pCompositeClip);
   BoxPtr	pbox, pClipBoxes;
   int		nboxes, srcx, srcy;
   xRectangle TheRect;
   unsigned char *src = pBitMap->devPrivate.ptr;
   int srcwidth = pBitMap->devKind;

   if(!RegionNumRects(pGC->pCompositeClip))
	return;

   TheRect.x = xOrg;
   TheRect.y = yOrg;
   TheRect.width = dx;
   TheRect.height = dy; 

   if(MaxBoxes > (infoRec->PreAllocSize/sizeof(BoxRec))) {
	pClipBoxes = malloc(MaxBoxes * sizeof(BoxRec));
	if(!pClipBoxes) return;	
   } else pClipBoxes = (BoxPtr)infoRec->PreAllocMem;

   nboxes = XAAGetRectClipBoxes(pGC, pClipBoxes, 1, &TheRect);
   pbox = pClipBoxes;

   while(nboxes--) {
	srcx = pbox->x1 - xOrg;
	srcy = pbox->y1 - yOrg;
 	(*infoRec->WriteBitmap)(infoRec->pScrn, pbox->x1, pbox->y1, 
		pbox->x2 - pbox->x1, pbox->y2 - pbox->y1, 
		src + (srcwidth * srcy) + ((srcx >> 5) << 2), 
		srcwidth, srcx & 31, 
		pGC->fgPixel, -1, pGC->alu, pGC->planemask);
	pbox++;
   }
d188 16
a203 2
    if(pClipBoxes != (BoxPtr)infoRec->PreAllocMem)
	free(pClipBoxes);
a204 1

@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d79 2
a80 2
    BoxPtr pbox = REGION_RECTS(rgnDst);
    int numrects = REGION_NUM_RECTS(rgnDst);
d104 2
a105 2
    BoxPtr pbox = REGION_RECTS(rgnDst);
    int numrects = REGION_NUM_RECTS(rgnDst);
d134 1
a134 1
	if(!(data = xcalloc(height, pitch)))
d154 1
a154 1
	xfree(data);
d171 1
a171 1
   int MaxBoxes = REGION_NUM_RECTS(pGC->pCompositeClip);
d178 1
a178 1
   if(!REGION_NUM_RECTS(pGC->pCompositeClip))
d187 1
a187 1
	pClipBoxes = xalloc(MaxBoxes * sizeof(BoxRec));
d206 1
a206 1
	xfree(pClipBoxes);
@


1.1
log
@Initial revision
@
text
@d113 1
a113 1
    if(TmpBitPlane < 8) {
d115 1
a115 1
    } else if(TmpBitPlane < 16) {
d118 1
a118 1
    } else if(TmpBitPlane < 24) {
d134 1
a134 1
	if(!(data = xalloc(height * pitch)))
a135 2

        bzero(data, height * pitch);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
