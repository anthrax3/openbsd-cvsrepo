head	1.6;
access;
symbols
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.06.07.17.28.53;	author matthieu;	state dead;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.28;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.28;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.17.44;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.17.44;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@
#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "misc.h"
#include "xf86.h"
#include "xf86_OSproc.h"

#include <X11/X.h>
#include "scrnintstr.h"
#include "pixmapstr.h"
#include "windowstr.h"
#include "xf86str.h"
#include "mi.h"
#include "miline.h"
#include "xaa.h"
#include "xaalocal.h"
#include "xaawrap.h"
#include "servermd.h"

#define XAA_STATE_WRAP(func) do {\
if(infoRec->func) { \
   pStatePriv->func = infoRec->func;\
   infoRec->func = XAAStateWrap##func;\
}} while(0)

/* Wrap all XAA functions and allocate our private structure.
 */

typedef struct _XAAStateWrapRec {
    ScrnInfoPtr pScrn;
    void (*RestoreAccelState) (ScrnInfoPtr pScrn);
    void (*Sync) (ScrnInfoPtr pScrn);
    void (*SetupForScreenToScreenCopy) (ScrnInfoPtr pScrn, int xdir, int ydir,
                                        int rop, unsigned int planemask,
                                        int trans_color);
    void (*SetupForSolidFill) (ScrnInfoPtr pScrn, int color, int rop,
                               unsigned int planemask);
    void (*SetupForSolidLine) (ScrnInfoPtr pScrn, int color, int rop,
                               unsigned int planemask);
    void (*SetupForDashedLine) (ScrnInfoPtr pScrn, int fg, int bg, int rop,
                                unsigned int planemask, int length,
                                unsigned char *pattern);
    void (*SetClippingRectangle) (ScrnInfoPtr pScrn, int left, int top,
                                  int right, int bottom);
    void (*DisableClipping) (ScrnInfoPtr pScrn);
    void (*SetupForMono8x8PatternFill) (ScrnInfoPtr pScrn, int patx, int paty,
                                        int fg, int bg, int rop,
                                        unsigned int planemask);
    void (*SetupForColor8x8PatternFill) (ScrnInfoPtr pScrn, int patx, int paty,
                                         int rop, unsigned int planemask,
                                         int transparency_color);
    void (*SetupForCPUToScreenColorExpandFill) (ScrnInfoPtr pScrn, int fg,
                                                int bg, int rop,
                                                unsigned int planemask);
    void (*SetupForScanlineCPUToScreenColorExpandFill) (ScrnInfoPtr pScrn,
                                                        int fg, int bg, int rop,
                                                        unsigned int planemask);
    void (*SetupForScreenToScreenColorExpandFill) (ScrnInfoPtr pScrn,
                                                   int fg, int bg, int rop,
                                                   unsigned int planemask);
    void (*SetupForImageWrite) (ScrnInfoPtr pScrn, int rop,
                                unsigned int planemask, int transparency_color,
                                int bpp, int depth);
    void (*SetupForScanlineImageWrite) (ScrnInfoPtr pScrn, int rop,
                                        unsigned int planemask,
                                        int transparency_color,
                                        int bpp, int depth);
    void (*SetupForImageRead) (ScrnInfoPtr pScrn, int bpp, int depth);
    void (*ScreenToScreenBitBlt) (ScrnInfoPtr pScrn, int nbox,
                                  DDXPointPtr pptSrc, BoxPtr pbox, int xdir,
                                  int ydir, int alu, unsigned int planmask);
    void (*WriteBitmap) (ScrnInfoPtr pScrn, int x, int y, int w, int h,
                         unsigned char *src, int srcwidth, int skipleft,
                         int fg, int bg, int rop, unsigned int planemask);
    void (*FillSolidRects) (ScrnInfoPtr pScrn, int fg, int rop,
                            unsigned int planemask, int nBox, BoxPtr pBox);
    void (*FillMono8x8PatternRects) (ScrnInfoPtr pScrn, int fg, int bg, int rop,
                                     unsigned int planemask, int nBox,
                                     BoxPtr pBox, int pat0, int pat1,
                                     int xorg, int yorg);
    void (*FillColor8x8PatternRects) (ScrnInfoPtr pScrn, int rop,
                                      unsigned int planemask, int nBox,
                                      BoxPtr pBox, int xorg, int yorg,
                                      XAACacheInfoPtr pCache);
    void (*FillCacheBltRects) (ScrnInfoPtr pScrn, int rop,
                               unsigned int planemask, int nBox, BoxPtr pBox,
                               int xorg, int yorg, XAACacheInfoPtr pCache);
    void (*FillColorExpandRects) (ScrnInfoPtr pScrn, int fg, int bg, int rop,
                                  unsigned int planemask, int nBox,
                                  BoxPtr pBox, int xorg, int yorg,
                                  PixmapPtr pPix);
    void (*FillCacheExpandRects) (ScrnInfoPtr pScrn, int fg, int bg, int rop,
                                  unsigned int planemask, int nBox, BoxPtr pBox,
                                  int xorg, int yorg, PixmapPtr pPix);
    void (*FillImageWriteRects) (ScrnInfoPtr pScrn, int rop,
                                 unsigned int planemask, int nBox, BoxPtr pBox,
                                 int xorg, int yorg, PixmapPtr pPix);
    void (*FillSolidSpans) (ScrnInfoPtr pScrn, int fg, int rop,
                            unsigned int planemask, int n, DDXPointPtr points,
                            int *widths, int fSorted);
    void (*FillMono8x8PatternSpans) (ScrnInfoPtr pScrn, int fg, int bg, int rop,
                                     unsigned int planemask, int n,
                                     DDXPointPtr points, int *widths,
                                     int fSorted, int pat0, int pat1,
                                     int xorg, int yorg);
    void (*FillColor8x8PatternSpans) (ScrnInfoPtr pScrn, int rop,
                                      unsigned int planemask, int n,
                                      DDXPointPtr points, int *widths,
                                      int fSorted, XAACacheInfoPtr pCache,
                                      int xorg, int yorg);
    void (*FillCacheBltSpans) (ScrnInfoPtr pScrn, int rop,
                               unsigned int planemask, int n,
                               DDXPointPtr points, int *widths, int fSorted,
                               XAACacheInfoPtr pCache, int xorg, int yorg);
    void (*FillColorExpandSpans) (ScrnInfoPtr pScrn, int fg, int bg, int rop,
                                  unsigned int planemask, int n,
                                  DDXPointPtr points, int *widths, int fSorted,
                                  int xorg, int yorg, PixmapPtr pPix);
    void (*FillCacheExpandSpans) (ScrnInfoPtr pScrn, int fg, int bg, int rop,
                                  unsigned int planemask, int n,
                                  DDXPointPtr ppt, int *pwidth, int fSorted,
                                  int xorg, int yorg, PixmapPtr pPix);
    void (*TEGlyphRenderer) (ScrnInfoPtr pScrn, int x, int y, int w, int h,
                             int skipleft, int startline, unsigned int **glyphs,
                             int glyphWidth, int fg, int bg, int rop,
                             unsigned planemask);
    void (*NonTEGlyphRenderer) (ScrnInfoPtr pScrn, int x, int y, int n,
                                NonTEGlyphPtr glyphs, BoxPtr pbox, int fg,
                                int rop, unsigned int planemask);
    void (*WritePixmap) (ScrnInfoPtr pScrn, int x, int y, int w, int h,
                         unsigned char *src, int srcwidth, int rop,
                         unsigned int planemask, int transparency_color,
                         int bpp, int depth);
    void (*ReadPixmap) (ScrnInfoPtr pScrn, int x, int y, int w, int h,
                        unsigned char *dst, int dstwidth, int bpp, int depth);
    RegionPtr (*CopyArea) (DrawablePtr pSrcDrawable, DrawablePtr pDstDrawable,
                           GC * pGC, int srcx, int srcy, int width, int height,
                           int dstx, int dsty);
    RegionPtr (*CopyPlane) (DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
                            int srcx, int srcy, int width, int height, int dstx,
                            int dsty, unsigned long bitPlane);
    void (*PushPixelsSolid) (GCPtr pGC, PixmapPtr pBitMap,
                             DrawablePtr pDrawable, int dx, int dy, int xOrg,
                             int yOrg);
    void (*PolyFillRectSolid) (DrawablePtr pDraw, GCPtr pGC, int nrectFill,
                               xRectangle *prectInit);
    void (*PolyFillRectStippled) (DrawablePtr pDraw, GCPtr pGC, int nrectFill,
                                  xRectangle *prectInit);
    void (*PolyFillRectOpaqueStippled) (DrawablePtr pDraw, GCPtr pGC,
                                        int nrectFill, xRectangle *prectInit);
    void (*PolyFillRectTiled) (DrawablePtr pDraw, GCPtr pGC, int nrectFill,
                               xRectangle *prectInit);
    void (*FillSpansSolid) (DrawablePtr pDraw, GCPtr pGC, int nInit,
                            DDXPointPtr ppt, int *pwidth, int fSorted);
    void (*FillSpansStippled) (DrawablePtr pDraw, GCPtr pGC, int nInit,
                               DDXPointPtr ppt, int *pwidth, int fSorted);
    void (*FillSpansOpaqueStippled) (DrawablePtr pDraw, GCPtr pGC, int nInit,
                                     DDXPointPtr ppt, int *pwidth, int fSorted);
    void (*FillSpansTiled) (DrawablePtr pDraw, GCPtr pGC, int nInit,
                            DDXPointPtr ppt, int *pwidth, int fSorted);
    int (*PolyText8TE) (DrawablePtr pDraw, GCPtr pGC, int x, int y, int count,
                        char *chars);
    int (*PolyText16TE) (DrawablePtr pDraw, GCPtr pGC, int x, int y, int count,
                         unsigned short *chars);
    void (*ImageText8TE) (DrawablePtr pDraw, GCPtr pGC, int x, int y, int count,
                          char *chars);
    void (*ImageText16TE) (DrawablePtr pDraw, GCPtr pGC, int x, int y,
                           int count, unsigned short *chars);
    void (*ImageGlyphBltTE) (DrawablePtr pDrawable, GCPtr pGC, int xInit,
                             int yInit, unsigned int nglyph, CharInfoPtr * ppci,
                             pointer pglyphBase);
    void (*PolyGlyphBltTE) (DrawablePtr pDrawable, GCPtr pGC, int xInit,
                            int yInit, unsigned int nglyph, CharInfoPtr * ppci,
                            pointer pglyphBase);
    int (*PolyText8NonTE) (DrawablePtr pDraw, GCPtr pGC, int x, int y,
                           int count, char *chars);
    int (*PolyText16NonTE) (DrawablePtr pDraw, GCPtr pGC, int x, int y,
                            int count, unsigned short *chars);
    void (*ImageText8NonTE) (DrawablePtr pDraw, GCPtr pGC, int x, int y,
                             int count, char *chars);
    void (*ImageText16NonTE) (DrawablePtr pDraw, GCPtr pGC, int x, int y,
                              int count, unsigned short *chars);
    void (*ImageGlyphBltNonTE) (DrawablePtr pDrawable, GCPtr pGC, int xInit,
                                int yInit, unsigned int nglyph,
                                CharInfoPtr * ppci, pointer pglyphBase);
    void (*PolyGlyphBltNonTE) (DrawablePtr pDrawable, GCPtr pGC, int xInit,
                               int yInit, unsigned int nglyph,
                               CharInfoPtr * ppci, pointer pglyphBase);
    void (*PolyRectangleThinSolid) (DrawablePtr pDrawable, GCPtr pGC,
                                    int nRectsInit, xRectangle *pRectsInit);
    void (*PolylinesWideSolid) (DrawablePtr pDrawable, GCPtr pGC, int mode,
                                int npt, DDXPointPtr pPts);
    void (*PolylinesThinSolid) (DrawablePtr pDrawable, GCPtr pGC, int mode,
                                int npt, DDXPointPtr pPts);
    void (*PolySegmentThinSolid) (DrawablePtr pDrawable, GCPtr pGC, int nseg,
                                  xSegment * pSeg);
    void (*PolylinesThinDashed) (DrawablePtr pDrawable, GCPtr pGC, int mode,
                                 int npt, DDXPointPtr pPts);
    void (*PolySegmentThinDashed) (DrawablePtr pDrawable, GCPtr pGC, int nseg,
                                   xSegment * pSeg);
    void (*FillPolygonSolid) (DrawablePtr pDrawable, GCPtr pGC, int shape,
                              int mode, int count, DDXPointPtr ptsIn);
    void (*FillPolygonStippled) (DrawablePtr pDrawable, GCPtr pGC, int shape,
                                 int mode, int count, DDXPointPtr ptsIn);
    void (*FillPolygonOpaqueStippled) (DrawablePtr pDrawable, GCPtr pGC,
                                       int shape, int mode, int count,
                                       DDXPointPtr ptsIn);
    void (*FillPolygonTiled) (DrawablePtr pDrawable, GCPtr pGC, int shape,
                              int mode, int count, DDXPointPtr ptsIn);
    void (*PolyFillArcSolid) (DrawablePtr pDraw, GCPtr pGC, int narcs,
                              xArc * parcs);
    void (*PutImage) (DrawablePtr pDraw, GCPtr pGC, int depth, int x, int y,
                      int w, int h, int leftPad, int format, char *pImage);
    ValidateGCProcPtr ValidateFillSpans;
    ValidateGCProcPtr ValidateSetSpans;
    ValidateGCProcPtr ValidatePutImage;
    ValidateGCProcPtr ValidateCopyArea;
    ValidateGCProcPtr ValidateCopyPlane;
    ValidateGCProcPtr ValidatePolyPoint;
    ValidateGCProcPtr ValidatePolylines;
    ValidateGCProcPtr ValidatePolySegment;
    ValidateGCProcPtr ValidatePolyRectangle;
    ValidateGCProcPtr ValidatePolyArc;
    ValidateGCProcPtr ValidateFillPolygon;
    ValidateGCProcPtr ValidatePolyFillRect;
    ValidateGCProcPtr ValidatePolyFillArc;
    ValidateGCProcPtr ValidatePolyText8;
    ValidateGCProcPtr ValidatePolyText16;
    ValidateGCProcPtr ValidateImageText8;
    ValidateGCProcPtr ValidateImageText16;
    ValidateGCProcPtr ValidatePolyGlyphBlt;
    ValidateGCProcPtr ValidateImageGlyphBlt;
    ValidateGCProcPtr ValidatePushPixels;
    void (*ComputeDash) (GCPtr pGC);
    void (*InitPixmapCache) (ScreenPtr pScreen, RegionPtr areas, pointer data);
    void (*ClosePixmapCache) (ScreenPtr pScreen);
    int (*StippledFillChooser) (GCPtr pGC);
    int (*OpaqueStippledFillChooser) (GCPtr pGC);
    int (*TiledFillChooser) (GCPtr pGC);
     XAACacheInfoPtr(*CacheTile) (ScrnInfoPtr Scrn, PixmapPtr pPix);
     XAACacheInfoPtr(*CacheStipple) (ScrnInfoPtr Scrn, PixmapPtr pPix, int fg,
                                     int bg);
     XAACacheInfoPtr(*CacheMonoStipple) (ScrnInfoPtr Scrn, PixmapPtr pPix);
     XAACacheInfoPtr(*CacheMono8x8Pattern) (ScrnInfoPtr Scrn, int pat0,
                                            int pat1);
     XAACacheInfoPtr(*CacheColor8x8Pattern) (ScrnInfoPtr Scrn, PixmapPtr pPix,
                                             int fg, int bg);
    void (*WriteBitmapToCache) (ScrnInfoPtr pScrn, int x, int y, int w, int h,
                                unsigned char *src, int srcwidth, int fg,
                                int bg);
    void (*WritePixmapToCache) (ScrnInfoPtr pScrn, int x, int y, int w, int h,
                                unsigned char *src, int srcwidth, int bpp,
                                int depth);
    void (*WriteMono8x8PatternToCache) (ScrnInfoPtr pScrn,
                                        XAACacheInfoPtr pCache);
    void (*WriteColor8x8PatternToCache) (ScrnInfoPtr pScrn, PixmapPtr pPix,
                                         XAACacheInfoPtr pCache);
    GetImageProcPtr GetImage;
    GetSpansProcPtr GetSpans;
    CopyWindowProcPtr CopyWindow;
    Bool (*SetupForCPUToScreenAlphaTexture2) (ScrnInfoPtr pScrn, int op,
                                              CARD16 red, CARD16 green,
                                              CARD16 blue, CARD16 alpha,
                                              CARD32 maskFormat,
                                              CARD32 dstFormat, CARD8 *alphaPtr,
                                              int alphaPitch, int width,
                                              int height, int flags);
    Bool (*SetupForCPUToScreenTexture2) (ScrnInfoPtr pScrn, int op,
                                         CARD32 srcFormat, CARD32 dstFormat,
                                         CARD8 *texPtr, int texPitch, int width,
                                         int height, int flags);
} XAAStateWrapRec, *XAAStateWrapPtr;

static DevPrivateKeyRec XAAStateKeyRec;

#define XAAStateKey (&XAAStateKeyRec)

/* Wrap functions start here */
#define GET_STATEPRIV_GC(pGC)   XAAStateWrapPtr pStatePriv =\
(XAAStateWrapPtr)dixLookupPrivate(&(pGC)->pScreen->devPrivates, XAAStateKey)

#define GET_STATEPRIV_SCREEN(pScreen)   XAAStateWrapPtr pStatePriv =\
(XAAStateWrapPtr)dixLookupPrivate(&(pScreen)->devPrivates, XAAStateKey)

#define GET_STATEPRIV_PSCRN(pScrn)   XAAStateWrapPtr pStatePriv =\
(XAAStateWrapPtr)dixLookupPrivate(&(pScrn)->pScreen->devPrivates, XAAStateKey)

#define STATE_CHECK_SP(pStatePriv) {\
	ScrnInfoPtr pScrn = pStatePriv->pScrn;\
	int i = 0;\
	int need_change = 0;\
	while(i < pScrn->numEntities) {\
		if(xf86IsEntityShared(pScrn->entityList[i]) &&\
		   xf86GetLastScrnFlag(pScrn->entityList[i]) != pScrn->scrnIndex) {\
			need_change = 1;\
			xf86SetLastScrnFlag(pScrn->entityList[i],\
					    pScrn->scrnIndex);\
		}\
		i++;\
	}\
	if(need_change == 1) (*pStatePriv->RestoreAccelState)(pScrn);\
}

#define STATE_CHECK_PSCRN(pScrn) {\
	int i = 0;\
	int need_change = 0;\
	while(i < pScrn->numEntities) {\
		if(xf86IsEntityShared(pScrn->entityList[i]) &&\
		   xf86GetLastScrnFlag(pScrn->entityList[i]) != pScrn->scrnIndex) {\
			need_change = 1;\
			xf86SetLastScrnFlag(pScrn->entityList[i],\
					    pScrn->scrnIndex);\
		}\
		i++;\
	}\
	if(need_change == 1) (*pStatePriv->RestoreAccelState)(pScrn);\
}

static void
XAAStateWrapSync(ScrnInfoPtr pScrn)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->Sync) (pScrn);
}

static void
XAAStateWrapSetupForScreenToScreenCopy(ScrnInfoPtr pScrn, int xdir, int ydir,
                                       int rop, unsigned int planemask,
                                       int trans_color)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->SetupForScreenToScreenCopy) (pScrn, xdir, ydir, rop,
                                               planemask, trans_color);
}

static void
XAAStateWrapSetupForSolidFill(ScrnInfoPtr pScrn, int color, int rop,
                              unsigned int planemask)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->SetupForSolidFill) (pScrn, color, rop, planemask);
}

static void
XAAStateWrapSetupForSolidLine(ScrnInfoPtr pScrn, int color, int rop,
                              unsigned int planemask)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->SetupForSolidLine) (pScrn, color, rop, planemask);
}

static void
XAAStateWrapSetupForDashedLine(ScrnInfoPtr pScrn, int fg, int bg, int rop,
                               unsigned int planemask, int length,
                               unsigned char *pattern)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->SetupForDashedLine) (pScrn, fg, bg, rop, planemask, length,
                                       pattern);
}

static void
XAAStateWrapSetClippingRectangle(ScrnInfoPtr pScrn, int left, int top,
                                 int right, int bottom)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->SetClippingRectangle) (pScrn, left, top, right, bottom);
}

static void
XAAStateWrapDisableClipping(ScrnInfoPtr pScrn)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->DisableClipping) (pScrn);
}

static void
XAAStateWrapSetupForMono8x8PatternFill(ScrnInfoPtr pScrn, int patx, int paty,
                                       int fg, int bg, int rop,
                                       unsigned int planemask)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->SetupForMono8x8PatternFill) (pScrn, patx, paty, fg, bg, rop,
                                               planemask);
}

static void
XAAStateWrapSetupForColor8x8PatternFill(ScrnInfoPtr pScrn, int patx, int paty,
                                        int rop, unsigned int planemask,
                                        int transparency_color)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->SetupForColor8x8PatternFill) (pScrn, patx, paty, rop,
                                                planemask, transparency_color);
}

static void
XAAStateWrapSetupForCPUToScreenColorExpandFill(ScrnInfoPtr pScrn, int fg,
                                               int bg, int rop,
                                               unsigned int planemask)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->SetupForCPUToScreenColorExpandFill) (pScrn, fg, bg, rop,
                                                       planemask);
}

static void
XAAStateWrapSetupForScanlineCPUToScreenColorExpandFill(ScrnInfoPtr pScrn,
                                                       int fg, int bg,
                                                       int rop,
                                                       unsigned int planemask)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->SetupForScanlineCPUToScreenColorExpandFill) (pScrn, fg, bg,
                                                               rop, planemask);
}

static void
XAAStateWrapSetupForScreenToScreenColorExpandFill(ScrnInfoPtr pScrn,
                                                  int fg, int bg, int rop,
                                                  unsigned int planemask)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->SetupForScreenToScreenColorExpandFill) (pScrn, fg, bg, rop,
                                                          planemask);
}

static void
XAAStateWrapSetupForImageWrite(ScrnInfoPtr pScrn, int rop,
                               unsigned int planemask, int transparency_color,
                               int bpp, int depth)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->SetupForImageWrite) (pScrn, rop, planemask,
                                       transparency_color, bpp, depth);
}

static void
XAAStateWrapSetupForScanlineImageWrite(ScrnInfoPtr pScrn, int rop,
                                       unsigned int planemask,
                                       int transparency_color,
                                       int bpp, int depth)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->SetupForScanlineImageWrite) (pScrn, rop, planemask,
                                               transparency_color, bpp, depth);
}

static void
XAAStateWrapSetupForImageRead(ScrnInfoPtr pScrn, int bpp, int depth)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->SetupForImageRead) (pScrn, bpp, depth);
}

static void
XAAStateWrapScreenToScreenBitBlt(ScrnInfoPtr pScrn, int nbox,
                                 DDXPointPtr pptSrc, BoxPtr pbox, int xdir,
                                 int ydir, int alu, unsigned int planmask)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->ScreenToScreenBitBlt) (pScrn, nbox,
                                         pptSrc, pbox, xdir,
                                         ydir, alu, planmask);
}

static void
XAAStateWrapWriteBitmap(ScrnInfoPtr pScrn, int x, int y, int w, int h,
                        unsigned char *src, int srcwidth, int skipleft,
                        int fg, int bg, int rop, unsigned int planemask)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->WriteBitmap) (pScrn, x, y, w, h,
                                src, srcwidth, skipleft,
                                fg, bg, rop, planemask);
}

static void
XAAStateWrapFillSolidRects(ScrnInfoPtr pScrn, int fg, int rop,
                           unsigned int planemask, int nBox, BoxPtr pBox)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->FillSolidRects) (pScrn, fg, rop, planemask, nBox, pBox);
}

static void
XAAStateWrapFillMono8x8PatternRects(ScrnInfoPtr pScrn, int fg, int bg,
                                    int rop, unsigned int planemask, int nBox,
                                    BoxPtr pBox, int pat0, int pat1,
                                    int xorg, int yorg)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->FillMono8x8PatternRects) (pScrn, fg, bg,
                                            rop, planemask, nBox,
                                            pBox, pat0, pat1, xorg, yorg);
}

static void
XAAStateWrapFillColor8x8PatternRects(ScrnInfoPtr pScrn, int rop,
                                     unsigned int planemask, int nBox,
                                     BoxPtr pBox, int xorg, int yorg,
                                     XAACacheInfoPtr pCache)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->FillColor8x8PatternRects) (pScrn, rop,
                                             planemask, nBox,
                                             pBox, xorg, yorg, pCache);
}

static void
XAAStateWrapFillCacheBltRects(ScrnInfoPtr pScrn, int rop,
                              unsigned int planemask, int nBox, BoxPtr pBox,
                              int xorg, int yorg, XAACacheInfoPtr pCache)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->FillCacheBltRects) (pScrn, rop,
                                      planemask, nBox, pBox,
                                      xorg, yorg, pCache);
}

static void
XAAStateWrapFillColorExpandRects(ScrnInfoPtr pScrn, int fg, int bg, int rop,
                                 unsigned int planemask, int nBox,
                                 BoxPtr pBox, int xorg, int yorg,
                                 PixmapPtr pPix)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->FillColorExpandRects) (pScrn, fg, bg, rop,
                                         planemask, nBox,
                                         pBox, xorg, yorg, pPix);
}

static void
XAAStateWrapFillCacheExpandRects(ScrnInfoPtr pScrn, int fg, int bg, int rop,
                                 unsigned int planemask, int nBox,
                                 BoxPtr pBox, int xorg, int yorg,
                                 PixmapPtr pPix)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->FillCacheExpandRects) (pScrn, fg, bg, rop,
                                         planemask, nBox,
                                         pBox, xorg, yorg, pPix);
}

static void
XAAStateWrapFillImageWriteRects(ScrnInfoPtr pScrn, int rop,
                                unsigned int planemask, int nBox, BoxPtr pBox,
                                int xorg, int yorg, PixmapPtr pPix)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->FillImageWriteRects) (pScrn, rop,
                                        planemask, nBox, pBox,
                                        xorg, yorg, pPix);
}

static void
XAAStateWrapFillSolidSpans(ScrnInfoPtr pScrn, int fg, int rop,
                           unsigned int planemask, int n, DDXPointPtr points,
                           int *widths, int fSorted)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->FillSolidSpans) (pScrn, fg, rop,
                                   planemask, n, points, widths, fSorted);
}

static void
XAAStateWrapFillMono8x8PatternSpans(ScrnInfoPtr pScrn, int fg, int bg,
                                    int rop, unsigned int planemask, int n,
                                    DDXPointPtr points, int *widths,
                                    int fSorted, int pat0, int pat1,
                                    int xorg, int yorg)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->FillMono8x8PatternSpans) (pScrn, fg, bg,
                                            rop, planemask, n,
                                            points, widths,
                                            fSorted, pat0, pat1, xorg, yorg);
}

static void
XAAStateWrapFillColor8x8PatternSpans(ScrnInfoPtr pScrn, int rop,
                                     unsigned int planemask, int n,
                                     DDXPointPtr points, int *widths,
                                     int fSorted, XAACacheInfoPtr pCache,
                                     int xorg, int yorg)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->FillColor8x8PatternSpans) (pScrn, rop,
                                             planemask, n,
                                             points, widths,
                                             fSorted, pCache, xorg, yorg);
}

static void
XAAStateWrapFillCacheBltSpans(ScrnInfoPtr pScrn, int rop,
                              unsigned int planemask, int n,
                              DDXPointPtr points, int *widths,
                              int fSorted, XAACacheInfoPtr pCache,
                              int xorg, int yorg)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->FillCacheBltSpans) (pScrn, rop,
                                      planemask, n,
                                      points, widths,
                                      fSorted, pCache, xorg, yorg);
}

static void
XAAStateWrapFillColorExpandSpans(ScrnInfoPtr pScrn, int fg, int bg, int rop,
                                 unsigned int planemask, int n,
                                 DDXPointPtr points, int *widths, int fSorted,
                                 int xorg, int yorg, PixmapPtr pPix)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->FillColorExpandSpans) (pScrn, fg, bg, rop,
                                         planemask, n,
                                         points, widths, fSorted,
                                         xorg, yorg, pPix);
}

static void
XAAStateWrapFillCacheExpandSpans(ScrnInfoPtr pScrn, int fg, int bg, int rop,
                                 unsigned int planemask, int n,
                                 DDXPointPtr ppt, int *pwidth, int fSorted,
                                 int xorg, int yorg, PixmapPtr pPix)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->FillCacheExpandSpans) (pScrn, fg, bg, rop,
                                         planemask, n,
                                         ppt, pwidth, fSorted,
                                         xorg, yorg, pPix);
}

static void
XAAStateWrapTEGlyphRenderer(ScrnInfoPtr pScrn, int x, int y, int w, int h,
                            int skipleft, int startline,
                            unsigned int **glyphs,
                            int glyphWidth, int fg, int bg, int rop,
                            unsigned planemask)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->TEGlyphRenderer) (pScrn, x, y, w, h,
                                    skipleft, startline,
                                    glyphs, glyphWidth, fg, bg, rop, planemask);
}

static void
XAAStateWrapNonTEGlyphRenderer(ScrnInfoPtr pScrn, int x, int y, int n,
                               NonTEGlyphPtr glyphs, BoxPtr pbox,
                               int fg, int rop, unsigned int planemask)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->NonTEGlyphRenderer) (pScrn, x, y, n,
                                       glyphs, pbox, fg, rop, planemask);
}

static void
XAAStateWrapWritePixmap(ScrnInfoPtr pScrn, int x, int y, int w, int h,
                        unsigned char *src, int srcwidth, int rop,
                        unsigned int planemask, int transparency_color,
                        int bpp, int depth)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->WritePixmap) (pScrn, x, y, w, h,
                                src, srcwidth, rop,
                                planemask, transparency_color, bpp, depth);
}

static void
XAAStateWrapReadPixmap(ScrnInfoPtr pScrn, int x, int y, int w, int h,
                       unsigned char *dst, int dstwidth, int bpp, int depth)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->ReadPixmap) (pScrn, x, y, w, h, dst, dstwidth, bpp, depth);
}

static RegionPtr
XAAStateWrapCopyArea(DrawablePtr pSrcDrawable, DrawablePtr pDstDrawable,
                     GC * pGC, int srcx, int srcy, int width, int height,
                     int dstx, int dsty)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    return (*pStatePriv->CopyArea) (pSrcDrawable, pDstDrawable,
                                    pGC, srcx, srcy, width, height, dstx, dsty);
}

static RegionPtr
XAAStateWrapCopyPlane(DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
                      int srcx, int srcy, int width, int height,
                      int dstx, int dsty, unsigned long bitPlane)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    return (*pStatePriv->CopyPlane) (pSrc, pDst, pGC,
                                     srcx, srcy, width, height,
                                     dstx, dsty, bitPlane);
}

static void
XAAStateWrapPushPixelsSolid(GCPtr pGC, PixmapPtr pBitMap,
                            DrawablePtr pDrawable, int dx, int dy, int xOrg,
                            int yOrg)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->PushPixelsSolid) (pGC, pBitMap,
                                    pDrawable, dx, dy, xOrg, yOrg);
}

static void
XAAStateWrapPolyFillRectSolid(DrawablePtr pDraw, GCPtr pGC, int nrectFill,
                              xRectangle *prectInit)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->PolyFillRectSolid) (pDraw, pGC, nrectFill, prectInit);
}

static void
XAAStateWrapPolyFillRectStippled(DrawablePtr pDraw, GCPtr pGC, int nrectFill,
                                 xRectangle *prectInit)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->PolyFillRectStippled) (pDraw, pGC, nrectFill, prectInit);
}

static void
XAAStateWrapPolyFillRectOpaqueStippled(DrawablePtr pDraw, GCPtr pGC,
                                       int nrectFill, xRectangle *prectInit)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->PolyFillRectOpaqueStippled) (pDraw, pGC,
                                               nrectFill, prectInit);
}

static void
XAAStateWrapPolyFillRectTiled(DrawablePtr pDraw, GCPtr pGC, int nrectFill,
                              xRectangle *prectInit)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->PolyFillRectTiled) (pDraw, pGC, nrectFill, prectInit);
}

static void
XAAStateWrapFillSpansSolid(DrawablePtr pDraw, GCPtr pGC, int nInit,
                           DDXPointPtr ppt, int *pwidth, int fSorted)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->FillSpansSolid) (pDraw, pGC, nInit, ppt, pwidth, fSorted);
}

static void
XAAStateWrapFillSpansStippled(DrawablePtr pDraw, GCPtr pGC, int nInit,
                              DDXPointPtr ppt, int *pwidth, int fSorted)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->FillSpansStippled) (pDraw, pGC, nInit, ppt, pwidth, fSorted);
}

static void
XAAStateWrapFillSpansOpaqueStippled(DrawablePtr pDraw, GCPtr pGC, int nInit,
                                    DDXPointPtr ppt, int *pwidth, int fSorted)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->FillSpansOpaqueStippled) (pDraw, pGC, nInit,
                                            ppt, pwidth, fSorted);
}

static void
XAAStateWrapFillSpansTiled(DrawablePtr pDraw, GCPtr pGC, int nInit,
                           DDXPointPtr ppt, int *pwidth, int fSorted)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->FillSpansTiled) (pDraw, pGC, nInit, ppt, pwidth, fSorted);
}

static int
XAAStateWrapPolyText8TE(DrawablePtr pDraw, GCPtr pGC, int x, int y, int count,
                        char *chars)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    return (*pStatePriv->PolyText8TE) (pDraw, pGC, x, y, count, chars);
}

static int
XAAStateWrapPolyText16TE(DrawablePtr pDraw, GCPtr pGC, int x, int y, int count,
                         unsigned short *chars)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    return (*pStatePriv->PolyText16TE) (pDraw, pGC, x, y, count, chars);
}

static void
XAAStateWrapImageText8TE(DrawablePtr pDraw, GCPtr pGC, int x, int y,
                         int count, char *chars)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ImageText8TE) (pDraw, pGC, x, y, count, chars);
}

static void
XAAStateWrapImageText16TE(DrawablePtr pDraw, GCPtr pGC, int x, int y,
                          int count, unsigned short *chars)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ImageText16TE) (pDraw, pGC, x, y, count, chars);
}

static void
XAAStateWrapImageGlyphBltTE(DrawablePtr pDrawable, GCPtr pGC, int xInit,
                            int yInit, unsigned int nglyph, CharInfoPtr * ppci,
                            pointer pglyphBase)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ImageGlyphBltTE) (pDrawable, pGC, xInit,
                                    yInit, nglyph, ppci, pglyphBase);
}

static void
XAAStateWrapPolyGlyphBltTE(DrawablePtr pDrawable, GCPtr pGC, int xInit,
                           int yInit, unsigned int nglyph, CharInfoPtr * ppci,
                           pointer pglyphBase)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->PolyGlyphBltTE) (pDrawable, pGC, xInit,
                                   yInit, nglyph, ppci, pglyphBase);
}

static int
XAAStateWrapPolyText8NonTE(DrawablePtr pDraw, GCPtr pGC, int x, int y,
                           int count, char *chars)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    return (*pStatePriv->PolyText8NonTE) (pDraw, pGC, x, y, count, chars);
}

static int
XAAStateWrapPolyText16NonTE(DrawablePtr pDraw, GCPtr pGC, int x, int y,
                            int count, unsigned short *chars)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    return (*pStatePriv->PolyText16NonTE) (pDraw, pGC, x, y, count, chars);
}

static void
XAAStateWrapImageText8NonTE(DrawablePtr pDraw, GCPtr pGC, int x, int y,
                            int count, char *chars)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ImageText8NonTE) (pDraw, pGC, x, y, count, chars);
}

static void
XAAStateWrapImageText16NonTE(DrawablePtr pDraw, GCPtr pGC, int x, int y,
                             int count, unsigned short *chars)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ImageText16NonTE) (pDraw, pGC, x, y, count, chars);
}

static void
XAAStateWrapImageGlyphBltNonTE(DrawablePtr pDrawable, GCPtr pGC, int xInit,
                               int yInit, unsigned int nglyph,
                               CharInfoPtr * ppci, pointer pglyphBase)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ImageGlyphBltNonTE) (pDrawable, pGC, xInit,
                                       yInit, nglyph, ppci, pglyphBase);
}

static void
XAAStateWrapPolyGlyphBltNonTE(DrawablePtr pDrawable, GCPtr pGC, int xInit,
                              int yInit, unsigned int nglyph,
                              CharInfoPtr * ppci, pointer pglyphBase)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->PolyGlyphBltNonTE) (pDrawable, pGC, xInit,
                                      yInit, nglyph, ppci, pglyphBase);
}

static void
XAAStateWrapPolyRectangleThinSolid(DrawablePtr pDrawable, GCPtr pGC,
                                   int nRectsInit, xRectangle *pRectsInit)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->PolyRectangleThinSolid) (pDrawable, pGC,
                                           nRectsInit, pRectsInit);
}

static void
XAAStateWrapPolylinesWideSolid(DrawablePtr pDrawable, GCPtr pGC, int mode,
                               int npt, DDXPointPtr pPts)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->PolylinesWideSolid) (pDrawable, pGC, mode, npt, pPts);
}

static void
XAAStateWrapPolylinesThinSolid(DrawablePtr pDrawable, GCPtr pGC, int mode,
                               int npt, DDXPointPtr pPts)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->PolylinesThinSolid) (pDrawable, pGC, mode, npt, pPts);
}

static void
XAAStateWrapPolySegmentThinSolid(DrawablePtr pDrawable, GCPtr pGC, int nseg,
                                 xSegment * pSeg)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->PolySegmentThinSolid) (pDrawable, pGC, nseg, pSeg);
}

static void
XAAStateWrapPolylinesThinDashed(DrawablePtr pDrawable, GCPtr pGC, int mode,
                                int npt, DDXPointPtr pPts)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->PolylinesThinDashed) (pDrawable, pGC, mode, npt, pPts);
}

static void
XAAStateWrapPolySegmentThinDashed(DrawablePtr pDrawable, GCPtr pGC, int nseg,
                                  xSegment * pSeg)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->PolySegmentThinDashed) (pDrawable, pGC, nseg, pSeg);
}

static void
XAAStateWrapFillPolygonSolid(DrawablePtr pDrawable, GCPtr pGC, int shape,
                             int mode, int count, DDXPointPtr ptsIn)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->FillPolygonSolid) (pDrawable, pGC, shape, mode, count, ptsIn);
}

static void
XAAStateWrapFillPolygonStippled(DrawablePtr pDrawable, GCPtr pGC, int shape,
                                int mode, int count, DDXPointPtr ptsIn)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->FillPolygonStippled) (pDrawable, pGC, shape,
                                        mode, count, ptsIn);
}

static void
XAAStateWrapFillPolygonOpaqueStippled(DrawablePtr pDrawable, GCPtr pGC,
                                      int shape, int mode, int count,
                                      DDXPointPtr ptsIn)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->FillPolygonOpaqueStippled) (pDrawable, pGC,
                                              shape, mode, count, ptsIn);
}

static void
XAAStateWrapFillPolygonTiled(DrawablePtr pDrawable, GCPtr pGC, int shape,
                             int mode, int count, DDXPointPtr ptsIn)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->FillPolygonTiled) (pDrawable, pGC, shape, mode, count, ptsIn);
}

static void
XAAStateWrapPolyFillArcSolid(DrawablePtr pDraw, GCPtr pGC, int narcs,
                             xArc * parcs)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->PolyFillArcSolid) (pDraw, pGC, narcs, parcs);
}

static void
XAAStateWrapPutImage(DrawablePtr pDraw, GCPtr pGC, int depth, int x, int y,
                     int w, int h, int leftPad, int format, char *pImage)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->PutImage) (pDraw, pGC, depth, x, y,
                             w, h, leftPad, format, pImage);
}

static void
XAAStateWrapValidateFillSpans(GCPtr pGC, unsigned long changes,
                              DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidateFillSpans) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidateSetSpans(GCPtr pGC, unsigned long changes,
                             DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidateSetSpans) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidatePutImage(GCPtr pGC, unsigned long changes,
                             DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidatePutImage) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidateCopyArea(GCPtr pGC, unsigned long changes,
                             DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidateCopyArea) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidateCopyPlane(GCPtr pGC, unsigned long changes,
                              DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidateCopyPlane) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidatePolyPoint(GCPtr pGC, unsigned long changes,
                              DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidatePolyPoint) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidatePolylines(GCPtr pGC, unsigned long changes,
                              DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidatePolylines) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidatePolySegment(GCPtr pGC, unsigned long changes,
                                DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidatePolySegment) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidatePolyRectangle(GCPtr pGC, unsigned long changes,
                                  DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidatePolyRectangle) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidatePolyArc(GCPtr pGC, unsigned long changes, DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidatePolyArc) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidateFillPolygon(GCPtr pGC, unsigned long changes,
                                DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidateFillPolygon) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidatePolyFillRect(GCPtr pGC, unsigned long changes,
                                 DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidatePolyFillRect) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidatePolyFillArc(GCPtr pGC, unsigned long changes,
                                DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidatePolyFillArc) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidatePolyText8(GCPtr pGC, unsigned long changes,
                              DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidatePolyText8) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidatePolyText16(GCPtr pGC, unsigned long changes,
                               DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidatePolyText16) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidateImageText8(GCPtr pGC, unsigned long changes,
                               DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidateImageText8) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidateImageText16(GCPtr pGC, unsigned long changes,
                                DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidateImageText16) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidatePolyGlyphBlt(GCPtr pGC, unsigned long changes,
                                 DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidatePolyGlyphBlt) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidateImageGlyphBlt(GCPtr pGC, unsigned long changes,
                                  DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);
    (*pStatePriv->ValidateImageGlyphBlt) (pGC, changes, pDraw);
}

static void
XAAStateWrapValidatePushPixels(GCPtr pGC, unsigned long changes,
                               DrawablePtr pDraw)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ValidatePushPixels) (pGC, changes, pDraw);
}

static void
XAAStateWrapComputeDash(GCPtr pGC)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ComputeDash) (pGC);
}

static void
XAAStateWrapInitPixmapCache(ScreenPtr pScreen, RegionPtr areas, pointer data)
{
    GET_STATEPRIV_SCREEN(pScreen);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->InitPixmapCache) (pScreen, areas, data);
}

static void
XAAStateWrapClosePixmapCache(ScreenPtr pScreen)
{
    GET_STATEPRIV_SCREEN(pScreen);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->ClosePixmapCache) (pScreen);
}

static int
XAAStateWrapStippledFillChooser(GCPtr pGC)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    return (*pStatePriv->StippledFillChooser) (pGC);
}

static int
XAAStateWrapOpaqueStippledFillChooser(GCPtr pGC)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    return (*pStatePriv->OpaqueStippledFillChooser) (pGC);
}

static int
XAAStateWrapTiledFillChooser(GCPtr pGC)
{
    GET_STATEPRIV_GC(pGC);
    STATE_CHECK_SP(pStatePriv);

    return (*pStatePriv->TiledFillChooser) (pGC);
}

static XAACacheInfoPtr
XAAStateWrapCacheTile(ScrnInfoPtr pScrn, PixmapPtr pPix)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    return (*pStatePriv->CacheTile) (pScrn, pPix);
}

static XAACacheInfoPtr
XAAStateWrapCacheStipple(ScrnInfoPtr pScrn, PixmapPtr pPix, int fg, int bg)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    return (*pStatePriv->CacheStipple) (pScrn, pPix, fg, bg);
}

static XAACacheInfoPtr
XAAStateWrapCacheMonoStipple(ScrnInfoPtr pScrn, PixmapPtr pPix)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    return (*pStatePriv->CacheMonoStipple) (pScrn, pPix);
}

static XAACacheInfoPtr
XAAStateWrapCacheMono8x8Pattern(ScrnInfoPtr pScrn, int pat0, int pat1)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    return (*pStatePriv->CacheMono8x8Pattern) (pScrn, pat0, pat1);
}

static XAACacheInfoPtr
XAAStateWrapCacheColor8x8Pattern(ScrnInfoPtr pScrn, PixmapPtr pPix,
                                 int fg, int bg)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    return (*pStatePriv->CacheColor8x8Pattern) (pScrn, pPix, fg, bg);
}

static void
XAAStateWrapWriteBitmapToCache(ScrnInfoPtr pScrn, int x, int y, int w, int h,
                               unsigned char *src, int srcwidth, int fg, int bg)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->WriteBitmapToCache) (pScrn, x, y, w, h,
                                       src, srcwidth, fg, bg);
}

static void
XAAStateWrapWritePixmapToCache(ScrnInfoPtr pScrn, int x, int y, int w, int h,
                               unsigned char *src, int srcwidth, int bpp,
                               int depth)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->WritePixmapToCache) (pScrn, x, y, w, h,
                                       src, srcwidth, bpp, depth);
}

static void
XAAStateWrapWriteMono8x8PatternToCache(ScrnInfoPtr pScrn,
                                       XAACacheInfoPtr pCache)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->WriteMono8x8PatternToCache) (pScrn, pCache);
}

static void
XAAStateWrapWriteColor8x8PatternToCache(ScrnInfoPtr pScrn, PixmapPtr pPix,
                                        XAACacheInfoPtr pCache)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    (*pStatePriv->WriteColor8x8PatternToCache) (pScrn, pPix, pCache);
}

static void
XAAStateWrapGetImage(DrawablePtr pDrawable, int sx, int sy, int w, int h,
                     unsigned int format, unsigned long planeMask,
                     char *pdstLine)
{
    GET_STATEPRIV_SCREEN(pDrawable->pScreen);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->GetImage) (pDrawable, sx, sy, w, h,
                             format, planeMask, pdstLine);
}

static void
XAAStateWrapGetSpans(DrawablePtr pDrawable, int wMax, DDXPointPtr ppt,
                     int *pwidth, int nspans, char *pdstStart)
{
    GET_STATEPRIV_SCREEN(pDrawable->pScreen);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->GetSpans) (pDrawable, wMax, ppt, pwidth, nspans, pdstStart);
}

static void
XAAStateWrapCopyWindow(WindowPtr pWindow, DDXPointRec ptOldOrg,
                       RegionPtr prgnSrc)
{
    GET_STATEPRIV_SCREEN(pWindow->drawable.pScreen);
    STATE_CHECK_SP(pStatePriv);

    (*pStatePriv->CopyWindow) (pWindow, ptOldOrg, prgnSrc);
}

static Bool
XAAStateWrapSetupForCPUToScreenAlphaTexture2(ScrnInfoPtr pScrn,
                                             int op, CARD16 red,
                                             CARD16 green,
                                             CARD16 blue,
                                             CARD16 alpha,
                                             CARD32 srcFormat,
                                             CARD32 dstFormat,
                                             CARD8 *alphaPtr,
                                             int alphaPitch,
                                             int width, int height, int flags)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    return (*pStatePriv->SetupForCPUToScreenAlphaTexture2) (pScrn, op, red,
                                                            green, blue, alpha,
                                                            srcFormat,
                                                            dstFormat, alphaPtr,
                                                            alphaPitch, width,
                                                            height, flags);
}

static Bool
XAAStateWrapSetupForCPUToScreenTexture2(ScrnInfoPtr pScrn, int op,
                                        CARD32 srcFormat,
                                        CARD32 dstFormat,
                                        CARD8 *texPtr, int texPitch,
                                        int width, int height, int flags)
{
    GET_STATEPRIV_PSCRN(pScrn);
    STATE_CHECK_PSCRN(pScrn);

    return (*pStatePriv->SetupForCPUToScreenTexture2) (pScrn, op, srcFormat,
                                                       dstFormat, texPtr,
                                                       texPitch, width, height,
                                                       flags);
}

/* Setup Function */
Bool
XAAInitStateWrap(ScreenPtr pScreen, XAAInfoRecPtr infoRec)
{
    ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
    XAAStateWrapPtr pStatePriv;
    int i = 0;

    if (!dixRegisterPrivateKey(&XAAStateKeyRec, PRIVATE_SCREEN, 0))
        return FALSE;
    if (!(pStatePriv = malloc(sizeof(XAAStateWrapRec))))
        return FALSE;
    dixSetPrivate(&pScreen->devPrivates, XAAStateKey, pStatePriv);
    pStatePriv->RestoreAccelState = infoRec->RestoreAccelState;
    pStatePriv->pScrn = pScrn;

    /* Initialize the last screen to -1 so whenever an accel function
     * is called the proper state is setup
     */
    while (i < pScrn->numEntities) {
        xf86SetLastScrnFlag(pScrn->entityList[i], -1);
        i++;
    }
/* Do the wrapping */
    XAA_STATE_WRAP(Sync);
    XAA_STATE_WRAP(SetupForScreenToScreenCopy);
    XAA_STATE_WRAP(SetupForSolidFill);
    XAA_STATE_WRAP(SetupForSolidLine);
    XAA_STATE_WRAP(SetupForDashedLine);
    XAA_STATE_WRAP(SetClippingRectangle);
    XAA_STATE_WRAP(DisableClipping);
    XAA_STATE_WRAP(SetupForMono8x8PatternFill);
    XAA_STATE_WRAP(SetupForColor8x8PatternFill);
    XAA_STATE_WRAP(SetupForCPUToScreenColorExpandFill);
    XAA_STATE_WRAP(SetupForScanlineCPUToScreenColorExpandFill);
    XAA_STATE_WRAP(SetupForScreenToScreenColorExpandFill);
    XAA_STATE_WRAP(SetupForImageWrite);
    XAA_STATE_WRAP(SetupForScanlineImageWrite);
    XAA_STATE_WRAP(SetupForImageRead);
    XAA_STATE_WRAP(ScreenToScreenBitBlt);
    XAA_STATE_WRAP(WriteBitmap);
    XAA_STATE_WRAP(FillSolidRects);
    XAA_STATE_WRAP(FillMono8x8PatternRects);
    XAA_STATE_WRAP(FillColor8x8PatternRects);
    XAA_STATE_WRAP(FillCacheBltRects);
    XAA_STATE_WRAP(FillColorExpandRects);
    XAA_STATE_WRAP(FillCacheExpandRects);
    XAA_STATE_WRAP(FillImageWriteRects);
    XAA_STATE_WRAP(FillSolidSpans);
    XAA_STATE_WRAP(FillMono8x8PatternSpans);
    XAA_STATE_WRAP(FillColor8x8PatternSpans);
    XAA_STATE_WRAP(FillCacheBltSpans);
    XAA_STATE_WRAP(FillColorExpandSpans);
    XAA_STATE_WRAP(FillCacheExpandSpans);
    XAA_STATE_WRAP(TEGlyphRenderer);
    XAA_STATE_WRAP(NonTEGlyphRenderer);
    XAA_STATE_WRAP(WritePixmap);
    XAA_STATE_WRAP(ReadPixmap);
    XAA_STATE_WRAP(CopyArea);
    XAA_STATE_WRAP(CopyPlane);
    XAA_STATE_WRAP(PushPixelsSolid);
    XAA_STATE_WRAP(PolyFillRectSolid);
    XAA_STATE_WRAP(PolyFillRectStippled);
    XAA_STATE_WRAP(PolyFillRectOpaqueStippled);
    XAA_STATE_WRAP(PolyFillRectTiled);
    XAA_STATE_WRAP(FillSpansSolid);
    XAA_STATE_WRAP(FillSpansStippled);
    XAA_STATE_WRAP(FillSpansOpaqueStippled);
    XAA_STATE_WRAP(FillSpansTiled);
    XAA_STATE_WRAP(PolyText8TE);
    XAA_STATE_WRAP(PolyText16TE);
    XAA_STATE_WRAP(ImageText8TE);
    XAA_STATE_WRAP(ImageText16TE);
    XAA_STATE_WRAP(ImageGlyphBltTE);
    XAA_STATE_WRAP(PolyGlyphBltTE);
    XAA_STATE_WRAP(PolyText8NonTE);
    XAA_STATE_WRAP(PolyText16NonTE);
    XAA_STATE_WRAP(ImageText8NonTE);
    XAA_STATE_WRAP(ImageText16NonTE);
    XAA_STATE_WRAP(ImageGlyphBltNonTE);
    XAA_STATE_WRAP(PolyGlyphBltNonTE);
    XAA_STATE_WRAP(PolyRectangleThinSolid);
    XAA_STATE_WRAP(PolylinesWideSolid);
    XAA_STATE_WRAP(PolylinesThinSolid);
    XAA_STATE_WRAP(PolySegmentThinSolid);
    XAA_STATE_WRAP(PolylinesThinDashed);
    XAA_STATE_WRAP(PolySegmentThinDashed);
    XAA_STATE_WRAP(FillPolygonSolid);
    XAA_STATE_WRAP(FillPolygonStippled);
    XAA_STATE_WRAP(FillPolygonOpaqueStippled);
    XAA_STATE_WRAP(FillPolygonTiled);
    XAA_STATE_WRAP(PolyFillArcSolid);
    XAA_STATE_WRAP(PutImage);
    XAA_STATE_WRAP(ValidateFillSpans);
    XAA_STATE_WRAP(ValidateSetSpans);
    XAA_STATE_WRAP(ValidatePutImage);
    XAA_STATE_WRAP(ValidateCopyArea);
    XAA_STATE_WRAP(ValidateCopyPlane);
    XAA_STATE_WRAP(ValidatePolyPoint);
    XAA_STATE_WRAP(ValidatePolylines);
    XAA_STATE_WRAP(ValidatePolySegment);
    XAA_STATE_WRAP(ValidatePolyRectangle);
    XAA_STATE_WRAP(ValidatePolyArc);
    XAA_STATE_WRAP(ValidateFillPolygon);
    XAA_STATE_WRAP(ValidatePolyFillRect);
    XAA_STATE_WRAP(ValidatePolyFillArc);
    XAA_STATE_WRAP(ValidatePolyText8);
    XAA_STATE_WRAP(ValidatePolyText16);
    XAA_STATE_WRAP(ValidateImageText8);
    XAA_STATE_WRAP(ValidateImageText16);
    XAA_STATE_WRAP(ValidatePolyGlyphBlt);
    XAA_STATE_WRAP(ValidateImageGlyphBlt);
    XAA_STATE_WRAP(ValidatePushPixels);
    XAA_STATE_WRAP(ComputeDash);
    XAA_STATE_WRAP(InitPixmapCache);
    XAA_STATE_WRAP(ClosePixmapCache);
    XAA_STATE_WRAP(StippledFillChooser);
    XAA_STATE_WRAP(OpaqueStippledFillChooser);
    XAA_STATE_WRAP(TiledFillChooser);
    XAA_STATE_WRAP(CacheTile);
    XAA_STATE_WRAP(CacheStipple);
    XAA_STATE_WRAP(CacheMonoStipple);
    XAA_STATE_WRAP(CacheMono8x8Pattern);
    XAA_STATE_WRAP(CacheColor8x8Pattern);
    XAA_STATE_WRAP(WriteBitmapToCache);
    XAA_STATE_WRAP(WritePixmapToCache);
    XAA_STATE_WRAP(WriteMono8x8PatternToCache);
    XAA_STATE_WRAP(WriteColor8x8PatternToCache);
    XAA_STATE_WRAP(GetImage);
    XAA_STATE_WRAP(GetSpans);
    XAA_STATE_WRAP(CopyWindow);
    XAA_STATE_WRAP(SetupForCPUToScreenAlphaTexture2);
    XAA_STATE_WRAP(SetupForCPUToScreenTexture2);
    return TRUE;
}
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d32 242
a273 241
   ScrnInfoPtr pScrn;   
   void (*RestoreAccelState)(ScrnInfoPtr pScrn);
   void (*Sync)(ScrnInfoPtr pScrn);
   void (*SetupForScreenToScreenCopy)(ScrnInfoPtr pScrn, int xdir, int ydir,
				      int rop, unsigned int planemask, 
				      int trans_color);
   void (*SetupForSolidFill)(ScrnInfoPtr pScrn, int color, int rop, 
			     unsigned int planemask);
   void (*SetupForSolidLine)(ScrnInfoPtr pScrn,int color,int rop,
			     unsigned int planemask);
   void (*SetupForDashedLine)(ScrnInfoPtr pScrn, int fg, int bg, int rop,
			      unsigned int planemask, int length,
			      unsigned char *pattern);
   void (*SetClippingRectangle) (ScrnInfoPtr pScrn, int left, int top, 
				 int right, int bottom);
   void (*DisableClipping)(ScrnInfoPtr pScrn);
   void (*SetupForMono8x8PatternFill)(ScrnInfoPtr pScrn, int patx, int paty,
				      int fg, int bg, int rop, 
				      unsigned int planemask);
   void (*SetupForColor8x8PatternFill)(ScrnInfoPtr pScrn, int patx, int paty,
				       int rop, unsigned int planemask,
				       int transparency_color);
   void (*SetupForCPUToScreenColorExpandFill)(ScrnInfoPtr pScrn, int fg, 
					      int bg, int rop,
					      unsigned int planemask);
   void (*SetupForScanlineCPUToScreenColorExpandFill)(ScrnInfoPtr pScrn,
						      int fg, int bg, int rop,
						      unsigned int planemask);
   void (*SetupForScreenToScreenColorExpandFill) (ScrnInfoPtr pScrn,
						  int fg, int bg, int rop,
						  unsigned int planemask);
   void (*SetupForImageWrite)(ScrnInfoPtr pScrn, int rop, 
			      unsigned int planemask, int transparency_color,
			      int bpp, int depth);
   void (*SetupForScanlineImageWrite)(ScrnInfoPtr pScrn, int rop, 
				      unsigned int planemask,
				      int transparency_color,
				      int bpp, int depth);
   void (*SetupForImageRead) (ScrnInfoPtr pScrn, int bpp, int depth);
   void (*ScreenToScreenBitBlt)(ScrnInfoPtr pScrn, int nbox,
				DDXPointPtr pptSrc, BoxPtr pbox, int xdir, 
				int ydir, int alu, unsigned int planmask);
   void (*WriteBitmap) (ScrnInfoPtr pScrn, int x, int y, int w, int h,
			unsigned char *src, int srcwidth, int skipleft,
			int fg, int bg, int rop, unsigned int planemask);
   void (*FillSolidRects)(ScrnInfoPtr pScrn, int fg, int rop,
			  unsigned int planemask, int nBox, BoxPtr pBox);
   void (*FillMono8x8PatternRects)(ScrnInfoPtr pScrn, int fg, int bg, int rop,
				   unsigned int planemask, int nBox, 
				   BoxPtr pBox, int pat0, int pat1,
				   int xorg, int yorg);
   void (*FillColor8x8PatternRects)(ScrnInfoPtr pScrn, int rop,
				    unsigned int planemask, int nBox,
				    BoxPtr pBox, int xorg, int yorg,
				    XAACacheInfoPtr pCache);
   void (*FillCacheBltRects)(ScrnInfoPtr pScrn, int rop, 
			     unsigned int planemask, int nBox, BoxPtr pBox,
			     int xorg, int yorg, XAACacheInfoPtr pCache);
   void (*FillColorExpandRects)(ScrnInfoPtr pScrn, int fg, int bg, int rop,
				unsigned int planemask, int nBox,
				BoxPtr pBox, int xorg, int yorg, 
				PixmapPtr pPix);
   void (*FillCacheExpandRects)(ScrnInfoPtr pScrn, int fg, int bg, int rop,
				unsigned int planemask, int nBox, BoxPtr pBox,
				int xorg, int yorg, PixmapPtr pPix);
   void (*FillImageWriteRects)(ScrnInfoPtr pScrn, int rop,
			       unsigned int planemask, int nBox, BoxPtr pBox,
			       int xorg, int yorg, PixmapPtr pPix);
   void (*FillSolidSpans)(ScrnInfoPtr pScrn, int fg, int rop,
			  unsigned int planemask, int n, DDXPointPtr points,
			  int *widths, int fSorted);
   void (*FillMono8x8PatternSpans)(ScrnInfoPtr pScrn, int fg, int bg, int rop,
				   unsigned int planemask, int n,
				   DDXPointPtr points, int *widths,
				   int fSorted, int pat0, int pat1,
				   int xorg, int yorg);
   void (*FillColor8x8PatternSpans)(ScrnInfoPtr pScrn, int rop,
				    unsigned int planemask, int n,
				    DDXPointPtr points, int *widths,
				    int fSorted, XAACacheInfoPtr pCache,
				    int xorg, int yorg);
   void (*FillCacheBltSpans)(ScrnInfoPtr pScrn, int rop,
			     unsigned int planemask, int n, DDXPointPtr points,
			     int *widths, int fSorted, XAACacheInfoPtr pCache,
			     int xorg, int yorg);
   void (*FillColorExpandSpans)(ScrnInfoPtr pScrn, int fg, int bg, int rop,
				unsigned int planemask, int n,
				DDXPointPtr points, int *widths, int fSorted,
				int xorg, int yorg, PixmapPtr pPix);
   void (*FillCacheExpandSpans)(ScrnInfoPtr pScrn, int fg, int bg, int rop,
				unsigned int planemask, int n, DDXPointPtr ppt,
				int *pwidth, int fSorted, int xorg, int yorg,
				PixmapPtr pPix);
   void (*TEGlyphRenderer)(ScrnInfoPtr pScrn, int x, int y, int w, int h, 
			   int skipleft, int startline, unsigned int **glyphs,
			   int glyphWidth, int fg, int bg, int rop, 
			   unsigned planemask);
   void (*NonTEGlyphRenderer)(ScrnInfoPtr pScrn, int x, int y, int n,
			      NonTEGlyphPtr glyphs, BoxPtr pbox,
			      int fg, int rop, unsigned int planemask);
   void (*WritePixmap) (ScrnInfoPtr pScrn, int x, int y, int w, int h,
			unsigned char *src, int srcwidth, int rop,
			unsigned int planemask, int transparency_color,
			int bpp, int depth);
   void (*ReadPixmap) (ScrnInfoPtr pScrn, int x, int y, int w, int h,
		       unsigned char *dst, int dstwidth, int bpp, int depth);
   RegionPtr (*CopyArea)(DrawablePtr pSrcDrawable, DrawablePtr pDstDrawable,
			 GC *pGC, int srcx, int srcy, int width, int height,
			 int dstx, int dsty);
   RegionPtr (*CopyPlane)(DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
			  int srcx, int srcy, int width, int height, int dstx,
			  int dsty, unsigned long bitPlane);
   void (*PushPixelsSolid) (GCPtr pGC, PixmapPtr pBitMap,
			    DrawablePtr pDrawable, int dx, int dy, int xOrg, 
			    int yOrg);
   void (*PolyFillRectSolid)(DrawablePtr pDraw, GCPtr pGC, int nrectFill,
			     xRectangle *prectInit);
   void (*PolyFillRectStippled)(DrawablePtr pDraw, GCPtr pGC, int nrectFill,
				xRectangle *prectInit);
   void (*PolyFillRectOpaqueStippled)(DrawablePtr pDraw, GCPtr pGC,
				      int nrectFill, xRectangle *prectInit);
   void (*PolyFillRectTiled)(DrawablePtr pDraw, GCPtr pGC, int nrectFill,
			     xRectangle *prectInit);
   void (*FillSpansSolid)(DrawablePtr pDraw, GCPtr pGC, int nInit,
			  DDXPointPtr ppt, int *pwidth, int fSorted);
   void (*FillSpansStippled)(DrawablePtr pDraw, GCPtr pGC, int nInit,
			     DDXPointPtr ppt, int *pwidth, int fSorted);
   void (*FillSpansOpaqueStippled)(DrawablePtr pDraw, GCPtr pGC, int nInit, 
				   DDXPointPtr ppt, int *pwidth, int fSorted);
   void (*FillSpansTiled)(DrawablePtr pDraw, GCPtr pGC, int nInit, 
			  DDXPointPtr ppt, int *pwidth, int fSorted);
   int (*PolyText8TE) (DrawablePtr pDraw, GCPtr pGC, int x, int y, int count,
		       char *chars);
   int (*PolyText16TE) (DrawablePtr pDraw, GCPtr pGC, int x, int y, int count,
			unsigned short *chars);
   void (*ImageText8TE) (DrawablePtr pDraw, GCPtr pGC, int x, int y, int count,
			 char *chars);
   void (*ImageText16TE) (DrawablePtr pDraw, GCPtr pGC, int x, int y,
			  int count, unsigned short *chars);
   void (*ImageGlyphBltTE) (DrawablePtr pDrawable, GCPtr pGC, int xInit, 
			    int yInit, unsigned int nglyph, CharInfoPtr *ppci,
			    pointer pglyphBase);
   void (*PolyGlyphBltTE) (DrawablePtr pDrawable, GCPtr pGC, int xInit, 
			   int yInit, unsigned int nglyph, CharInfoPtr *ppci,
			   pointer pglyphBase);
   int (*PolyText8NonTE) (DrawablePtr pDraw, GCPtr pGC, int x, int y,
			  int count, char *chars);
   int (*PolyText16NonTE) (DrawablePtr pDraw, GCPtr pGC, int x, int y, 
			   int count, unsigned short *chars);
   void (*ImageText8NonTE) (DrawablePtr pDraw, GCPtr pGC, int x, int y,
			    int count, char *chars);
   void (*ImageText16NonTE) (DrawablePtr pDraw, GCPtr pGC, int x, int y,
			     int count, unsigned short *chars);
   void (*ImageGlyphBltNonTE) (DrawablePtr pDrawable, GCPtr pGC, int xInit, 
			       int yInit, unsigned int nglyph,
			       CharInfoPtr *ppci, pointer pglyphBase);
   void (*PolyGlyphBltNonTE) (DrawablePtr pDrawable, GCPtr pGC, int xInit, 
			      int yInit, unsigned int nglyph,
			      CharInfoPtr *ppci, pointer pglyphBase);
   void (*PolyRectangleThinSolid)(DrawablePtr pDrawable,GCPtr pGC,
				  int nRectsInit, xRectangle *pRectsInit);
   void (*PolylinesWideSolid)(DrawablePtr pDrawable, GCPtr pGC, int mode, 
			      int npt, DDXPointPtr pPts);
   void (*PolylinesThinSolid)(DrawablePtr pDrawable, GCPtr pGC, int mode, 
			      int npt, DDXPointPtr pPts);
   void (*PolySegmentThinSolid)(DrawablePtr pDrawable, GCPtr pGC, int nseg,
				xSegment *pSeg);
   void (*PolylinesThinDashed)(DrawablePtr pDrawable, GCPtr pGC, int mode, 
			       int npt, DDXPointPtr pPts);
   void (*PolySegmentThinDashed)(DrawablePtr pDrawable, GCPtr pGC, int nseg,
				 xSegment *pSeg);
   void (*FillPolygonSolid)(DrawablePtr pDrawable, GCPtr pGC, int shape,
			    int mode, int count, DDXPointPtr ptsIn);
   void (*FillPolygonStippled)(DrawablePtr pDrawable, GCPtr pGC, int shape,
			       int mode, int count, DDXPointPtr ptsIn);
   void (*FillPolygonOpaqueStippled)(DrawablePtr pDrawable, GCPtr pGC,
				     int shape, int mode, int count,
				     DDXPointPtr ptsIn);
   void (*FillPolygonTiled)(DrawablePtr pDrawable, GCPtr pGC, int shape, 
			    int mode, int count, DDXPointPtr ptsIn);
   void (*PolyFillArcSolid)(DrawablePtr pDraw, GCPtr pGC, int narcs, 
			    xArc *parcs);
   void (*PutImage)(DrawablePtr pDraw, GCPtr pGC, int depth, int x, int y, 
		    int w, int h, int leftPad, int format, char *pImage);
   ValidateGCProcPtr ValidateFillSpans;
   ValidateGCProcPtr ValidateSetSpans;
   ValidateGCProcPtr ValidatePutImage;
   ValidateGCProcPtr ValidateCopyArea;
   ValidateGCProcPtr ValidateCopyPlane;
   ValidateGCProcPtr ValidatePolyPoint;
   ValidateGCProcPtr ValidatePolylines;
   ValidateGCProcPtr ValidatePolySegment;
   ValidateGCProcPtr ValidatePolyRectangle;
   ValidateGCProcPtr ValidatePolyArc;
   ValidateGCProcPtr ValidateFillPolygon;
   ValidateGCProcPtr ValidatePolyFillRect;
   ValidateGCProcPtr ValidatePolyFillArc;
   ValidateGCProcPtr ValidatePolyText8;
   ValidateGCProcPtr ValidatePolyText16;
   ValidateGCProcPtr ValidateImageText8;
   ValidateGCProcPtr ValidateImageText16;
   ValidateGCProcPtr ValidatePolyGlyphBlt;
   ValidateGCProcPtr ValidateImageGlyphBlt;
   ValidateGCProcPtr ValidatePushPixels;
   void (*ComputeDash)(GCPtr pGC);
   void (*InitPixmapCache)(ScreenPtr pScreen, RegionPtr areas, pointer data);
   void (*ClosePixmapCache)(ScreenPtr pScreen);
   int (*StippledFillChooser)(GCPtr pGC);
   int (*OpaqueStippledFillChooser)(GCPtr pGC);
   int (*TiledFillChooser)(GCPtr pGC);
   XAACacheInfoPtr (*CacheTile)(ScrnInfoPtr Scrn, PixmapPtr pPix);
   XAACacheInfoPtr (*CacheStipple)(ScrnInfoPtr Scrn, PixmapPtr pPix, int fg, 
				   int bg);
   XAACacheInfoPtr (*CacheMonoStipple)(ScrnInfoPtr Scrn, PixmapPtr pPix);
   XAACacheInfoPtr (*CacheMono8x8Pattern)(ScrnInfoPtr Scrn, int pat0, 
					  int pat1);
   XAACacheInfoPtr (*CacheColor8x8Pattern)(ScrnInfoPtr Scrn, PixmapPtr pPix, 
					   int fg, int bg);
   void (*WriteBitmapToCache) (ScrnInfoPtr pScrn, int x, int y, int w, int h,
			       unsigned char *src, int srcwidth, int fg, 
			       int bg);
   void (*WritePixmapToCache) (ScrnInfoPtr pScrn, int x, int y, int w, int h,
			       unsigned char *src, int srcwidth, int bpp, 
			       int depth);
   void (*WriteMono8x8PatternToCache)(ScrnInfoPtr pScrn, 
				      XAACacheInfoPtr pCache);
   void (*WriteColor8x8PatternToCache)(ScrnInfoPtr pScrn, PixmapPtr pPix, 
				       XAACacheInfoPtr pCache);
   GetImageProcPtr GetImage;
   GetSpansProcPtr GetSpans;
   CopyWindowProcPtr CopyWindow;
   Bool (*SetupForCPUToScreenAlphaTexture2)(ScrnInfoPtr pScrn, int op,
                                           CARD16 red, CARD16 green,
                                           CARD16 blue, CARD16 alpha,
					   CARD32 maskFormat, CARD32 dstFormat,
                                           CARD8 *alphaPtr, int alphaPitch,
					   int width, int height, int flags);
   Bool (*SetupForCPUToScreenTexture2)(ScrnInfoPtr pScrn, int op,
                                      CARD32 srcFormat, CARD32 dstFormat,
                                      CARD8 *texPtr, int texPitch,
                                      int width, int height, int flags);
d277 1
d321 2
a322 1
static void XAAStateWrapSync(ScrnInfoPtr pScrn)
d324 4
a327 4
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
   
   (*pStatePriv->Sync)(pScrn);
d330 4
a333 3
static void XAAStateWrapSetupForScreenToScreenCopy(ScrnInfoPtr pScrn, int xdir, int ydir,
						   int rop, unsigned int planemask, 
						   int trans_color)
d335 5
a339 5
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
   
   (*pStatePriv->SetupForScreenToScreenCopy)(pScrn, xdir, ydir, rop, planemask, 
					     trans_color);
d342 3
a344 2
static void XAAStateWrapSetupForSolidFill(ScrnInfoPtr pScrn, int color, int rop, 
					  unsigned int planemask)
d346 4
a349 4
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
   
   (*pStatePriv->SetupForSolidFill)(pScrn, color, rop, planemask);
d352 3
a354 2
static void XAAStateWrapSetupForSolidLine(ScrnInfoPtr pScrn,int color,int rop,
					  unsigned int planemask)
d356 2
a357 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d359 1
a359 1
   (*pStatePriv->SetupForSolidLine)(pScrn, color, rop, planemask);
d362 4
a365 3
static void XAAStateWrapSetupForDashedLine(ScrnInfoPtr pScrn, int fg, int bg, int rop,
					   unsigned int planemask, int length,
					   unsigned char *pattern)
d367 2
a368 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d370 2
a371 1
   (*pStatePriv->SetupForDashedLine)(pScrn, fg, bg, rop, planemask, length, pattern);
d374 3
a376 2
static void XAAStateWrapSetClippingRectangle(ScrnInfoPtr pScrn, int left, int top, 
					     int right, int bottom)
d378 2
a379 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d381 1
a381 1
   (*pStatePriv->SetClippingRectangle)(pScrn, left, top, right, bottom);
d384 2
a385 1
static void XAAStateWrapDisableClipping(ScrnInfoPtr pScrn)
d387 2
a388 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d390 1
a390 1
   (*pStatePriv->DisableClipping)(pScrn);
d393 4
a396 3
static void XAAStateWrapSetupForMono8x8PatternFill(ScrnInfoPtr pScrn, int patx, int paty,
						   int fg, int bg, int rop, 
						   unsigned int planemask)
d398 2
a399 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d401 2
a402 1
   (*pStatePriv->SetupForMono8x8PatternFill)(pScrn, patx, paty, fg, bg, rop, planemask);
d405 4
a408 3
static void XAAStateWrapSetupForColor8x8PatternFill(ScrnInfoPtr pScrn, int patx, int paty,
						    int rop, unsigned int planemask,
						    int transparency_color)
d410 2
a411 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d413 2
a414 2
   (*pStatePriv->SetupForColor8x8PatternFill)(pScrn, patx, paty, rop, planemask, 
					      transparency_color);
d417 4
a420 3
static void XAAStateWrapSetupForCPUToScreenColorExpandFill(ScrnInfoPtr pScrn, int fg, 
							   int bg, int rop,
							   unsigned int planemask)
d422 2
a423 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d425 2
a426 1
   (*pStatePriv->SetupForCPUToScreenColorExpandFill)(pScrn, fg, bg, rop, planemask);
d429 5
a433 4
static void XAAStateWrapSetupForScanlineCPUToScreenColorExpandFill(ScrnInfoPtr pScrn,
								   int fg, int bg, 
								   int rop,
								   unsigned int planemask)
d435 2
a436 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d438 2
a439 2
   (*pStatePriv->SetupForScanlineCPUToScreenColorExpandFill)(pScrn, fg, bg, rop,
							     planemask);
d442 4
a445 3
static void XAAStateWrapSetupForScreenToScreenColorExpandFill(ScrnInfoPtr pScrn,
							      int fg, int bg, int rop,
							      unsigned int planemask)
d447 2
a448 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d450 2
a451 1
   (*pStatePriv->SetupForScreenToScreenColorExpandFill)(pScrn, fg, bg, rop, planemask);
d454 4
a457 3
static void XAAStateWrapSetupForImageWrite(ScrnInfoPtr pScrn, int rop, 
					   unsigned int planemask, int transparency_color,
					   int bpp, int depth)
d459 2
a460 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d462 2
a463 2
   (*pStatePriv->SetupForImageWrite)(pScrn, rop, planemask, transparency_color, bpp, 
				     depth);
d466 5
a470 4
static void XAAStateWrapSetupForScanlineImageWrite(ScrnInfoPtr pScrn, int rop, 
						   unsigned int planemask,
						   int transparency_color,
						   int bpp, int depth)
d472 2
a473 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d475 2
a476 2
   (*pStatePriv->SetupForScanlineImageWrite)(pScrn, rop, planemask, transparency_color, 
					     bpp, depth);
d479 2
a480 1
static void XAAStateWrapSetupForImageRead(ScrnInfoPtr pScrn, int bpp, int depth)
d482 2
a483 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d485 1
a485 1
   (*pStatePriv->SetupForImageRead)(pScrn, bpp, depth);
d488 4
a491 3
static void XAAStateWrapScreenToScreenBitBlt(ScrnInfoPtr pScrn, int nbox,
					     DDXPointPtr pptSrc, BoxPtr pbox, int xdir, 
					     int ydir, int alu, unsigned int planmask)
d493 2
a494 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d496 3
a498 3
   (*pStatePriv->ScreenToScreenBitBlt)(pScrn, nbox,
				       pptSrc, pbox, xdir, 
				       ydir, alu, planmask);
d501 4
a504 3
static void XAAStateWrapWriteBitmap(ScrnInfoPtr pScrn, int x, int y, int w, int h,
				    unsigned char *src, int srcwidth, int skipleft,
				    int fg, int bg, int rop, unsigned int planemask)
d506 2
a507 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d509 3
a511 3
   (*pStatePriv->WriteBitmap)(pScrn, x, y, w, h,
			      src, srcwidth, skipleft,
			      fg, bg, rop, planemask);
d514 3
a516 2
static void XAAStateWrapFillSolidRects(ScrnInfoPtr pScrn, int fg, int rop,
				       unsigned int planemask, int nBox, BoxPtr pBox)
d518 2
a519 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d521 1
a521 2
   (*pStatePriv->FillSolidRects)(pScrn, fg, rop,
				 planemask, nBox, pBox);
d524 5
a528 4
static void XAAStateWrapFillMono8x8PatternRects(ScrnInfoPtr pScrn, int fg, int bg, 
						int rop, unsigned int planemask, int nBox,
						BoxPtr pBox, int pat0, int pat1,
						int xorg, int yorg)
d530 2
a531 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d533 3
a535 4
   (*pStatePriv->FillMono8x8PatternRects)(pScrn, fg, bg, 
					  rop, planemask, nBox,
					  pBox, pat0, pat1,
					  xorg, yorg);
d538 8
a545 7
static void XAAStateWrapFillColor8x8PatternRects(ScrnInfoPtr pScrn, int rop,
						 unsigned int planemask, int nBox,
						 BoxPtr pBox, int xorg, int yorg,
						 XAACacheInfoPtr pCache)
{ 
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d547 3
a549 4
   (*pStatePriv->FillColor8x8PatternRects)(pScrn, rop,
					   planemask, nBox,
					   pBox, xorg, yorg,
					   pCache);
d552 4
a555 3
static void XAAStateWrapFillCacheBltRects(ScrnInfoPtr pScrn, int rop, 
					  unsigned int planemask, int nBox, BoxPtr pBox,
					  int xorg, int yorg, XAACacheInfoPtr pCache)
d557 2
a558 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d560 3
a562 3
   (*pStatePriv->FillCacheBltRects)(pScrn, rop, 
				    planemask, nBox, pBox,
				    xorg, yorg, pCache);
d565 5
a569 4
static void XAAStateWrapFillColorExpandRects(ScrnInfoPtr pScrn, int fg, int bg, int rop,
					     unsigned int planemask, int nBox,
					     BoxPtr pBox, int xorg, int yorg, 
					     PixmapPtr pPix)
d571 2
a572 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d574 3
a576 4
   (*pStatePriv->FillColorExpandRects)(pScrn, fg, bg, rop,
				       planemask, nBox,
				       pBox, xorg, yorg, 
				       pPix);
d579 5
a583 4
static void XAAStateWrapFillCacheExpandRects(ScrnInfoPtr pScrn, int fg, int bg, int rop,
					     unsigned int planemask, int nBox, 
					     BoxPtr pBox, int xorg, int yorg, 
					     PixmapPtr pPix)
d585 2
a586 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d588 3
a590 4
   (*pStatePriv->FillCacheExpandRects)(pScrn, fg, bg, rop,
				       planemask, nBox, 
				       pBox, xorg, yorg, 
				       pPix);
d593 4
a596 3
static void XAAStateWrapFillImageWriteRects(ScrnInfoPtr pScrn, int rop,
					    unsigned int planemask, int nBox, BoxPtr pBox,
					    int xorg, int yorg, PixmapPtr pPix)
d598 2
a599 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d601 3
a603 3
   (*pStatePriv->FillImageWriteRects)(pScrn, rop,
				      planemask, nBox, pBox,
				      xorg, yorg, pPix);
d606 4
a609 3
static void XAAStateWrapFillSolidSpans(ScrnInfoPtr pScrn, int fg, int rop,
				       unsigned int planemask, int n, DDXPointPtr points,
				       int *widths, int fSorted)
d611 2
a612 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d614 2
a615 3
   (*pStatePriv->FillSolidSpans)(pScrn, fg, rop,
				 planemask, n, points,
				 widths, fSorted);
d618 6
a623 5
static void XAAStateWrapFillMono8x8PatternSpans(ScrnInfoPtr pScrn, int fg, int bg, 
						int rop, unsigned int planemask, int n,
						DDXPointPtr points, int *widths,
						int fSorted, int pat0, int pat1,
						int xorg, int yorg)
d625 2
a626 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d628 4
a631 5
   (*pStatePriv->FillMono8x8PatternSpans)(pScrn, fg, bg, 
					  rop, planemask, n,
					  points, widths,
					  fSorted, pat0, pat1,
					  xorg, yorg);
d634 6
a639 5
static void XAAStateWrapFillColor8x8PatternSpans(ScrnInfoPtr pScrn, int rop,
						 unsigned int planemask, int n,
						 DDXPointPtr points, int *widths,
						 int fSorted, XAACacheInfoPtr pCache,
						 int xorg, int yorg)
d641 2
a642 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d644 4
a647 5
   (*pStatePriv->FillColor8x8PatternSpans)(pScrn, rop,
					   planemask, n,
					   points, widths,
					   fSorted, pCache,
					   xorg, yorg);
d650 6
a655 5
static void XAAStateWrapFillCacheBltSpans(ScrnInfoPtr pScrn, int rop,
					  unsigned int planemask, int n, 
					  DDXPointPtr points, int *widths, 
					  int fSorted, XAACacheInfoPtr pCache,
					  int xorg, int yorg)
d657 2
a658 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d660 4
a663 5
   (*pStatePriv->FillCacheBltSpans)(pScrn, rop,
				    planemask, n, 
				    points, widths, 
				    fSorted, pCache,
				    xorg, yorg);
d666 5
a670 4
static void XAAStateWrapFillColorExpandSpans(ScrnInfoPtr pScrn, int fg, int bg, int rop,
					     unsigned int planemask, int n,
					     DDXPointPtr points, int *widths, int fSorted,
					     int xorg, int yorg, PixmapPtr pPix)
d672 2
a673 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d675 4
a678 4
   (*pStatePriv->FillColorExpandSpans)(pScrn, fg, bg, rop,
				       planemask, n,
				       points, widths, fSorted,
				       xorg, yorg, pPix);
d681 5
a685 4
static void XAAStateWrapFillCacheExpandSpans(ScrnInfoPtr pScrn, int fg, int bg, int rop,
					     unsigned int planemask, int n, 
					     DDXPointPtr ppt, int *pwidth, int fSorted, 
					     int xorg, int yorg, PixmapPtr pPix)
d687 2
a688 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d690 4
a693 4
   (*pStatePriv->FillCacheExpandSpans)(pScrn, fg, bg, rop,
				       planemask, n, 
				       ppt, pwidth, fSorted, 
				       xorg, yorg, pPix);
d696 6
a701 5
static void XAAStateWrapTEGlyphRenderer(ScrnInfoPtr pScrn, int x, int y, int w, int h, 
					int skipleft, int startline, 
					unsigned int **glyphs,
					int glyphWidth, int fg, int bg, int rop, 
					unsigned planemask)
d703 2
a704 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d706 3
a708 5
   (*pStatePriv->TEGlyphRenderer)(pScrn, x, y, w, h, 
				  skipleft, startline, 
				  glyphs,
				  glyphWidth, fg, bg, rop, 
				  planemask);
d711 4
a714 3
static void XAAStateWrapNonTEGlyphRenderer(ScrnInfoPtr pScrn, int x, int y, int n,
					   NonTEGlyphPtr glyphs, BoxPtr pbox,
					   int fg, int rop, unsigned int planemask)
d716 2
a717 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d719 2
a720 3
   (*pStatePriv->NonTEGlyphRenderer)(pScrn, x, y, n,
				     glyphs, pbox,
				     fg, rop, planemask);
d723 5
a727 4
static void XAAStateWrapWritePixmap(ScrnInfoPtr pScrn, int x, int y, int w, int h,
				    unsigned char *src, int srcwidth, int rop,
				    unsigned int planemask, int transparency_color,
				    int bpp, int depth)
d729 2
a730 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d732 3
a734 4
   (*pStatePriv->WritePixmap)(pScrn, x, y, w, h,
			      src, srcwidth, rop,
			      planemask, transparency_color,
			      bpp, depth);
d737 3
a739 2
static void XAAStateWrapReadPixmap(ScrnInfoPtr pScrn, int x, int y, int w, int h,
				   unsigned char *dst, int dstwidth, int bpp, int depth)
d741 2
a742 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d744 1
a744 2
   (*pStatePriv->ReadPixmap)(pScrn, x, y, w, h,
			     dst, dstwidth, bpp, depth);
d747 4
a750 3
static RegionPtr XAAStateWrapCopyArea(DrawablePtr pSrcDrawable, DrawablePtr pDstDrawable,
				      GC *pGC, int srcx, int srcy, int width, int height,
				      int dstx, int dsty)
d752 2
a753 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d755 2
a756 3
   return (*pStatePriv->CopyArea)(pSrcDrawable, pDstDrawable,
				  pGC, srcx, srcy, width, height,
				  dstx, dsty);
d759 4
a762 3
static RegionPtr XAAStateWrapCopyPlane(DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
				       int srcx, int srcy, int width, int height, 
				       int dstx, int dsty, unsigned long bitPlane)
d764 2
a765 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d767 3
a769 3
   return (*pStatePriv->CopyPlane)(pSrc, pDst, pGC,
				   srcx, srcy, width, height, 
				   dstx, dsty, bitPlane);
d772 4
a775 3
static void XAAStateWrapPushPixelsSolid(GCPtr pGC, PixmapPtr pBitMap,
					DrawablePtr pDrawable, int dx, int dy, int xOrg, 
					int yOrg)
d777 2
a778 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d780 2
a781 3
   (*pStatePriv->PushPixelsSolid)(pGC, pBitMap,
				  pDrawable, dx, dy, xOrg, 
				  yOrg);
d784 3
a786 2
static void XAAStateWrapPolyFillRectSolid(DrawablePtr pDraw, GCPtr pGC, int nrectFill,
					  xRectangle *prectInit)
d788 2
a789 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d791 1
a791 2
   (*pStatePriv->PolyFillRectSolid)(pDraw, pGC, nrectFill,
				    prectInit);
d794 3
a796 2
static void XAAStateWrapPolyFillRectStippled(DrawablePtr pDraw, GCPtr pGC, int nrectFill,
					     xRectangle *prectInit)
d798 2
a799 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d801 1
a801 2
   (*pStatePriv->PolyFillRectStippled)(pDraw, pGC, nrectFill,
				       prectInit);
d804 3
a806 2
static void XAAStateWrapPolyFillRectOpaqueStippled(DrawablePtr pDraw, GCPtr pGC,
						   int nrectFill, xRectangle *prectInit)
d808 2
a809 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d811 2
a812 2
   (*pStatePriv->PolyFillRectOpaqueStippled)(pDraw, pGC,
					     nrectFill, prectInit);
d815 3
a817 2
static void XAAStateWrapPolyFillRectTiled(DrawablePtr pDraw, GCPtr pGC, int nrectFill,
					  xRectangle *prectInit)
d819 2
a820 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d822 1
a822 2
   (*pStatePriv->PolyFillRectTiled)(pDraw, pGC, nrectFill,
				    prectInit);
d825 3
a827 2
static void XAAStateWrapFillSpansSolid(DrawablePtr pDraw, GCPtr pGC, int nInit,
				       DDXPointPtr ppt, int *pwidth, int fSorted)
d829 2
a830 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d832 1
a832 2
   (*pStatePriv->FillSpansSolid)(pDraw, pGC, nInit,
				 ppt, pwidth, fSorted);
d835 3
a837 2
static void XAAStateWrapFillSpansStippled(DrawablePtr pDraw, GCPtr pGC, int nInit,
					  DDXPointPtr ppt, int *pwidth, int fSorted)
d839 2
a840 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d842 1
a842 2
   (*pStatePriv->FillSpansStippled)(pDraw, pGC, nInit,
				    ppt, pwidth, fSorted);
d845 3
a847 2
static void XAAStateWrapFillSpansOpaqueStippled(DrawablePtr pDraw, GCPtr pGC, int nInit, 
						DDXPointPtr ppt, int *pwidth, int fSorted)
d849 2
a850 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d852 2
a853 2
   (*pStatePriv->FillSpansOpaqueStippled)(pDraw, pGC, nInit, 
					  ppt, pwidth, fSorted);
d856 3
a858 2
static void XAAStateWrapFillSpansTiled(DrawablePtr pDraw, GCPtr pGC, int nInit, 
				       DDXPointPtr ppt, int *pwidth, int fSorted)
d860 2
a861 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d863 1
a863 2
   (*pStatePriv->FillSpansTiled)(pDraw, pGC, nInit, 
				 ppt, pwidth, fSorted);
d866 3
a868 2
static int XAAStateWrapPolyText8TE(DrawablePtr pDraw, GCPtr pGC, int x, int y, int count,
				   char *chars)
d870 2
a871 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d873 1
a873 2
   return (*pStatePriv->PolyText8TE)(pDraw, pGC, x, y, count,
				     chars);
d876 3
a878 2
static int XAAStateWrapPolyText16TE(DrawablePtr pDraw, GCPtr pGC, int x, int y, int count,
				    unsigned short *chars)
d880 2
a881 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d883 1
a883 2
   return (*pStatePriv->PolyText16TE)(pDraw, pGC, x, y, count,
				      chars);
d886 3
a888 2
static void XAAStateWrapImageText8TE(DrawablePtr pDraw, GCPtr pGC, int x, int y, 
				     int count, char *chars)
d890 2
a891 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d893 1
a893 2
   (*pStatePriv->ImageText8TE)(pDraw, pGC, x, y, 
			       count, chars);
d896 3
a898 2
static void XAAStateWrapImageText16TE(DrawablePtr pDraw, GCPtr pGC, int x, int y,
				      int count, unsigned short *chars)
d900 2
a901 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d903 1
a903 2
   (*pStatePriv->ImageText16TE)(pDraw, pGC, x, y,
				count, chars);
d906 4
a909 3
static void XAAStateWrapImageGlyphBltTE(DrawablePtr pDrawable, GCPtr pGC, int xInit, 
					int yInit, unsigned int nglyph, CharInfoPtr *ppci,
					pointer pglyphBase)
d911 2
a912 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d914 2
a915 3
   (*pStatePriv->ImageGlyphBltTE)(pDrawable, pGC, xInit, 
				  yInit, nglyph, ppci,
				  pglyphBase);
d918 4
a921 3
static void XAAStateWrapPolyGlyphBltTE(DrawablePtr pDrawable, GCPtr pGC, int xInit, 
				       int yInit, unsigned int nglyph, CharInfoPtr *ppci,
				       pointer pglyphBase)
d923 2
a924 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d926 2
a927 3
   (*pStatePriv->PolyGlyphBltTE)(pDrawable, pGC, xInit, 
				 yInit, nglyph, ppci,
				 pglyphBase);
d930 3
a932 2
static int XAAStateWrapPolyText8NonTE(DrawablePtr pDraw, GCPtr pGC, int x, int y,
				      int count, char *chars)
d934 2
a935 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d937 1
a937 2
   return (*pStatePriv->PolyText8NonTE)(pDraw, pGC, x, y,
					count, chars);
d940 3
a942 2
static int XAAStateWrapPolyText16NonTE(DrawablePtr pDraw, GCPtr pGC, int x, int y,
				       int count, unsigned short *chars)
d944 2
a945 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d947 1
a947 2
   return (*pStatePriv->PolyText16NonTE)(pDraw, pGC, x, y,
					 count, chars);
d950 3
a952 2
static void XAAStateWrapImageText8NonTE(DrawablePtr pDraw, GCPtr pGC, int x, int y,
					int count, char *chars)
d954 2
a955 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d957 1
a957 2
   (*pStatePriv->ImageText8NonTE)(pDraw, pGC, x, y,
				  count, chars);
d960 3
a962 2
static void XAAStateWrapImageText16NonTE(DrawablePtr pDraw, GCPtr pGC, int x, int y,
					 int count, unsigned short *chars)
d964 2
a965 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d967 1
a967 2
   (*pStatePriv->ImageText16NonTE)(pDraw, pGC, x, y,
				   count, chars);
d970 4
a973 3
static void XAAStateWrapImageGlyphBltNonTE(DrawablePtr pDrawable, GCPtr pGC, int xInit,
					   int yInit, unsigned int nglyph,
					   CharInfoPtr *ppci, pointer pglyphBase)
d975 2
a976 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d978 2
a979 3
   (*pStatePriv->ImageGlyphBltNonTE)(pDrawable, pGC, xInit,
				     yInit, nglyph,
				     ppci, pglyphBase);
d982 4
a985 3
static void XAAStateWrapPolyGlyphBltNonTE(DrawablePtr pDrawable, GCPtr pGC, int xInit,
					  int yInit, unsigned int nglyph,
					  CharInfoPtr *ppci, pointer pglyphBase)
d987 2
a988 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d990 2
a991 3
   (*pStatePriv->PolyGlyphBltNonTE)(pDrawable, pGC, xInit,
				    yInit, nglyph,
				    ppci, pglyphBase);
d994 3
a996 2
static void XAAStateWrapPolyRectangleThinSolid(DrawablePtr pDrawable,GCPtr pGC,
					       int nRectsInit, xRectangle *pRectsInit)
d998 2
a999 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1001 2
a1002 2
   (*pStatePriv->PolyRectangleThinSolid)(pDrawable, pGC,
					 nRectsInit, pRectsInit);
d1005 3
a1007 2
static void XAAStateWrapPolylinesWideSolid(DrawablePtr pDrawable, GCPtr pGC, int mode,
					   int npt, DDXPointPtr pPts)
d1009 2
a1010 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1012 1
a1012 2
   (*pStatePriv->PolylinesWideSolid)(pDrawable, pGC, mode,
				     npt, pPts);
d1015 3
a1017 2
static void XAAStateWrapPolylinesThinSolid(DrawablePtr pDrawable, GCPtr pGC, int mode, 
					   int npt, DDXPointPtr pPts)
d1019 2
a1020 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1022 1
a1022 2
   (*pStatePriv->PolylinesThinSolid)(pDrawable, pGC, mode, 
				     npt, pPts);
d1025 3
a1027 2
static void XAAStateWrapPolySegmentThinSolid(DrawablePtr pDrawable, GCPtr pGC, int nseg,
					     xSegment *pSeg)
d1029 2
a1030 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1032 1
a1032 2
   (*pStatePriv->PolySegmentThinSolid)(pDrawable, pGC, nseg,
				       pSeg);
d1035 3
a1037 2
static void XAAStateWrapPolylinesThinDashed(DrawablePtr pDrawable, GCPtr pGC, int mode, 
					    int npt, DDXPointPtr pPts)
d1039 2
a1040 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1042 1
a1042 2
   (*pStatePriv->PolylinesThinDashed)(pDrawable, pGC, mode, 
				      npt, pPts);
d1045 3
a1047 2
static void XAAStateWrapPolySegmentThinDashed(DrawablePtr pDrawable, GCPtr pGC, int nseg,
					      xSegment *pSeg)
d1049 2
a1050 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1052 1
a1052 2
   (*pStatePriv->PolySegmentThinDashed)(pDrawable, pGC, nseg,
					pSeg);
d1055 3
a1057 2
static void XAAStateWrapFillPolygonSolid(DrawablePtr pDrawable, GCPtr pGC, int shape,
					 int mode, int count, DDXPointPtr ptsIn)
d1059 2
a1060 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1062 1
a1062 2
   (*pStatePriv->FillPolygonSolid)(pDrawable, pGC, shape,
				   mode, count, ptsIn);
d1065 3
a1067 2
static void XAAStateWrapFillPolygonStippled(DrawablePtr pDrawable, GCPtr pGC, int shape,
					    int mode, int count, DDXPointPtr ptsIn)
d1069 2
a1070 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1072 2
a1073 2
   (*pStatePriv->FillPolygonStippled)(pDrawable, pGC, shape,
				      mode, count, ptsIn);
d1076 4
a1079 3
static void XAAStateWrapFillPolygonOpaqueStippled(DrawablePtr pDrawable, GCPtr pGC,
						  int shape, int mode, int count,
						  DDXPointPtr ptsIn)
d1081 2
a1082 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1084 2
a1085 3
   (*pStatePriv->FillPolygonOpaqueStippled)(pDrawable, pGC,
					    shape, mode, count,
					    ptsIn);
d1088 3
a1090 2
static void XAAStateWrapFillPolygonTiled(DrawablePtr pDrawable, GCPtr pGC, int shape,
					 int mode, int count, DDXPointPtr ptsIn)
d1092 2
a1093 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1095 1
a1095 2
   (*pStatePriv->FillPolygonTiled)(pDrawable, pGC, shape,
				   mode, count, ptsIn);
d1098 3
a1100 2
static void XAAStateWrapPolyFillArcSolid(DrawablePtr pDraw, GCPtr pGC, int narcs,
					 xArc *parcs)
d1102 2
a1103 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1105 1
a1105 2
   (*pStatePriv->PolyFillArcSolid)(pDraw, pGC, narcs,
				   parcs);
d1108 3
a1110 2
static void XAAStateWrapPutImage(DrawablePtr pDraw, GCPtr pGC, int depth, int x, int y, 
				 int w, int h, int leftPad, int format, char *pImage)
d1112 2
a1113 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1115 2
a1116 2
   (*pStatePriv->PutImage)(pDraw, pGC, depth, x, y, 
			   w, h, leftPad, format, pImage);
d1119 3
a1121 2
static void XAAStateWrapValidateFillSpans(GCPtr pGC, unsigned long changes, 
					  DrawablePtr pDraw)
d1123 2
a1124 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1126 1
a1126 2
   (*pStatePriv->ValidateFillSpans)(pGC, changes,
				    pDraw);
d1129 3
a1131 2
static void XAAStateWrapValidateSetSpans(GCPtr pGC, unsigned long changes, 
					 DrawablePtr pDraw)
d1133 2
a1134 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1136 1
a1136 2
   (*pStatePriv->ValidateSetSpans)(pGC, changes,
				   pDraw);
d1139 3
a1141 2
static void XAAStateWrapValidatePutImage(GCPtr pGC, unsigned long changes,
					 DrawablePtr pDraw)
d1143 2
a1144 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1146 1
a1146 2
   (*pStatePriv->ValidatePutImage)(pGC, changes,
				   pDraw);
d1149 3
a1151 2
static void XAAStateWrapValidateCopyArea(GCPtr pGC, unsigned long changes,
					 DrawablePtr pDraw)
d1153 2
a1154 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1156 1
a1156 2
   (*pStatePriv->ValidateCopyArea)(pGC, changes,
				   pDraw);
d1159 3
a1161 2
static void XAAStateWrapValidateCopyPlane(GCPtr pGC, unsigned long changes,
					  DrawablePtr pDraw)
d1163 2
a1164 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1166 1
a1166 2
   (*pStatePriv->ValidateCopyPlane)(pGC, changes,
				    pDraw);
d1169 3
a1171 2
static void XAAStateWrapValidatePolyPoint(GCPtr pGC, unsigned long changes, 
					  DrawablePtr pDraw)
d1173 2
a1174 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1176 1
a1176 2
   (*pStatePriv->ValidatePolyPoint)(pGC, changes,
				    pDraw);
d1179 3
a1181 2
static void XAAStateWrapValidatePolylines(GCPtr pGC, unsigned long changes,
					  DrawablePtr pDraw)
d1183 2
a1184 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1186 1
a1186 2
   (*pStatePriv->ValidatePolylines)(pGC, changes,
				    pDraw);
d1189 3
a1191 2
static void XAAStateWrapValidatePolySegment(GCPtr pGC, unsigned long changes, 
					    DrawablePtr pDraw)
d1193 2
a1194 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1196 1
a1196 2
   (*pStatePriv->ValidatePolySegment)(pGC, changes,
				      pDraw);
d1199 3
a1201 2
static void XAAStateWrapValidatePolyRectangle(GCPtr pGC, unsigned long changes, 
					      DrawablePtr pDraw)
d1203 2
a1204 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1206 1
a1206 2
   (*pStatePriv->ValidatePolyRectangle)(pGC, changes,
					pDraw);
d1209 2
a1210 2
static void XAAStateWrapValidatePolyArc(GCPtr pGC, unsigned long changes,
					DrawablePtr pDraw)
d1212 2
a1213 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1215 1
a1215 2
   (*pStatePriv->ValidatePolyArc)(pGC, changes,
				  pDraw);
d1218 3
a1220 2
static void XAAStateWrapValidateFillPolygon(GCPtr pGC, unsigned long changes,
					    DrawablePtr pDraw)
d1222 2
a1223 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1225 1
a1225 2
   (*pStatePriv->ValidateFillPolygon)(pGC, changes,
				      pDraw);
d1228 3
a1230 2
static void XAAStateWrapValidatePolyFillRect(GCPtr pGC, unsigned long changes,
					     DrawablePtr pDraw)
d1232 2
a1233 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1235 1
a1235 2
   (*pStatePriv->ValidatePolyFillRect)(pGC, changes,
				       pDraw);
d1238 3
a1240 2
static void XAAStateWrapValidatePolyFillArc(GCPtr pGC, unsigned long changes,
					    DrawablePtr pDraw)
d1242 2
a1243 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1245 1
a1245 2
   (*pStatePriv->ValidatePolyFillArc)(pGC, changes,
				      pDraw);
d1248 3
a1250 2
static void XAAStateWrapValidatePolyText8(GCPtr pGC, unsigned long changes,
					  DrawablePtr pDraw)
d1252 2
a1253 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1255 1
a1255 2
   (*pStatePriv->ValidatePolyText8)(pGC, changes,
				    pDraw);
d1258 3
a1260 2
static void XAAStateWrapValidatePolyText16(GCPtr pGC, unsigned long changes, 
					   DrawablePtr pDraw)
d1262 2
a1263 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1265 1
a1265 2
   (*pStatePriv->ValidatePolyText16)(pGC, changes, 
				     pDraw);
d1268 3
a1270 2
static void XAAStateWrapValidateImageText8(GCPtr pGC, unsigned long changes, 
					   DrawablePtr pDraw)
d1272 2
a1273 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1275 1
a1275 2
   (*pStatePriv->ValidateImageText8)(pGC, changes, 
				     pDraw);
d1278 3
a1280 2
static void XAAStateWrapValidateImageText16(GCPtr pGC, unsigned long changes, 
					    DrawablePtr pDraw)
d1282 2
a1283 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1285 1
a1285 2
   (*pStatePriv->ValidateImageText16)(pGC, changes, 
				      pDraw);
d1288 3
a1290 2
static void XAAStateWrapValidatePolyGlyphBlt(GCPtr pGC, unsigned long changes, 
					     DrawablePtr pDraw)
d1292 2
a1293 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1295 1
a1295 2
   (*pStatePriv->ValidatePolyGlyphBlt)(pGC, changes, 
				       pDraw);
d1298 3
a1300 2
static void XAAStateWrapValidateImageGlyphBlt(GCPtr pGC, unsigned long changes, 
					      DrawablePtr pDraw)
d1302 3
a1304 4
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
   (*pStatePriv->ValidateImageGlyphBlt)(pGC, changes, 
					pDraw);
d1307 3
a1309 2
static void XAAStateWrapValidatePushPixels(GCPtr pGC, unsigned long changes,
					   DrawablePtr pDraw)
d1311 2
a1312 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1314 1
a1314 2
   (*pStatePriv->ValidatePushPixels)(pGC, changes,
				     pDraw);
d1317 2
a1318 1
static void XAAStateWrapComputeDash(GCPtr pGC)
d1320 2
a1321 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1323 1
a1323 1
   (*pStatePriv->ComputeDash)(pGC);
d1326 2
a1327 2
static void XAAStateWrapInitPixmapCache(ScreenPtr pScreen, RegionPtr areas,
					pointer data)
d1329 2
a1330 2
   GET_STATEPRIV_SCREEN(pScreen);
   STATE_CHECK_SP(pStatePriv);
d1332 1
a1332 2
   (*pStatePriv->InitPixmapCache)(pScreen, areas,
				  data);
d1335 2
a1336 1
static void XAAStateWrapClosePixmapCache(ScreenPtr pScreen)
d1338 2
a1339 2
   GET_STATEPRIV_SCREEN(pScreen);
   STATE_CHECK_SP(pStatePriv);
d1341 1
a1341 1
   (*pStatePriv->ClosePixmapCache)(pScreen);
d1344 2
a1345 1
static int XAAStateWrapStippledFillChooser(GCPtr pGC)
d1347 2
a1348 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1350 1
a1350 1
   return (*pStatePriv->StippledFillChooser)(pGC);
d1353 2
a1354 1
static int XAAStateWrapOpaqueStippledFillChooser(GCPtr pGC)
d1356 2
a1357 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1359 1
a1359 1
   return (*pStatePriv->OpaqueStippledFillChooser)(pGC);
d1362 2
a1363 1
static int XAAStateWrapTiledFillChooser(GCPtr pGC)
d1365 2
a1366 2
   GET_STATEPRIV_GC(pGC);
   STATE_CHECK_SP(pStatePriv);
d1368 1
a1368 1
   return (*pStatePriv->TiledFillChooser)(pGC);
d1371 2
a1372 1
static XAACacheInfoPtr XAAStateWrapCacheTile(ScrnInfoPtr pScrn, PixmapPtr pPix)
d1374 2
a1375 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d1377 1
a1377 1
   return (*pStatePriv->CacheTile)(pScrn, pPix);
d1380 2
a1381 2
static XAACacheInfoPtr XAAStateWrapCacheStipple(ScrnInfoPtr pScrn, PixmapPtr pPix, int fg, 
						int bg)
d1383 2
a1384 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d1386 1
a1386 2
   return (*pStatePriv->CacheStipple)(pScrn, pPix, fg, 
				      bg);
d1389 2
a1390 1
static XAACacheInfoPtr XAAStateWrapCacheMonoStipple(ScrnInfoPtr pScrn, PixmapPtr pPix)
d1392 2
a1393 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d1395 1
a1395 1
   return (*pStatePriv->CacheMonoStipple)(pScrn, pPix);
d1398 2
a1399 2
static XAACacheInfoPtr XAAStateWrapCacheMono8x8Pattern(ScrnInfoPtr pScrn, int pat0,
						       int pat1)
d1401 2
a1402 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d1404 1
a1404 2
   return (*pStatePriv->CacheMono8x8Pattern)(pScrn, pat0,
					     pat1);
d1407 3
a1409 2
static XAACacheInfoPtr XAAStateWrapCacheColor8x8Pattern(ScrnInfoPtr pScrn, PixmapPtr pPix,
							int fg, int bg)
d1411 2
a1412 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d1414 1
a1414 2
   return (*pStatePriv->CacheColor8x8Pattern)(pScrn, pPix,
					      fg, bg);
d1417 3
a1419 3
static void XAAStateWrapWriteBitmapToCache(ScrnInfoPtr pScrn, int x, int y, int w, int h,
					   unsigned char *src, int srcwidth, int fg, 
					   int bg)
d1421 2
a1422 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d1424 2
a1425 3
   (*pStatePriv->WriteBitmapToCache)(pScrn, x, y, w, h,
				     src, srcwidth, fg, 
				     bg);
d1428 4
a1431 3
static void XAAStateWrapWritePixmapToCache(ScrnInfoPtr pScrn, int x, int y, int w, int h,
					   unsigned char *src, int srcwidth, int bpp, 
					   int depth)
d1433 2
a1434 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d1436 2
a1437 3
   (*pStatePriv->WritePixmapToCache)(pScrn, x, y, w, h,
				     src, srcwidth, bpp, 
				     depth);
d1440 3
a1442 2
static void XAAStateWrapWriteMono8x8PatternToCache(ScrnInfoPtr pScrn, 
						   XAACacheInfoPtr pCache)
d1444 2
a1445 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d1447 1
a1447 2
   (*pStatePriv->WriteMono8x8PatternToCache)(pScrn, 
					     pCache);
d1450 3
a1452 2
static void XAAStateWrapWriteColor8x8PatternToCache(ScrnInfoPtr pScrn, PixmapPtr pPix, 
						    XAACacheInfoPtr pCache)
d1454 2
a1455 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d1457 1
a1457 2
   (*pStatePriv->WriteColor8x8PatternToCache)(pScrn, pPix, 
					      pCache);
d1460 4
a1463 3
static void XAAStateWrapGetImage(DrawablePtr pDrawable, int sx, int sy, int w, int h,
				 unsigned int format,unsigned long planeMask, 
				 char *pdstLine)
d1465 2
a1466 2
   GET_STATEPRIV_SCREEN(pDrawable->pScreen);
   STATE_CHECK_SP(pStatePriv);
d1468 2
a1469 3
   (*pStatePriv->GetImage)(pDrawable, sx, sy, w, h,
			   format, planeMask, 
			   pdstLine);
d1472 3
a1474 2
static void XAAStateWrapGetSpans(DrawablePtr pDrawable, int wMax, DDXPointPtr ppt,
				 int *pwidth, int nspans, char *pdstStart)
d1476 2
a1477 2
   GET_STATEPRIV_SCREEN(pDrawable->pScreen);
   STATE_CHECK_SP(pStatePriv);
d1479 1
a1479 2
   (*pStatePriv->GetSpans)(pDrawable, wMax, ppt,
			   pwidth, nspans, pdstStart);
d1482 3
a1484 2
static void XAAStateWrapCopyWindow(WindowPtr pWindow, DDXPointRec ptOldOrg, 
				   RegionPtr prgnSrc)
d1486 2
a1487 2
   GET_STATEPRIV_SCREEN(pWindow->drawable.pScreen);
   STATE_CHECK_SP(pStatePriv);
d1489 1
a1489 2
   (*pStatePriv->CopyWindow)(pWindow, ptOldOrg, 
			     prgnSrc);
d1492 11
a1502 11
static Bool XAAStateWrapSetupForCPUToScreenAlphaTexture2(ScrnInfoPtr pScrn,
                                                         int op, CARD16 red,
                                                         CARD16 green,
                                                         CARD16 blue,
                                                         CARD16 alpha,
							 CARD32 srcFormat,
							 CARD32 dstFormat,
                                                         CARD8 *alphaPtr,
                                                         int alphaPitch,
                                                         int width, int height,
                                                         int flags)
d1504 2
a1505 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d1507 6
a1512 5
   return (*pStatePriv->SetupForCPUToScreenAlphaTexture2)(pScrn, op, red, green,
                                                         blue, alpha, srcFormat,
							 dstFormat, alphaPtr,
							 alphaPitch, width,
							 height, flags);
d1515 6
a1520 6
static Bool XAAStateWrapSetupForCPUToScreenTexture2(ScrnInfoPtr pScrn, int op,
                                                    CARD32 srcFormat,
						    CARD32 dstFormat,
						    CARD8 *texPtr, int texPitch,
                                                    int width, int height,
                                                    int flags)
d1522 2
a1523 2
   GET_STATEPRIV_PSCRN(pScrn);
   STATE_CHECK_PSCRN(pScrn);
d1525 4
a1528 3
   return (*pStatePriv->SetupForCPUToScreenTexture2)(pScrn, op, srcFormat,
                                                    dstFormat, texPtr, texPitch,
						    width, height, flags);
d1535 19
a1553 17
   ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
   XAAStateWrapPtr pStatePriv;
   int i = 0;
   
   if (!dixRegisterPrivateKey(&XAAStateKeyRec, PRIVATE_SCREEN, 0)) return FALSE;
   if(!(pStatePriv = malloc(sizeof(XAAStateWrapRec)))) return FALSE;
   dixSetPrivate(&pScreen->devPrivates, XAAStateKey, pStatePriv);
   pStatePriv->RestoreAccelState = infoRec->RestoreAccelState;
   pStatePriv->pScrn = pScrn;
   
   /* Initialize the last screen to -1 so whenever an accel function
    * is called the proper state is setup
    */
   while(i < pScrn->numEntities) {
      xf86SetLastScrnFlag(pScrn->entityList[i], -1);
      i++;
   }
d1555 110
a1664 110
   XAA_STATE_WRAP(Sync);
   XAA_STATE_WRAP(SetupForScreenToScreenCopy);
   XAA_STATE_WRAP(SetupForSolidFill);
   XAA_STATE_WRAP(SetupForSolidLine);
   XAA_STATE_WRAP(SetupForDashedLine);
   XAA_STATE_WRAP(SetClippingRectangle);
   XAA_STATE_WRAP(DisableClipping);
   XAA_STATE_WRAP(SetupForMono8x8PatternFill);
   XAA_STATE_WRAP(SetupForColor8x8PatternFill);
   XAA_STATE_WRAP(SetupForCPUToScreenColorExpandFill);
   XAA_STATE_WRAP(SetupForScanlineCPUToScreenColorExpandFill);
   XAA_STATE_WRAP(SetupForScreenToScreenColorExpandFill);
   XAA_STATE_WRAP(SetupForImageWrite);
   XAA_STATE_WRAP(SetupForScanlineImageWrite);
   XAA_STATE_WRAP(SetupForImageRead);
   XAA_STATE_WRAP(ScreenToScreenBitBlt);
   XAA_STATE_WRAP(WriteBitmap);
   XAA_STATE_WRAP(FillSolidRects);
   XAA_STATE_WRAP(FillMono8x8PatternRects);
   XAA_STATE_WRAP(FillColor8x8PatternRects);
   XAA_STATE_WRAP(FillCacheBltRects);
   XAA_STATE_WRAP(FillColorExpandRects);
   XAA_STATE_WRAP(FillCacheExpandRects);
   XAA_STATE_WRAP(FillImageWriteRects);
   XAA_STATE_WRAP(FillSolidSpans);
   XAA_STATE_WRAP(FillMono8x8PatternSpans);
   XAA_STATE_WRAP(FillColor8x8PatternSpans);
   XAA_STATE_WRAP(FillCacheBltSpans);
   XAA_STATE_WRAP(FillColorExpandSpans);
   XAA_STATE_WRAP(FillCacheExpandSpans);
   XAA_STATE_WRAP(TEGlyphRenderer);
   XAA_STATE_WRAP(NonTEGlyphRenderer);
   XAA_STATE_WRAP(WritePixmap);
   XAA_STATE_WRAP(ReadPixmap);
   XAA_STATE_WRAP(CopyArea);
   XAA_STATE_WRAP(CopyPlane);
   XAA_STATE_WRAP(PushPixelsSolid);
   XAA_STATE_WRAP(PolyFillRectSolid);
   XAA_STATE_WRAP(PolyFillRectStippled);
   XAA_STATE_WRAP(PolyFillRectOpaqueStippled);
   XAA_STATE_WRAP(PolyFillRectTiled);
   XAA_STATE_WRAP(FillSpansSolid);
   XAA_STATE_WRAP(FillSpansStippled);
   XAA_STATE_WRAP(FillSpansOpaqueStippled);
   XAA_STATE_WRAP(FillSpansTiled);
   XAA_STATE_WRAP(PolyText8TE);
   XAA_STATE_WRAP(PolyText16TE);
   XAA_STATE_WRAP(ImageText8TE);
   XAA_STATE_WRAP(ImageText16TE);
   XAA_STATE_WRAP(ImageGlyphBltTE);
   XAA_STATE_WRAP(PolyGlyphBltTE);
   XAA_STATE_WRAP(PolyText8NonTE);
   XAA_STATE_WRAP(PolyText16NonTE);
   XAA_STATE_WRAP(ImageText8NonTE);
   XAA_STATE_WRAP(ImageText16NonTE);
   XAA_STATE_WRAP(ImageGlyphBltNonTE);
   XAA_STATE_WRAP(PolyGlyphBltNonTE);
   XAA_STATE_WRAP(PolyRectangleThinSolid);
   XAA_STATE_WRAP(PolylinesWideSolid);
   XAA_STATE_WRAP(PolylinesThinSolid);
   XAA_STATE_WRAP(PolySegmentThinSolid);
   XAA_STATE_WRAP(PolylinesThinDashed);
   XAA_STATE_WRAP(PolySegmentThinDashed);
   XAA_STATE_WRAP(FillPolygonSolid);
   XAA_STATE_WRAP(FillPolygonStippled);
   XAA_STATE_WRAP(FillPolygonOpaqueStippled);
   XAA_STATE_WRAP(FillPolygonTiled);
   XAA_STATE_WRAP(PolyFillArcSolid);
   XAA_STATE_WRAP(PutImage);
   XAA_STATE_WRAP(ValidateFillSpans);
   XAA_STATE_WRAP(ValidateSetSpans);
   XAA_STATE_WRAP(ValidatePutImage);
   XAA_STATE_WRAP(ValidateCopyArea);
   XAA_STATE_WRAP(ValidateCopyPlane);
   XAA_STATE_WRAP(ValidatePolyPoint);
   XAA_STATE_WRAP(ValidatePolylines);
   XAA_STATE_WRAP(ValidatePolySegment);
   XAA_STATE_WRAP(ValidatePolyRectangle);
   XAA_STATE_WRAP(ValidatePolyArc);
   XAA_STATE_WRAP(ValidateFillPolygon);
   XAA_STATE_WRAP(ValidatePolyFillRect);
   XAA_STATE_WRAP(ValidatePolyFillArc);
   XAA_STATE_WRAP(ValidatePolyText8);
   XAA_STATE_WRAP(ValidatePolyText16);
   XAA_STATE_WRAP(ValidateImageText8);
   XAA_STATE_WRAP(ValidateImageText16);
   XAA_STATE_WRAP(ValidatePolyGlyphBlt);
   XAA_STATE_WRAP(ValidateImageGlyphBlt);
   XAA_STATE_WRAP(ValidatePushPixels);
   XAA_STATE_WRAP(ComputeDash);
   XAA_STATE_WRAP(InitPixmapCache);
   XAA_STATE_WRAP(ClosePixmapCache);
   XAA_STATE_WRAP(StippledFillChooser);
   XAA_STATE_WRAP(OpaqueStippledFillChooser);
   XAA_STATE_WRAP(TiledFillChooser);
   XAA_STATE_WRAP(CacheTile);
   XAA_STATE_WRAP(CacheStipple);
   XAA_STATE_WRAP(CacheMonoStipple);
   XAA_STATE_WRAP(CacheMono8x8Pattern);
   XAA_STATE_WRAP(CacheColor8x8Pattern);
   XAA_STATE_WRAP(WriteBitmapToCache);
   XAA_STATE_WRAP(WritePixmapToCache);
   XAA_STATE_WRAP(WriteMono8x8PatternToCache);
   XAA_STATE_WRAP(WriteColor8x8PatternToCache);
   XAA_STATE_WRAP(GetImage);
   XAA_STATE_WRAP(GetSpans);
   XAA_STATE_WRAP(CopyWindow);
   XAA_STATE_WRAP(SetupForCPUToScreenAlphaTexture2);
   XAA_STATE_WRAP(SetupForCPUToScreenTexture2);
   return TRUE;
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a262 1
#ifdef RENDER
a272 1
#endif
d275 2
a276 2
static int XAAStateKeyIndex;
static DevPrivateKey XAAStateKey = &XAAStateKeyIndex;
a1457 1
#ifdef RENDER
a1493 1
#endif
d1503 2
a1504 1
   if(!(pStatePriv = xalloc(sizeof(XAAStateWrapRec)))) return FALSE;
a1623 1
#ifdef RENDER
a1625 1
#endif
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d277 2
a278 1
static DevPrivateKey XAAStateKey = &XAAStateKey;
@


1.1
log
@Initial revision
@
text
@a261 2
   PaintWindowBackgroundProcPtr PaintWindowBackground;
   PaintWindowBorderProcPtr PaintWindowBorder;
a262 2
   BackingStoreSaveAreasProcPtr SaveAreas;
   BackingStoreRestoreAreasProcPtr RestoreAreas;
d277 1
a277 2
static int XAAStateIndex = -1;
static unsigned long XAAStateGeneration = 0;
d281 1
a281 1
(XAAStateWrapPtr)(pGC->pScreen->devPrivates[XAAStateIndex].ptr)
d284 1
a284 1
(XAAStateWrapPtr)(pScreen->devPrivates[XAAStateIndex].ptr)
d287 1
a287 1
(XAAStateWrapPtr)(pScrn->pScreen->devPrivates[XAAStateIndex].ptr)
a1448 20
static void XAAStateWrapPaintWindowBackground(WindowPtr pWindow, RegionPtr pRegion,
					      int what)
{
   GET_STATEPRIV_SCREEN(pWindow->drawable.pScreen);
   STATE_CHECK_SP(pStatePriv);

   (*pStatePriv->PaintWindowBackground)(pWindow, pRegion,
					what);
}

static void XAAStateWrapPaintWindowBorder(WindowPtr pWindow, RegionPtr pRegion, 
					  int what)
{
   GET_STATEPRIV_SCREEN(pWindow->drawable.pScreen);
   STATE_CHECK_SP(pStatePriv);

   (*pStatePriv->PaintWindowBorder)(pWindow, pRegion, 
				    what);
}

a1458 20
static void XAAStateWrapSaveAreas(PixmapPtr pBackingPixmap, RegionPtr pObscured, int x, 
				  int y, WindowPtr pWin)
{
   GET_STATEPRIV_SCREEN(pBackingPixmap->drawable.pScreen);
   STATE_CHECK_SP(pStatePriv);

   (*pStatePriv->SaveAreas)(pBackingPixmap, pObscured, x, 
			    y, pWin);
}

static void XAAStateWrapRestoreAreas(PixmapPtr pBackingPixmap, RegionPtr pExposed,
				     int x, int y, WindowPtr pWin)
{
   GET_STATEPRIV_SCREEN(pBackingPixmap->drawable.pScreen);
   STATE_CHECK_SP(pStatePriv);

   (*pStatePriv->RestoreAreas)(pBackingPixmap, pExposed,
			       x, y, pWin);
}

a1505 4
   if (XAAStateGeneration != serverGeneration) {
      if((XAAStateIndex = AllocateScreenPrivateIndex()) < 0) return FALSE;
      XAAStateGeneration = serverGeneration;
   }
d1507 1
a1507 1
   pScreen->devPrivates[XAAStateIndex].ptr = (pointer)pStatePriv;   
a1624 2
   XAA_STATE_WRAP(PaintWindowBackground);
   XAA_STATE_WRAP(PaintWindowBorder);
a1625 2
   XAA_STATE_WRAP(SaveAreas);
   XAA_STATE_WRAP(RestoreAreas);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
