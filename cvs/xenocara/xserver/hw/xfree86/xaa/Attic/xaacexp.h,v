head	1.3;
access;
symbols
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.06.07.17.28.53;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2012.06.10.13.21.28;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.17.51;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.17.51;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@
#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/Xarch.h>

#ifndef FIXEDBASE
#define CHECKRETURN(b) if(width <= ((b) * 32)) return(base + (b))
#else
#define CHECKRETURN(b) if(width <= ((b) * 32)) return(base)
#endif

#if X_BYTE_ORDER == X_BIG_ENDIAN
#define SHIFT_L(value, shift) ((value) >> (shift))
#define SHIFT_R(value, shift) ((value) << (shift))
#else
#define SHIFT_L(value, shift) ((value) << (shift))
#define SHIFT_R(value, shift) ((value) >> (shift))
#endif

#ifndef MSBFIRST
#ifdef FIXEDBASE
#define WRITE_IN_BITORDER(dest, offset, data) *(dest) = data;
#else
#define WRITE_IN_BITORDER(dest, offset, data) *(dest + offset) = data;
#endif
#else
#ifdef FIXEDBASE
#define WRITE_IN_BITORDER(dest, offset, data) *(dest) = SWAP_BITS_IN_BYTES(data);
#else
#define WRITE_IN_BITORDER(dest, offset, data) *(dest + offset) = SWAP_BITS_IN_BYTES(data)
#endif
#endif

#ifdef FIXEDBASE
#ifdef MSBFIRST
#define WRITE_BITS(b)   *base = SWAP_BITS_IN_BYTES(b)
#define WRITE_BITS1(b) { \
	*base = byte_reversed_expand3[(b) & 0xFF] | \
		byte_reversed_expand3[((b) & 0xFF00) >> 8] << 24; }
#define WRITE_BITS2(b) { \
	*base = byte_reversed_expand3[(b) & 0xFF] | \
		byte_reversed_expand3[((b) & 0xFF00) >> 8] << 24; \
	*base = byte_reversed_expand3[((b) & 0xFF00) >> 8] >> 8 | \
		byte_reversed_expand3[((b) & 0xFF0000) >> 16] << 16; }
#define WRITE_BITS3(b) { \
	*base = byte_reversed_expand3[(b) & 0xFF] | \
		byte_reversed_expand3[((b) & 0xFF00) >> 8] << 24; \
	*base = byte_reversed_expand3[((b) & 0xFF00) >> 8] >> 8 | \
		byte_reversed_expand3[((b) & 0xFF0000) >> 16] << 16; \
	*base = byte_reversed_expand3[((b) & 0xFF0000) >> 16] >> 16 | \
		byte_reversed_expand3[((b) & 0xFF000000) >> 24] << 8; }
#else
#define WRITE_BITS(b)   *base = (b)
#define WRITE_BITS1(b) { \
	*base = byte_expand3[(b) & 0xFF] | \
		byte_expand3[((b) & 0xFF00) >> 8] << 24; }
#define WRITE_BITS2(b) { \
	*base = byte_expand3[(b) & 0xFF] | \
		byte_expand3[((b) & 0xFF00) >> 8] << 24; \
	*base = byte_expand3[((b) & 0xFF00) >> 8] >> 8 | \
		byte_expand3[((b) & 0xFF0000) >> 16] << 16; }
#define WRITE_BITS3(b) { \
	*base = byte_expand3[(b) & 0xFF] | \
		byte_expand3[((b) & 0xFF00) >> 8] << 24; \
	*base = byte_expand3[((b) & 0xFF00) >> 8] >> 8 | \
		byte_expand3[((b) & 0xFF0000) >> 16] << 16; \
	*base = byte_expand3[((b) & 0xFF0000) >> 16] >> 16 | \
		byte_expand3[((b) & 0xFF000000) >> 24] << 8; }
#endif
#else
#ifdef MSBFIRST
#define WRITE_BITS(b)   *(base++) = SWAP_BITS_IN_BYTES(b)
#define WRITE_BITS1(b) { \
	*(base++) = byte_reversed_expand3[(b) & 0xFF] | \
		byte_reversed_expand3[((b) & 0xFF00) >> 8] << 24; }
#define WRITE_BITS2(b) { \
	*(base) = byte_reversed_expand3[(b) & 0xFF] | \
		byte_reversed_expand3[((b) & 0xFF00) >> 8] << 24; \
	*(base + 1) = byte_reversed_expand3[((b) & 0xFF00) >> 8] >> 8 | \
		byte_reversed_expand3[((b) & 0xFF0000) >> 16] << 16; \
	base += 2; }
#define WRITE_BITS3(b) { \
	*(base) = byte_reversed_expand3[(b) & 0xFF] | \
		byte_reversed_expand3[((b) & 0xFF00) >> 8] << 24; \
	*(base + 1) = byte_reversed_expand3[((b) & 0xFF00) >> 8] >> 8 | \
		byte_reversed_expand3[((b) & 0xFF0000) >> 16] << 16; \
	*(base + 2) = byte_reversed_expand3[((b) & 0xFF0000) >> 16] >> 16 | \
		byte_reversed_expand3[((b) & 0xFF000000) >> 24] << 8; \
	base += 3; }
#else
#define WRITE_BITS(b)   *(base++) = (b)
#define WRITE_BITS1(b) { \
	*(base++) = byte_expand3[(b) & 0xFF] | \
		byte_expand3[((b) & 0xFF00) >> 8] << 24; }
#define WRITE_BITS2(b) { \
	*(base) = byte_expand3[(b) & 0xFF] | \
		byte_expand3[((b) & 0xFF00) >> 8] << 24; \
	*(base + 1) = byte_expand3[((b) & 0xFF00) >> 8] >> 8 | \
		byte_expand3[((b) & 0xFF0000) >> 16] << 16; \
	base += 2; }
#define WRITE_BITS3(b) { \
	*(base) = byte_expand3[(b) & 0xFF] | \
		byte_expand3[((b) & 0xFF00) >> 8] << 24; \
	*(base + 1) = byte_expand3[((b) & 0xFF00) >> 8] >> 8 | \
		byte_expand3[((b) & 0xFF0000) >> 16] << 16; \
	*(base + 2) = byte_expand3[((b) & 0xFF0000) >> 16] >> 16 | \
		byte_expand3[((b) & 0xFF000000) >> 24] << 8; \
	base += 3; }
#endif
#endif

#ifdef FIXEDBASE
#ifdef MSBFIRST
#define EXPNAME(x) x##MSBFirstFixedBase
#else
#define EXPNAME(x) x##LSBFirstFixedBase
#endif
#else
#ifdef MSBFIRST
#define EXPNAME(x) x##MSBFirst
#else
#define EXPNAME(x) x##LSBFirst
#endif
#endif
@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.1
log
@Initial revision
@
text
@a1 1

d15 2
a16 2
# define SHIFT_L(value, shift) ((value) >> (shift))
# define SHIFT_R(value, shift) ((value) << (shift))
d18 2
a19 2
# define SHIFT_L(value, shift) ((value) << (shift))
# define SHIFT_R(value, shift) ((value) >> (shift))
d23 11
a33 11
# ifdef FIXEDBASE
#   define WRITE_IN_BITORDER(dest, offset, data) *(dest) = data; 
# else  
#   define WRITE_IN_BITORDER(dest, offset, data) *(dest + offset) = data;
# endif
#else	
# ifdef FIXEDBASE
#   define WRITE_IN_BITORDER(dest, offset, data) *(dest) = SWAP_BITS_IN_BYTES(data);
# else  
#   define WRITE_IN_BITORDER(dest, offset, data) *(dest + offset) = SWAP_BITS_IN_BYTES(data)
# endif
d37 3
a39 3
# ifdef MSBFIRST
#  define WRITE_BITS(b)   *base = SWAP_BITS_IN_BYTES(b)
#  define WRITE_BITS1(b) { \
d42 1
a42 1
#  define WRITE_BITS2(b) { \
d47 1
a47 1
#  define WRITE_BITS3(b) { \
d54 3
a56 3
# else
#  define WRITE_BITS(b)   *base = (b)
#  define WRITE_BITS1(b) { \
d59 1
a59 1
#  define WRITE_BITS2(b) { \
d64 1
a64 1
#  define WRITE_BITS3(b) { \
d71 1
a71 1
# endif
d73 3
a75 3
# ifdef MSBFIRST
#  define WRITE_BITS(b)   *(base++) = SWAP_BITS_IN_BYTES(b)
#  define WRITE_BITS1(b) { \
d78 1
a78 1
#  define WRITE_BITS2(b) { \
d84 1
a84 1
#  define WRITE_BITS3(b) { \
d92 3
a94 3
# else
#  define WRITE_BITS(b)   *(base++) = (b)
#  define WRITE_BITS1(b) { \
d97 1
a97 1
#  define WRITE_BITS2(b) { \
d103 1
a103 1
#  define WRITE_BITS3(b) { \
d111 1
a111 1
# endif
d115 11
a125 11
# ifdef MSBFIRST
#  define EXPNAME(x) x##MSBFirstFixedBase
# else
#  define EXPNAME(x) x##LSBFirstFixedBase
# endif
#else
# ifdef MSBFIRST
#  define EXPNAME(x) x##MSBFirst
# else
#  define EXPNAME(x) x##LSBFirst
# endif
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
