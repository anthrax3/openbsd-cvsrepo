head	1.6;
access;
symbols
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.06.07.17.28.53;	author matthieu;	state dead;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.27;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.52;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.17.42;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.17.42;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@
/* 
   This is a lighter version of cfbBitBlt.  We calculate the boxes
   when accelerating pixmap->screen and screen->screen copies. 
   We also pass the GC to the doBitBlt function so that it has access
   to the fg and bg so CopyPlane can use this. 
*/

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "misc.h"
#include "xf86.h"
#include "xf86_OSproc.h"

#include <X11/X.h>
#include "mi.h"
#include "pixmapstr.h"
#include "gcstruct.h"
#include "windowstr.h"
#include "xaalocal.h"

RegionPtr
XAABitBlt(DrawablePtr pSrcDrawable,
          DrawablePtr pDstDrawable,
          GC * pGC,
          int srcx, int srcy,
          int width, int height,
          int dstx, int dsty,
          void (*doBitBlt) (DrawablePtr, DrawablePtr, GCPtr, RegionPtr,
                            DDXPointPtr), unsigned long bitPlane)
{

    RegionPtr prgnSrcClip = NULL;       /* may be a new region, or just a copy */
    RegionPtr prgnExposed;
    Bool freeSrcClip = FALSE;
    RegionRec rgnDst;
    DDXPointPtr pptSrc, ppt;
    DDXPointRec origDest;
    BoxPtr pbox;
    BoxRec fastBox;
    int i, dx, dy, numRects;
    xRectangle origSource;
    int fastClip = 0;           /* for fast clipping with pixmap source */
    int fastExpose = 0;         /* for fast exposures with pixmap source */

    origSource.x = srcx;
    origSource.y = srcy;
    origSource.width = width;
    origSource.height = height;
    origDest.x = dstx;
    origDest.y = dsty;

    if (pSrcDrawable->pScreen->SourceValidate) {
        (*pSrcDrawable->pScreen->SourceValidate) (pSrcDrawable, srcx, srcy,
                                                  width, height,
                                                  pGC->subWindowMode);
    }

    srcx += pSrcDrawable->x;
    srcy += pSrcDrawable->y;

    /* clip the source */
    if (pSrcDrawable->type == DRAWABLE_PIXMAP) {
        if ((pSrcDrawable == pDstDrawable) && (pGC->clientClipType == CT_NONE))
            prgnSrcClip = pGC->pCompositeClip;
        else
            fastClip = 1;
    }
    else {                      /* Window */
        if (pGC->subWindowMode == IncludeInferiors) {
            if (!((WindowPtr) pSrcDrawable)->parent) {
                /*
                 * special case bitblt from root window in
                 * IncludeInferiors mode; just like from a pixmap
                 */
                fastClip = 1;
            }
            else if ((pSrcDrawable == pDstDrawable) &&
                     (pGC->clientClipType == CT_NONE)) {
                prgnSrcClip = pGC->pCompositeClip;
            }
            else {
                prgnSrcClip = NotClippedByChildren((WindowPtr) pSrcDrawable);
                freeSrcClip = TRUE;
            }
        }
        else {
            prgnSrcClip = &((WindowPtr) pSrcDrawable)->clipList;
        }
    }

    fastBox.x1 = srcx;
    fastBox.y1 = srcy;
    fastBox.x2 = srcx + width;
    fastBox.y2 = srcy + height;

    /* Don't create a source region if we are doing a fast clip */
    if (fastClip) {
        fastExpose = 1;
        /*
         * clip the source; if regions extend beyond the source size,
         * make sure exposure events get sent
         */
        if (fastBox.x1 < pSrcDrawable->x) {
            fastBox.x1 = pSrcDrawable->x;
            fastExpose = 0;
        }
        if (fastBox.y1 < pSrcDrawable->y) {
            fastBox.y1 = pSrcDrawable->y;
            fastExpose = 0;
        }
        if (fastBox.x2 > pSrcDrawable->x + (int) pSrcDrawable->width) {
            fastBox.x2 = pSrcDrawable->x + (int) pSrcDrawable->width;
            fastExpose = 0;
        }
        if (fastBox.y2 > pSrcDrawable->y + (int) pSrcDrawable->height) {
            fastBox.y2 = pSrcDrawable->y + (int) pSrcDrawable->height;
            fastExpose = 0;
        }
    }
    else {
        RegionInit(&rgnDst, &fastBox, 1);
        RegionIntersect(&rgnDst, &rgnDst, prgnSrcClip);
    }

    dstx += pDstDrawable->x;
    dsty += pDstDrawable->y;

    if (pDstDrawable->type == DRAWABLE_WINDOW) {
        if (!((WindowPtr) pDstDrawable)->realized) {
            if (!fastClip)
                RegionUninit(&rgnDst);
            if (freeSrcClip)
                RegionDestroy(prgnSrcClip);
            return NULL;
        }
    }

    dx = srcx - dstx;
    dy = srcy - dsty;

    /* Translate and clip the dst to the destination composite clip */
    if (fastClip) {
        RegionPtr cclip;

        /* Translate the region directly */
        fastBox.x1 -= dx;
        fastBox.x2 -= dx;
        fastBox.y1 -= dy;
        fastBox.y2 -= dy;

        /* If the destination composite clip is one rectangle we can
           do the clip directly.  Otherwise we have to create a full
           blown region and call intersect */

        cclip = pGC->pCompositeClip;
        if (RegionNumRects(cclip) == 1) {
            BoxPtr pBox = RegionRects(cclip);

            if (fastBox.x1 < pBox->x1)
                fastBox.x1 = pBox->x1;
            if (fastBox.x2 > pBox->x2)
                fastBox.x2 = pBox->x2;
            if (fastBox.y1 < pBox->y1)
                fastBox.y1 = pBox->y1;
            if (fastBox.y2 > pBox->y2)
                fastBox.y2 = pBox->y2;

            /* Check to see if the region is empty */
            if (fastBox.x1 >= fastBox.x2 || fastBox.y1 >= fastBox.y2) {
                RegionNull(&rgnDst);
            }
            else {
                RegionInit(&rgnDst, &fastBox, 1);
            }
        }
        else {
            /* We must turn off fastClip now, since we must create
               a full blown region.  It is intersected with the
               composite clip below. */
            fastClip = 0;
            RegionInit(&rgnDst, &fastBox, 1);
        }
    }
    else {
        RegionTranslate(&rgnDst, -dx, -dy);
    }

    if (!fastClip) {
        RegionIntersect(&rgnDst, &rgnDst, pGC->pCompositeClip);
    }

    /* Do bit blitting */
    numRects = RegionNumRects(&rgnDst);
    if (numRects && width && height) {
        if (!(pptSrc = (DDXPointPtr) malloc(numRects * sizeof(DDXPointRec)))) {
            RegionUninit(&rgnDst);
            if (freeSrcClip)
                RegionDestroy(prgnSrcClip);
            return NULL;
        }
        pbox = RegionRects(&rgnDst);
        ppt = pptSrc;
        for (i = numRects; --i >= 0; pbox++, ppt++) {
            ppt->x = pbox->x1 + dx;
            ppt->y = pbox->y1 + dy;
        }

        (*doBitBlt) (pSrcDrawable, pDstDrawable, pGC, &rgnDst, pptSrc);
        free(pptSrc);
    }

    prgnExposed = NULL;
    if (pGC->fExpose) {
        /* Pixmap sources generate a NoExposed (we return NULL to do this) */
        if (!fastExpose)
            prgnExposed = miHandleExposures(pSrcDrawable, pDstDrawable, pGC,
                                            origSource.x, origSource.y,
                                            (int) origSource.width,
                                            (int) origSource.height,
                                            origDest.x, origDest.y, bitPlane);
    }
    RegionUninit(&rgnDst);
    if (freeSrcClip)
        RegionDestroy(prgnSrcClip);
    return prgnExposed;
}
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.4
log
@Update to xserver 1.11.2
@
text
@a23 1

d25 8
a32 9
XAABitBlt(
    DrawablePtr pSrcDrawable,
    DrawablePtr pDstDrawable,
    GC *pGC,
    int srcx, int srcy,
    int width, int height,
    int dstx, int dsty,
    void (*doBitBlt)(DrawablePtr, DrawablePtr, GCPtr, RegionPtr, DDXPointPtr),
    unsigned long bitPlane )
d35 1
a35 1
    RegionPtr prgnSrcClip = NULL; /* may be a new region, or just a copy */
d45 2
a46 2
    int fastClip = 0;		/* for fast clipping with pixmap source */
    int fastExpose = 0;		/* for fast exposures with pixmap source */
d56 3
a58 3
	(*pSrcDrawable->pScreen->SourceValidate) (
			pSrcDrawable, srcx, srcy, width, height,
			pGC->subWindowMode);
d66 26
a91 22
	if ((pSrcDrawable == pDstDrawable) && (pGC->clientClipType == CT_NONE))
	    prgnSrcClip = pGC->pCompositeClip;
	else
	    fastClip = 1;
    } else {	/* Window */
	if (pGC->subWindowMode == IncludeInferiors) {
	    if (!((WindowPtr) pSrcDrawable)->parent) {
		/*
		 * special case bitblt from root window in
		 * IncludeInferiors mode; just like from a pixmap
		 */
		fastClip = 1;
	    } else if ((pSrcDrawable == pDstDrawable) &&
		(pGC->clientClipType == CT_NONE)) {
		prgnSrcClip = pGC->pCompositeClip;
	    } else {
		prgnSrcClip = NotClippedByChildren((WindowPtr)pSrcDrawable);
		freeSrcClip = TRUE;
	    }
	} else {
	    prgnSrcClip = &((WindowPtr)pSrcDrawable)->clipList;
	}
d101 25
a125 24
	fastExpose = 1;
	/*
	 * clip the source; if regions extend beyond the source size,
 	 * make sure exposure events get sent
	 */
	if (fastBox.x1 < pSrcDrawable->x) {
	    fastBox.x1 = pSrcDrawable->x;
	    fastExpose = 0;
	} 
	if (fastBox.y1 < pSrcDrawable->y) {
	    fastBox.y1 = pSrcDrawable->y;
	    fastExpose = 0;
	}
	if (fastBox.x2 > pSrcDrawable->x + (int) pSrcDrawable->width) {
	    fastBox.x2 = pSrcDrawable->x + (int) pSrcDrawable->width;
	    fastExpose = 0;
	}
	if (fastBox.y2 > pSrcDrawable->y + (int) pSrcDrawable->height) {
	    fastBox.y2 = pSrcDrawable->y + (int) pSrcDrawable->height;
	    fastExpose = 0;
	}
    } else {
	RegionInit(&rgnDst, &fastBox, 1);
	RegionIntersect(&rgnDst, &rgnDst, prgnSrcClip);
d132 7
a138 7
	if (!((WindowPtr)pDstDrawable)->realized) {
	    if (!fastClip)
		RegionUninit(&rgnDst);
	    if (freeSrcClip)
		RegionDestroy(prgnSrcClip);
	    return NULL;
	}
d146 1
a146 1
	RegionPtr cclip;
d154 3
a156 3
	/* If the destination composite clip is one rectangle we can
	   do the clip directly.  Otherwise we have to create a full
	   blown region and call intersect */
d158 1
a158 1
	cclip = pGC->pCompositeClip;
d160 1
a160 1
	    BoxPtr pBox = RegionRects(cclip);
d162 26
a187 19
	    if (fastBox.x1 < pBox->x1) fastBox.x1 = pBox->x1;
	    if (fastBox.x2 > pBox->x2) fastBox.x2 = pBox->x2;
	    if (fastBox.y1 < pBox->y1) fastBox.y1 = pBox->y1;
	    if (fastBox.y2 > pBox->y2) fastBox.y2 = pBox->y2;

	    /* Check to see if the region is empty */
	    if (fastBox.x1 >= fastBox.x2 || fastBox.y1 >= fastBox.y2) {
		RegionNull(&rgnDst);
	    } else {
		RegionInit(&rgnDst, &fastBox, 1);
	    }
	} else {
	    /* We must turn off fastClip now, since we must create
	       a full blown region.  It is intersected with the
	       composite clip below. */
	    fastClip = 0;
	    RegionInit(&rgnDst, &fastBox,1);
	}
    } else {
d192 1
a192 2
	RegionIntersect(&rgnDst, &rgnDst,
				 pGC->pCompositeClip);
d198 12
a209 13
	if(!(pptSrc = (DDXPointPtr)malloc(numRects *
						  sizeof(DDXPointRec)))) {
	    RegionUninit(&rgnDst);
	    if (freeSrcClip)
		RegionDestroy(prgnSrcClip);
	    return NULL;
	}
	pbox = RegionRects(&rgnDst);
	ppt = pptSrc;
	for (i = numRects; --i >= 0; pbox++, ppt++) {
	    ppt->x = pbox->x1 + dx;
	    ppt->y = pbox->y1 + dy;
	}
d211 2
a212 2
	(*doBitBlt) (pSrcDrawable, pDstDrawable, pGC, &rgnDst, pptSrc);
	free(pptSrc);
d219 5
a223 5
	    prgnExposed = miHandleExposures(pSrcDrawable, pDstDrawable, pGC,
				  origSource.x, origSource.y,
				  (int)origSource.width,
				  (int)origSource.height,
				  origDest.x, origDest.y, bitPlane);
d227 1
a227 1
	RegionDestroy(prgnSrcClip);
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d57 1
a57 2
    if((pSrcDrawable != pDstDrawable) && 
			pSrcDrawable->pScreen->SourceValidate) {
d59 2
a60 1
			pSrcDrawable, srcx, srcy, width, height);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d121 2
a122 2
	REGION_INIT(pGC->pScreen, &rgnDst, &fastBox, 1);
	REGION_INTERSECT(pGC->pScreen, &rgnDst, &rgnDst, prgnSrcClip);
d131 1
a131 1
		REGION_UNINIT(pGC->pScreen, &rgnDst);
d133 1
a133 1
		REGION_DESTROY(pGC->pScreen, prgnSrcClip);
d156 2
a157 2
        if (REGION_NUM_RECTS(cclip) == 1) {
	    BoxPtr pBox = REGION_RECTS(cclip);
d166 1
a166 1
		REGION_NULL(pGC->pScreen, &rgnDst);
d168 1
a168 1
		REGION_INIT(pGC->pScreen, &rgnDst, &fastBox, 1);
d175 1
a175 1
	    REGION_INIT(pGC->pScreen, &rgnDst, &fastBox,1);
d178 1
a178 1
        REGION_TRANSLATE(pGC->pScreen, &rgnDst, -dx, -dy);
d182 1
a182 1
	REGION_INTERSECT(pGC->pScreen, &rgnDst, &rgnDst,
d187 1
a187 1
    numRects = REGION_NUM_RECTS(&rgnDst);
d189 1
a189 1
	if(!(pptSrc = (DDXPointPtr)xalloc(numRects *
d191 1
a191 1
	    REGION_UNINIT(pGC->pScreen, &rgnDst);
d193 1
a193 1
		REGION_DESTROY(pGC->pScreen, prgnSrcClip);
d196 1
a196 1
	pbox = REGION_RECTS(&rgnDst);
d204 1
a204 1
	xfree(pptSrc);
d217 1
a217 1
    REGION_UNINIT(pGC->pScreen, &rgnDst);
d219 1
a219 1
	REGION_DESTROY(pGC->pScreen, prgnSrcClip);
@


1.1
log
@Initial revision
@
text
@d189 1
a189 1
	if(!(pptSrc = (DDXPointPtr)ALLOCATE_LOCAL(numRects *
d204 1
a204 1
	DEALLOCATE_LOCAL(pptSrc);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
