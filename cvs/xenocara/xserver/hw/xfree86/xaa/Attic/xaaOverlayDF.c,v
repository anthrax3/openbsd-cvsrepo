head	1.6;
access;
symbols
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.06.07.17.28.53;	author matthieu;	state dead;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.28;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.28;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.17.41;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.17.41;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@/*
   Copyright (c) 1999 - The XFree86 Project Inc.

   Written by Mark Vojkovich
*/

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "misc.h"
#include "xf86.h"
#include "xf86_OSproc.h"

#include <X11/X.h>
#include "scrnintstr.h"
#include "pixmapstr.h"
#include "windowstr.h"
#include "xf86str.h"
#include "mi.h"
#include "miline.h"
#include "xaa.h"
#include "xaalocal.h"
#include "xaawrap.h"
#include "servermd.h"

/* Screen funcs */

static void XAAOverCopyWindow(WindowPtr, DDXPointRec, RegionPtr);
static void XAAOverWindowExposures(WindowPtr, RegionPtr, RegionPtr);

static int XAAOverStippledFillChooser(GCPtr);
static int XAAOverOpaqueStippledFillChooser(GCPtr);
static int XAAOverTiledFillChooser(GCPtr);

/* GC funcs */

static RegionPtr XAAOverCopyArea(DrawablePtr, DrawablePtr, GC *,
                                 int, int, int, int, int, int);
static RegionPtr XAAOverCopyPlane(DrawablePtr, DrawablePtr, GCPtr,
                                  int, int, int, int, int, int, unsigned long);
static void XAAOverPushPixelsSolid(GCPtr, PixmapPtr, DrawablePtr, int,
                                   int, int, int);
static void XAAOverPolyFillRectSolid(DrawablePtr, GCPtr, int, xRectangle *);
static void XAAOverPolyFillRectStippled(DrawablePtr, GCPtr, int, xRectangle *);
static void XAAOverPolyFillRectOpaqueStippled(DrawablePtr, GCPtr,
                                              int, xRectangle *);
static void XAAOverPolyFillRectTiled(DrawablePtr, GCPtr, int, xRectangle *);
static void XAAOverFillSpansSolid(DrawablePtr, GCPtr, int, DDXPointPtr,
                                  int *, int);
static void XAAOverFillSpansStippled(DrawablePtr, GCPtr, int, DDXPointPtr,
                                     int *, int);
static void XAAOverFillSpansOpaqueStippled(DrawablePtr, GCPtr, int,
                                           DDXPointPtr, int *, int);
static void XAAOverFillSpansTiled(DrawablePtr, GCPtr, int, DDXPointPtr,
                                  int *, int);
static int XAAOverPolyText8TE(DrawablePtr, GCPtr, int, int, int, char *);
static int XAAOverPolyText16TE(DrawablePtr, GCPtr, int, int, int,
                               unsigned short *);
static void XAAOverImageText8TE(DrawablePtr, GCPtr, int, int, int, char *);
static void XAAOverImageText16TE(DrawablePtr, GCPtr, int, int, int,
                                 unsigned short *);
static void XAAOverImageGlyphBltTE(DrawablePtr, GCPtr, int, int,
                                   unsigned int, CharInfoPtr *, pointer);
static void XAAOverPolyGlyphBltTE(DrawablePtr, GCPtr, int, int,
                                  unsigned int, CharInfoPtr *, pointer);
static int XAAOverPolyText8NonTE(DrawablePtr, GCPtr, int, int, int, char *);
static int XAAOverPolyText16NonTE(DrawablePtr, GCPtr, int, int, int,
                                  unsigned short *);
static void XAAOverImageText8NonTE(DrawablePtr, GCPtr, int, int, int, char *);
static void XAAOverImageText16NonTE(DrawablePtr, GCPtr, int, int, int,
                                    unsigned short *);
static void XAAOverImageGlyphBltNonTE(DrawablePtr, GCPtr, int, int,
                                      unsigned int, CharInfoPtr *, pointer);
static void XAAOverPolyGlyphBltNonTE(DrawablePtr, GCPtr, int, int,
                                     unsigned int, CharInfoPtr *, pointer);
static void XAAOverPolyRectangleThinSolid(DrawablePtr, GCPtr, int,
                                          xRectangle *);
static void XAAOverPolylinesWideSolid(DrawablePtr, GCPtr, int, int,
                                      DDXPointPtr);
static void XAAOverPolylinesThinSolid(DrawablePtr, GCPtr, int, int,
                                      DDXPointPtr);
static void XAAOverPolySegmentThinSolid(DrawablePtr, GCPtr, int, xSegment *);
static void XAAOverPolylinesThinDashed(DrawablePtr, GCPtr, int, int,
                                       DDXPointPtr);
static void XAAOverPolySegmentThinDashed(DrawablePtr, GCPtr, int, xSegment *);
static void XAAOverFillPolygonSolid(DrawablePtr, GCPtr, int, int, int,
                                    DDXPointPtr);
static void XAAOverFillPolygonStippled(DrawablePtr, GCPtr, int, int, int,
                                       DDXPointPtr);
static void XAAOverFillPolygonOpaqueStippled(DrawablePtr, GCPtr, int, int, int,
                                             DDXPointPtr);
static void XAAOverFillPolygonTiled(DrawablePtr, GCPtr, int, int, int,
                                    DDXPointPtr);
static void XAAOverPolyFillArcSolid(DrawablePtr, GCPtr, int, xArc *);
static void XAAOverPutImage(DrawablePtr, GCPtr, int, int, int, int, int,
                            int, int, char *);

typedef struct {
    ScrnInfoPtr pScrn;
    DepthChangeFuncPtr callback;
    int currentDepth;
/* GC funcs */
    RegionPtr (*CopyArea) (DrawablePtr, DrawablePtr, GC *,
                           int, int, int, int, int, int);
    RegionPtr (*CopyPlane) (DrawablePtr, DrawablePtr, GCPtr,
                            int, int, int, int, int, int, unsigned long);
    void (*PushPixelsSolid) (GCPtr, PixmapPtr, DrawablePtr, int, int, int, int);
    void (*PolyFillRectSolid) (DrawablePtr, GCPtr, int, xRectangle *);
    void (*PolyFillRectStippled) (DrawablePtr, GCPtr, int, xRectangle *);
    void (*PolyFillRectOpaqueStippled) (DrawablePtr, GCPtr, int, xRectangle *);
    void (*PolyFillRectTiled) (DrawablePtr, GCPtr, int, xRectangle *);
    void (*FillSpansSolid) (DrawablePtr, GCPtr, int, DDXPointPtr, int *, int);
    void (*FillSpansStippled) (DrawablePtr, GCPtr, int, DDXPointPtr, int *,
                               int);
    void (*FillSpansOpaqueStippled) (DrawablePtr, GCPtr, int, DDXPointPtr,
                                     int *, int);
    void (*FillSpansTiled) (DrawablePtr, GCPtr, int, DDXPointPtr, int *, int);
    int (*PolyText8TE) (DrawablePtr, GCPtr, int, int, int, char *);
    int (*PolyText16TE) (DrawablePtr, GCPtr, int, int, int, unsigned short *);
    void (*ImageText8TE) (DrawablePtr, GCPtr, int, int, int, char *);
    void (*ImageText16TE) (DrawablePtr, GCPtr, int, int, int, unsigned short *);
    void (*ImageGlyphBltTE) (DrawablePtr, GCPtr, int, int, unsigned int,
                             CharInfoPtr *, pointer);
    void (*PolyGlyphBltTE) (DrawablePtr, GCPtr, int, int, unsigned int,
                            CharInfoPtr *, pointer);
    int (*PolyText8NonTE) (DrawablePtr, GCPtr, int, int, int, char *);
    int (*PolyText16NonTE) (DrawablePtr, GCPtr, int, int, int,
                            unsigned short *);
    void (*ImageText8NonTE) (DrawablePtr, GCPtr, int, int, int, char *);
    void (*ImageText16NonTE) (DrawablePtr, GCPtr, int, int, int,
                              unsigned short *);
    void (*ImageGlyphBltNonTE) (DrawablePtr, GCPtr, int, int, unsigned int,
                                CharInfoPtr *, pointer);
    void (*PolyGlyphBltNonTE) (DrawablePtr, GCPtr, int, int, unsigned int,
                               CharInfoPtr *, pointer);
    void (*PolyRectangleThinSolid) (DrawablePtr, GCPtr, int, xRectangle *);
    void (*PolylinesWideSolid) (DrawablePtr, GCPtr, int, int, DDXPointPtr);

    void (*PolylinesThinSolid) (DrawablePtr, GCPtr, int, int, DDXPointPtr);
    void (*PolySegmentThinSolid) (DrawablePtr, GCPtr, int, xSegment *);
    void (*PolylinesThinDashed) (DrawablePtr, GCPtr, int, int, DDXPointPtr);
    void (*PolySegmentThinDashed) (DrawablePtr, GCPtr, int, xSegment *);
    void (*FillPolygonSolid) (DrawablePtr, GCPtr, int, int, int, DDXPointPtr);
    void (*FillPolygonStippled) (DrawablePtr, GCPtr, int, int, int,
                                 DDXPointPtr);
    void (*FillPolygonOpaqueStippled) (DrawablePtr, GCPtr, int, int, int,
                                       DDXPointPtr);
    void (*FillPolygonTiled) (DrawablePtr, GCPtr, int, int, int, DDXPointPtr);
    void (*PolyFillArcSolid) (DrawablePtr, GCPtr, int, xArc *);
    void (*PutImage) (DrawablePtr, GCPtr, int, int, int, int, int, int,
                      int, char *);
    int (*StippledFillChooser) (GCPtr);
    int (*OpaqueStippledFillChooser) (GCPtr);
    int (*TiledFillChooser) (GCPtr);
} XAAOverlayRec, *XAAOverlayPtr;

static DevPrivateKeyRec XAAOverlayKeyRec;

#define XAAOverlayKey (&XAAOverlayKeyRec)

#define GET_OVERLAY_PRIV(pScreen) \
    (XAAOverlayPtr)dixLookupPrivate(&(pScreen)->devPrivates, XAAOverlayKey)

#define SWITCH_DEPTH(d) \
   if(pOverPriv->currentDepth != d) { \
	(*pOverPriv->callback)(pOverPriv->pScrn, d); \
	pOverPriv->currentDepth = d; \
   }

Bool
XAAInitDualFramebufferOverlay(ScreenPtr pScreen, DepthChangeFuncPtr callback)
{
    ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_SCREEN(pScreen);
    XAAOverlayPtr pOverPriv;

    if (!dixRegisterPrivateKey(&XAAOverlayKeyRec, PRIVATE_SCREEN, 0))
        return FALSE;

    if (!(pOverPriv = malloc(sizeof(XAAOverlayRec))))
        return FALSE;

    dixSetPrivate(&pScreen->devPrivates, XAAOverlayKey, pOverPriv);

    pOverPriv->pScrn = pScrn;
    pOverPriv->callback = callback;
    pOverPriv->currentDepth = -1;

    /* Overwrite key screen functions.  The XAA core will clean up */

    pScreen->CopyWindow = XAAOverCopyWindow;
    pScreen->WindowExposures = XAAOverWindowExposures;

    pOverPriv->StippledFillChooser = infoRec->StippledFillChooser;
    pOverPriv->OpaqueStippledFillChooser = infoRec->OpaqueStippledFillChooser;
    pOverPriv->TiledFillChooser = infoRec->TiledFillChooser;

    infoRec->StippledFillChooser = XAAOverStippledFillChooser;
    infoRec->OpaqueStippledFillChooser = XAAOverOpaqueStippledFillChooser;
    infoRec->TiledFillChooser = XAAOverTiledFillChooser;

    /* wrap all XAA GC rendering */

    pOverPriv->CopyArea = infoRec->CopyArea;
    pOverPriv->CopyPlane = infoRec->CopyPlane;
    pOverPriv->PushPixelsSolid = infoRec->PushPixelsSolid;
    pOverPriv->PolyFillRectSolid = infoRec->PolyFillRectSolid;
    pOverPriv->PolyFillRectStippled = infoRec->PolyFillRectStippled;
    pOverPriv->PolyFillRectOpaqueStippled = infoRec->PolyFillRectOpaqueStippled;
    pOverPriv->PolyFillRectTiled = infoRec->PolyFillRectTiled;
    pOverPriv->FillSpansSolid = infoRec->FillSpansSolid;
    pOverPriv->FillSpansStippled = infoRec->FillSpansStippled;
    pOverPriv->FillSpansOpaqueStippled = infoRec->FillSpansOpaqueStippled;
    pOverPriv->FillSpansTiled = infoRec->FillSpansTiled;
    pOverPriv->PolyText8TE = infoRec->PolyText8TE;
    pOverPriv->PolyText16TE = infoRec->PolyText16TE;
    pOverPriv->ImageText8TE = infoRec->ImageText8TE;
    pOverPriv->ImageText16TE = infoRec->ImageText16TE;
    pOverPriv->ImageGlyphBltTE = infoRec->ImageGlyphBltTE;
    pOverPriv->PolyGlyphBltTE = infoRec->PolyGlyphBltTE;
    pOverPriv->PolyText8NonTE = infoRec->PolyText8NonTE;
    pOverPriv->PolyText16NonTE = infoRec->PolyText16NonTE;
    pOverPriv->ImageText8NonTE = infoRec->ImageText8NonTE;
    pOverPriv->ImageText16NonTE = infoRec->ImageText16NonTE;
    pOverPriv->ImageGlyphBltNonTE = infoRec->ImageGlyphBltNonTE;
    pOverPriv->PolyGlyphBltNonTE = infoRec->PolyGlyphBltNonTE;
    pOverPriv->PolyRectangleThinSolid = infoRec->PolyRectangleThinSolid;
    pOverPriv->PolylinesWideSolid = infoRec->PolylinesWideSolid;
    pOverPriv->PolylinesThinSolid = infoRec->PolylinesThinSolid;
    pOverPriv->PolySegmentThinSolid = infoRec->PolySegmentThinSolid;
    pOverPriv->PolylinesThinDashed = infoRec->PolylinesThinDashed;
    pOverPriv->PolySegmentThinDashed = infoRec->PolySegmentThinDashed;
    pOverPriv->FillPolygonSolid = infoRec->FillPolygonSolid;
    pOverPriv->FillPolygonStippled = infoRec->FillPolygonStippled;
    pOverPriv->FillPolygonOpaqueStippled = infoRec->FillPolygonOpaqueStippled;
    pOverPriv->FillPolygonTiled = infoRec->FillPolygonTiled;
    pOverPriv->PolyFillArcSolid = infoRec->PolyFillArcSolid;
    pOverPriv->PutImage = infoRec->PutImage;

    if (infoRec->CopyArea)
        infoRec->CopyArea = XAAOverCopyArea;
    if (infoRec->CopyPlane)
        infoRec->CopyPlane = XAAOverCopyPlane;
    if (infoRec->PushPixelsSolid)
        infoRec->PushPixelsSolid = XAAOverPushPixelsSolid;
    if (infoRec->PolyFillRectSolid)
        infoRec->PolyFillRectSolid = XAAOverPolyFillRectSolid;
    if (infoRec->PolyFillRectStippled)
        infoRec->PolyFillRectStippled = XAAOverPolyFillRectStippled;
    if (infoRec->PolyFillRectOpaqueStippled)
        infoRec->PolyFillRectOpaqueStippled = XAAOverPolyFillRectOpaqueStippled;
    if (infoRec->PolyFillRectTiled)
        infoRec->PolyFillRectTiled = XAAOverPolyFillRectTiled;
    if (infoRec->FillSpansSolid)
        infoRec->FillSpansSolid = XAAOverFillSpansSolid;
    if (infoRec->FillSpansStippled)
        infoRec->FillSpansStippled = XAAOverFillSpansStippled;
    if (infoRec->FillSpansOpaqueStippled)
        infoRec->FillSpansOpaqueStippled = XAAOverFillSpansOpaqueStippled;
    if (infoRec->FillSpansTiled)
        infoRec->FillSpansTiled = XAAOverFillSpansTiled;
    if (infoRec->PolyText8TE)
        infoRec->PolyText8TE = XAAOverPolyText8TE;
    if (infoRec->PolyText16TE)
        infoRec->PolyText16TE = XAAOverPolyText16TE;
    if (infoRec->ImageText8TE)
        infoRec->ImageText8TE = XAAOverImageText8TE;
    if (infoRec->ImageText16TE)
        infoRec->ImageText16TE = XAAOverImageText16TE;
    if (infoRec->ImageGlyphBltTE)
        infoRec->ImageGlyphBltTE = XAAOverImageGlyphBltTE;
    if (infoRec->PolyGlyphBltTE)
        infoRec->PolyGlyphBltTE = XAAOverPolyGlyphBltTE;
    if (infoRec->PolyText8NonTE)
        infoRec->PolyText8NonTE = XAAOverPolyText8NonTE;
    if (infoRec->PolyText16NonTE)
        infoRec->PolyText16NonTE = XAAOverPolyText16NonTE;
    if (infoRec->ImageText8NonTE)
        infoRec->ImageText8NonTE = XAAOverImageText8NonTE;
    if (infoRec->ImageText16NonTE)
        infoRec->ImageText16NonTE = XAAOverImageText16NonTE;
    if (infoRec->ImageGlyphBltNonTE)
        infoRec->ImageGlyphBltNonTE = XAAOverImageGlyphBltNonTE;
    if (infoRec->PolyGlyphBltNonTE)
        infoRec->PolyGlyphBltNonTE = XAAOverPolyGlyphBltNonTE;
    if (infoRec->PolyRectangleThinSolid)
        infoRec->PolyRectangleThinSolid = XAAOverPolyRectangleThinSolid;
    if (infoRec->PolylinesWideSolid)
        infoRec->PolylinesWideSolid = XAAOverPolylinesWideSolid;
    if (infoRec->PolylinesThinSolid)
        infoRec->PolylinesThinSolid = XAAOverPolylinesThinSolid;
    if (infoRec->PolySegmentThinSolid)
        infoRec->PolySegmentThinSolid = XAAOverPolySegmentThinSolid;
    if (infoRec->PolylinesThinDashed)
        infoRec->PolylinesThinDashed = XAAOverPolylinesThinDashed;
    if (infoRec->PolySegmentThinDashed)
        infoRec->PolySegmentThinDashed = XAAOverPolySegmentThinDashed;
    if (infoRec->FillPolygonSolid)
        infoRec->FillPolygonSolid = XAAOverFillPolygonSolid;
    if (infoRec->FillPolygonStippled)
        infoRec->FillPolygonStippled = XAAOverFillPolygonStippled;
    if (infoRec->FillPolygonOpaqueStippled)
        infoRec->FillPolygonOpaqueStippled = XAAOverFillPolygonOpaqueStippled;
    if (infoRec->FillPolygonTiled)
        infoRec->FillPolygonTiled = XAAOverFillPolygonTiled;
    if (infoRec->PolyFillArcSolid)
        infoRec->PolyFillArcSolid = XAAOverPolyFillArcSolid;
    if (infoRec->PutImage)
        infoRec->PutImage = XAAOverPutImage;

    return TRUE;
}

/***********************  Screen functions ************************/

void
XAAOverCopyWindow(WindowPtr pWin, DDXPointRec ptOldOrg, RegionPtr prgnSrc)
{
    ScreenPtr pScreen = pWin->drawable.pScreen;
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_SCREEN(pScreen);
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pScreen);
    ScrnInfoPtr pScrn = infoRec->pScrn;
    DDXPointPtr ppt, pptSrc;
    RegionRec rgnDst;
    BoxPtr pbox;
    int i, nbox, dx, dy;
    WindowPtr pRoot = pScreen->root;

    if (!pScrn->vtSema || !infoRec->ScreenToScreenBitBlt) {
        XAA_SCREEN_PROLOGUE(pScreen, CopyWindow);
        if (pScrn->vtSema && infoRec->NeedToSync) {
            (*infoRec->Sync) (pScrn);
            infoRec->NeedToSync = FALSE;
        }
        (*pScreen->CopyWindow) (pWin, ptOldOrg, prgnSrc);
        XAA_SCREEN_EPILOGUE(pScreen, CopyWindow, XAAOverCopyWindow);
        return;
    }

    infoRec->ScratchGC.alu = GXcopy;
    infoRec->ScratchGC.planemask = ~0;

    RegionNull(&rgnDst);

    dx = ptOldOrg.x - pWin->drawable.x;
    dy = ptOldOrg.y - pWin->drawable.y;
    RegionTranslate(prgnSrc, -dx, -dy);
    RegionIntersect(&rgnDst, &pWin->borderClip, prgnSrc);

    nbox = RegionNumRects(&rgnDst);
    if (nbox && (pptSrc = (DDXPointPtr) malloc(nbox * sizeof(DDXPointRec)))) {

        pbox = RegionRects(&rgnDst);
        for (i = nbox, ppt = pptSrc; i--; ppt++, pbox++) {
            ppt->x = pbox->x1 + dx;
            ppt->y = pbox->y1 + dy;
        }

        SWITCH_DEPTH(8);
        XAADoBitBlt((DrawablePtr) pRoot, (DrawablePtr) pRoot,
                    &(infoRec->ScratchGC), &rgnDst, pptSrc);

        if (pWin->drawable.bitsPerPixel != 8) {
            SWITCH_DEPTH(pScrn->depth);
            XAADoBitBlt((DrawablePtr) pRoot, (DrawablePtr) pRoot,
                        &(infoRec->ScratchGC), &rgnDst, pptSrc);
        }

        free(pptSrc);
    }

    RegionUninit(&rgnDst);

    if (pWin->drawable.depth == 8) {
        RegionNull(&rgnDst);
        miSegregateChildren(pWin, &rgnDst, pScrn->depth);
        if (RegionNotEmpty(&rgnDst)) {
            RegionIntersect(&rgnDst, &rgnDst, prgnSrc);
            nbox = RegionNumRects(&rgnDst);
            if (nbox &&
                (pptSrc = (DDXPointPtr) malloc(nbox * sizeof(DDXPointRec)))) {

                pbox = RegionRects(&rgnDst);
                for (i = nbox, ppt = pptSrc; i--; ppt++, pbox++) {
                    ppt->x = pbox->x1 + dx;
                    ppt->y = pbox->y1 + dy;
                }

                SWITCH_DEPTH(pScrn->depth);
                XAADoBitBlt((DrawablePtr) pRoot, (DrawablePtr) pRoot,
                            &(infoRec->ScratchGC), &rgnDst, pptSrc);
                free(pptSrc);
            }
        }
        RegionUninit(&rgnDst);
    }
}

void
XAAOverWindowExposures(WindowPtr pWin, RegionPtr pReg, RegionPtr pOtherReg)
{
    ScreenPtr pScreen = pWin->drawable.pScreen;
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_SCREEN(pScreen);

    if ((pWin->drawable.bitsPerPixel != 8) && infoRec->pScrn->vtSema) {
        if (RegionNumRects(pReg) && infoRec->FillSolidRects) {
            XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pScreen);

            SWITCH_DEPTH(8);
            (*infoRec->FillSolidRects) (infoRec->pScrn,
                                        infoRec->pScrn->colorKey, GXcopy, ~0,
                                        RegionNumRects(pReg),
                                        RegionRects(pReg));
            miWindowExposures(pWin, pReg, pOtherReg);
            return;
        }
        else if (infoRec->NeedToSync) {
            (*infoRec->Sync) (infoRec->pScrn);
            infoRec->NeedToSync = FALSE;
        }
    }

    XAA_SCREEN_PROLOGUE(pScreen, WindowExposures);
    (*pScreen->WindowExposures) (pWin, pReg, pOtherReg);
    XAA_SCREEN_EPILOGUE(pScreen, WindowExposures, XAAOverWindowExposures);
}

/*********************  Choosers *************************/

static int
XAAOverStippledFillChooser(GCPtr pGC)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);
    int ret;

    ret = (*pOverPriv->StippledFillChooser) (pGC);

    if ((pGC->depth == 8) && ((ret == DO_COLOR_8x8) || (ret == DO_CACHE_BLT))) {
        ret = 0;
    }

    return ret;
}

static int
XAAOverOpaqueStippledFillChooser(GCPtr pGC)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);
    int ret;

    ret = (*pOverPriv->OpaqueStippledFillChooser) (pGC);

    if ((pGC->depth == 8) && ((ret == DO_COLOR_8x8) || (ret == DO_CACHE_BLT))) {
        ret = 0;
    }

    return ret;
}

static int
XAAOverTiledFillChooser(GCPtr pGC)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);
    int ret;

    ret = (*pOverPriv->TiledFillChooser) (pGC);

    if ((pGC->depth == 8) && ((ret == DO_COLOR_8x8) || (ret == DO_CACHE_BLT))) {
        ret = 0;
    }

    return ret;
}

/**************************** GC Functions **************************/

static RegionPtr
XAAOverCopyArea(DrawablePtr pSrc,
                DrawablePtr pDst,
                GC * pGC,
                int srcx, int srcy, int width, int height, int dstx, int dsty)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    return (*pOverPriv->CopyArea) (pSrc, pDst,
                                   pGC, srcx, srcy, width, height, dstx, dsty);
}

static RegionPtr
XAAOverCopyPlane(DrawablePtr pSrc,
                 DrawablePtr pDst,
                 GCPtr pGC,
                 int srcx, int srcy,
                 int width, int height,
                 int dstx, int dsty, unsigned long bitPlane)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    return (*pOverPriv->CopyPlane) (pSrc, pDst,
                                    pGC, srcx, srcy, width, height, dstx, dsty,
                                    bitPlane);

}

static void
XAAOverPushPixelsSolid(GCPtr pGC,
                       PixmapPtr pBitMap,
                       DrawablePtr pDraw, int dx, int dy, int xOrg, int yOrg)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->PushPixelsSolid) (pGC, pBitMap, pDraw, dx, dy, xOrg, yOrg);
}

static void
XAAOverPolyFillRectSolid(DrawablePtr pDraw,
                         GCPtr pGC, int nrectFill, xRectangle *prectInit)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->PolyFillRectSolid) (pDraw, pGC, nrectFill, prectInit);
}

static void
XAAOverPolyFillRectStippled(DrawablePtr pDraw,
                            GCPtr pGC, int nrectFill, xRectangle *prectInit)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->PolyFillRectStippled) (pDraw, pGC, nrectFill, prectInit);
}

static void
XAAOverPolyFillRectOpaqueStippled(DrawablePtr pDraw,
                                  GCPtr pGC,
                                  int nrectFill, xRectangle *prectInit)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->PolyFillRectOpaqueStippled) (pDraw, pGC, nrectFill, prectInit);
}

static void
XAAOverPolyFillRectTiled(DrawablePtr pDraw,
                         GCPtr pGC, int nrectFill, xRectangle *prectInit)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->PolyFillRectTiled) (pDraw, pGC, nrectFill, prectInit);
}

static void
XAAOverFillSpansSolid(DrawablePtr pDraw,
                      GCPtr pGC,
                      int nInit, DDXPointPtr ppt, int *pwidth, int fSorted)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->FillSpansSolid) (pDraw, pGC, nInit, ppt, pwidth, fSorted);
}

static void
XAAOverFillSpansStippled(DrawablePtr pDraw,
                         GCPtr pGC,
                         int nInit, DDXPointPtr ppt, int *pwidth, int fSorted)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->FillSpansStippled) (pDraw, pGC, nInit, ppt, pwidth, fSorted);
}

static void
XAAOverFillSpansOpaqueStippled(DrawablePtr pDraw,
                               GCPtr pGC,
                               int nInit,
                               DDXPointPtr ppt, int *pwidth, int fSorted)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->FillSpansOpaqueStippled) (pDraw, pGC, nInit, ppt, pwidth,
                                           fSorted);
}

static void
XAAOverFillSpansTiled(DrawablePtr pDraw,
                      GCPtr pGC,
                      int nInit, DDXPointPtr ppt, int *pwidth, int fSorted)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->FillSpansTiled) (pDraw, pGC, nInit, ppt, pwidth, fSorted);
}

static int
XAAOverPolyText8TE(DrawablePtr pDraw,
                   GCPtr pGC, int x, int y, int count, char *chars)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    return (*pOverPriv->PolyText8TE) (pDraw, pGC, x, y, count, chars);
}

static int
XAAOverPolyText16TE(DrawablePtr pDraw,
                    GCPtr pGC, int x, int y, int count, unsigned short *chars)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    return (*pOverPriv->PolyText16TE) (pDraw, pGC, x, y, count, chars);
}

static void
XAAOverImageText8TE(DrawablePtr pDraw,
                    GCPtr pGC, int x, int y, int count, char *chars)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->ImageText8TE) (pDraw, pGC, x, y, count, chars);
}

static void
XAAOverImageText16TE(DrawablePtr pDraw,
                     GCPtr pGC, int x, int y, int count, unsigned short *chars)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->ImageText16TE) (pDraw, pGC, x, y, count, chars);
}

static void
XAAOverImageGlyphBltTE(DrawablePtr pDraw,
                       GCPtr pGC,
                       int xInit, int yInit,
                       unsigned int nglyph,
                       CharInfoPtr * ppci, pointer pglyphBase)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->ImageGlyphBltTE) (pDraw, pGC, xInit, yInit, nglyph, ppci,
                                   pglyphBase);
}

static void
XAAOverPolyGlyphBltTE(DrawablePtr pDraw,
                      GCPtr pGC,
                      int xInit, int yInit,
                      unsigned int nglyph,
                      CharInfoPtr * ppci, pointer pglyphBase)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->PolyGlyphBltTE) (pDraw, pGC, xInit, yInit, nglyph, ppci,
                                  pglyphBase);
}

static int
XAAOverPolyText8NonTE(DrawablePtr pDraw,
                      GCPtr pGC, int x, int y, int count, char *chars)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    return (*pOverPriv->PolyText8NonTE) (pDraw, pGC, x, y, count, chars);
}

static int
XAAOverPolyText16NonTE(DrawablePtr pDraw,
                       GCPtr pGC,
                       int x, int y, int count, unsigned short *chars)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    return (*pOverPriv->PolyText16NonTE) (pDraw, pGC, x, y, count, chars);
}

static void
XAAOverImageText8NonTE(DrawablePtr pDraw,
                       GCPtr pGC, int x, int y, int count, char *chars)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->ImageText8NonTE) (pDraw, pGC, x, y, count, chars);
}

static void
XAAOverImageText16NonTE(DrawablePtr pDraw,
                        GCPtr pGC,
                        int x, int y, int count, unsigned short *chars)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->ImageText16NonTE) (pDraw, pGC, x, y, count, chars);
}

static void
XAAOverImageGlyphBltNonTE(DrawablePtr pDraw,
                          GCPtr pGC,
                          int xInit, int yInit,
                          unsigned int nglyph,
                          CharInfoPtr * ppci, pointer pglyphBase)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->ImageGlyphBltNonTE) (pDraw, pGC, xInit, yInit, nglyph, ppci,
                                      pglyphBase);
}

static void
XAAOverPolyGlyphBltNonTE(DrawablePtr pDraw,
                         GCPtr pGC,
                         int xInit, int yInit,
                         unsigned int nglyph,
                         CharInfoPtr * ppci, pointer pglyphBase)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->PolyGlyphBltNonTE) (pDraw, pGC, xInit, yInit, nglyph, ppci,
                                     pglyphBase);
}

static void
XAAOverPolyRectangleThinSolid(DrawablePtr pDraw,
                              GCPtr pGC, int nRectsInit, xRectangle *pRectsInit)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->PolyRectangleThinSolid) (pDraw, pGC, nRectsInit, pRectsInit);
}

static void
XAAOverPolylinesWideSolid(DrawablePtr pDraw,
                          GCPtr pGC, int mode, int npt, DDXPointPtr pPts)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->PolylinesWideSolid) (pDraw, pGC, mode, npt, pPts);
}

static void
XAAOverPolylinesThinSolid(DrawablePtr pDraw,
                          GCPtr pGC, int mode, int npt, DDXPointPtr pPts)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->PolylinesThinSolid) (pDraw, pGC, mode, npt, pPts);
}

static void
XAAOverPolySegmentThinSolid(DrawablePtr pDraw,
                            GCPtr pGC, int nseg, xSegment * pSeg)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->PolySegmentThinSolid) (pDraw, pGC, nseg, pSeg);
}

static void
XAAOverPolylinesThinDashed(DrawablePtr pDraw,
                           GCPtr pGC, int mode, int npt, DDXPointPtr pPts)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->PolylinesThinDashed) (pDraw, pGC, mode, npt, pPts);
}

static void
XAAOverPolySegmentThinDashed(DrawablePtr pDraw,
                             GCPtr pGC, int nseg, xSegment * pSeg)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->PolySegmentThinDashed) (pDraw, pGC, nseg, pSeg);
}

static void
XAAOverFillPolygonSolid(DrawablePtr pDraw,
                        GCPtr pGC,
                        int shape, int mode, int count, DDXPointPtr ptsIn)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->FillPolygonSolid) (pDraw, pGC, shape, mode, count, ptsIn);
}

static void
XAAOverFillPolygonStippled(DrawablePtr pDraw,
                           GCPtr pGC,
                           int shape, int mode, int count, DDXPointPtr ptsIn)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->FillPolygonStippled) (pDraw, pGC, shape, mode, count, ptsIn);
}

static void
XAAOverFillPolygonOpaqueStippled(DrawablePtr pDraw,
                                 GCPtr pGC,
                                 int shape,
                                 int mode, int count, DDXPointPtr ptsIn)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->FillPolygonOpaqueStippled) (pDraw, pGC, shape, mode, count,
                                             ptsIn);
}

static void
XAAOverFillPolygonTiled(DrawablePtr pDraw,
                        GCPtr pGC,
                        int shape, int mode, int count, DDXPointPtr ptsIn)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->FillPolygonTiled) (pDraw, pGC, shape, mode, count, ptsIn);
}

static void
XAAOverPolyFillArcSolid(DrawablePtr pDraw, GCPtr pGC, int narcs, xArc * parcs)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->PolyFillArcSolid) (pDraw, pGC, narcs, parcs);
}

static void
XAAOverPutImage(DrawablePtr pDraw,
                GCPtr pGC,
                int depth,
                int x,
                int y, int w, int h, int leftPad, int format, char *pImage)
{
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pGC->pScreen);

    SWITCH_DEPTH(pGC->depth);

    (*pOverPriv->PutImage) (pDraw, pGC, depth, x, y, w, h,
                            leftPad, format, pImage);
}
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a6 1

d39 1
a39 1
			int, int, int, int, int, int);
d41 16
a56 16
			int, int, int, int, int, int, unsigned long);
static void XAAOverPushPixelsSolid(GCPtr, PixmapPtr, DrawablePtr, int, 
			int, int, int);
static void XAAOverPolyFillRectSolid(DrawablePtr, GCPtr, int, xRectangle*);
static void XAAOverPolyFillRectStippled(DrawablePtr, GCPtr, int, xRectangle*);
static void XAAOverPolyFillRectOpaqueStippled(DrawablePtr, GCPtr, 
			int, xRectangle*);
static void XAAOverPolyFillRectTiled(DrawablePtr, GCPtr, int, xRectangle*);
static void XAAOverFillSpansSolid(DrawablePtr, GCPtr, int, DDXPointPtr, 
			int*, int);
static void XAAOverFillSpansStippled(DrawablePtr, GCPtr, int, DDXPointPtr, 
			int*, int);
static void XAAOverFillSpansOpaqueStippled(DrawablePtr, GCPtr, int, 
			DDXPointPtr, int*, int);
static void XAAOverFillSpansTiled(DrawablePtr, GCPtr, int, DDXPointPtr, 
			int*, int);
d58 31
a88 30
static int XAAOverPolyText16TE(DrawablePtr, GCPtr, int, int, int, 
			unsigned short*);
static void XAAOverImageText8TE(DrawablePtr, GCPtr, int, int, int, char*);
static void XAAOverImageText16TE(DrawablePtr, GCPtr, int, int, int, 
			unsigned short*);
static void XAAOverImageGlyphBltTE(DrawablePtr, GCPtr, int, int, 
			unsigned int, CharInfoPtr*, pointer);
static void XAAOverPolyGlyphBltTE(DrawablePtr, GCPtr, int, int, 
			unsigned int, CharInfoPtr*, pointer);
static int XAAOverPolyText8NonTE(DrawablePtr, GCPtr, int, int, int, char*);
static int XAAOverPolyText16NonTE(DrawablePtr, GCPtr, int, int, int, 
			unsigned short*);
static void XAAOverImageText8NonTE(DrawablePtr, GCPtr, int, int, int, char*);
static void XAAOverImageText16NonTE(DrawablePtr, GCPtr, int, int, int, 
			unsigned short*);
static void XAAOverImageGlyphBltNonTE(DrawablePtr, GCPtr, int, int, 
			unsigned int, CharInfoPtr *, pointer);
static void XAAOverPolyGlyphBltNonTE(DrawablePtr, GCPtr, int, int, 
			unsigned int, CharInfoPtr *, pointer);
static void XAAOverPolyRectangleThinSolid(DrawablePtr, GCPtr, int, xRectangle*);
static void XAAOverPolylinesWideSolid(DrawablePtr, GCPtr, int, int, 
			DDXPointPtr);
static void XAAOverPolylinesThinSolid(DrawablePtr, GCPtr, int, int, 
			DDXPointPtr);
static void XAAOverPolySegmentThinSolid(DrawablePtr, GCPtr, int, xSegment*);
static void XAAOverPolylinesThinDashed(DrawablePtr, GCPtr, int, int, 
			DDXPointPtr);
static void XAAOverPolySegmentThinDashed(DrawablePtr, GCPtr, int, xSegment*);
static void XAAOverFillPolygonSolid(DrawablePtr, GCPtr, int, int, int, 
			DDXPointPtr);
d90 8
a97 9
			DDXPointPtr);
static void XAAOverFillPolygonOpaqueStippled(DrawablePtr, GCPtr, int, int, int, 
			DDXPointPtr);
static void XAAOverFillPolygonTiled(DrawablePtr, GCPtr, int, int, int, 
			DDXPointPtr);
static void XAAOverPolyFillArcSolid(DrawablePtr, GCPtr, int, xArc*);
static void XAAOverPutImage(DrawablePtr, GCPtr, int, int, int, int, int, 
			int, int, char*);

d100 3
a102 3
   ScrnInfoPtr		pScrn;
   DepthChangeFuncPtr	callback;
   int			currentDepth;
d104 52
a155 47
   RegionPtr (*CopyArea)(DrawablePtr, DrawablePtr, GC *,
			int, int, int, int, int, int);
   RegionPtr (*CopyPlane)(DrawablePtr, DrawablePtr, GCPtr,
			int, int, int, int, int, int, unsigned long);
   void (*PushPixelsSolid)(GCPtr, PixmapPtr, DrawablePtr, int, int, int, int);
   void (*PolyFillRectSolid)(DrawablePtr, GCPtr, int, xRectangle*);
   void (*PolyFillRectStippled)(DrawablePtr, GCPtr, int, xRectangle*);
   void (*PolyFillRectOpaqueStippled)(DrawablePtr, GCPtr, int, xRectangle*);
   void (*PolyFillRectTiled)(DrawablePtr, GCPtr, int, xRectangle*);
   void (*FillSpansSolid)(DrawablePtr, GCPtr, int, DDXPointPtr, int*, int);
   void (*FillSpansStippled)(DrawablePtr, GCPtr, int, DDXPointPtr, int*, int);
   void (*FillSpansOpaqueStippled)(DrawablePtr,GCPtr,int,DDXPointPtr,int*,int);
   void (*FillSpansTiled)(DrawablePtr, GCPtr, int, DDXPointPtr, int*, int);
   int (*PolyText8TE)(DrawablePtr, GCPtr, int, int, int, char *);
   int (*PolyText16TE)(DrawablePtr, GCPtr, int, int, int, unsigned short*);
   void (*ImageText8TE)(DrawablePtr, GCPtr, int, int, int, char*);
   void (*ImageText16TE)(DrawablePtr, GCPtr, int, int, int, unsigned short*);
   void (*ImageGlyphBltTE)(DrawablePtr, GCPtr, int, int, unsigned int,
			CharInfoPtr*, pointer);
   void (*PolyGlyphBltTE)(DrawablePtr, GCPtr, int, int, unsigned int,
			CharInfoPtr*, pointer);
   int (*PolyText8NonTE)(DrawablePtr, GCPtr, int, int, int, char*);
   int (*PolyText16NonTE)(DrawablePtr, GCPtr, int, int, int, unsigned short*);
   void (*ImageText8NonTE)(DrawablePtr, GCPtr, int, int, int, char*);
   void (*ImageText16NonTE)(DrawablePtr, GCPtr, int, int, int, unsigned short*);
   void (*ImageGlyphBltNonTE)(DrawablePtr, GCPtr, int, int, unsigned int,
			CharInfoPtr *, pointer);
   void (*PolyGlyphBltNonTE)(DrawablePtr, GCPtr, int, int, unsigned int,
			CharInfoPtr *, pointer);
   void (*PolyRectangleThinSolid)(DrawablePtr, GCPtr, int, xRectangle*);
   void (*PolylinesWideSolid)(DrawablePtr, GCPtr, int, int, DDXPointPtr);

   void (*PolylinesThinSolid)(DrawablePtr, GCPtr, int, int, DDXPointPtr);
   void (*PolySegmentThinSolid)(DrawablePtr, GCPtr, int, xSegment*);
   void (*PolylinesThinDashed)(DrawablePtr, GCPtr, int, int, DDXPointPtr);
   void (*PolySegmentThinDashed)(DrawablePtr, GCPtr, int, xSegment*);
   void (*FillPolygonSolid)(DrawablePtr, GCPtr, int, int, int, DDXPointPtr);
   void (*FillPolygonStippled)(DrawablePtr, GCPtr, int, int, int, DDXPointPtr);
   void (*FillPolygonOpaqueStippled)(DrawablePtr, GCPtr, int, int, int, 
			DDXPointPtr);
   void (*FillPolygonTiled)(DrawablePtr, GCPtr, int, int, int, DDXPointPtr);
   void (*PolyFillArcSolid)(DrawablePtr, GCPtr, int, xArc*);
   void (*PutImage)(DrawablePtr, GCPtr, int, int, int, int, int, int, 
			int, char*);
   int (*StippledFillChooser)(GCPtr);
   int (*OpaqueStippledFillChooser)(GCPtr);
   int (*TiledFillChooser)(GCPtr);
d159 1
a170 1

d172 2
a173 4
XAAInitDualFramebufferOverlay(
    ScreenPtr pScreen, 
    DepthChangeFuncPtr callback
){
d179 1
a179 1
	return FALSE;
d181 2
a182 2
    if(!(pOverPriv = malloc(sizeof(XAAOverlayRec))))
	return FALSE;
d241 70
a310 71

    if(infoRec->CopyArea)
	infoRec->CopyArea = XAAOverCopyArea;
    if(infoRec->CopyPlane)
	infoRec->CopyPlane = XAAOverCopyPlane;
    if(infoRec->PushPixelsSolid)
	infoRec->PushPixelsSolid = XAAOverPushPixelsSolid;
    if(infoRec->PolyFillRectSolid)
	infoRec->PolyFillRectSolid = XAAOverPolyFillRectSolid;
    if(infoRec->PolyFillRectStippled)
	infoRec->PolyFillRectStippled = XAAOverPolyFillRectStippled;
    if(infoRec->PolyFillRectOpaqueStippled)
	infoRec->PolyFillRectOpaqueStippled = XAAOverPolyFillRectOpaqueStippled;
    if(infoRec->PolyFillRectTiled)
	infoRec->PolyFillRectTiled = XAAOverPolyFillRectTiled;
    if(infoRec->FillSpansSolid)
	infoRec->FillSpansSolid = XAAOverFillSpansSolid;
    if(infoRec->FillSpansStippled)
	infoRec->FillSpansStippled = XAAOverFillSpansStippled;
    if(infoRec->FillSpansOpaqueStippled)
	infoRec->FillSpansOpaqueStippled = XAAOverFillSpansOpaqueStippled;
    if(infoRec->FillSpansTiled)
	infoRec->FillSpansTiled = XAAOverFillSpansTiled;
    if(infoRec->PolyText8TE)
	infoRec->PolyText8TE = XAAOverPolyText8TE;
    if(infoRec->PolyText16TE)
	infoRec->PolyText16TE = XAAOverPolyText16TE;
    if(infoRec->ImageText8TE)
	infoRec->ImageText8TE = XAAOverImageText8TE;
    if(infoRec->ImageText16TE)
	infoRec->ImageText16TE = XAAOverImageText16TE;
    if(infoRec->ImageGlyphBltTE)
	infoRec->ImageGlyphBltTE = XAAOverImageGlyphBltTE;
    if(infoRec->PolyGlyphBltTE)
	infoRec->PolyGlyphBltTE = XAAOverPolyGlyphBltTE;
    if(infoRec->PolyText8NonTE)
	infoRec->PolyText8NonTE = XAAOverPolyText8NonTE;
    if(infoRec->PolyText16NonTE)
	infoRec->PolyText16NonTE = XAAOverPolyText16NonTE;
    if(infoRec->ImageText8NonTE)
	infoRec->ImageText8NonTE = XAAOverImageText8NonTE;
    if(infoRec->ImageText16NonTE)
	infoRec->ImageText16NonTE = XAAOverImageText16NonTE;
    if(infoRec->ImageGlyphBltNonTE)
	infoRec->ImageGlyphBltNonTE = XAAOverImageGlyphBltNonTE;
    if(infoRec->PolyGlyphBltNonTE)
	infoRec->PolyGlyphBltNonTE = XAAOverPolyGlyphBltNonTE;
    if(infoRec->PolyRectangleThinSolid)
	infoRec->PolyRectangleThinSolid = XAAOverPolyRectangleThinSolid;
    if(infoRec->PolylinesWideSolid)
	infoRec->PolylinesWideSolid = XAAOverPolylinesWideSolid;
    if(infoRec->PolylinesThinSolid)
	infoRec->PolylinesThinSolid = XAAOverPolylinesThinSolid;
    if(infoRec->PolySegmentThinSolid)
	infoRec->PolySegmentThinSolid = XAAOverPolySegmentThinSolid;
    if(infoRec->PolylinesThinDashed)
	infoRec->PolylinesThinDashed = XAAOverPolylinesThinDashed;
    if(infoRec->PolySegmentThinDashed)
	infoRec->PolySegmentThinDashed = XAAOverPolySegmentThinDashed;
    if(infoRec->FillPolygonSolid)
	infoRec->FillPolygonSolid = XAAOverFillPolygonSolid;
    if(infoRec->FillPolygonStippled)
	infoRec->FillPolygonStippled = XAAOverFillPolygonStippled;
    if(infoRec->FillPolygonOpaqueStippled)
	infoRec->FillPolygonOpaqueStippled = XAAOverFillPolygonOpaqueStippled;
    if(infoRec->FillPolygonTiled)
	infoRec->FillPolygonTiled = XAAOverFillPolygonTiled;
    if(infoRec->PolyFillArcSolid)
	infoRec->PolyFillArcSolid = XAAOverPolyFillArcSolid;
    if(infoRec->PutImage)
	infoRec->PutImage = XAAOverPutImage;
d318 2
a319 5
XAAOverCopyWindow(
    WindowPtr pWin,
    DDXPointRec ptOldOrg,
    RegionPtr prgnSrc
){
d330 6
a335 7

    if (!pScrn->vtSema || !infoRec->ScreenToScreenBitBlt) { 
	XAA_SCREEN_PROLOGUE (pScreen, CopyWindow);
	if(pScrn->vtSema && infoRec->NeedToSync) {
	    (*infoRec->Sync)(pScrn);
	    infoRec->NeedToSync = FALSE;
	}
d337 2
a338 2
	XAA_SCREEN_EPILOGUE (pScreen, CopyWindow, XAAOverCopyWindow);
    	return;
d352 1
a352 2
    if(nbox &&
	(pptSrc = (DDXPointPtr )malloc(nbox * sizeof(DDXPointRec)))) {
d354 15
a368 15
	pbox = RegionRects(&rgnDst);
	for (i = nbox, ppt = pptSrc; i--; ppt++, pbox++) {
	    ppt->x = pbox->x1 + dx;
	    ppt->y = pbox->y1 + dy;
	}

	SWITCH_DEPTH(8);
	XAADoBitBlt((DrawablePtr)pRoot, (DrawablePtr)pRoot,
        		&(infoRec->ScratchGC), &rgnDst, pptSrc);

	if(pWin->drawable.bitsPerPixel != 8) {
	    SWITCH_DEPTH(pScrn->depth);
	    XAADoBitBlt((DrawablePtr)pRoot, (DrawablePtr)pRoot,
        		&(infoRec->ScratchGC), &rgnDst, pptSrc);
	}
d370 1
a370 1
	free(pptSrc);
d375 22
a396 22
    if(pWin->drawable.depth == 8) {
      RegionNull(&rgnDst);
      miSegregateChildren(pWin, &rgnDst, pScrn->depth);
      if(RegionNotEmpty(&rgnDst)) {
	RegionIntersect(&rgnDst, &rgnDst, prgnSrc);
	nbox = RegionNumRects(&rgnDst);
	if(nbox &&
	  (pptSrc = (DDXPointPtr )malloc(nbox * sizeof(DDXPointRec)))){

	    pbox = RegionRects(&rgnDst);
	    for (i = nbox, ppt = pptSrc; i--; ppt++, pbox++) {
		ppt->x = pbox->x1 + dx;
		ppt->y = pbox->y1 + dy;
	    }

	    SWITCH_DEPTH(pScrn->depth);
	    XAADoBitBlt((DrawablePtr)pRoot, (DrawablePtr)pRoot,
        		&(infoRec->ScratchGC), &rgnDst, pptSrc);
	    free(pptSrc);
	}
      }
      RegionUninit(&rgnDst);
a399 1

d401 2
a402 5
XAAOverWindowExposures(
   WindowPtr pWin,
   RegionPtr pReg,
   RegionPtr pOtherReg
){
d406 14
a419 12
    if((pWin->drawable.bitsPerPixel != 8) && infoRec->pScrn->vtSema) {
	if(RegionNumRects(pReg) && infoRec->FillSolidRects) {
	    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pScreen);

	    SWITCH_DEPTH(8);
	    (*infoRec->FillSolidRects)(infoRec->pScrn, 
		infoRec->pScrn->colorKey, GXcopy, ~0,
			RegionNumRects(pReg), RegionRects(pReg));
	    miWindowExposures(pWin, pReg, pOtherReg);
	    return;
	} else if(infoRec->NeedToSync) {
            (*infoRec->Sync)(infoRec->pScrn);
d421 2
a422 2
	}
    } 
d424 1
a424 1
    XAA_SCREEN_PROLOGUE (pScreen, WindowExposures);
d431 1
a431 1
static int 
d437 4
a440 5
    ret = (*pOverPriv->StippledFillChooser)(pGC);
    
    if((pGC->depth == 8) && 
	((ret == DO_COLOR_8x8) || (ret == DO_CACHE_BLT))) {
	ret = 0;
d446 1
a446 1
static int 
d452 4
a455 5
    ret = (*pOverPriv->OpaqueStippledFillChooser)(pGC);
    
    if((pGC->depth == 8) && 
	((ret == DO_COLOR_8x8) || (ret == DO_CACHE_BLT))) {
	ret = 0;
d461 1
a461 1
static int 
d467 4
a470 5
    ret = (*pOverPriv->TiledFillChooser)(pGC);
    
    if((pGC->depth == 8) && 
	((ret == DO_COLOR_8x8) || (ret == DO_CACHE_BLT))) {
	ret = 0;
a475 1

d478 6
a483 9
static RegionPtr 
XAAOverCopyArea(
   DrawablePtr pSrc,
   DrawablePtr pDst,
   GC *pGC,
   int srcx, int srcy,
   int width, int height,
   int dstx, int dsty
){
d488 2
a489 2
    return (*pOverPriv->CopyArea)(pSrc, pDst, 
		pGC, srcx, srcy, width, height, dstx, dsty);
d492 8
a499 10
static RegionPtr 
XAAOverCopyPlane(
   DrawablePtr pSrc,
   DrawablePtr pDst,
   GCPtr pGC,
   int srcx, int srcy,
   int width, int height,
   int dstx, int dsty,
   unsigned long bitPlane
){
d504 3
a506 2
    return (*pOverPriv->CopyPlane)(pSrc, pDst,
	       pGC, srcx, srcy, width, height, dstx, dsty, bitPlane);
d510 5
a514 8
static void 
XAAOverPushPixelsSolid(
   GCPtr pGC,
   PixmapPtr pBitMap,
   DrawablePtr pDraw,
   int dx, int dy, 
   int xOrg, int yOrg
){
d519 1
a519 1
    (*pOverPriv->PushPixelsSolid)(pGC, pBitMap, pDraw, dx, dy, xOrg, yOrg);
d522 4
a525 9


static void 
XAAOverPolyFillRectSolid(
   DrawablePtr pDraw,
   GCPtr pGC,
   int nrectFill, 	
   xRectangle *prectInit
){
d530 2
a531 2
    (*pOverPriv->PolyFillRectSolid)(pDraw, pGC, nrectFill, prectInit);
}  
d533 4
a536 7
static void 
XAAOverPolyFillRectStippled(
   DrawablePtr pDraw,
   GCPtr pGC,
   int nrectFill, 	
   xRectangle *prectInit
){
d541 2
a542 2
    (*pOverPriv->PolyFillRectStippled)(pDraw, pGC, nrectFill, prectInit);
}  
d544 5
a548 8

static void 
XAAOverPolyFillRectOpaqueStippled(
   DrawablePtr pDraw,
   GCPtr pGC,
   int nrectFill, 	
   xRectangle *prectInit
){
d553 2
a554 2
    (*pOverPriv->PolyFillRectOpaqueStippled)(pDraw, pGC, nrectFill, prectInit);
}  
d556 4
a559 7
static void 
XAAOverPolyFillRectTiled(
   DrawablePtr pDraw,
   GCPtr pGC,
   int nrectFill, 	
   xRectangle *prectInit
){
d564 2
a565 2
    (*pOverPriv->PolyFillRectTiled)(pDraw, pGC, nrectFill, prectInit);
}  
d567 5
a571 10

static void 
XAAOverFillSpansSolid(
   DrawablePtr	pDraw,
   GCPtr	pGC,
   int		nInit,
   DDXPointPtr 	ppt,
   int		*pwidth,
   int		fSorted 
){
d576 1
a576 2
    (*pOverPriv->FillSpansSolid)(
		pDraw, pGC, nInit, ppt, pwidth, fSorted);
d579 5
a583 10

static void 
XAAOverFillSpansStippled(
   DrawablePtr	pDraw,
   GCPtr	pGC,
   int		nInit,
   DDXPointPtr 	ppt,
   int		*pwidth,
   int		fSorted 
){
d588 1
a588 1
    (*pOverPriv->FillSpansStippled)(pDraw, pGC, nInit, ppt, pwidth, fSorted);
d591 6
a596 9
static void 
XAAOverFillSpansOpaqueStippled(
   DrawablePtr	pDraw,
   GCPtr	pGC,
   int		nInit,
   DDXPointPtr 	ppt,
   int		*pwidth,
   int		fSorted 
){
d601 2
a602 2
    (*pOverPriv->FillSpansOpaqueStippled)(
		pDraw, pGC, nInit, ppt, pwidth, fSorted);
d605 5
a609 10

static void 
XAAOverFillSpansTiled(
   DrawablePtr	pDraw,
   GCPtr	pGC,
   int		nInit,
   DDXPointPtr 	ppt,
   int		*pwidth,
   int		fSorted 
){
d614 1
a614 1
    (*pOverPriv->FillSpansTiled)(pDraw, pGC, nInit, ppt, pwidth, fSorted);
d617 4
a620 8
static int 
XAAOverPolyText8TE(
   DrawablePtr pDraw,
   GCPtr pGC,
   int x, int y,
   int count,
   char *chars
){
d625 1
a625 1
    return (*pOverPriv->PolyText8TE)(pDraw, pGC, x, y, count, chars);
a627 1

d629 3
a631 7
XAAOverPolyText16TE(
   DrawablePtr pDraw,
   GCPtr pGC,
   int x, int y,
   int count,
   unsigned short *chars
){
d636 1
a636 1
    return (*pOverPriv->PolyText16TE)(pDraw, pGC, x, y, count, chars);
d639 4
a642 9

static void 
XAAOverImageText8TE(
   DrawablePtr pDraw,
   GCPtr pGC,
   int x, int y,
   int count,
   char *chars
){
d647 1
a647 1
    (*pOverPriv->ImageText8TE)(pDraw, pGC, x, y, count, chars);
d650 4
a653 9

static void 
XAAOverImageText16TE(
   DrawablePtr pDraw,
   GCPtr pGC,
   int x, int y,
   int count,
   unsigned short *chars
){
d658 1
a658 1
    (*pOverPriv->ImageText16TE)(pDraw, pGC, x, y, count, chars);
d661 7
a667 9
static void 
XAAOverImageGlyphBltTE(
   DrawablePtr pDraw,
   GCPtr pGC,
   int xInit, int yInit,
   unsigned int nglyph,
   CharInfoPtr *ppci,
   pointer pglyphBase 
){
d672 2
a673 2
    (*pOverPriv->ImageGlyphBltTE)(
	pDraw, pGC, xInit, yInit, nglyph, ppci, pglyphBase);
d676 7
a682 9
static void 
XAAOverPolyGlyphBltTE(
   DrawablePtr pDraw,
   GCPtr pGC,
   int xInit, int yInit,
   unsigned int nglyph,
   CharInfoPtr *ppci,
   pointer pglyphBase 
){
d687 2
a688 2
    (*pOverPriv->PolyGlyphBltTE)(
	pDraw, pGC, xInit, yInit, nglyph, ppci, pglyphBase);
d691 4
a694 8
static int 
XAAOverPolyText8NonTE(
   DrawablePtr pDraw,
   GCPtr pGC,
   int x, int y,
   int count,
   char *chars
){
d699 1
a699 1
    return (*pOverPriv->PolyText8NonTE)(pDraw, pGC, x, y, count, chars);
d702 5
a706 9

static int 
XAAOverPolyText16NonTE(
   DrawablePtr pDraw,
   GCPtr pGC,
   int x, int y,
   int count,
   unsigned short *chars
){
d711 1
a711 1
    return (*pOverPriv->PolyText16NonTE)(pDraw, pGC, x, y, count, chars);
d714 4
a717 8
static void 
XAAOverImageText8NonTE(
   DrawablePtr pDraw,
   GCPtr pGC,
   int x, int y,
   int count,
   char *chars
){
d722 1
a722 1
    (*pOverPriv->ImageText8NonTE)(pDraw, pGC, x, y, count, chars);
d725 5
a729 8
static void 
XAAOverImageText16NonTE(
   DrawablePtr pDraw,
   GCPtr pGC,
   int x, int y,
   int count,
   unsigned short *chars
){
d734 1
a734 1
    (*pOverPriv->ImageText16NonTE)(pDraw, pGC, x, y, count, chars);
d737 7
a743 10

static void 
XAAOverImageGlyphBltNonTE(
   DrawablePtr pDraw,
   GCPtr pGC,
   int xInit, int yInit,
   unsigned int nglyph,
   CharInfoPtr *ppci,
   pointer pglyphBase 
){
d748 2
a749 2
    (*pOverPriv->ImageGlyphBltNonTE)(
		pDraw, pGC, xInit, yInit, nglyph, ppci, pglyphBase);
d752 7
a758 9
static void 
XAAOverPolyGlyphBltNonTE(
   DrawablePtr pDraw,
   GCPtr pGC,
   int xInit, int yInit,
   unsigned int nglyph,
   CharInfoPtr *ppci,
   pointer pglyphBase 
){
d763 2
a764 2
    (*pOverPriv->PolyGlyphBltNonTE)(
		pDraw, pGC, xInit, yInit, nglyph, ppci, pglyphBase);
d767 4
a770 7
static void 
XAAOverPolyRectangleThinSolid(
   DrawablePtr  pDraw,
   GCPtr        pGC,    
   int	    	nRectsInit,
   xRectangle  *pRectsInit 
){
d775 1
a775 1
    (*pOverPriv->PolyRectangleThinSolid)(pDraw, pGC, nRectsInit, pRectsInit);
d778 4
a781 10


static void 
XAAOverPolylinesWideSolid(
   DrawablePtr	pDraw,
   GCPtr	pGC,
   int		mode,
   int 		npt,
   DDXPointPtr pPts
){
d786 1
a786 1
    (*pOverPriv->PolylinesWideSolid)(pDraw, pGC, mode, npt, pPts);
d789 4
a792 9

static void 
XAAOverPolylinesThinSolid(
   DrawablePtr	pDraw,
   GCPtr	pGC,
   int		mode,
   int 		npt,
   DDXPointPtr pPts
){
d797 1
a797 1
    (*pOverPriv->PolylinesThinSolid)(pDraw, pGC, mode, npt, pPts);
d800 4
a803 7
static void 
XAAOverPolySegmentThinSolid(
   DrawablePtr	pDraw,
   GCPtr	pGC,
   int		nseg,
   xSegment	*pSeg
){
d808 1
a808 1
    (*pOverPriv->PolySegmentThinSolid)(pDraw, pGC, nseg, pSeg);
d811 4
a814 8
static void 
XAAOverPolylinesThinDashed(
   DrawablePtr	pDraw,
   GCPtr	pGC,
   int		mode,
   int 		npt,
   DDXPointPtr pPts
){
d819 1
a819 1
    (*pOverPriv->PolylinesThinDashed)(pDraw, pGC, mode, npt, pPts);
d822 4
a825 7
static void 
XAAOverPolySegmentThinDashed(
   DrawablePtr	pDraw,
   GCPtr	pGC,
   int		nseg,
   xSegment	*pSeg
){
d830 1
a830 1
    (*pOverPriv->PolySegmentThinDashed)(pDraw, pGC, nseg, pSeg);
d833 5
a837 10

static void 
XAAOverFillPolygonSolid(
   DrawablePtr	pDraw,
   GCPtr	pGC,
   int		shape,
   int		mode,
   int		count,
   DDXPointPtr	ptsIn 
){
d842 1
a842 1
    (*pOverPriv->FillPolygonSolid)(pDraw, pGC, shape, mode, count, ptsIn);
d845 5
a849 9
static void 
XAAOverFillPolygonStippled(
   DrawablePtr	pDraw,
   GCPtr	pGC,
   int		shape,
   int		mode,
   int		count,
   DDXPointPtr	ptsIn 
){
d854 1
a854 1
    (*pOverPriv->FillPolygonStippled)(pDraw, pGC, shape, mode, count, ptsIn);
d857 6
a862 10

static void 
XAAOverFillPolygonOpaqueStippled(
   DrawablePtr	pDraw,
   GCPtr	pGC,
   int		shape,
   int		mode,
   int		count,
   DDXPointPtr	ptsIn 
){
d867 2
a868 2
    (*pOverPriv->FillPolygonOpaqueStippled)(
			pDraw, pGC, shape, mode, count, ptsIn);
d871 5
a875 9
static void 
XAAOverFillPolygonTiled(
   DrawablePtr	pDraw,
   GCPtr	pGC,
   int		shape,
   int		mode,
   int		count,
   DDXPointPtr	ptsIn 
){
d880 1
a880 1
    (*pOverPriv->FillPolygonTiled)(pDraw, pGC, shape, mode, count, ptsIn);
d883 3
a885 8

static void 
XAAOverPolyFillArcSolid(
   DrawablePtr	pDraw,
   GCPtr	pGC,
   int		narcs,
   xArc		*parcs
){
d890 1
a890 1
    (*pOverPriv->PolyFillArcSolid)(pDraw, pGC, narcs, parcs);
d893 7
a899 14

static void 
XAAOverPutImage(
   DrawablePtr	pDraw,
   GCPtr	pGC,
   int		depth, 
   int		x, 
   int		y, 
   int		w, 
   int		h,
   int		leftPad,
   int		format,
   char		*pImage
){
d904 2
a905 2
    (*pOverPriv->PutImage)(pDraw, pGC, depth, x, y, w, h, 
				leftPad, format, pImage);
a906 1

@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d154 2
a155 2
static int XAAOverlayKeyIndex;
static DevPrivateKey XAAOverlayKey = &XAAOverlayKeyIndex;
d176 4
a179 1
    if(!(pOverPriv = xalloc(sizeof(XAAOverlayRec))))
d330 1
a330 1
    WindowPtr pRoot = WindowTable[pScreen->myNum];
d347 1
a347 1
    REGION_NULL(pScreen, &rgnDst);
d351 2
a352 2
    REGION_TRANSLATE(pScreen, prgnSrc, -dx, -dy);
    REGION_INTERSECT(pScreen, &rgnDst, &pWin->borderClip, prgnSrc);
d354 1
a354 1
    nbox = REGION_NUM_RECTS(&rgnDst);
d356 1
a356 1
	(pptSrc = (DDXPointPtr )xalloc(nbox * sizeof(DDXPointRec)))) {
d358 1
a358 1
	pbox = REGION_RECTS(&rgnDst);
d374 1
a374 1
	xfree(pptSrc);
d377 1
a377 1
    REGION_UNINIT(pScreen, &rgnDst);
d380 1
a380 1
      REGION_NULL(pScreen, &rgnDst);
d382 3
a384 3
      if(REGION_NOTEMPTY(pScreen, &rgnDst)) {
	REGION_INTERSECT(pScreen, &rgnDst, &rgnDst, prgnSrc);
	nbox = REGION_NUM_RECTS(&rgnDst);
d386 1
a386 1
	  (pptSrc = (DDXPointPtr )xalloc(nbox * sizeof(DDXPointRec)))){
d388 1
a388 1
	    pbox = REGION_RECTS(&rgnDst);
d397 1
a397 1
	    xfree(pptSrc);
d400 1
a400 1
      REGION_UNINIT(pScreen, &rgnDst);
d415 1
a415 1
	if(REGION_NUM_RECTS(pReg) && infoRec->FillSolidRects) {
d421 1
a421 1
			REGION_NUM_RECTS(pReg), REGION_RECTS(pReg));
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d154 2
a155 1
static DevPrivateKey XAAOverlayKey = &XAAOverlayKey;
@


1.1
log
@Initial revision
@
text
@a30 1
static void XAAOverPaintWindow(WindowPtr, RegionPtr, int);
a31 3
static void XAAOverSaveAreas(PixmapPtr, RegionPtr, int, int, WindowPtr);
static void XAAOverRestoreAreas(PixmapPtr, RegionPtr, int, int, WindowPtr);

d154 1
a154 2
static int XAAOverlayIndex = -1;
static unsigned long XAAOverlayGeneration = 0;
d157 1
a157 1
    ((XAAOverlayPtr)((pScreen)->devPrivates[XAAOverlayIndex].ptr))
a174 8
    if (XAAOverlayGeneration != serverGeneration) {
	if((XAAOverlayIndex = AllocateScreenPrivateIndex()) < 0)
		return FALSE;

	XAAOverlayGeneration = serverGeneration;
    }
   

d178 1
a178 1
    pScreen->devPrivates[XAAOverlayIndex].ptr = (pointer)pOverPriv;
a186 2
    pScreen->PaintWindowBackground = XAAOverPaintWindow;
    pScreen->PaintWindowBorder = XAAOverPaintWindow;
a187 2
    pScreen->BackingStoreFuncs.SaveAreas = XAAOverSaveAreas;
    pScreen->BackingStoreFuncs.RestoreAreas = XAAOverRestoreAreas;
d352 1
a352 1
	(pptSrc = (DDXPointPtr )ALLOCATE_LOCAL(nbox * sizeof(DDXPointRec)))) {
d370 1
a370 1
	DEALLOCATE_LOCAL(pptSrc);
d382 1
a382 1
	  (pptSrc = (DDXPointPtr )ALLOCATE_LOCAL(nbox * sizeof(DDXPointRec)))){
d393 1
a393 1
	    DEALLOCATE_LOCAL(pptSrc);
a400 50
static void
XAAOverPaintWindow(
    WindowPtr   pWin,
    RegionPtr   pRegion,
    int         what
){
    ScreenPtr pScreen = pWin->drawable.pScreen;
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pScreen);
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_SCREEN(pScreen);
    ScrnInfoPtr pScrn = infoRec->pScrn;

    if(pScrn->vtSema) {
	if(what == PW_BACKGROUND) {
	    SWITCH_DEPTH(pWin->drawable.depth);
	    (*infoRec->PaintWindowBackground)(pWin, pRegion, what);
	    return;
	} else {
	    if(pWin->drawable.bitsPerPixel == 8) {
		SWITCH_DEPTH(8);
		(*infoRec->PaintWindowBorder)(pWin, pRegion, what);
		return;
	    } else if (infoRec->FillSolidRects)  {
		SWITCH_DEPTH(8);
		(*infoRec->FillSolidRects)(pScrn, pScrn->colorKey, GXcopy, 
			~0, REGION_NUM_RECTS(pRegion), REGION_RECTS(pRegion));

		SWITCH_DEPTH(pWin->drawable.depth);
		(*infoRec->PaintWindowBorder)(pWin, pRegion, what);
		return;
	    } 
	}

	if(infoRec->NeedToSync) {
	    (*infoRec->Sync)(infoRec->pScrn);
	    infoRec->NeedToSync = FALSE;
	}
    }

    if(what == PW_BACKGROUND) {
	XAA_SCREEN_PROLOGUE (pScreen, PaintWindowBackground);
	(*pScreen->PaintWindowBackground) (pWin, pRegion, what);
	XAA_SCREEN_EPILOGUE(pScreen, PaintWindowBackground, XAAOverPaintWindow);
    } else {
	XAA_SCREEN_PROLOGUE (pScreen, PaintWindowBorder);
	(*pScreen->PaintWindowBorder) (pWin, pRegion, what);
	XAA_SCREEN_EPILOGUE(pScreen, PaintWindowBorder, XAAOverPaintWindow);
    }
}


a428 40
}


static void
XAAOverSaveAreas (
    PixmapPtr pPixmap,
    RegionPtr prgnSave,
    int       xorg,
    int       yorg,
    WindowPtr pWin
){
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pWin->drawable.pScreen);
    XAAInfoRecPtr infoRec = 
		GET_XAAINFORECPTR_FROM_DRAWABLE((DrawablePtr)pWin);

    if(pOverPriv->pScrn->vtSema) {
	SWITCH_DEPTH(pWin->drawable.depth);
    }
    
    (*infoRec->SaveAreas)(pPixmap, prgnSave, xorg, yorg, pWin);
}


static void
XAAOverRestoreAreas (    
    PixmapPtr pPixmap,
    RegionPtr prgnRestore,
    int       xorg,
    int       yorg,
    WindowPtr pWin 
){
    XAAOverlayPtr pOverPriv = GET_OVERLAY_PRIV(pWin->drawable.pScreen);
    XAAInfoRecPtr infoRec = 
		GET_XAAINFORECPTR_FROM_DRAWABLE((DrawablePtr)pWin);

    if(pOverPriv->pScrn->vtSema) {
	SWITCH_DEPTH(pWin->drawable.depth);
    }
    
    (*infoRec->RestoreAreas)(pPixmap, prgnRestore, xorg, yorg, pWin);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
