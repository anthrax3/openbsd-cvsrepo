head	1.4;
access;
symbols
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.14
	OPENBSD_5_0:1.2.0.12
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.8
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2013.06.07.17.28.53;	author matthieu;	state dead;
branches;
next	1.3;

1.3
date	2012.06.10.13.21.27;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.17.50;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.17.50;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.58.25;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@
#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "misc.h"
#include "xf86.h"
#include "xf86_OSproc.h"

#include <X11/X.h>
#include "scrnintstr.h"
#include <X11/fonts/fontstruct.h>
#include "dixfontstr.h"
#include "xf86str.h"
#include "xaa.h"
#include "xaalocal.h"
#include "migc.h"
#include "mi.h"
#include "gcstruct.h"
#include "pixmapstr.h"

void
XAAValidateCopyArea(GCPtr pGC, unsigned long changes, DrawablePtr pDraw)
{
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);

    if (infoRec->CopyArea &&
        CHECK_PLANEMASK(pGC, infoRec->CopyAreaFlags) &&
        CHECK_ROP(pGC, infoRec->CopyAreaFlags) &&
        CHECK_ROPSRC(pGC, infoRec->CopyAreaFlags)
        )
        pGC->ops->CopyArea = infoRec->CopyArea;
    else
        pGC->ops->CopyArea = XAAFallbackOps.CopyArea;
}

void
XAAValidatePutImage(GCPtr pGC, unsigned long changes, DrawablePtr pDraw)
{
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);

    if (infoRec->PutImage &&
        CHECK_PLANEMASK(pGC, infoRec->PutImageFlags) &&
        CHECK_ROP(pGC, infoRec->PutImageFlags) &&
        CHECK_ROPSRC(pGC, infoRec->PutImageFlags) &&
        CHECK_COLORS(pGC, infoRec->PutImageFlags)
        )
        pGC->ops->PutImage = infoRec->PutImage;
    else
        pGC->ops->PutImage = XAAFallbackOps.PutImage;
}

void
XAAValidateCopyPlane(GCPtr pGC, unsigned long changes, DrawablePtr pDraw)
{
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);

    if (infoRec->CopyPlane &&
        CHECK_PLANEMASK(pGC, infoRec->CopyPlaneFlags) &&
        CHECK_ROP(pGC, infoRec->CopyPlaneFlags) &&
        CHECK_ROPSRC(pGC, infoRec->CopyPlaneFlags) &&
        CHECK_COLORS(pGC, infoRec->CopyPlaneFlags)
        )
        pGC->ops->CopyPlane = infoRec->CopyPlane;
    else
        pGC->ops->CopyPlane = XAAFallbackOps.CopyPlane;
}

void
XAAValidatePushPixels(GCPtr pGC, unsigned long changes, DrawablePtr pDraw)
{
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);

    if (infoRec->PushPixelsSolid &&
        (pGC->fillStyle == FillSolid) &&
        CHECK_PLANEMASK(pGC, infoRec->PushPixelsFlags) &&
        CHECK_ROP(pGC, infoRec->PushPixelsFlags) &&
        CHECK_ROPSRC(pGC, infoRec->PushPixelsFlags) &&
        CHECK_FG(pGC, infoRec->PushPixelsFlags) &&
        (!(infoRec->PushPixelsFlags & TRANSPARENCY_GXCOPY_ONLY) ||
         (pGC->alu == GXcopy))
        )
        pGC->ops->PushPixels = infoRec->PushPixelsSolid;
    else
        pGC->ops->PushPixels = XAAFallbackOps.PushPixels;

}

/* We make the assumption that the FillSpans, PolyFillRect, FillPolygon
   and PolyFillArc functions are linked in a way that they all have 
   the same rop/color/planemask restrictions. If the driver provides 
   a GC level replacement for these, it will need to supply a new 
   Validate functions if it breaks this assumption */

void
XAAValidateFillSpans(GCPtr pGC, unsigned long changes, DrawablePtr pDraw)
{
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);

    if (pGC->fillStyle != FillTiled)
        changes &= ~GCTile;
    if ((pGC->fillStyle == FillTiled) || (pGC->fillStyle == FillSolid))
        changes &= ~GCStipple;
    if (!changes)
        return;

    pGC->ops->FillSpans = XAAFallbackOps.FillSpans;
    pGC->ops->PolyFillRect = XAAFallbackOps.PolyFillRect;
    pGC->ops->FillPolygon = XAAFallbackOps.FillPolygon;
    pGC->ops->PolyFillArc = XAAFallbackOps.PolyFillArc;

    switch (pGC->fillStyle) {
    case FillSolid:
        if (infoRec->FillSpansSolid &&
            CHECK_PLANEMASK(pGC, infoRec->FillSpansSolidFlags) &&
            CHECK_ROP(pGC, infoRec->FillSpansSolidFlags) &&
            CHECK_ROPSRC(pGC, infoRec->FillSpansSolidFlags) &&
            CHECK_FG(pGC, infoRec->FillSpansSolidFlags)
            ) {
            pGC->ops->FillSpans = infoRec->FillSpansSolid;
            pGC->ops->PolyFillRect = infoRec->PolyFillRectSolid;
            pGC->ops->FillPolygon = infoRec->FillPolygonSolid;
            pGC->ops->PolyFillArc = infoRec->PolyFillArcSolid;
        }
        break;
        /* The [Stippled/OpaqueStippled/Tiled]FillChooser 
           functions do the validating */
    case FillStippled:
        if (infoRec->FillSpansStippled) {
            pGC->ops->FillSpans = infoRec->FillSpansStippled;
            pGC->ops->PolyFillRect = infoRec->PolyFillRectStippled;
            if (infoRec->FillPolygonStippled)
                pGC->ops->FillPolygon = infoRec->FillPolygonStippled;
            else
                pGC->ops->FillPolygon = miFillPolygon;
            pGC->ops->PolyFillArc = miPolyFillArc;
        }
        break;
    case FillOpaqueStippled:
        if (infoRec->FillSpansOpaqueStippled) {
            pGC->ops->FillSpans = infoRec->FillSpansOpaqueStippled;
            pGC->ops->PolyFillRect = infoRec->PolyFillRectOpaqueStippled;
            if (infoRec->FillPolygonOpaqueStippled)
                pGC->ops->FillPolygon = infoRec->FillPolygonOpaqueStippled;
            else
                pGC->ops->FillPolygon = miFillPolygon;
            pGC->ops->PolyFillArc = miPolyFillArc;
        }
        break;
    case FillTiled:
        if (infoRec->FillSpansTiled) {
            pGC->ops->FillSpans = infoRec->FillSpansTiled;
            pGC->ops->PolyFillRect = infoRec->PolyFillRectTiled;
            if (infoRec->FillPolygonTiled)
                pGC->ops->FillPolygon = infoRec->FillPolygonTiled;
            else
                pGC->ops->FillPolygon = miFillPolygon;
            pGC->ops->PolyFillArc = miPolyFillArc;
        }
        break;
    default:
        return;
    }
}

/* We make the assumption that these Text8/16 and GlyphBlt functions
   are linked in a way that they all have the same rop/color/planemask
   restrictions. If the driver provides a GC level replacement for
   these, it will need to supply a new Validate functions if it breaks
   this assumption */

void
XAAValidatePolyGlyphBlt(GCPtr pGC, unsigned long changes, DrawablePtr pDraw)
{
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
    Bool BigFont = FALSE;

    pGC->ops->PolyText8 = XAAFallbackOps.PolyText8;
    pGC->ops->PolyText16 = XAAFallbackOps.PolyText16;
    pGC->ops->PolyGlyphBlt = XAAFallbackOps.PolyGlyphBlt;

    if (!pGC->font)
        return;
    if (pGC->fillStyle != FillSolid)
        return;

    if ((FONTMAXBOUNDS(pGC->font, rightSideBearing) -
         FONTMINBOUNDS(pGC->font, leftSideBearing) > 32))
        BigFont = TRUE;

    /* no funny business */
    if ((FONTMINBOUNDS(pGC->font, characterWidth) <= 0) ||
        ((FONTASCENT(pGC->font) + FONTDESCENT(pGC->font)) <= 0))
        return;

    /* Check for TE Fonts */
    if (!TERMINALFONT(pGC->font) || BigFont) {
        if (infoRec->PolyGlyphBltNonTE &&
            CHECK_PLANEMASK(pGC, infoRec->PolyGlyphBltNonTEFlags) &&
            CHECK_ROP(pGC, infoRec->PolyGlyphBltNonTEFlags) &&
            CHECK_ROPSRC(pGC, infoRec->PolyGlyphBltNonTEFlags) &&
            CHECK_FG(pGC, infoRec->PolyGlyphBltNonTEFlags) &&
            (!(infoRec->PolyGlyphBltNonTEFlags & TRANSPARENCY_GXCOPY_ONLY) ||
             (pGC->alu == GXcopy))
            ) {
            pGC->ops->PolyText8 = infoRec->PolyText8NonTE;
            pGC->ops->PolyText16 = infoRec->PolyText16NonTE;
            pGC->ops->PolyGlyphBlt = infoRec->PolyGlyphBltNonTE;
        }
    }
    else {
        if (infoRec->PolyGlyphBltTE &&
            CHECK_PLANEMASK(pGC, infoRec->PolyGlyphBltTEFlags) &&
            CHECK_ROP(pGC, infoRec->PolyGlyphBltTEFlags) &&
            CHECK_ROPSRC(pGC, infoRec->PolyGlyphBltNonTEFlags) &&
            CHECK_FG(pGC, infoRec->PolyGlyphBltTEFlags) &&
            (!(infoRec->PolyGlyphBltTEFlags & TRANSPARENCY_GXCOPY_ONLY) ||
             (pGC->alu == GXcopy))
            ) {
            pGC->ops->PolyText8 = infoRec->PolyText8TE;
            pGC->ops->PolyText16 = infoRec->PolyText16TE;
            pGC->ops->PolyGlyphBlt = infoRec->PolyGlyphBltTE;
        }
    }
}

void
XAAValidateImageGlyphBlt(GCPtr pGC, unsigned long changes, DrawablePtr pDraw)
{
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
    Bool BigFont = FALSE;

    pGC->ops->ImageText8 = XAAFallbackOps.ImageText8;
    pGC->ops->ImageText16 = XAAFallbackOps.ImageText16;
    pGC->ops->ImageGlyphBlt = XAAFallbackOps.ImageGlyphBlt;

    if (!pGC->font)
        return;

    if ((FONTMAXBOUNDS(pGC->font, rightSideBearing) -
         FONTMINBOUNDS(pGC->font, leftSideBearing) > 32))
        BigFont = TRUE;

    /* no funny business */
    if ((FONTMINBOUNDS(pGC->font, characterWidth) <= 0) ||
        ((FONTASCENT(pGC->font) + FONTDESCENT(pGC->font)) <= 0))
        return;

    /* Check for TE Fonts */
    if (!TERMINALFONT(pGC->font) || BigFont || (pGC->depth == 32)) {
        if (infoRec->ImageGlyphBltNonTE &&
            CHECK_PLANEMASK(pGC, infoRec->ImageGlyphBltNonTEFlags) &&
            CHECK_FG(pGC, infoRec->ImageGlyphBltNonTEFlags) &&
            infoRec->SetupForSolidFill &&
            CHECK_PLANEMASK(pGC, infoRec->SolidFillFlags) &&
            CHECK_BG(pGC, infoRec->SolidFillFlags)) {
            pGC->ops->ImageText8 = infoRec->ImageText8NonTE;
            pGC->ops->ImageText16 = infoRec->ImageText16NonTE;
            pGC->ops->ImageGlyphBlt = infoRec->ImageGlyphBltNonTE;
        }
    }
    else if (infoRec->ImageGlyphBltTE &&
             CHECK_PLANEMASK(pGC, infoRec->ImageGlyphBltTEFlags)) {
        if (!(infoRec->ImageGlyphBltTEFlags & TRANSPARENCY_ONLY) &&
            CHECK_COLORS(pGC, infoRec->ImageGlyphBltTEFlags)) {
            pGC->ops->ImageText8 = infoRec->ImageText8TE;
            pGC->ops->ImageText16 = infoRec->ImageText16TE;
            pGC->ops->ImageGlyphBlt = infoRec->ImageGlyphBltTE;
        }
        else {
            if (CHECK_FG(pGC, infoRec->ImageGlyphBltTEFlags) &&
                infoRec->SetupForSolidFill &&
                CHECK_PLANEMASK(pGC, infoRec->SolidFillFlags) &&
                CHECK_BG(pGC, infoRec->SolidFillFlags)) {
                pGC->ops->ImageText8 = infoRec->ImageText8TE;
                pGC->ops->ImageText16 = infoRec->ImageText16TE;
                pGC->ops->ImageGlyphBlt = infoRec->ImageGlyphBltTE;
            }
        }
    }
}

void
XAAValidatePolylines(GCPtr pGC, unsigned long changes, DrawablePtr pDraw)
{
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
    XAAGCPtr pGCPriv = (XAAGCPtr) dixLookupPrivate(&pGC->devPrivates,
                                                   XAAGetGCKey());

    if (pGC->lineStyle == LineSolid)
        changes &= ~GCDashList;
    if (!changes)
        return;

    pGC->ops->PolySegment = XAAFallbackOps.PolySegment;
    pGC->ops->Polylines = XAAFallbackOps.Polylines;
    pGC->ops->PolyRectangle = XAAFallbackOps.PolyRectangle;
    pGC->ops->PolyArc = XAAFallbackOps.PolyArc;

    if ((pGC->ops->FillSpans != XAAFallbackOps.FillSpans) &&
        (pGC->lineWidth > 0)) {

        pGC->ops->PolyArc = miPolyArc;
        pGC->ops->PolySegment = miPolySegment;
        pGC->ops->PolyRectangle = miPolyRectangle;
        if (pGC->lineStyle == LineSolid)
            pGC->ops->Polylines = miWideLine;
        else
            pGC->ops->Polylines = miWideDash;
    }

    if ((pGC->lineWidth == 0) && (pGC->fillStyle == FillSolid)) {

        if (pGC->lineStyle == LineSolid) {

            if (infoRec->PolyRectangleThinSolid &&
                CHECK_PLANEMASK(pGC, infoRec->PolyRectangleThinSolidFlags) &&
                CHECK_ROP(pGC, infoRec->PolyRectangleThinSolidFlags) &&
                CHECK_ROPSRC(pGC, infoRec->PolyRectangleThinSolidFlags) &&
                CHECK_FG(pGC, infoRec->PolyRectangleThinSolidFlags)) {

                pGC->ops->PolyRectangle = infoRec->PolyRectangleThinSolid;
            }

            if (infoRec->PolySegmentThinSolid &&
                CHECK_PLANEMASK(pGC, infoRec->PolySegmentThinSolidFlags) &&
                CHECK_ROP(pGC, infoRec->PolySegmentThinSolidFlags) &&
                CHECK_ROPSRC(pGC, infoRec->PolySegmentThinSolidFlags) &&
                CHECK_FG(pGC, infoRec->PolySegmentThinSolidFlags)) {

                pGC->ops->PolySegment = infoRec->PolySegmentThinSolid;
            }

            if (infoRec->PolylinesThinSolid &&
                CHECK_PLANEMASK(pGC, infoRec->PolylinesThinSolidFlags) &&
                CHECK_ROP(pGC, infoRec->PolylinesThinSolidFlags) &&
                CHECK_ROPSRC(pGC, infoRec->PolylinesThinSolidFlags) &&
                CHECK_FG(pGC, infoRec->PolylinesThinSolidFlags)) {

                pGC->ops->Polylines = infoRec->PolylinesThinSolid;
            }
        }
        else if ((pGC->lineStyle == LineOnOffDash) && pGCPriv->DashPattern) {

            if (infoRec->PolySegmentThinDashed &&
                !(infoRec->PolySegmentThinDashedFlags & NO_TRANSPARENCY) &&
                ((pGC->alu == GXcopy) || !(infoRec->PolySegmentThinDashedFlags &
                                           TRANSPARENCY_GXCOPY_ONLY)) &&
                CHECK_PLANEMASK(pGC, infoRec->PolySegmentThinDashedFlags) &&
                CHECK_ROP(pGC, infoRec->PolySegmentThinDashedFlags) &&
                CHECK_ROPSRC(pGC, infoRec->PolySegmentThinDashedFlags) &&
                CHECK_FG(pGC, infoRec->PolySegmentThinDashedFlags)) {

                pGC->ops->PolySegment = infoRec->PolySegmentThinDashed;
            }

            if (infoRec->PolylinesThinDashed &&
                !(infoRec->PolylinesThinDashedFlags & NO_TRANSPARENCY) &&
                ((pGC->alu == GXcopy) || !(infoRec->PolylinesThinDashedFlags &
                                           TRANSPARENCY_GXCOPY_ONLY)) &&
                CHECK_PLANEMASK(pGC, infoRec->PolylinesThinDashedFlags) &&
                CHECK_ROP(pGC, infoRec->PolylinesThinDashedFlags) &&
                CHECK_ROPSRC(pGC, infoRec->PolylinesThinDashedFlags) &&
                CHECK_FG(pGC, infoRec->PolylinesThinDashedFlags)) {

                pGC->ops->Polylines = infoRec->PolylinesThinDashed;
            }

            if (pGC->ops->Polylines != XAAFallbackOps.Polylines)
                pGC->ops->PolyRectangle = miPolyRectangle;

        }
        else if (pGCPriv->DashPattern && (pGC->depth != 32)) {
            /* LineDoubleDash */
            if (infoRec->PolySegmentThinDashed &&
                !(infoRec->PolySegmentThinDashedFlags & TRANSPARENCY_ONLY) &&
                CHECK_PLANEMASK(pGC, infoRec->PolySegmentThinDashedFlags) &&
                CHECK_ROP(pGC, infoRec->PolySegmentThinDashedFlags) &&
                CHECK_ROPSRC(pGC, infoRec->PolySegmentThinDashedFlags) &&
                CHECK_COLORS(pGC, infoRec->PolySegmentThinDashedFlags)) {

                pGC->ops->PolySegment = infoRec->PolySegmentThinDashed;
            }

            if (infoRec->PolylinesThinDashed &&
                !(infoRec->PolylinesThinDashedFlags & TRANSPARENCY_ONLY) &&
                CHECK_PLANEMASK(pGC, infoRec->PolylinesThinDashedFlags) &&
                CHECK_ROP(pGC, infoRec->PolylinesThinDashedFlags) &&
                CHECK_ROPSRC(pGC, infoRec->PolylinesThinDashedFlags) &&
                CHECK_COLORS(pGC, infoRec->PolylinesThinDashedFlags)) {

                pGC->ops->Polylines = infoRec->PolylinesThinDashed;
            }

            if (pGC->ops->Polylines != XAAFallbackOps.Polylines)
                pGC->ops->PolyRectangle = miPolyRectangle;

        }
    }

    if (infoRec->PolylinesWideSolid &&
        (pGC->lineWidth > 0) &&
        (pGC->fillStyle == FillSolid) &&
        (pGC->lineStyle == LineSolid) &&
        CHECK_PLANEMASK(pGC, infoRec->PolylinesWideSolidFlags) &&
        CHECK_ROP(pGC, infoRec->PolylinesWideSolidFlags) &&
        CHECK_ROPSRC(pGC, infoRec->PolylinesWideSolidFlags) &&
        CHECK_FG(pGC, infoRec->PolylinesWideSolidFlags)) {

        pGC->ops->Polylines = infoRec->PolylinesWideSolid;
    }
}
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d23 1
a23 4
XAAValidateCopyArea(
   GCPtr         pGC,
   unsigned long changes,
   DrawablePtr   pDraw )
d25 1
a25 1
   XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
d27 8
a34 8
   if(infoRec->CopyArea &&
	CHECK_PLANEMASK(pGC,infoRec->CopyAreaFlags) &&
	CHECK_ROP(pGC,infoRec->CopyAreaFlags) &&
	CHECK_ROPSRC(pGC,infoRec->CopyAreaFlags)
	)
	pGC->ops->CopyArea = infoRec->CopyArea;
   else
	pGC->ops->CopyArea = XAAFallbackOps.CopyArea;
d38 1
a38 4
XAAValidatePutImage(
   GCPtr         pGC,
   unsigned long changes,
   DrawablePtr   pDraw )
d40 1
a40 1
   XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
d42 9
a50 9
   if(infoRec->PutImage &&
	CHECK_PLANEMASK(pGC,infoRec->PutImageFlags) &&
	CHECK_ROP(pGC,infoRec->PutImageFlags) &&
	CHECK_ROPSRC(pGC,infoRec->PutImageFlags) &&
	CHECK_COLORS(pGC,infoRec->PutImageFlags)
	)
	pGC->ops->PutImage = infoRec->PutImage;
   else
	pGC->ops->PutImage = XAAFallbackOps.PutImage;
d54 1
a54 4
XAAValidateCopyPlane(
   GCPtr         pGC,
   unsigned long changes,
   DrawablePtr   pDraw )
d56 1
a56 1
   XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
d58 9
a66 9
   if(infoRec->CopyPlane &&
	CHECK_PLANEMASK(pGC,infoRec->CopyPlaneFlags) &&
	CHECK_ROP(pGC,infoRec->CopyPlaneFlags) &&
	CHECK_ROPSRC(pGC,infoRec->CopyPlaneFlags) &&
	CHECK_COLORS(pGC,infoRec->CopyPlaneFlags)
	)
	pGC->ops->CopyPlane = infoRec->CopyPlane;
   else
	pGC->ops->CopyPlane = XAAFallbackOps.CopyPlane;
d70 1
a70 4
XAAValidatePushPixels(
   GCPtr         pGC,
   unsigned long changes,
   DrawablePtr   pDraw )
d72 1
a72 1
   XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
d74 12
a85 12
   if(infoRec->PushPixelsSolid &&
	(pGC->fillStyle == FillSolid) &&
	CHECK_PLANEMASK(pGC,infoRec->PushPixelsFlags) &&
	CHECK_ROP(pGC,infoRec->PushPixelsFlags) &&
	CHECK_ROPSRC(pGC,infoRec->PushPixelsFlags) &&
	CHECK_FG(pGC,infoRec->PushPixelsFlags) &&
	(!(infoRec->PushPixelsFlags & TRANSPARENCY_GXCOPY_ONLY) ||
	  (pGC->alu == GXcopy))
	)
	pGC->ops->PushPixels = infoRec->PushPixelsSolid;
   else
	pGC->ops->PushPixels = XAAFallbackOps.PushPixels;
a88 1

a94 1

d96 1
a96 4
XAAValidateFillSpans(
   GCPtr         pGC,
   unsigned long changes,
   DrawablePtr   pDraw )
d98 1
a98 1
   XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
d100 64
a163 59
   if(pGC->fillStyle != FillTiled) changes &= ~GCTile;
   if((pGC->fillStyle == FillTiled) || (pGC->fillStyle == FillSolid)) 
	changes &= ~GCStipple;
   if(!changes) return;
   

   pGC->ops->FillSpans = XAAFallbackOps.FillSpans;
   pGC->ops->PolyFillRect = XAAFallbackOps.PolyFillRect;
   pGC->ops->FillPolygon = XAAFallbackOps.FillPolygon;
   pGC->ops->PolyFillArc = XAAFallbackOps.PolyFillArc;

   switch(pGC->fillStyle){
   case FillSolid:
	if(infoRec->FillSpansSolid &&
		CHECK_PLANEMASK(pGC,infoRec->FillSpansSolidFlags) &&
		CHECK_ROP(pGC,infoRec->FillSpansSolidFlags) &&
		CHECK_ROPSRC(pGC,infoRec->FillSpansSolidFlags) &&
		CHECK_FG(pGC,infoRec->FillSpansSolidFlags)
		) {
	     pGC->ops->FillSpans = infoRec->FillSpansSolid;
	     pGC->ops->PolyFillRect = infoRec->PolyFillRectSolid;
	     pGC->ops->FillPolygon = infoRec->FillPolygonSolid;
	     pGC->ops->PolyFillArc = infoRec->PolyFillArcSolid;
	}
	break;
    	/* The [Stippled/OpaqueStippled/Tiled]FillChooser 
		functions do the validating */
   case FillStippled:
	if(infoRec->FillSpansStippled) {
	     pGC->ops->FillSpans = infoRec->FillSpansStippled;
	     pGC->ops->PolyFillRect = infoRec->PolyFillRectStippled;
	     if(infoRec->FillPolygonStippled)
	         pGC->ops->FillPolygon = infoRec->FillPolygonStippled;
	     else pGC->ops->FillPolygon = miFillPolygon;
	     pGC->ops->PolyFillArc = miPolyFillArc;
	}
	break;
   case FillOpaqueStippled:
	if(infoRec->FillSpansOpaqueStippled) {
	     pGC->ops->FillSpans = infoRec->FillSpansOpaqueStippled;
	     pGC->ops->PolyFillRect = infoRec->PolyFillRectOpaqueStippled;
	     if(infoRec->FillPolygonOpaqueStippled)
	         pGC->ops->FillPolygon = infoRec->FillPolygonOpaqueStippled;
	     else pGC->ops->FillPolygon = miFillPolygon;
	     pGC->ops->PolyFillArc = miPolyFillArc;
	}
	break;
   case FillTiled:
	if(infoRec->FillSpansTiled) {
	     pGC->ops->FillSpans = infoRec->FillSpansTiled;
	     pGC->ops->PolyFillRect = infoRec->PolyFillRectTiled;
	     if(infoRec->FillPolygonTiled)
	         pGC->ops->FillPolygon = infoRec->FillPolygonTiled;
	     else pGC->ops->FillPolygon = miFillPolygon;
	     pGC->ops->PolyFillArc = miPolyFillArc;
	}
	break;
   default: return;
   }
a165 1

d173 1
a173 4
XAAValidatePolyGlyphBlt(
   GCPtr         pGC,
   unsigned long changes,
   DrawablePtr   pDraw )
d175 2
a176 2
   XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
   Bool BigFont = FALSE;
d178 47
a224 44
   pGC->ops->PolyText8 = XAAFallbackOps.PolyText8;
   pGC->ops->PolyText16 = XAAFallbackOps.PolyText16;
   pGC->ops->PolyGlyphBlt = XAAFallbackOps.PolyGlyphBlt;

   if(!pGC->font) return;
   if(pGC->fillStyle != FillSolid) return;

   if((FONTMAXBOUNDS(pGC->font, rightSideBearing) - 
	FONTMINBOUNDS(pGC->font, leftSideBearing) > 32))
	BigFont = TRUE;

   /* no funny business */
   if((FONTMINBOUNDS(pGC->font, characterWidth) <= 0) ||
	((FONTASCENT(pGC->font) + FONTDESCENT(pGC->font)) <= 0))
	return;

   /* Check for TE Fonts */
   if(!TERMINALFONT(pGC->font) || BigFont) {
	if(infoRec->PolyGlyphBltNonTE &&
	    CHECK_PLANEMASK(pGC,infoRec->PolyGlyphBltNonTEFlags) &&
	    CHECK_ROP(pGC,infoRec->PolyGlyphBltNonTEFlags) &&
	    CHECK_ROPSRC(pGC,infoRec->PolyGlyphBltNonTEFlags) &&
	    CHECK_FG(pGC,infoRec->PolyGlyphBltNonTEFlags) &&
	    (!(infoRec->PolyGlyphBltNonTEFlags & TRANSPARENCY_GXCOPY_ONLY) ||
	  	(pGC->alu == GXcopy))
	) {
	    pGC->ops->PolyText8 = infoRec->PolyText8NonTE; 
	    pGC->ops->PolyText16 = infoRec->PolyText16NonTE;
	    pGC->ops->PolyGlyphBlt = infoRec->PolyGlyphBltNonTE;
	}
   } else {
	if(infoRec->PolyGlyphBltTE &&
	    CHECK_PLANEMASK(pGC,infoRec->PolyGlyphBltTEFlags) &&
	    CHECK_ROP(pGC,infoRec->PolyGlyphBltTEFlags) &&
	    CHECK_ROPSRC(pGC,infoRec->PolyGlyphBltNonTEFlags) &&
	    CHECK_FG(pGC,infoRec->PolyGlyphBltTEFlags) &&
	    (!(infoRec->PolyGlyphBltTEFlags & TRANSPARENCY_GXCOPY_ONLY) ||
	  	(pGC->alu == GXcopy))
	) {
	    pGC->ops->PolyText8 = infoRec->PolyText8TE;
	    pGC->ops->PolyText16 = infoRec->PolyText16TE;
	    pGC->ops->PolyGlyphBlt = infoRec->PolyGlyphBltTE;
	}
   }
d228 1
a228 4
XAAValidateImageGlyphBlt(
   GCPtr         pGC,
   unsigned long changes,
   DrawablePtr   pDraw )
d230 2
a231 2
   XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
   Bool BigFont = FALSE;
d233 47
a279 48
   pGC->ops->ImageText8 = XAAFallbackOps.ImageText8;
   pGC->ops->ImageText16 = XAAFallbackOps.ImageText16;
   pGC->ops->ImageGlyphBlt = XAAFallbackOps.ImageGlyphBlt;

   if(!pGC->font) return;

   if((FONTMAXBOUNDS(pGC->font, rightSideBearing) - 
	FONTMINBOUNDS(pGC->font, leftSideBearing) > 32))
	BigFont = TRUE;

   /* no funny business */
   if((FONTMINBOUNDS(pGC->font, characterWidth) <= 0) ||
	((FONTASCENT(pGC->font) + FONTDESCENT(pGC->font)) <= 0))
	return;


   /* Check for TE Fonts */
   if(!TERMINALFONT(pGC->font) || BigFont || (pGC->depth == 32)) {
	if(infoRec->ImageGlyphBltNonTE &&
		CHECK_PLANEMASK(pGC,infoRec->ImageGlyphBltNonTEFlags) &&
		CHECK_FG(pGC,infoRec->ImageGlyphBltNonTEFlags) &&
	   infoRec->SetupForSolidFill &&
		CHECK_PLANEMASK(pGC,infoRec->SolidFillFlags) &&
		CHECK_BG(pGC,infoRec->SolidFillFlags))
	{
		pGC->ops->ImageText8 = infoRec->ImageText8NonTE;
		pGC->ops->ImageText16 = infoRec->ImageText16NonTE;
		pGC->ops->ImageGlyphBlt = infoRec->ImageGlyphBltNonTE;
	}
   } else if(infoRec->ImageGlyphBltTE &&
	     CHECK_PLANEMASK(pGC,infoRec->ImageGlyphBltTEFlags)){
	if(!(infoRec->ImageGlyphBltTEFlags & TRANSPARENCY_ONLY) &&  
		CHECK_COLORS(pGC,infoRec->ImageGlyphBltTEFlags))
	{
		pGC->ops->ImageText8 = infoRec->ImageText8TE;
		pGC->ops->ImageText16 = infoRec->ImageText16TE;
		pGC->ops->ImageGlyphBlt = infoRec->ImageGlyphBltTE;
	} else {
	   if(CHECK_FG(pGC,infoRec->ImageGlyphBltTEFlags) &&
	      infoRec->SetupForSolidFill &&
	      CHECK_PLANEMASK(pGC,infoRec->SolidFillFlags) &&
	      CHECK_BG(pGC,infoRec->SolidFillFlags)) 
	   {
		pGC->ops->ImageText8 = infoRec->ImageText8TE;
		pGC->ops->ImageText16 = infoRec->ImageText16TE;
		pGC->ops->ImageGlyphBlt = infoRec->ImageGlyphBltTE;
	   }
	}
a282 1

d284 1
a284 4
XAAValidatePolylines(
   GCPtr         pGC,
   unsigned long changes,
   DrawablePtr   pDraw )
d286 25
a310 119
   XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
   XAAGCPtr pGCPriv = (XAAGCPtr)dixLookupPrivate(&pGC->devPrivates,
						 XAAGetGCKey());

   if(pGC->lineStyle == LineSolid) changes &= ~GCDashList;
   if(!changes) return;

   pGC->ops->PolySegment = XAAFallbackOps.PolySegment;
   pGC->ops->Polylines = XAAFallbackOps.Polylines;
   pGC->ops->PolyRectangle = XAAFallbackOps.PolyRectangle;
   pGC->ops->PolyArc = XAAFallbackOps.PolyArc;

   if((pGC->ops->FillSpans != XAAFallbackOps.FillSpans) &&
	(pGC->lineWidth > 0)){
	
	pGC->ops->PolyArc = miPolyArc;	
	pGC->ops->PolySegment = miPolySegment;	
	pGC->ops->PolyRectangle = miPolyRectangle;
	if(pGC->lineStyle == LineSolid)
	    pGC->ops->Polylines = miWideLine;
	else
	    pGC->ops->Polylines = miWideDash;
   }

   if((pGC->lineWidth == 0) && (pGC->fillStyle == FillSolid)) {

	if(pGC->lineStyle == LineSolid) {

	   if(infoRec->PolyRectangleThinSolid &&
		CHECK_PLANEMASK(pGC,infoRec->PolyRectangleThinSolidFlags) &&
		CHECK_ROP(pGC,infoRec->PolyRectangleThinSolidFlags) &&
		CHECK_ROPSRC(pGC,infoRec->PolyRectangleThinSolidFlags) &&
		CHECK_FG(pGC,infoRec->PolyRectangleThinSolidFlags)) {

		pGC->ops->PolyRectangle = infoRec->PolyRectangleThinSolid;
	   }

	   if(infoRec->PolySegmentThinSolid &&
		CHECK_PLANEMASK(pGC,infoRec->PolySegmentThinSolidFlags) &&
		CHECK_ROP(pGC,infoRec->PolySegmentThinSolidFlags) &&
		CHECK_ROPSRC(pGC,infoRec->PolySegmentThinSolidFlags) &&
		CHECK_FG(pGC,infoRec->PolySegmentThinSolidFlags)) {

		pGC->ops->PolySegment = infoRec->PolySegmentThinSolid;
	   }

	   if(infoRec->PolylinesThinSolid &&
		CHECK_PLANEMASK(pGC,infoRec->PolylinesThinSolidFlags) &&
		CHECK_ROP(pGC,infoRec->PolylinesThinSolidFlags) &&
		CHECK_ROPSRC(pGC,infoRec->PolylinesThinSolidFlags) &&
		CHECK_FG(pGC,infoRec->PolylinesThinSolidFlags)) {

		pGC->ops->Polylines = infoRec->PolylinesThinSolid;
	    }
	} else if((pGC->lineStyle == LineOnOffDash) && pGCPriv->DashPattern){

	   if(infoRec->PolySegmentThinDashed &&
		!(infoRec->PolySegmentThinDashedFlags & NO_TRANSPARENCY) &&
		((pGC->alu == GXcopy) || !(infoRec->PolySegmentThinDashedFlags &
					TRANSPARENCY_GXCOPY_ONLY)) &&
		CHECK_PLANEMASK(pGC,infoRec->PolySegmentThinDashedFlags) &&
		CHECK_ROP(pGC,infoRec->PolySegmentThinDashedFlags) &&
		CHECK_ROPSRC(pGC,infoRec->PolySegmentThinDashedFlags) &&
		CHECK_FG(pGC,infoRec->PolySegmentThinDashedFlags)) {

		pGC->ops->PolySegment = infoRec->PolySegmentThinDashed;
	   }

	   if(infoRec->PolylinesThinDashed &&
		!(infoRec->PolylinesThinDashedFlags & NO_TRANSPARENCY) &&
		((pGC->alu == GXcopy) || !(infoRec->PolylinesThinDashedFlags &
					TRANSPARENCY_GXCOPY_ONLY)) &&
		CHECK_PLANEMASK(pGC,infoRec->PolylinesThinDashedFlags) &&
		CHECK_ROP(pGC,infoRec->PolylinesThinDashedFlags) &&
		CHECK_ROPSRC(pGC,infoRec->PolylinesThinDashedFlags) &&
		CHECK_FG(pGC,infoRec->PolylinesThinDashedFlags)) {

		pGC->ops->Polylines = infoRec->PolylinesThinDashed;
	    }

	   if(pGC->ops->Polylines != XAAFallbackOps.Polylines)
		pGC->ops->PolyRectangle = miPolyRectangle;

	} else if(pGCPriv->DashPattern && (pGC->depth != 32)) { 
           /* LineDoubleDash */
	   if(infoRec->PolySegmentThinDashed &&
		!(infoRec->PolySegmentThinDashedFlags & TRANSPARENCY_ONLY) &&
		CHECK_PLANEMASK(pGC,infoRec->PolySegmentThinDashedFlags) &&
		CHECK_ROP(pGC,infoRec->PolySegmentThinDashedFlags) &&
		CHECK_ROPSRC(pGC,infoRec->PolySegmentThinDashedFlags) &&
		CHECK_COLORS(pGC,infoRec->PolySegmentThinDashedFlags)) {

		pGC->ops->PolySegment = infoRec->PolySegmentThinDashed;
	   }

	   if(infoRec->PolylinesThinDashed &&
		!(infoRec->PolylinesThinDashedFlags & TRANSPARENCY_ONLY) &&
		CHECK_PLANEMASK(pGC,infoRec->PolylinesThinDashedFlags) &&
		CHECK_ROP(pGC,infoRec->PolylinesThinDashedFlags) &&
		CHECK_ROPSRC(pGC,infoRec->PolylinesThinDashedFlags) &&
		CHECK_COLORS(pGC,infoRec->PolylinesThinDashedFlags)) {

		pGC->ops->Polylines = infoRec->PolylinesThinDashed;
	    }

	   if(pGC->ops->Polylines != XAAFallbackOps.Polylines)
		pGC->ops->PolyRectangle = miPolyRectangle;

	}
   }

   if(infoRec->PolylinesWideSolid &&
	(pGC->lineWidth > 0) &&
	(pGC->fillStyle == FillSolid) &&
	(pGC->lineStyle == LineSolid) &&
	CHECK_PLANEMASK(pGC,infoRec->PolylinesWideSolidFlags) &&
	CHECK_ROP(pGC,infoRec->PolylinesWideSolidFlags) &&
	CHECK_ROPSRC(pGC,infoRec->PolylinesWideSolidFlags) &&
	CHECK_FG(pGC,infoRec->PolylinesWideSolidFlags)) {
d312 100
a411 2
	pGC->ops->Polylines = infoRec->PolylinesWideSolid;
   } 
@


1.1
log
@Initial revision
@
text
@d308 2
a309 1
   XAAGCPtr   pGCPriv = (XAAGCPtr) (pGC)->devPrivates[XAAGCIndex].ptr;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d308 1
a308 1
   XAAGCPtr   pGCPriv = (XAAGCPtr) (pGC)->devPrivates[XAAGetGCIndex()].ptr;
@

