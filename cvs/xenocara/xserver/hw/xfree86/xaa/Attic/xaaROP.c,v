head	1.3;
access;
symbols
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.18
	OPENBSD_5_0:1.1.1.2.0.16
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.12
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.14
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.06.07.17.28.53;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2012.06.10.13.21.28;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.17.45;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.17.45;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.58.27;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/X.h>
#include "misc.h"
#include "xf86.h"
#include "xf86_OSproc.h"

#include "scrnintstr.h"
#include "xf86str.h"
#include "xaarop.h"
#include "xaa.h"
#include "xaalocal.h"

int XAACopyROP[16] = {
    ROP_0,                      /* GXclear */
    ROP_DSa,                    /* GXand */
    ROP_SDna,                   /* GXandReverse */
    ROP_S,                      /* GXcopy */
    ROP_DSna,                   /* GXandInverted */
    ROP_D,                      /* GXnoop */
    ROP_DSx,                    /* GXxor */
    ROP_DSo,                    /* GXor */
    ROP_DSon,                   /* GXnor */
    ROP_DSxn,                   /* GXequiv */
    ROP_Dn,                     /* GXinvert */
    ROP_SDno,                   /* GXorReverse */
    ROP_Sn,                     /* GXcopyInverted */
    ROP_DSno,                   /* GXorInverted */
    ROP_DSan,                   /* GXnand */
    ROP_1                       /* GXset */
};

int XAACopyROP_PM[16] = {
    ROP_0,                      /* not used */
    ROP_DSPnoa,
    ROP_DPSnaon,
    ROP_DPSDxax,
    ROP_DPSana,
    ROP_D,                      /* not used */
    ROP_DPSax,
    ROP_DPSao,
    ROP_DPSaon,
    ROP_DPSaxn,
    ROP_Dn,                     /* not used */
    ROP_DPSanan,
    ROP_PSDPxox,                /* is that correct ? */
    ROP_DPSnao,
    ROP_DSPnoan,
    ROP_1                       /* not used */
};

int XAAPatternROP[16] = {
    ROP_0,
    ROP_DPa,
    ROP_PDna,
    ROP_P,
    ROP_DPna,
    ROP_D,
    ROP_DPx,
    ROP_DPo,
    ROP_DPon,
    ROP_PDxn,
    ROP_Dn,
    ROP_PDno,
    ROP_Pn,
    ROP_DPno,
    ROP_DPan,
    ROP_1
};

int XAAPatternROP_PM[16] = {
    ROP_DPna,
    ROP_DPSnoa,
    ROP_DSPnaon,
    ROP_DSPDxax,
    ROP_DPSana,
    ROP_D,
    ROP_DPSax,
    ROP_DPSao,
    ROP_DPSaon,
    ROP_DPSaxn,
    ROP_DPx,
    ROP_DPSanan,
    ROP_SPDSxox,                /* is that correct ? */
    ROP_DSPnao,
    ROP_DPSnoan,
    ROP_DPo
};

int
XAAGetCopyROP(int i)
{
    return XAACopyROP[i];
}

int
XAAGetCopyROP_PM(int i)
{
    return XAACopyROP_PM[i];
}

int
XAAGetPatternROP(int i)
{
    return XAAPatternROP[i];
}

int
XAAGetPatternROP_PM(int i)
{
    return XAAPatternROP_PM[i];
}

int
XAAHelpPatternROP(ScrnInfoPtr pScrn, int *fg, int *bg, int pm, int *rop)
{
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_SCRNINFOPTR(pScrn);
    int ret = 0;

    pm &= infoRec->FullPlanemasks[pScrn->depth - 1];

    if (pm == infoRec->FullPlanemasks[pScrn->depth - 1]) {
        if (!NO_SRC_ROP(*rop))
            ret |= ROP_PAT;
        *rop = XAAPatternROP[*rop];
    }
    else {
        switch (*rop) {
        case GXnoop:
            break;
        case GXset:
        case GXclear:
        case GXinvert:
            ret |= ROP_PAT;
            *fg = pm;
            if (*bg != -1)
                *bg = pm;
            break;
        default:
            ret |= ROP_PAT | ROP_SRC;
            break;
        }
        *rop = XAAPatternROP_PM[*rop];
    }

    return ret;
}

int
XAAHelpSolidROP(ScrnInfoPtr pScrn, int *fg, int pm, int *rop)
{
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_SCRNINFOPTR(pScrn);
    int ret = 0;

    pm &= infoRec->FullPlanemasks[pScrn->depth - 1];

    if (pm == infoRec->FullPlanemasks[pScrn->depth - 1]) {
        if (!NO_SRC_ROP(*rop))
            ret |= ROP_PAT;
        *rop = XAAPatternROP[*rop];
    }
    else {
        switch (*rop) {
        case GXnoop:
            break;
        case GXset:
        case GXclear:
        case GXinvert:
            ret |= ROP_PAT;
            *fg = pm;
            break;
        default:
            ret |= ROP_PAT | ROP_SRC;
            break;
        }
        *rop = XAAPatternROP_PM[*rop];
    }

    return ret;
}
@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.1
log
@Initial revision
@
text
@a0 2
/* $XFree86$ */

d16 17
a32 19

int XAACopyROP[16] =
{
   ROP_0,               /* GXclear */
   ROP_DSa,             /* GXand */
   ROP_SDna,            /* GXandReverse */
   ROP_S,               /* GXcopy */
   ROP_DSna,            /* GXandInverted */
   ROP_D,               /* GXnoop */
   ROP_DSx,             /* GXxor */
   ROP_DSo,             /* GXor */
   ROP_DSon,            /* GXnor */
   ROP_DSxn,            /* GXequiv */
   ROP_Dn,              /* GXinvert*/
   ROP_SDno,            /* GXorReverse */
   ROP_Sn,              /* GXcopyInverted */
   ROP_DSno,            /* GXorInverted */
   ROP_DSan,            /* GXnand */
   ROP_1                /* GXset */
d35 17
a51 18
int XAACopyROP_PM[16] =
{
   ROP_0,		/* not used */
   ROP_DSPnoa,
   ROP_DPSnaon,
   ROP_DPSDxax,
   ROP_DPSana,
   ROP_D,		/* not used */
   ROP_DPSax,
   ROP_DPSao,
   ROP_DPSaon,
   ROP_DPSaxn,
   ROP_Dn,		/* not used */
   ROP_DPSanan,
   ROP_PSDPxox,		/* is that correct ? */
   ROP_DPSnao,
   ROP_DSPnoan,
   ROP_1		/* not used */
d54 17
a70 19

int XAAPatternROP[16]=
{
   ROP_0,
   ROP_DPa,
   ROP_PDna,
   ROP_P,
   ROP_DPna,
   ROP_D,
   ROP_DPx,
   ROP_DPo,
   ROP_DPon,
   ROP_PDxn,
   ROP_Dn,
   ROP_PDno,
   ROP_Pn,
   ROP_DPno,
   ROP_DPan,
   ROP_1
d73 17
a89 18
int XAAPatternROP_PM[16] =
{
   ROP_DPna,
   ROP_DPSnoa,
   ROP_DSPnaon,
   ROP_DSPDxax,
   ROP_DPSana,
   ROP_D,
   ROP_DPSax,
   ROP_DPSao,
   ROP_DPSaon,
   ROP_DPSaxn,
   ROP_DPx,
   ROP_DPSanan, 
   ROP_SPDSxox,		/* is that correct ? */
   ROP_DSPnao,
   ROP_DPSnoan,
   ROP_DPo
d92 2
a93 1
int XAAGetCopyROP(int i)
d98 2
a99 1
int XAAGetCopyROP_PM(int i)
d104 2
a105 1
int XAAGetPatternROP(int i)
d110 2
a111 1
int XAAGetPatternROP_PM(int i)
d121 1
a121 1
    
d124 22
a145 21
    if(pm == infoRec->FullPlanemasks[pScrn->depth - 1]) {
	if(!NO_SRC_ROP(*rop)) 
	   ret |= ROP_PAT;
	*rop = XAAPatternROP[*rop];
    } else {	
	switch(*rop) {
	case GXnoop:
	    break;
	case GXset:
	case GXclear:
	case GXinvert:
	    ret |= ROP_PAT;
	    *fg = pm;
	    if(*bg != -1)
		*bg = pm;
	    break;
	default:
	    ret |= ROP_PAT | ROP_SRC;
	    break;
	}
	*rop = XAAPatternROP_PM[*rop];
a150 1

d156 1
a156 1
    
d159 20
a178 19
    if(pm == infoRec->FullPlanemasks[pScrn->depth - 1]) {
	if(!NO_SRC_ROP(*rop)) 
	   ret |= ROP_PAT;
	*rop = XAAPatternROP[*rop];
    } else {	
	switch(*rop) {
	case GXnoop:
	    break;
	case GXset:
	case GXclear:
	case GXinvert:
	    ret |= ROP_PAT;
	    *fg = pm;
	    break;
	default:
	    ret |= ROP_PAT | ROP_SRC;
	    break;
	}
	*rop = XAAPatternROP_PM[*rop];
a182 1

@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 2
@

