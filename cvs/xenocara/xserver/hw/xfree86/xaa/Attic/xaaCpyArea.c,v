head	1.6;
access;
symbols
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.06.07.17.28.53;	author matthieu;	state dead;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.27;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.35;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.17.42;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.17.42;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@
#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "misc.h"
#include "xf86.h"
#include "xf86_OSproc.h"

#include <X11/X.h>
#include "scrnintstr.h"
#include "xf86str.h"
#include "xaa.h"
#include "xaalocal.h"
#include "migc.h"
#include "gcstruct.h"
#include "pixmapstr.h"

/*
  Written mostly by Harm Hanemaayer (H.Hanemaayer@@inter.nl.net).
 */

RegionPtr
XAACopyArea(DrawablePtr pSrcDrawable,
            DrawablePtr pDstDrawable,
            GC * pGC,
            int srcx, int srcy, int width, int height, int dstx, int dsty)
{
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);

    if (pDstDrawable->type == DRAWABLE_WINDOW) {
        if ((pSrcDrawable->type == DRAWABLE_WINDOW) ||
            IS_OFFSCREEN_PIXMAP(pSrcDrawable)) {
            if (infoRec->ScreenToScreenBitBlt &&
                CHECK_ROP(pGC, infoRec->ScreenToScreenBitBltFlags) &&
                CHECK_ROPSRC(pGC, infoRec->ScreenToScreenBitBltFlags) &&
                CHECK_PLANEMASK(pGC, infoRec->ScreenToScreenBitBltFlags))
                return (XAABitBlt(pSrcDrawable, pDstDrawable,
                                  pGC, srcx, srcy, width, height, dstx, dsty,
                                  XAADoBitBlt, 0L));
        }
        else {
            if (infoRec->WritePixmap &&
                ((pDstDrawable->bitsPerPixel == pSrcDrawable->bitsPerPixel) ||
                 ((pDstDrawable->bitsPerPixel == 24) &&
                  (pSrcDrawable->bitsPerPixel == 32) &&
                  (infoRec->WritePixmapFlags & CONVERT_32BPP_TO_24BPP))) &&
                CHECK_ROP(pGC, infoRec->WritePixmapFlags) &&
                CHECK_ROPSRC(pGC, infoRec->WritePixmapFlags) &&
                CHECK_PLANEMASK(pGC, infoRec->WritePixmapFlags) &&
                CHECK_NO_GXCOPY(pGC, infoRec->WritePixmapFlags))
                return (XAABitBlt(pSrcDrawable, pDstDrawable,
                                  pGC, srcx, srcy, width, height, dstx, dsty,
                                  XAADoImageWrite, 0L));
        }
    }
    else if (IS_OFFSCREEN_PIXMAP(pDstDrawable)) {
        if ((pSrcDrawable->type == DRAWABLE_WINDOW) ||
            IS_OFFSCREEN_PIXMAP(pSrcDrawable)) {
            if (infoRec->ScreenToScreenBitBlt &&
                CHECK_ROP(pGC, infoRec->ScreenToScreenBitBltFlags) &&
                CHECK_ROPSRC(pGC, infoRec->ScreenToScreenBitBltFlags) &&
                CHECK_PLANEMASK(pGC, infoRec->ScreenToScreenBitBltFlags))
                return (XAABitBlt(pSrcDrawable, pDstDrawable,
                                  pGC, srcx, srcy, width, height, dstx, dsty,
                                  XAADoBitBlt, 0L));
        }
    }

    return (XAAFallbackOps.CopyArea(pSrcDrawable, pDstDrawable, pGC,
                                    srcx, srcy, width, height, dstx, dsty));
}

void
XAADoBitBlt(DrawablePtr pSrc,
            DrawablePtr pDst, GC * pGC, RegionPtr prgnDst, DDXPointPtr pptSrc)
{
    int nbox, careful;
    BoxPtr pbox, pboxTmp, pboxNext, pboxBase, pboxNew1, pboxNew2;
    DDXPointPtr pptTmp, pptNew1, pptNew2;
    int xdir, ydir;
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);

    /* XXX we have to err on the side of safety when both are windows,
     * because we don't know if IncludeInferiors is being used.
     */
    careful = ((pSrc == pDst) ||
               ((pSrc->type == DRAWABLE_WINDOW) &&
                (pDst->type == DRAWABLE_WINDOW)));

    pbox = RegionRects(prgnDst);
    nbox = RegionNumRects(prgnDst);

    pboxNew1 = NULL;
    pptNew1 = NULL;
    pboxNew2 = NULL;
    pptNew2 = NULL;
    if (careful && (pptSrc->y < pbox->y1)) {
        /* walk source botttom to top */
        ydir = -1;

        if (nbox > 1) {
            /* keep ordering in each band, reverse order of bands */
            pboxNew1 = (BoxPtr) malloc(sizeof(BoxRec) * nbox);
            if (!pboxNew1)
                return;
            pptNew1 = (DDXPointPtr) malloc(sizeof(DDXPointRec) * nbox);
            if (!pptNew1) {
                free(pboxNew1);
                return;
            }
            pboxBase = pboxNext = pbox + nbox - 1;
            while (pboxBase >= pbox) {
                while ((pboxNext >= pbox) && (pboxBase->y1 == pboxNext->y1))
                    pboxNext--;
                pboxTmp = pboxNext + 1;
                pptTmp = pptSrc + (pboxTmp - pbox);
                while (pboxTmp <= pboxBase) {
                    *pboxNew1++ = *pboxTmp++;
                    *pptNew1++ = *pptTmp++;
                }
                pboxBase = pboxNext;
            }
            pboxNew1 -= nbox;
            pbox = pboxNew1;
            pptNew1 -= nbox;
            pptSrc = pptNew1;
        }
    }
    else {
        /* walk source top to bottom */
        ydir = 1;
    }

    if (careful && (pptSrc->x < pbox->x1)) {
        /* walk source right to left */
        xdir = -1;

        if (nbox > 1) {
            /* reverse order of rects in each band */
            pboxNew2 = (BoxPtr) malloc(sizeof(BoxRec) * nbox);
            pptNew2 = (DDXPointPtr) malloc(sizeof(DDXPointRec) * nbox);
            if (!pboxNew2 || !pptNew2) {
                free(pptNew2);
                free(pboxNew2);
                if (pboxNew1) {
                    free(pptNew1);
                    free(pboxNew1);
                }
                return;
            }
            pboxBase = pboxNext = pbox;
            while (pboxBase < pbox + nbox) {
                while ((pboxNext < pbox + nbox) &&
                       (pboxNext->y1 == pboxBase->y1))
                    pboxNext++;
                pboxTmp = pboxNext;
                pptTmp = pptSrc + (pboxTmp - pbox);
                while (pboxTmp != pboxBase) {
                    *pboxNew2++ = *--pboxTmp;
                    *pptNew2++ = *--pptTmp;
                }
                pboxBase = pboxNext;
            }
            pboxNew2 -= nbox;
            pbox = pboxNew2;
            pptNew2 -= nbox;
            pptSrc = pptNew2;
        }
    }
    else {
        /* walk source left to right */
        xdir = 1;
    }

    (*infoRec->ScreenToScreenBitBlt) (infoRec->pScrn, nbox, pptSrc, pbox,
                                      xdir, ydir, pGC->alu, pGC->planemask);

    if (pboxNew2) {
        free(pptNew2);
        free(pboxNew2);
    }
    if (pboxNew1) {
        free(pptNew1);
        free(pboxNew1);
    }

}

void
XAADoImageWrite(DrawablePtr pSrc,
                DrawablePtr pDst,
                GC * pGC, RegionPtr prgnDst, DDXPointPtr pptSrc)
{
    int srcwidth;
    unsigned char *psrcBase;    /* start of image */
    unsigned char *srcPntr;     /* index into the image */
    BoxPtr pbox = RegionRects(prgnDst);
    int nbox = RegionNumRects(prgnDst);
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
    int Bpp = pSrc->bitsPerPixel >> 3;

    psrcBase = (unsigned char *) ((PixmapPtr) pSrc)->devPrivate.ptr;
    srcwidth = (int) ((PixmapPtr) pSrc)->devKind;

    for (; nbox; pbox++, pptSrc++, nbox--) {
        srcPntr = psrcBase + (pptSrc->y * srcwidth) + (pptSrc->x * Bpp);

        (*infoRec->WritePixmap) (infoRec->pScrn, pbox->x1, pbox->y1,
                                 pbox->x2 - pbox->x1, pbox->y2 - pbox->y1,
                                 srcPntr, srcwidth, pGC->alu, pGC->planemask,
                                 -1, pSrc->bitsPerPixel, pSrc->depth);
    }
}

void
XAADoImageRead(DrawablePtr pSrc,
               DrawablePtr pDst,
               GC * pGC, RegionPtr prgnDst, DDXPointPtr pptSrc)
{
    int dstwidth;
    unsigned char *pdstBase;    /* start of image */
    unsigned char *dstPntr;     /* index into the image */
    BoxPtr pbox = RegionRects(prgnDst);
    int nbox = RegionNumRects(prgnDst);
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
    int Bpp = pSrc->bitsPerPixel >> 3;  /* wouldn't get here unless both
                                           src and dst have same bpp */

    pdstBase = (unsigned char *) ((PixmapPtr) pDst)->devPrivate.ptr;
    dstwidth = (int) ((PixmapPtr) pDst)->devKind;

    for (; nbox; pbox++, pptSrc++, nbox--) {
        dstPntr = pdstBase + (pbox->y1 * dstwidth) + (pbox->x1 * Bpp);

        (*infoRec->ReadPixmap) (infoRec->pScrn, pptSrc->x, pptSrc->y,
                                pbox->x2 - pbox->x1, pbox->y2 - pbox->y1,
                                dstPntr, dstwidth, pSrc->bitsPerPixel,
                                pSrc->depth);
    }
}

void
XAAScreenToScreenBitBlt(ScrnInfoPtr pScrn,
                        int nbox,
                        DDXPointPtr pptSrc,
                        BoxPtr pbox,
                        int xdir, int ydir, int alu, unsigned int planemask)
{
    XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_SCRNINFOPTR(pScrn);
    int dirsetup;

    if ((!(infoRec->CopyAreaFlags & ONLY_TWO_BITBLT_DIRECTIONS)
         || (xdir == ydir)) &&
        (!(infoRec->CopyAreaFlags & ONLY_LEFT_TO_RIGHT_BITBLT)
         || (xdir == 1))) {
        (*infoRec->SetupForScreenToScreenCopy) (pScrn,
                                                xdir, ydir, alu, planemask, -1);
        for (; nbox; pbox++, pptSrc++, nbox--)
            (*infoRec->SubsequentScreenToScreenCopy) (pScrn, pptSrc->x,
                                                      pptSrc->y, pbox->x1,
                                                      pbox->y1,
                                                      pbox->x2 - pbox->x1,
                                                      pbox->y2 - pbox->y1);
        SET_SYNC_FLAG(infoRec);
        return;
    }

    if (infoRec->CopyAreaFlags & ONLY_LEFT_TO_RIGHT_BITBLT) {
        /*
         * This is the case of a chip that only supports xdir = 1,
         * with ydir = 1 or ydir = -1, but we have xdir = -1.
         */
        (*infoRec->SetupForScreenToScreenCopy) (pScrn,
                                                1, ydir, alu, planemask, -1);
        for (; nbox; pbox++, pptSrc++, nbox--)
            if (pptSrc->y != pbox->y1 || pptSrc->x >= pbox->x1)
                /* No problem. Do a xdir = 1 blit instead. */
                (*infoRec->SubsequentScreenToScreenCopy) (pScrn,
                                                          pptSrc->x, pptSrc->y,
                                                          pbox->x1, pbox->y1,
                                                          pbox->x2 - pbox->x1,
                                                          pbox->y2 - pbox->y1);
            else {
                /*
                 * This is the difficult case. Needs striping into
                 * non-overlapping horizontal chunks.
                 */
                int stripeWidth, w, fullStripes, extra, i;

                stripeWidth = 16;
                w = pbox->x2 - pbox->x1;
                if (pbox->x1 - pptSrc->x < stripeWidth)
                    stripeWidth = pbox->x1 - pptSrc->x;
                fullStripes = w / stripeWidth;
                extra = w % stripeWidth;

                /* First, take care of the little bit on the far right */
                if (extra)
                    (*infoRec->SubsequentScreenToScreenCopy) (pScrn,
                                                              pptSrc->x +
                                                              fullStripes *
                                                              stripeWidth,
                                                              pptSrc->y,
                                                              pbox->x1 +
                                                              fullStripes *
                                                              stripeWidth,
                                                              pbox->y1, extra,
                                                              pbox->y2 -
                                                              pbox->y1);

                /* Now, take care of the rest of the blit */
                for (i = fullStripes - 1; i >= 0; i--)
                    (*infoRec->SubsequentScreenToScreenCopy) (pScrn,
                                                              pptSrc->x +
                                                              i * stripeWidth,
                                                              pptSrc->y,
                                                              pbox->x1 +
                                                              i * stripeWidth,
                                                              pbox->y1,
                                                              stripeWidth,
                                                              pbox->y2 -
                                                              pbox->y1);
            }
        SET_SYNC_FLAG(infoRec);
        return;
    }

    /*
     * Now the case of a chip that only supports xdir = ydir = 1 or
     * xdir = ydir = -1, but we have xdir != ydir.
     */
    dirsetup = 0;               /* No direction set up yet. */
    for (; nbox; pbox++, pptSrc++, nbox--) {
        if (xdir == 1 && pptSrc->y != pbox->y1) {
            /* Do a xdir = ydir = -1 blit instead. */
            if (dirsetup != -1) {
                (*infoRec->SetupForScreenToScreenCopy) (pScrn,
                                                        -1, -1, alu, planemask,
                                                        -1);
                dirsetup = -1;
            }
            (*infoRec->SubsequentScreenToScreenCopy) (pScrn, pptSrc->x,
                                                      pptSrc->y, pbox->x1,
                                                      pbox->y1,
                                                      pbox->x2 - pbox->x1,
                                                      pbox->y2 - pbox->y1);
        }
        else if (xdir == -1 && pptSrc->y != pbox->y1) {
            /* Do a xdir = ydir = 1 blit instead. */
            if (dirsetup != 1) {
                (*infoRec->SetupForScreenToScreenCopy) (pScrn,
                                                        1, 1, alu, planemask,
                                                        -1);
                dirsetup = 1;
            }
            (*infoRec->SubsequentScreenToScreenCopy) (pScrn, pptSrc->x,
                                                      pptSrc->y, pbox->x1,
                                                      pbox->y1,
                                                      pbox->x2 - pbox->x1,
                                                      pbox->y2 - pbox->y1);
        }
        else if (xdir == 1) {
            /*
             * xdir = 1, ydir = -1.
             * Perform line-by-line xdir = ydir = 1 blits, going up.
             */
            int i;

            if (dirsetup != 1) {
                (*infoRec->SetupForScreenToScreenCopy) (pScrn,
                                                        1, 1, alu, planemask,
                                                        -1);
                dirsetup = 1;
            }
            for (i = pbox->y2 - pbox->y1 - 1; i >= 0; i--)
                (*infoRec->SubsequentScreenToScreenCopy) (pScrn,
                                                          pptSrc->x,
                                                          pptSrc->y + i,
                                                          pbox->x1,
                                                          pbox->y1 + i,
                                                          pbox->x2 - pbox->x1,
                                                          1);
        }
        else {
            /*
             * xdir = -1, ydir = 1.
             * Perform line-by-line xdir = ydir = -1 blits, going down.
             */
            int i;

            if (dirsetup != -1) {
                (*infoRec->SetupForScreenToScreenCopy) (pScrn,
                                                        -1, -1, alu, planemask,
                                                        -1);
                dirsetup = -1;
            }
            for (i = 0; i < pbox->y2 - pbox->y1; i++)
                (*infoRec->SubsequentScreenToScreenCopy) (pScrn,
                                                          pptSrc->x,
                                                          pptSrc->y + i,
                                                          pbox->x1,
                                                          pbox->y1 + i,
                                                          pbox->x2 - pbox->x1,
                                                          1);
        }
    }                           /* next box */
    SET_SYNC_FLAG(infoRec);
}
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a22 1

d24 4
a27 7
XAACopyArea(
    DrawablePtr pSrcDrawable,
    DrawablePtr pDstDrawable,
    GC *pGC,
    int srcx, int srcy,
    int width, int height,
    int dstx, int dsty )
d31 37
a67 35
    if(pDstDrawable->type == DRAWABLE_WINDOW) {
	if((pSrcDrawable->type == DRAWABLE_WINDOW) ||
		IS_OFFSCREEN_PIXMAP(pSrcDrawable)){
	    if(infoRec->ScreenToScreenBitBlt &&
	     CHECK_ROP(pGC,infoRec->ScreenToScreenBitBltFlags) &&
	     CHECK_ROPSRC(pGC,infoRec->ScreenToScreenBitBltFlags) &&
	     CHECK_PLANEMASK(pGC,infoRec->ScreenToScreenBitBltFlags))
            return (XAABitBlt( pSrcDrawable, pDstDrawable,
		pGC, srcx, srcy, width, height, dstx, dsty,
		XAADoBitBlt, 0L));
	} else {
	    if(infoRec->WritePixmap &&
	     ((pDstDrawable->bitsPerPixel == pSrcDrawable->bitsPerPixel) ||
		((pDstDrawable->bitsPerPixel == 24) &&  
		(pSrcDrawable->bitsPerPixel == 32) &&
		(infoRec->WritePixmapFlags & CONVERT_32BPP_TO_24BPP))) &&
	     CHECK_ROP(pGC,infoRec->WritePixmapFlags) &&
	     CHECK_ROPSRC(pGC,infoRec->WritePixmapFlags) &&
	     CHECK_PLANEMASK(pGC,infoRec->WritePixmapFlags) &&
	     CHECK_NO_GXCOPY(pGC,infoRec->WritePixmapFlags)) 
            return (XAABitBlt( pSrcDrawable, pDstDrawable,
		pGC, srcx, srcy, width, height, dstx, dsty,
		XAADoImageWrite, 0L));
	}
    } else if(IS_OFFSCREEN_PIXMAP(pDstDrawable)){
	if((pSrcDrawable->type == DRAWABLE_WINDOW) ||
		IS_OFFSCREEN_PIXMAP(pSrcDrawable)){
	    if(infoRec->ScreenToScreenBitBlt &&
	     CHECK_ROP(pGC,infoRec->ScreenToScreenBitBltFlags) &&
	     CHECK_ROPSRC(pGC,infoRec->ScreenToScreenBitBltFlags) &&
	     CHECK_PLANEMASK(pGC,infoRec->ScreenToScreenBitBltFlags))
            return (XAABitBlt( pSrcDrawable, pDstDrawable,
		pGC, srcx, srcy, width, height, dstx, dsty,
		XAADoBitBlt, 0L));
	}
d71 1
a71 1
   	    srcx, srcy, width, height, dstx, dsty));
a73 1

d75 2
a76 6
XAADoBitBlt(
    DrawablePtr	    pSrc, 
    DrawablePtr	    pDst,
    GC		    *pGC,
    RegionPtr	    prgnDst,
    DDXPointPtr	    pptSrc )
d100 1
a100 1
	ydir = -1;
d102 26
a127 27
	if (nbox > 1) {
	    /* keep ordering in each band, reverse order of bands */
	    pboxNew1 = (BoxPtr)malloc(sizeof(BoxRec) * nbox);
	    if(!pboxNew1)
		return;
	    pptNew1 = (DDXPointPtr)malloc(sizeof(DDXPointRec) * nbox);
	    if(!pptNew1) {
	        free(pboxNew1);
	        return;
	    }
	    pboxBase = pboxNext = pbox+nbox-1;
	    while (pboxBase >= pbox) {
	        while ((pboxNext >= pbox) &&
		       (pboxBase->y1 == pboxNext->y1))
		    pboxNext--;
	        pboxTmp = pboxNext+1;
	        pptTmp = pptSrc + (pboxTmp - pbox);
	        while (pboxTmp <= pboxBase) {
		    *pboxNew1++ = *pboxTmp++;
		    *pptNew1++ = *pptTmp++;
	        }
	        pboxBase = pboxNext;
	    }
	    pboxNew1 -= nbox;
	    pbox = pboxNew1;
	    pptNew1 -= nbox;
	    pptSrc = pptNew1;
d129 4
a132 3
    } else {
	/* walk source top to bottom */
	ydir = 1;
d136 1
a136 1
	/* walk source right to left */
d139 34
a172 33
	if (nbox > 1) {
	    /* reverse order of rects in each band */
	    pboxNew2 = (BoxPtr)malloc(sizeof(BoxRec) * nbox);
	    pptNew2 = (DDXPointPtr)malloc(sizeof(DDXPointRec) * nbox);
	    if(!pboxNew2 || !pptNew2) {
		free(pptNew2);
		free(pboxNew2);
		if (pboxNew1) {
		    free(pptNew1);
		    free(pboxNew1);
		}
	        return;
	    }
	    pboxBase = pboxNext = pbox;
	    while (pboxBase < pbox+nbox) {
	        while ((pboxNext < pbox+nbox) &&
		       (pboxNext->y1 == pboxBase->y1))
		    pboxNext++;
	        pboxTmp = pboxNext;
	        pptTmp = pptSrc + (pboxTmp - pbox);
	        while (pboxTmp != pboxBase) {
		    *pboxNew2++ = *--pboxTmp;
		    *pptNew2++ = *--pptTmp;
	        }
	        pboxBase = pboxNext;
	    }
	    pboxNew2 -= nbox;
	    pbox = pboxNew2;
	    pptNew2 -= nbox;
	    pptSrc = pptNew2;
	}
    } else {
	/* walk source left to right */
d176 3
a178 3
    (*infoRec->ScreenToScreenBitBlt)(infoRec->pScrn, nbox, pptSrc, pbox, 
	xdir, ydir, pGC->alu, pGC->planemask);
 
d180 2
a181 2
	free(pptNew2);
	free(pboxNew2);
d184 2
a185 2
	free(pptNew1);
	free(pboxNew1);
d191 3
a193 6
XAADoImageWrite(
    DrawablePtr	    pSrc, 
    DrawablePtr	    pDst,
    GC		    *pGC,
    RegionPtr	    prgnDst,
    DDXPointPtr	    pptSrc )
d196 2
a197 2
    unsigned char* psrcBase;			/* start of image */
    unsigned char* srcPntr;			/* index into the image */
d201 1
a201 1
    int Bpp = pSrc->bitsPerPixel >> 3; 
d203 2
a204 2
    psrcBase = (unsigned char *)((PixmapPtr)pSrc)->devPrivate.ptr;
    srcwidth = (int)((PixmapPtr)pSrc)->devKind;
d206 1
a206 1
    for(; nbox; pbox++, pptSrc++, nbox--) {
d209 4
a212 3
	(*infoRec->WritePixmap)(infoRec->pScrn, pbox->x1, pbox->y1, 
		pbox->x2 - pbox->x1, pbox->y2 - pbox->y1, srcPntr, srcwidth,
		pGC->alu, pGC->planemask, -1, pSrc->bitsPerPixel, pSrc->depth);
a215 1

d217 3
a219 6
XAADoImageRead(
    DrawablePtr	    pSrc, 
    DrawablePtr	    pDst,
    GC		    *pGC,
    RegionPtr	    prgnDst,
    DDXPointPtr	    pptSrc )
d222 2
a223 2
    unsigned char* pdstBase;			/* start of image */
    unsigned char* dstPntr;			/* index into the image */
d230 2
a231 2
    pdstBase = (unsigned char *)((PixmapPtr)pDst)->devPrivate.ptr;
    dstwidth = (int)((PixmapPtr)pDst)->devKind;
d233 1
a233 1
    for(; nbox; pbox++, pptSrc++, nbox--) {
d236 4
a239 3
	(*infoRec->ReadPixmap)(infoRec->pScrn, pptSrc->x, pptSrc->y, 
		pbox->x2 - pbox->x1, pbox->y2 - pbox->y1, dstPntr, dstwidth,
		pSrc->bitsPerPixel, pSrc->depth);
a242 1

d244 5
a248 8
XAAScreenToScreenBitBlt(
    ScrnInfoPtr pScrn,
    int nbox,
    DDXPointPtr pptSrc,
    BoxPtr pbox,
    int xdir, int ydir,
    int alu,
    unsigned int planemask )
d254 5
a258 5
    || (xdir == ydir)) &&
    (!(infoRec->CopyAreaFlags & ONLY_LEFT_TO_RIGHT_BITBLT)
    || (xdir == 1))) {
        (*infoRec->SetupForScreenToScreenCopy)(pScrn,
            xdir, ydir, alu, planemask, -1);
d260 5
a264 2
            (*infoRec->SubsequentScreenToScreenCopy)(pScrn,pptSrc->x, pptSrc->y,
                pbox->x1, pbox->y1, pbox->x2 - pbox->x1, pbox->y2 - pbox->y1);
d269 1
a269 1
   if (infoRec->CopyAreaFlags & ONLY_LEFT_TO_RIGHT_BITBLT) {
d274 2
a275 2
        (*infoRec->SetupForScreenToScreenCopy)(pScrn,
            1, ydir, alu, planemask, -1);
d279 6
a284 5
                (*infoRec->SubsequentScreenToScreenCopy)(pScrn,
                    pptSrc->x, pptSrc->y, pbox->x1, pbox->y1,
                    pbox->x2 - pbox->x1, pbox->y2 - pbox->y1);
            else 
            {
d290 1
d300 11
a310 4
                    (*infoRec->SubsequentScreenToScreenCopy)(pScrn,
                        pptSrc->x + fullStripes * stripeWidth, pptSrc->y,
                        pbox->x1 + fullStripes * stripeWidth, pbox->y1,
                        extra, pbox->y2 - pbox->y1);
d314 10
a323 4
                    (*infoRec->SubsequentScreenToScreenCopy)(pScrn,
                        pptSrc->x + i * stripeWidth, pptSrc->y,
                        pbox->x1 + i * stripeWidth, pbox->y1,
                        stripeWidth, pbox->y2 - pbox->y1);
d333 1
a333 1
    dirsetup = 0;	/* No direction set up yet. */
d338 3
a340 2
                (*infoRec->SetupForScreenToScreenCopy)(pScrn,
                    -1, -1, alu, planemask, -1);
d343 5
a347 2
            (*infoRec->SubsequentScreenToScreenCopy)(pScrn,pptSrc->x, pptSrc->y,
                pbox->x1, pbox->y1, pbox->x2 - pbox->x1, pbox->y2 - pbox->y1);
d352 3
a354 2
                (*infoRec->SetupForScreenToScreenCopy)(pScrn,
                    1, 1, alu, planemask, -1);
d357 5
a361 2
            (*infoRec->SubsequentScreenToScreenCopy)(pScrn,pptSrc->x, pptSrc->y,
                pbox->x1, pbox->y1, pbox->x2 - pbox->x1, pbox->y2 - pbox->y1);
d363 12
a374 16
        else
            if (xdir == 1) {
                /*
                 * xdir = 1, ydir = -1.
                 * Perform line-by-line xdir = ydir = 1 blits, going up.
                 */
                int i;
                if (dirsetup != 1) {
                    (*infoRec->SetupForScreenToScreenCopy)(pScrn,
                        1, 1, alu, planemask, -1);
                    dirsetup = 1;
                }
                for (i = pbox->y2 - pbox->y1 - 1; i >= 0; i--)
                    (*infoRec->SubsequentScreenToScreenCopy)(pScrn,
                        pptSrc->x, pptSrc->y + i, pbox->x1, pbox->y1 + i,
                        pbox->x2 - pbox->x1, 1);
d376 21
a396 15
            else {
                /*
                 * xdir = -1, ydir = 1.
                 * Perform line-by-line xdir = ydir = -1 blits, going down.
                 */
                int i;
                if (dirsetup != -1) {
                    (*infoRec->SetupForScreenToScreenCopy)(pScrn,
                        -1, -1, alu, planemask, -1);
                    dirsetup = -1;
                }
                for (i = 0; i < pbox->y2 - pbox->y1; i++)
                    (*infoRec->SubsequentScreenToScreenCopy)(pScrn,
                        pptSrc->x, pptSrc->y + i, pbox->x1, pbox->y1 + i,
                        pbox->x2 - pbox->x1, 1);
d398 10
a407 1
    } /* next box */
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d98 2
a99 2
    pbox = REGION_RECTS(prgnDst);
    nbox = REGION_NUM_RECTS(prgnDst);
d111 1
a111 1
	    pboxNew1 = (BoxPtr)xalloc(sizeof(BoxRec) * nbox);
d114 1
a114 1
	    pptNew1 = (DDXPointPtr)xalloc(sizeof(DDXPointRec) * nbox);
d116 1
a116 1
	        xfree(pboxNew1);
d148 2
a149 2
	    pboxNew2 = (BoxPtr)xalloc(sizeof(BoxRec) * nbox);
	    pptNew2 = (DDXPointPtr)xalloc(sizeof(DDXPointRec) * nbox);
d151 2
a152 2
		if (pptNew2) xfree(pptNew2);
		if (pboxNew2) xfree(pboxNew2);
d154 2
a155 2
		    xfree(pptNew1);
		    xfree(pboxNew1);
d186 2
a187 2
	xfree(pptNew2);
	xfree(pboxNew2);
d190 2
a191 2
	xfree(pptNew1);
	xfree(pboxNew1);
d207 2
a208 2
    BoxPtr pbox = REGION_RECTS(prgnDst);
    int nbox = REGION_NUM_RECTS(prgnDst);
d236 2
a237 2
    BoxPtr pbox = REGION_RECTS(prgnDst);
    int nbox = REGION_NUM_RECTS(prgnDst);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d255 1
a255 1
void 
@


1.1
log
@Initial revision
@
text
@d111 1
a111 1
	    pboxNew1 = (BoxPtr)ALLOCATE_LOCAL(sizeof(BoxRec) * nbox);
d114 1
a114 1
	    pptNew1 = (DDXPointPtr)ALLOCATE_LOCAL(sizeof(DDXPointRec) * nbox);
d116 1
a116 1
	        DEALLOCATE_LOCAL(pboxNew1);
d148 2
a149 2
	    pboxNew2 = (BoxPtr)ALLOCATE_LOCAL(sizeof(BoxRec) * nbox);
	    pptNew2 = (DDXPointPtr)ALLOCATE_LOCAL(sizeof(DDXPointRec) * nbox);
d151 2
a152 2
		if (pptNew2) DEALLOCATE_LOCAL(pptNew2);
		if (pboxNew2) DEALLOCATE_LOCAL(pboxNew2);
d154 2
a155 2
		    DEALLOCATE_LOCAL(pptNew1);
		    DEALLOCATE_LOCAL(pboxNew1);
d186 2
a187 2
	DEALLOCATE_LOCAL(pptNew2);
	DEALLOCATE_LOCAL(pboxNew2);
d190 2
a191 2
	DEALLOCATE_LOCAL(pptNew1);
	DEALLOCATE_LOCAL(pboxNew1);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
