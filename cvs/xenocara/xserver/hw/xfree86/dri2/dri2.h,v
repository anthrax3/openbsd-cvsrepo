head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.14
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.12
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.10
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.8
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2013.06.07.17.28.51;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.10.13.21.24;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.05.13.32.51;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.07;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.33;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.21;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@/*
 * Copyright © 2007 Red Hat, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Soft-
 * ware"), to deal in the Software without restriction, including without
 * limitation the rights to use, copy, modify, merge, publish, distribute,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, provided that the above copyright
 * notice(s) and this permission notice appear in all copies of the Soft-
 * ware and that both the above copyright notice(s) and this permission
 * notice appear in supporting documentation.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-
 * ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY
 * RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN
 * THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSE-
 * QUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFOR-
 * MANCE OF THIS SOFTWARE.
 *
 * Except as contained in this notice, the name of a copyright holder shall
 * not be used in advertising or otherwise to promote the sale, use or
 * other dealings in this Software without prior written authorization of
 * the copyright holder.
 *
 * Authors:
 *   Kristian Høgsberg (krh@@redhat.com)
 */

#ifndef _DRI2_H_
#define _DRI2_H_

#include <X11/extensions/dri2tokens.h>

/* Version 2 structure (with format at the end) */
typedef struct {
    unsigned int attachment;
    unsigned int name;
    unsigned int pitch;
    unsigned int cpp;
    unsigned int flags;
    unsigned int format;
    void *driverPrivate;
} DRI2BufferRec, *DRI2BufferPtr;

extern CARD8 dri2_major;        /* version of DRI2 supported by DDX */
extern CARD8 dri2_minor;

typedef DRI2BufferRec DRI2Buffer2Rec, *DRI2Buffer2Ptr;
typedef void (*DRI2SwapEventPtr) (ClientPtr client, void *data, int type,
                                  CARD64 ust, CARD64 msc, CARD32 sbc);

typedef DRI2BufferPtr(*DRI2CreateBuffersProcPtr) (DrawablePtr pDraw,
                                                  unsigned int *attachments,
                                                  int count);
typedef void (*DRI2DestroyBuffersProcPtr) (DrawablePtr pDraw,
                                           DRI2BufferPtr buffers, int count);
typedef void (*DRI2CopyRegionProcPtr) (DrawablePtr pDraw,
                                       RegionPtr pRegion,
                                       DRI2BufferPtr pDestBuffer,
                                       DRI2BufferPtr pSrcBuffer);
typedef void (*DRI2WaitProcPtr) (WindowPtr pWin, unsigned int sequence);
typedef int (*DRI2AuthMagicProcPtr) (int fd, uint32_t magic);
typedef int (*DRI2AuthMagic2ProcPtr) (ScreenPtr pScreen, uint32_t magic);

/**
 * Schedule a buffer swap
 *
 * This callback is used to support glXSwapBuffers and the OML_sync_control
 * extension (see it for a description of the params).
 *
 * Drivers should queue an event for the frame count that satisfies the
 * parameters passed in.  If the event is in the future (i.e. the conditions
 * aren't currently satisfied), the server may block the client at the next
 * GLX request using DRI2WaitSwap. When the event arrives, drivers should call
 * \c DRI2SwapComplete, which will handle waking the client and returning
 * the appropriate data.
 *
 * The DDX is responsible for doing a flip, exchange, or blit of the swap
 * when the corresponding event arrives.  The \c DRI2CanFlip and
 * \c DRI2CanExchange functions can be used as helpers for this purpose.
 *
 * \param client client pointer (used for block/unblock)
 * \param pDraw drawable whose count we want
 * \param pDestBuffer current front buffer
 * \param pSrcBuffer current back buffer
 * \param target_msc frame count to wait for
 * \param divisor divisor for condition equation
 * \param remainder remainder for division equation
 * \param func function to call when the swap completes
 * \param data data for the callback \p func.
 */
typedef int (*DRI2ScheduleSwapProcPtr) (ClientPtr client,
                                        DrawablePtr pDraw,
                                        DRI2BufferPtr pDestBuffer,
                                        DRI2BufferPtr pSrcBuffer,
                                        CARD64 * target_msc,
                                        CARD64 divisor,
                                        CARD64 remainder,
                                        DRI2SwapEventPtr func, void *data);
typedef DRI2BufferPtr(*DRI2CreateBufferProcPtr) (DrawablePtr pDraw,
                                                 unsigned int attachment,
                                                 unsigned int format);
typedef void (*DRI2DestroyBufferProcPtr) (DrawablePtr pDraw,
                                          DRI2BufferPtr buffer);
/**
 * Notifies driver when DRI2GetBuffers reuses a dri2 buffer.
 *
 * Driver may rename the dri2 buffer in this notify if it is required.
 *
 * \param pDraw drawable whose count we want
 * \param buffer buffer that will be returned to client
 */
typedef void (*DRI2ReuseBufferNotifyProcPtr) (DrawablePtr pDraw,
                                              DRI2BufferPtr buffer);
/**
 * Get current media stamp counter values
 *
 * This callback is used to support the SGI_video_sync and OML_sync_control
 * extensions.
 *
 * Drivers should return the current frame counter and the timestamp from
 * when the returned frame count was last incremented.
 *
 * The count should correspond to the screen where the drawable is currently
 * visible.  If the drawable isn't visible (e.g. redirected), the server
 * should return BadDrawable to the client, pending GLX spec updates to
 * define this behavior.
 *
 * \param pDraw drawable whose count we want
 * \param ust timestamp from when the count was last incremented.
 * \param mst current frame count
 */
typedef int (*DRI2GetMSCProcPtr) (DrawablePtr pDraw, CARD64 * ust,
                                  CARD64 * msc);
/**
 * Schedule a frame count related wait
 *
 * This callback is used to support the SGI_video_sync and OML_sync_control
 * extensions.  See those specifications for details on how to handle
 * the divisor and remainder parameters.
 *
 * Drivers should queue an event for the frame count that satisfies the
 * parameters passed in.  If the event is in the future (i.e. the conditions
 * aren't currently satisfied), the driver should block the client using
 * \c DRI2BlockClient.  When the event arrives, drivers should call
 * \c DRI2WaitMSCComplete, which will handle waking the client and returning
 * the appropriate data.
 *
 * \param client client pointer (used for block/unblock)
 * \param pDraw drawable whose count we want
 * \param target_msc frame count to wait for
 * \param divisor divisor for condition equation
 * \param remainder remainder for division equation
 */
typedef int (*DRI2ScheduleWaitMSCProcPtr) (ClientPtr client,
                                           DrawablePtr pDraw,
                                           CARD64 target_msc,
                                           CARD64 divisor, CARD64 remainder);

typedef void (*DRI2InvalidateProcPtr) (DrawablePtr pDraw, void *data, XID id);

/**
 * DRI2 calls this hook when ever swap_limit is going to be changed. Default
 * implementation for the hook only accepts one as swap_limit. If driver can
 * support other swap_limits it has to implement supported limits with this
 * callback.
 *
 * \param pDraw drawable whos swap_limit is going to be changed
 * \param swap_limit new swap_limit that going to be set
 * \return TRUE if limit is support, FALSE if not.
 */
typedef Bool (*DRI2SwapLimitValidateProcPtr) (DrawablePtr pDraw,
                                              int swap_limit);

typedef DRI2BufferPtr(*DRI2CreateBuffer2ProcPtr) (ScreenPtr pScreen,
                                                  DrawablePtr pDraw,
                                                  unsigned int attachment,
                                                  unsigned int format);
typedef void (*DRI2DestroyBuffer2ProcPtr) (ScreenPtr pScreen, DrawablePtr pDraw,
                                          DRI2BufferPtr buffer);

typedef void (*DRI2CopyRegion2ProcPtr) (ScreenPtr pScreen, DrawablePtr pDraw,
                                        RegionPtr pRegion,
                                        DRI2BufferPtr pDestBuffer,
                                        DRI2BufferPtr pSrcBuffer);

/**
 * \brief Get the value of a parameter.
 *
 * The parameter's \a value is looked up on the screen associated with
 * \a pDrawable.
 *
 * \return \c Success or error code.
 */
typedef int (*DRI2GetParamProcPtr) (ClientPtr client,
                                    DrawablePtr pDrawable,
                                    CARD64 param,
                                    BOOL *is_param_recognized,
                                    CARD64 *value);

/**
 * Version of the DRI2InfoRec structure defined in this header
 */
#define DRI2INFOREC_VERSION 9

typedef struct {
    unsigned int version;       /**< Version of this struct */
    int fd;
    const char *driverName;
    const char *deviceName;

    DRI2CreateBufferProcPtr CreateBuffer;
    DRI2DestroyBufferProcPtr DestroyBuffer;
    DRI2CopyRegionProcPtr CopyRegion;
    DRI2WaitProcPtr Wait;

    /* added in version 4 */

    DRI2ScheduleSwapProcPtr ScheduleSwap;
    DRI2GetMSCProcPtr GetMSC;
    DRI2ScheduleWaitMSCProcPtr ScheduleWaitMSC;

    /* number of drivers in the driverNames array */
    unsigned int numDrivers;
    /* array of driver names, indexed by DRI2Driver* driver types */
    /* a name of NULL means that driver is not supported */
    const char *const *driverNames;

    /* added in version 5 */

    DRI2AuthMagicProcPtr AuthMagic;

    /* added in version 6 */

    DRI2ReuseBufferNotifyProcPtr ReuseBufferNotify;
    DRI2SwapLimitValidateProcPtr SwapLimitValidate;

    /* added in version 7 */
    DRI2GetParamProcPtr GetParam;

    /* added in version 8 */
    /* AuthMagic callback which passes extra context */
    /* If this is NULL the AuthMagic callback is used */
    /* If this is non-NULL the AuthMagic callback is ignored */
    DRI2AuthMagic2ProcPtr AuthMagic2;

    /* added in version 9 */
    DRI2CreateBuffer2ProcPtr CreateBuffer2;
    DRI2DestroyBuffer2ProcPtr DestroyBuffer2;
    DRI2CopyRegion2ProcPtr CopyRegion2;
} DRI2InfoRec, *DRI2InfoPtr;

extern _X_EXPORT Bool DRI2ScreenInit(ScreenPtr pScreen, DRI2InfoPtr info);

extern _X_EXPORT void DRI2CloseScreen(ScreenPtr pScreen);

extern _X_EXPORT Bool DRI2HasSwapControl(ScreenPtr pScreen);

extern _X_EXPORT Bool DRI2Connect(ClientPtr client, ScreenPtr pScreen,
                                  unsigned int driverType,
                                  int *fd,
                                  const char **driverName,
                                  const char **deviceName);

extern _X_EXPORT Bool DRI2Authenticate(ClientPtr client, ScreenPtr pScreen, uint32_t magic);

extern _X_EXPORT int DRI2CreateDrawable(ClientPtr client,
                                        DrawablePtr pDraw,
                                        XID id,
                                        DRI2InvalidateProcPtr invalidate,
                                        void *priv);

extern _X_EXPORT int DRI2CreateDrawable2(ClientPtr client,
                                         DrawablePtr pDraw,
                                         XID id,
                                         DRI2InvalidateProcPtr invalidate,
                                         void *priv,
                                         XID *dri2_id_out);

extern _X_EXPORT DRI2BufferPtr *DRI2GetBuffers(DrawablePtr pDraw,
                                               int *width,
                                               int *height,
                                               unsigned int *attachments,
                                               int count, int *out_count);

extern _X_EXPORT int DRI2CopyRegion(DrawablePtr pDraw,
                                    RegionPtr pRegion,
                                    unsigned int dest, unsigned int src);

/**
 * Determine the major and minor version of the DRI2 extension.
 *
 * Provides a mechanism to other modules (e.g., 2D drivers) to determine the
 * version of the DRI2 extension.  While it is possible to peek directly at
 * the \c XF86ModuleData from a layered module, such a module will fail to
 * load (due to an unresolved symbol) if the DRI2 extension is not loaded.
 *
 * \param major  Location to store the major verion of the DRI2 extension
 * \param minor  Location to store the minor verion of the DRI2 extension
 *
 * \note
 * This interface was added some time after the initial release of the DRI2
 * module.  Layered modules that wish to use this interface must first test
 * its existance by calling \c xf86LoaderCheckSymbol.
 */
extern _X_EXPORT void DRI2Version(int *major, int *minor);

extern _X_EXPORT DRI2BufferPtr *DRI2GetBuffersWithFormat(DrawablePtr pDraw,
                                                         int *width,
                                                         int *height,
                                                         unsigned int
                                                         *attachments,
                                                         int count,
                                                         int *out_count);

extern _X_EXPORT void DRI2SwapInterval(DrawablePtr pDrawable, int interval);
extern _X_EXPORT Bool DRI2SwapLimit(DrawablePtr pDraw, int swap_limit);
extern _X_EXPORT int DRI2SwapBuffers(ClientPtr client, DrawablePtr pDrawable,
                                     CARD64 target_msc, CARD64 divisor,
                                     CARD64 remainder, CARD64 * swap_target,
                                     DRI2SwapEventPtr func, void *data);
extern _X_EXPORT Bool DRI2WaitSwap(ClientPtr client, DrawablePtr pDrawable);

extern _X_EXPORT int DRI2GetMSC(DrawablePtr pDrawable, CARD64 * ust,
                                CARD64 * msc, CARD64 * sbc);
extern _X_EXPORT int DRI2WaitMSC(ClientPtr client, DrawablePtr pDrawable,
                                 CARD64 target_msc, CARD64 divisor,
                                 CARD64 remainder);
extern _X_EXPORT int ProcDRI2WaitMSCReply(ClientPtr client, CARD64 ust,
                                          CARD64 msc, CARD64 sbc);
extern _X_EXPORT int DRI2WaitSBC(ClientPtr client, DrawablePtr pDraw,
                                 CARD64 target_sbc);
extern _X_EXPORT Bool DRI2ThrottleClient(ClientPtr client, DrawablePtr pDraw);

extern _X_EXPORT Bool DRI2CanFlip(DrawablePtr pDraw);

extern _X_EXPORT Bool DRI2CanExchange(DrawablePtr pDraw);

/* Note: use *only* for MSC related waits */
extern _X_EXPORT void DRI2BlockClient(ClientPtr client, DrawablePtr pDraw);

extern _X_EXPORT void DRI2SwapComplete(ClientPtr client, DrawablePtr pDraw,
                                       int frame, unsigned int tv_sec,
                                       unsigned int tv_usec, int type,
                                       DRI2SwapEventPtr swap_complete,
                                       void *swap_data);
extern _X_EXPORT void DRI2WaitMSCComplete(ClientPtr client, DrawablePtr pDraw,
                                          int frame, unsigned int tv_sec,
                                          unsigned int tv_usec);

extern _X_EXPORT int DRI2GetParam(ClientPtr client,
                                  DrawablePtr pDrawable,
                                  CARD64 param,
                                  BOOL *is_param_recognized,
                                  CARD64 *value);

extern _X_EXPORT DrawablePtr DRI2UpdatePrime(DrawablePtr pDraw, DRI2BufferPtr pDest);
#endif
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d67 1
d179 26
d208 1
a208 1
#define DRI2INFOREC_VERSION 6
d241 14
a256 2
extern _X_EXPORT int DRI2EventBase;

d263 1
a263 1
extern _X_EXPORT Bool DRI2Connect(ScreenPtr pScreen,
d269 1
a269 1
extern _X_EXPORT Bool DRI2Authenticate(ScreenPtr pScreen, uint32_t magic);
d277 6
a282 1
extern _X_EXPORT void DRI2DestroyDrawable(DrawablePtr pDraw);
d355 7
@


1.5
log
@Update to xserver 1.11.2
@
text
@d49 1
a49 1
extern CARD8 dri2_major; /* version of DRI2 supported by DDX */
d53 2
a54 2
typedef void (*DRI2SwapEventPtr)(ClientPtr client, void *data, int type,
				 CARD64 ust, CARD64 msc, CARD32 sbc);
d56 11
a66 14

typedef DRI2BufferPtr	(*DRI2CreateBuffersProcPtr)(DrawablePtr pDraw,
						    unsigned int *attachments,
						    int count);
typedef void		(*DRI2DestroyBuffersProcPtr)(DrawablePtr pDraw,
						     DRI2BufferPtr buffers,
						     int count);
typedef void		(*DRI2CopyRegionProcPtr)(DrawablePtr pDraw,
						 RegionPtr pRegion,
						 DRI2BufferPtr pDestBuffer,
						 DRI2BufferPtr pSrcBuffer);
typedef void		(*DRI2WaitProcPtr)(WindowPtr pWin,
					   unsigned int sequence);
typedef int		(*DRI2AuthMagicProcPtr)(int fd, uint32_t magic);
d95 23
a117 14
typedef int		(*DRI2ScheduleSwapProcPtr)(ClientPtr client,
						   DrawablePtr pDraw,
						   DRI2BufferPtr pDestBuffer,
						   DRI2BufferPtr pSrcBuffer,
						   CARD64 *target_msc,
						   CARD64 divisor,
						   CARD64 remainder,
						   DRI2SwapEventPtr func,
						   void *data);
typedef DRI2BufferPtr	(*DRI2CreateBufferProcPtr)(DrawablePtr pDraw,
						   unsigned int attachment,
						   unsigned int format);
typedef void		(*DRI2DestroyBufferProcPtr)(DrawablePtr pDraw,
						    DRI2BufferPtr buffer);
d136 2
a137 2
typedef int		(*DRI2GetMSCProcPtr)(DrawablePtr pDraw, CARD64 *ust,
					     CARD64 *msc);
d158 4
a161 5
typedef int		(*DRI2ScheduleWaitMSCProcPtr)(ClientPtr client,
						      DrawablePtr pDraw,
						      CARD64 target_msc,
						      CARD64 divisor,
						      CARD64 remainder);
d163 14
a176 2
typedef void		(*DRI2InvalidateProcPtr)(DrawablePtr pDraw,
						 void *data);
d181 1
a181 1
#define DRI2INFOREC_VERSION 5
d184 1
a184 1
    unsigned int version;	/**< Version of this struct */
d189 4
a192 4
    DRI2CreateBufferProcPtr	CreateBuffer;
    DRI2DestroyBufferProcPtr	DestroyBuffer;
    DRI2CopyRegionProcPtr	CopyRegion;
    DRI2WaitProcPtr		Wait;
d196 3
a198 3
    DRI2ScheduleSwapProcPtr	ScheduleSwap;
    DRI2GetMSCProcPtr		GetMSC;
    DRI2ScheduleWaitMSCProcPtr	ScheduleWaitMSC;
d204 1
a204 1
    const char * const *driverNames;
d208 7
a214 2
    DRI2AuthMagicProcPtr	AuthMagic;
}  DRI2InfoRec, *DRI2InfoPtr;
d218 1
a218 2
extern _X_EXPORT Bool DRI2ScreenInit(ScreenPtr	pScreen,
		    DRI2InfoPtr info);
d225 4
a228 4
		 unsigned int driverType,
		 int *fd,
		 const char **driverName,
		 const char **deviceName);
d233 4
a236 4
					DrawablePtr pDraw,
					XID id,
					DRI2InvalidateProcPtr invalidate,
					void *priv);
d241 4
a244 5
			     int *width,
			     int *height,
			     unsigned int *attachments,
			     int count,
			     int *out_count);
d247 2
a248 3
		   RegionPtr pRegion,
		   unsigned int dest,
		   unsigned int src);
d269 6
a274 2
	int *width, int *height, unsigned int *attachments, int count,
	int *out_count);
d277 1
d279 3
a281 3
				     CARD64 target_msc, CARD64 divisor,
				     CARD64 remainder, CARD64 *swap_target,
				     DRI2SwapEventPtr func, void *data);
d284 2
a285 2
extern _X_EXPORT int DRI2GetMSC(DrawablePtr pDrawable, CARD64 *ust,
				CARD64 *msc, CARD64 *sbc);
d287 2
a288 2
				 CARD64 target_msc, CARD64 divisor,
				 CARD64 remainder);
d290 1
a290 1
					  CARD64 msc, CARD64 sbc);
d292 1
a292 1
				 CARD64 target_sbc);
d303 4
a306 4
				       int frame, unsigned int tv_sec,
				       unsigned int tv_usec, int type,
				       DRI2SwapEventPtr swap_complete,
				       void *swap_data);
d308 2
a309 2
					  int frame, unsigned int tv_sec,
					  unsigned int tv_usec);
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d54 1
a54 1
				 CARD64 ust, CARD64 msc, CARD64 sbc);
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d69 2
d157 4
d164 1
a164 1
#define DRI2INFOREC_VERSION 4
d188 4
d209 1
a209 1
extern _X_EXPORT Bool DRI2Authenticate(ScreenPtr pScreen, drm_magic_t magic);
d212 4
a215 1
					DrawablePtr pDraw, XID id);
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d38 1
a38 1
/* Version 1 structure (for ABI compatibility) */
d45 1
d49 7
a55 10
/* Version 2 structure (with format at the end) */
typedef struct {
    unsigned int attachment;
    unsigned int name;
    unsigned int pitch;
    unsigned int cpp;
    unsigned int flags;
    void *driverPrivate;
    unsigned int format;
} DRI2Buffer2Rec, *DRI2Buffer2Ptr;
a66 1

d69 37
a105 2

typedef DRI2Buffer2Ptr	(*DRI2CreateBufferProcPtr)(DrawablePtr pDraw,
d109 46
a154 2
						    DRI2Buffer2Ptr buffer);

d158 1
a158 1
#define DRI2INFOREC_VERSION 2
d166 2
a167 2
    DRI2CreateBuffersProcPtr	CreateBuffers;
    DRI2DestroyBuffersProcPtr	DestroyBuffers;
d171 1
a171 7
    /**
     * \name Fields added in version 2 of the structure.
     */
    /*@@{*/
    DRI2CreateBufferProcPtr	CreateBuffer;
    DRI2DestroyBufferProcPtr	DestroyBuffer;
    /*@@}*/
d173 9
d184 3
a186 1
Bool DRI2ScreenInit(ScreenPtr	pScreen,
d189 1
a189 1
void DRI2CloseScreen(ScreenPtr pScreen);
d191 3
a193 1
Bool DRI2Connect(ScreenPtr pScreen,
d199 1
a199 1
Bool DRI2Authenticate(ScreenPtr pScreen, drm_magic_t magic);
d201 2
a202 1
int DRI2CreateDrawable(DrawablePtr pDraw);
d204 1
a204 1
void DRI2DestroyDrawable(DrawablePtr pDraw);
d206 1
a206 1
DRI2Buffer2Ptr *DRI2GetBuffers(DrawablePtr pDraw,
d213 1
a213 1
int DRI2CopyRegion(DrawablePtr pDraw,
d236 1
a236 1
extern _X_EXPORT DRI2Buffer2Ptr *DRI2GetBuffersWithFormat(DrawablePtr pDraw,
d239 34
@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d36 1
a36 4
typedef unsigned int	(*DRI2GetPixmapHandleProcPtr)(PixmapPtr p,
						      unsigned int *flags);
typedef void		(*DRI2BeginClipNotifyProcPtr)(ScreenPtr pScreen);
typedef void		(*DRI2EndClipNotifyProcPtr)(ScreenPtr pScreen);
d38 1
d40 46
a85 1
    unsigned int version;	/* Version of this struct */
a86 1
    size_t driverSareaSize;
d88 15
a102 3
    DRI2GetPixmapHandleProcPtr getPixmapHandle;
    DRI2BeginClipNotifyProcPtr beginClipNotify;
    DRI2EndClipNotifyProcPtr endClipNotify;
d105 2
a106 2
void *DRI2ScreenInit(ScreenPtr	pScreen,
		     DRI2InfoPtr info);
d111 1
d114 1
a114 3
		 unsigned int *sareaHandle);

Bool DRI2AuthConnection(ScreenPtr pScreen, drm_magic_t magic);
d116 1
a116 2
unsigned int DRI2GetPixmapHandle(PixmapPtr pPixmap,
				 unsigned int *flags);
d118 1
a118 6
void DRI2Lock(ScreenPtr pScreen);
void DRI2Unlock(ScreenPtr pScreen);

Bool DRI2CreateDrawable(DrawablePtr pDraw,
			unsigned int *handle,
			unsigned int *head);
d122 33
a154 5
void DRI2ReemitDrawableInfo(DrawablePtr pDraw,
			    unsigned int *head);

Bool DRI2PostDamage(DrawablePtr pDrawable,
		    struct drm_clip_rect *rects, int numRects);
@

