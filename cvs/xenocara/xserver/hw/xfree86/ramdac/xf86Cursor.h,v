head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.05.29.12.02.38;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	s0SI41sEunLdyFfd;

1.4
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	cVXoV5PxI8YrEaVA;

1.3
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.17.36;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.17.36;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.58.16;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@
#ifndef _XF86CURSOR_H
#define _XF86CURSOR_H

#include "xf86str.h"
#include "mipointer.h"

typedef struct _xf86CursorInfoRec {
    ScrnInfoPtr pScrn;
    int Flags;
    int MaxWidth;
    int MaxHeight;
    void (*SetCursorColors) (ScrnInfoPtr pScrn, int bg, int fg);
    void (*SetCursorPosition) (ScrnInfoPtr pScrn, int x, int y);
    void (*LoadCursorImage) (ScrnInfoPtr pScrn, unsigned char *bits);
    Bool (*LoadCursorImageCheck) (ScrnInfoPtr pScrn, unsigned char *bits);
    void (*HideCursor) (ScrnInfoPtr pScrn);
    void (*ShowCursor) (ScrnInfoPtr pScrn);
    unsigned char *(*RealizeCursor) (struct _xf86CursorInfoRec *, CursorPtr);
    Bool (*UseHWCursor) (ScreenPtr, CursorPtr);

    Bool (*UseHWCursorARGB) (ScreenPtr, CursorPtr);
    void (*LoadCursorARGB) (ScrnInfoPtr, CursorPtr);
    Bool (*LoadCursorARGBCheck) (ScrnInfoPtr, CursorPtr);

} xf86CursorInfoRec, *xf86CursorInfoPtr;

static inline Bool
xf86DriverHasLoadCursorImage(xf86CursorInfoPtr infoPtr)
{
    return infoPtr->LoadCursorImageCheck || infoPtr->LoadCursorImage;
}

static inline Bool
xf86DriverLoadCursorImage(xf86CursorInfoPtr infoPtr, unsigned char *bits)
{
    if(infoPtr->LoadCursorImageCheck)
        return infoPtr->LoadCursorImageCheck(infoPtr->pScrn, bits);
    infoPtr->LoadCursorImage(infoPtr->pScrn, bits);
    return TRUE;
}

static inline Bool
xf86DriverHasLoadCursorARGB(xf86CursorInfoPtr infoPtr)
{
    return infoPtr->LoadCursorARGBCheck || infoPtr->LoadCursorARGB;
}

static inline Bool
xf86DriverLoadCursorARGB(xf86CursorInfoPtr infoPtr, CursorPtr pCursor)
{
    if(infoPtr->LoadCursorARGBCheck)
        return infoPtr->LoadCursorARGBCheck(infoPtr->pScrn, pCursor);
    infoPtr->LoadCursorARGB(infoPtr->pScrn, pCursor);
    return TRUE;
}

extern _X_EXPORT Bool xf86InitCursor(ScreenPtr pScreen,
                                     xf86CursorInfoPtr infoPtr);
extern _X_EXPORT xf86CursorInfoPtr xf86CreateCursorInfoRec(void);
extern _X_EXPORT void xf86DestroyCursorInfoRec(xf86CursorInfoPtr);
extern _X_EXPORT void xf86CursorResetCursor(ScreenPtr pScreen);
extern _X_EXPORT void xf86ForceHWCursor(ScreenPtr pScreen, Bool on);

#define HARDWARE_CURSOR_INVERT_MASK 			0x00000001
#define HARDWARE_CURSOR_AND_SOURCE_WITH_MASK		0x00000002
#define HARDWARE_CURSOR_SWAP_SOURCE_AND_MASK		0x00000004
#define HARDWARE_CURSOR_SOURCE_MASK_NOT_INTERLEAVED	0x00000008
#define HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_1	0x00000010
#define HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_8	0x00000020
#define HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_16	0x00000040
#define HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_32	0x00000080
#define HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_64	0x00000100
#define HARDWARE_CURSOR_TRUECOLOR_AT_8BPP		0x00000200
#define HARDWARE_CURSOR_BIT_ORDER_MSBFIRST		0x00000400
#define HARDWARE_CURSOR_NIBBLE_SWAPPED			0x00000800
#define HARDWARE_CURSOR_SHOW_TRANSPARENT		0x00001000
#define HARDWARE_CURSOR_UPDATE_UNHIDDEN			0x00002000
#define HARDWARE_CURSOR_ARGB				0x00004000

#endif                          /* _XF86CURSOR_H */
@


1.4
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@a21 1
#ifdef ARGB_CURSOR
a24 1
#endif
d62 1
a78 1
#ifdef ARGB_CURSOR
a79 1
#endif
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d16 1
d25 1
d29 30
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d13 7
a19 7
    void (*SetCursorColors)(ScrnInfoPtr pScrn, int bg, int fg);
    void (*SetCursorPosition)(ScrnInfoPtr pScrn, int x, int y);
    void (*LoadCursorImage)(ScrnInfoPtr pScrn, unsigned char *bits);
    void (*HideCursor)(ScrnInfoPtr pScrn);
    void (*ShowCursor)(ScrnInfoPtr pScrn);
    unsigned char* (*RealizeCursor)(struct _xf86CursorInfoRec *, CursorPtr);
    Bool (*UseHWCursor)(ScreenPtr, CursorPtr);
d28 2
a29 1
extern _X_EXPORT Bool xf86InitCursor(ScreenPtr pScreen, xf86CursorInfoPtr infoPtr);
d32 1
a32 1
extern _X_EXPORT void xf86ForceHWCursor (ScreenPtr pScreen, Bool on);
d52 1
a52 1
#endif /* _XF86CURSOR_H */
@


1.1
log
@Initial revision
@
text
@d28 4
a31 4
Bool xf86InitCursor(ScreenPtr pScreen, xf86CursorInfoPtr infoPtr);
xf86CursorInfoPtr xf86CreateCursorInfoRec(void);
void xf86DestroyCursorInfoRec(xf86CursorInfoPtr);
void xf86ForceHWCursor (ScreenPtr pScreen, Bool on);
d47 3
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@a46 3
#ifdef ARGB_CURSOR
#define HARDWARE_CURSOR_ARGB				0x00004000
#endif
@

