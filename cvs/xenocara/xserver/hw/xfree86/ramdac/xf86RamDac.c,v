head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.16
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.06.10.13.21.26;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.17.36;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.17.36;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * Copyright 1998 by Alan Hourihane, Wigan, England.
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Alan Hourihane not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Alan Hourihane makes no representations
 * about the suitability of this software for any purpose.  It is provided
 * "as is" without express or implied warranty.
 *
 * ALAN HOURIHANE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL ALAN HOURIHANE BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 *
 * Authors:  Alan Hourihane, <alanh@@fairlite.demon.co.uk>
 *
 * Generic RAMDAC access routines.
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "xf86.h"
#include "xf86_OSproc.h"

#include "xf86RamDacPriv.h"

int RamDacHWPrivateIndex = -1;
int RamDacScreenPrivateIndex = -1;

RamDacRecPtr
RamDacCreateInfoRec(void)
{
    RamDacRecPtr infoRec;

    infoRec = calloc(1, sizeof(RamDacRec));

    return infoRec;
}

RamDacHelperRecPtr
RamDacHelperCreateInfoRec(void)
{
    RamDacHelperRecPtr infoRec;

    infoRec = calloc(1, sizeof(RamDacHelperRec));

    return infoRec;
}

void
RamDacDestroyInfoRec(RamDacRecPtr infoRec)
{
    free(infoRec);
}

void
RamDacHelperDestroyInfoRec(RamDacHelperRecPtr infoRec)
{
    free(infoRec);
}

Bool
RamDacInit(ScrnInfoPtr pScrn, RamDacRecPtr ramdacPriv)
{
    RamDacScreenRecPtr ramdacScrPtr;

    /*
     * make sure the RamDacRec is allocated
     */
    if (!RamDacGetRec(pScrn))
        return FALSE;
    ramdacScrPtr =
        ((RamDacScreenRecPtr) (pScrn)->privates[RamDacGetScreenIndex()].ptr);
    ramdacScrPtr->RamDacRec = ramdacPriv;

    return TRUE;
}

void
RamDacGetRecPrivate(void)
{
    if (RamDacHWPrivateIndex < 0)
        RamDacHWPrivateIndex = xf86AllocateScrnInfoPrivateIndex();
    if (RamDacScreenPrivateIndex < 0)
        RamDacScreenPrivateIndex = xf86AllocateScrnInfoPrivateIndex();
    return;
}

Bool
RamDacGetRec(ScrnInfoPtr scrp)
{
    RamDacGetRecPrivate();
    /*
     * New privates are always set to NULL, so we can check if the allocation
     * has already been done.
     */
    if (scrp->privates[RamDacHWPrivateIndex].ptr != NULL)
        return TRUE;
    if (scrp->privates[RamDacScreenPrivateIndex].ptr != NULL)
        return TRUE;

    scrp->privates[RamDacHWPrivateIndex].ptr =
        xnfcalloc(sizeof(RamDacHWRec), 1);
    scrp->privates[RamDacScreenPrivateIndex].ptr =
        xnfcalloc(sizeof(RamDacScreenRec), 1);

    return TRUE;
}

void
RamDacFreeRec(ScrnInfoPtr pScrn)
{
    RamDacHWRecPtr ramdacHWPtr;
    RamDacScreenRecPtr ramdacScrPtr;

    if (RamDacHWPrivateIndex < 0)
        return;

    if (RamDacScreenPrivateIndex < 0)
        return;

    ramdacHWPtr = RAMDACHWPTR(pScrn);
    ramdacScrPtr = ((RamDacScreenRecPtr)
                    (pScrn)->privates[RamDacGetScreenIndex()].ptr);

    free(ramdacHWPtr);
    ramdacHWPtr = NULL;

    free(ramdacScrPtr);
    ramdacScrPtr = NULL;
}

int
RamDacGetHWIndex(void)
{
    return RamDacHWPrivateIndex;
}

int
RamDacGetScreenIndex(void)
{
    return RamDacScreenPrivateIndex;
}
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d80 1
a80 1
	return FALSE;
d82 1
a82 1
	((RamDacScreenRecPtr) (pScrn)->privates[RamDacGetScreenIndex()].ptr);
d92 1
a92 1
	RamDacHWPrivateIndex = xf86AllocateScrnInfoPrivateIndex();
d94 1
a94 1
	RamDacScreenPrivateIndex = xf86AllocateScrnInfoPrivateIndex();
d107 1
a107 1
	return TRUE;
d109 6
a114 1
	return TRUE;
a115 5
    scrp->privates[RamDacHWPrivateIndex].ptr = 
					xnfcalloc(sizeof(RamDacHWRec), 1);
    scrp->privates[RamDacScreenPrivateIndex].ptr = 
					xnfcalloc(sizeof(RamDacScreenRec), 1);
    
d126 1
a126 1
	return;
d129 1
a129 1
	return;
d133 2
a134 2
				(pScrn)->privates[RamDacGetScreenIndex()].ptr);
    
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d44 1
a44 1
    infoRec = xcalloc(1, sizeof(RamDacRec));
d54 1
a54 1
    infoRec = xcalloc(1, sizeof(RamDacHelperRec));
d62 1
a62 1
    xfree(infoRec);
d68 1
a68 1
    xfree(infoRec);
d85 1
a85 1
    return(TRUE);
d135 1
a135 2
    if (ramdacHWPtr)
	xfree(ramdacHWPtr);
d138 1
a138 2
    if (ramdacScrPtr)
	xfree(ramdacScrPtr);
@


1.1
log
@Initial revision
@
text
@d40 1
a40 1
RamDacCreateInfoRec()
d50 1
a50 1
RamDacHelperCreateInfoRec()
d59 1
a59 1
void 
d65 1
a65 1
void 
d89 1
a89 1
RamDacGetRecPrivate()
d145 1
a145 1
RamDacGetHWIndex()
d151 1
a151 1
RamDacGetScreenIndex()
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
