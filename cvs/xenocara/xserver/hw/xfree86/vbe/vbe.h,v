head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.09.16.19.10.24;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	Te1daavkBLskZ8gc;

1.6
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	cVXoV5PxI8YrEaVA;

1.5
date	2013.06.07.17.28.53;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.27;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.17.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.17.34;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.58.19;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@
/*
 *                   XFree86 vbe module
 *               Copyright 2000 Egbert Eich
 *
 * The mode query/save/set/restore functions from the vesa driver
 * have been moved here.
 * Copyright (c) 2000 by Conectiva S.A. (http://www.conectiva.com)
 * Authors: Paulo CÃ©sar Pereira de Andrade <pcpa@@conectiva.com.br>
 */

#ifndef _VBE_H
#define _VBE_H
#include "xf86int10.h"
#include "xf86DDC.h"

typedef enum {
    DDC_UNCHECKED,
    DDC_NONE,
    DDC_1,
    DDC_2,
    DDC_1_2
} ddc_lvl;

typedef struct {
    xf86Int10InfoPtr pInt10;
    int version;
    void *memory;
    int real_mode_base;
    int num_pages;
    Bool init_int10;
    ddc_lvl ddc;
    Bool ddc_blank;
} vbeInfoRec, *vbeInfoPtr;

#define VBE_VERSION_MAJOR(x) *((CARD8*)(&x) + 1)
#define VBE_VERSION_MINOR(x) (CARD8)(x)

extern _X_EXPORT vbeInfoPtr VBEInit(xf86Int10InfoPtr pInt, int entityIndex);
extern _X_EXPORT vbeInfoPtr VBEExtendedInit(xf86Int10InfoPtr pInt,
                                            int entityIndex, int Flags);
extern _X_EXPORT void vbeFree(vbeInfoPtr pVbe);
extern _X_EXPORT xf86MonPtr vbeDoEDID(vbeInfoPtr pVbe, void *pDDCModule);

#pragma pack(1)

typedef struct vbeControllerInfoBlock {
    CARD8 VbeSignature[4];
    CARD16 VbeVersion;
    CARD32 OemStringPtr;
    CARD8 Capabilities[4];
    CARD32 VideoModePtr;
    CARD16 TotalMem;
    CARD16 OemSoftwareRev;
    CARD32 OemVendorNamePtr;
    CARD32 OemProductNamePtr;
    CARD32 OemProductRevPtr;
    CARD8 Scratch[222];
    CARD8 OemData[256];
} vbeControllerInfoRec, *vbeControllerInfoPtr;

#if defined(__GNUC__) || defined(__USLC__) || defined(__SUNPRO_C)
#pragma pack()                  /* All GCC versions recognise this syntax */
#else
#pragma pack(0)
#endif

#if !( defined(__GNUC__) || (defined(__SUNPRO_C) && (__SUNPRO_C >= 0x590)) )
#define __attribute__(a)
#endif

typedef struct _VbeInfoBlock VbeInfoBlock;
typedef struct _VbeModeInfoBlock VbeModeInfoBlock;
typedef struct _VbeCRTCInfoBlock VbeCRTCInfoBlock;

/*
 * INT 0
 */

struct _VbeInfoBlock {
    /* VESA 1.2 fields */
    CARD8 VESASignature[4];     /* VESA */
    CARD16 VESAVersion;         /* Higher byte major, lower byte minor */
                                        /*CARD32 */ char *OEMStringPtr;
                                        /* Pointer to OEM string */
    CARD8 Capabilities[4];      /* Capabilities of the video environment */

                                        /*CARD32 */ CARD16 *VideoModePtr;
                                        /* pointer to supported Super VGA modes */

    CARD16 TotalMemory;         /* Number of 64kb memory blocks on board */
    /* if not VESA 2, 236 scratch bytes follow (256 bytes total size) */

    /* VESA 2 fields */
    CARD16 OemSoftwareRev;      /* VBE implementation Software revision */
                                        /*CARD32 */ char *OemVendorNamePtr;
                                        /* Pointer to Vendor Name String */
                                                /*CARD32 */ char *OemProductNamePtr;
                                                /* Pointer to Product Name String */
                                        /*CARD32 */ char *OemProductRevPtr;
                                        /* Pointer to Product Revision String */
    CARD8 Reserved[222];        /* Reserved for VBE implementation */
    CARD8 OemData[256];         /* Data Area for OEM Strings */
} __attribute__ ((packed));

/* Return Super VGA Information */
extern _X_EXPORT VbeInfoBlock *VBEGetVBEInfo(vbeInfoPtr pVbe);
extern _X_EXPORT void VBEFreeVBEInfo(VbeInfoBlock * block);

/*
 * INT 1
 */

struct _VbeModeInfoBlock {
    CARD16 ModeAttributes;      /* mode attributes */
    CARD8 WinAAttributes;       /* window A attributes */
    CARD8 WinBAttributes;       /* window B attributes */
    CARD16 WinGranularity;      /* window granularity */
    CARD16 WinSize;             /* window size */
    CARD16 WinASegment;         /* window A start segment */
    CARD16 WinBSegment;         /* window B start segment */
    CARD32 WinFuncPtr;          /* real mode pointer to window function */
    CARD16 BytesPerScanline;    /* bytes per scanline */

    /* Mandatory information for VBE 1.2 and above */
    CARD16 XResolution;         /* horizontal resolution in pixels or characters */
    CARD16 YResolution;         /* vertical resolution in pixels or characters */
    CARD8 XCharSize;            /* character cell width in pixels */
    CARD8 YCharSize;            /* character cell height in pixels */
    CARD8 NumberOfPlanes;       /* number of memory planes */
    CARD8 BitsPerPixel;         /* bits per pixel */
    CARD8 NumberOfBanks;        /* number of banks */
    CARD8 MemoryModel;          /* memory model type */
    CARD8 BankSize;             /* bank size in KB */
    CARD8 NumberOfImages;       /* number of images */
    CARD8 Reserved;             /* 1 *//* reserved for page function */

    /* Direct color fields (required for direct/6 and YUV/7 memory models) */
    CARD8 RedMaskSize;          /* size of direct color red mask in bits */
    CARD8 RedFieldPosition;     /* bit position of lsb of red mask */
    CARD8 GreenMaskSize;        /* size of direct color green mask in bits */
    CARD8 GreenFieldPosition;   /* bit position of lsb of green mask */
    CARD8 BlueMaskSize;         /* size of direct color blue mask in bits */
    CARD8 BlueFieldPosition;    /* bit position of lsb of blue mask */
    CARD8 RsvdMaskSize;         /* size of direct color reserved mask in bits */
    CARD8 RsvdFieldPosition;    /* bit position of lsb of reserved mask */
    CARD8 DirectColorModeInfo;  /* direct color mode attributes */

    /* Mandatory information for VBE 2.0 and above */
    CARD32 PhysBasePtr;         /* physical address for flat memory frame buffer */
    CARD32 Reserved32;          /* 0 *//* Reserved - always set to 0 */
    CARD16 Reserved16;          /* 0 *//* Reserved - always set to 0 */

    /* Mandatory information for VBE 3.0 and above */
    CARD16 LinBytesPerScanLine; /* bytes per scan line for linear modes */
    CARD8 BnkNumberOfImagePages;        /* number of images for banked modes */
    CARD8 LinNumberOfImagePages;        /* number of images for linear modes */
    CARD8 LinRedMaskSize;       /* size of direct color red mask (linear modes) */
    CARD8 LinRedFieldPosition;  /* bit position of lsb of red mask (linear modes) */
    CARD8 LinGreenMaskSize;     /* size of direct color green mask (linear modes) */
    CARD8 LinGreenFieldPosition;        /* bit position of lsb of green mask (linear modes) */
    CARD8 LinBlueMaskSize;      /* size of direct color blue mask (linear modes) */
    CARD8 LinBlueFieldPosition; /* bit position of lsb of blue mask (linear modes) */
    CARD8 LinRsvdMaskSize;      /* size of direct color reserved mask (linear modes) */
    CARD8 LinRsvdFieldPosition; /* bit position of lsb of reserved mask (linear modes) */
    CARD32 MaxPixelClock;       /* maximum pixel clock (in Hz) for graphics mode */
    CARD8 Reserved2[189];       /* remainder of VbeModeInfoBlock */
} __attribute__ ((packed));

/* Return VBE Mode Information */
extern _X_EXPORT VbeModeInfoBlock *VBEGetModeInfo(vbeInfoPtr pVbe, int mode);
extern _X_EXPORT void VBEFreeModeInfo(VbeModeInfoBlock * block);

/*
 * INT2
 */

#define CRTC_DBLSCAN	(1<<0)
#define CRTC_INTERLACE	(1<<1)
#define CRTC_NHSYNC	(1<<2)
#define CRTC_NVSYNC	(1<<3)

struct _VbeCRTCInfoBlock {
    CARD16 HorizontalTotal;     /* Horizontal total in pixels */
    CARD16 HorizontalSyncStart; /* Horizontal sync start in pixels */
    CARD16 HorizontalSyncEnd;   /* Horizontal sync end in pixels */
    CARD16 VerticalTotal;       /* Vertical total in lines */
    CARD16 VerticalSyncStart;   /* Vertical sync start in lines */
    CARD16 VerticalSyncEnd;     /* Vertical sync end in lines */
    CARD8 Flags;                /* Flags (Interlaced, Double Scan etc) */
    CARD32 PixelClock;          /* Pixel clock in units of Hz */
    CARD16 RefreshRate;         /* Refresh rate in units of 0.01 Hz */
    CARD8 Reserved[40];         /* remainder of ModeInfoBlock */
} __attribute__ ((packed));

/* VbeCRTCInfoBlock is in the VESA 3.0 specs */

extern _X_EXPORT Bool VBESetVBEMode(vbeInfoPtr pVbe, int mode,
                                    VbeCRTCInfoBlock * crtc);

/*
 * INT 3
 */

extern _X_EXPORT Bool VBEGetVBEMode(vbeInfoPtr pVbe, int *mode);

/*
 * INT 4
 */

/* Save/Restore Super VGA video state */
/* function values are (values stored in VESAPtr):
 *	0 := query & allocate amount of memory to save state
 *	1 := save state
 *	2 := restore state
 *
 *	function 0 called automatically if function 1 called without
 *	a previous call to function 0.
 */

typedef enum {
    MODE_QUERY,
    MODE_SAVE,
    MODE_RESTORE
} vbeSaveRestoreFunction;

extern _X_EXPORT Bool

VBESaveRestore(vbeInfoPtr pVbe, vbeSaveRestoreFunction fuction,
               void **memory, int *size, int *real_mode_pages);

/*
 * INT 5
 */

extern _X_EXPORT Bool
 VBEBankSwitch(vbeInfoPtr pVbe, unsigned int iBank, int window);

/*
 * INT 6
 */

typedef enum {
    SCANWID_SET,
    SCANWID_GET,
    SCANWID_SET_BYTES,
    SCANWID_GET_MAX
} vbeScanwidthCommand;

#define VBESetLogicalScanline(pVbe, width)	\
	VBESetGetLogicalScanlineLength(pVbe, SCANWID_SET, width, \
					NULL, NULL, NULL)
#define VBESetLogicalScanlineBytes(pVbe, width)	\
	VBESetGetLogicalScanlineLength(pVbe, SCANWID_SET_BYTES, width, \
					NULL, NULL, NULL)
#define VBEGetLogicalScanline(pVbe, pixels, bytes, max)	\
	VBESetGetLogicalScanlineLength(pVbe, SCANWID_GET, 0, \
					pixels, bytes, max)
#define VBEGetMaxLogicalScanline(pVbe, pixels, bytes, max)	\
	VBESetGetLogicalScanlineLength(pVbe, SCANWID_GET_MAX, 0, \
					pixels, bytes, max)
extern _X_EXPORT Bool VBESetGetLogicalScanlineLength(vbeInfoPtr pVbe,
                                                     vbeScanwidthCommand
                                                     command, int width,
                                                     int *pixels, int *bytes,
                                                     int *max);

/*
 * INT 7
 */

/* 16 bit code */
extern _X_EXPORT Bool VBESetDisplayStart(vbeInfoPtr pVbe, int x, int y,
                                         Bool wait_retrace);
extern _X_EXPORT Bool VBEGetDisplayStart(vbeInfoPtr pVbe, int *x, int *y);

/*
 * INT 8
 */

/* if bits is 0, then it is a GET */
extern _X_EXPORT int VBESetGetDACPaletteFormat(vbeInfoPtr pVbe, int bits);

/*
 * INT 9
 */

/*
 *  If getting a palette, the data argument is not used. It will return
 * the data.
 *  If setting a palette, it will return the pointer received on success,
 * NULL on failure.
 */
extern _X_EXPORT CARD32 *VBESetGetPaletteData(vbeInfoPtr pVbe, Bool set,
                                              int first, int num, CARD32 *data,
                                              Bool secondary,
                                              Bool wait_retrace);
#define VBEFreePaletteData(data)	free(data)

/*
 * INT A
 */

typedef struct _VBEpmi {
    int seg_tbl;
    int tbl_off;
    int tbl_len;
} VBEpmi;

extern _X_EXPORT VBEpmi *VBEGetVBEpmi(vbeInfoPtr pVbe);

#define VESAFreeVBEpmi(pmi)	free(pmi)

/* high level helper functions */

typedef struct _vbeModeInfoRec {
    int width;
    int height;
    int bpp;
    int n;
    struct _vbeModeInfoRec *next;
} vbeModeInfoRec, *vbeModeInfoPtr;

typedef struct {
    CARD8 *state;
    CARD8 *pstate;
    int statePage;
    int stateSize;
    int stateMode;
} vbeSaveRestoreRec, *vbeSaveRestorePtr;

extern _X_EXPORT void

VBEVesaSaveRestore(vbeInfoPtr pVbe, vbeSaveRestorePtr vbe_sr,
                   vbeSaveRestoreFunction function);

extern _X_EXPORT int VBEGetPixelClock(vbeInfoPtr pVbe, int mode, int Clock);
extern _X_EXPORT Bool VBEDPMSSet(vbeInfoPtr pVbe, int mode);

struct vbePanelID {
    short hsize;
    short vsize;
    short fptype;
    char redbpp;
    char greenbpp;
    char bluebpp;
    char reservedbpp;
    int reserved_offscreen_mem_size;
    int reserved_offscreen_mem_pointer;
    char reserved[14];
};

extern _X_EXPORT void VBEInterpretPanelID(ScrnInfoPtr pScrn,
                                          struct vbePanelID *data);
extern _X_EXPORT struct vbePanelID *VBEReadPanelID(vbeInfoPtr pVbe);

#endif
@


1.6
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d6 1
a6 1
 * The mode query/save/set/restore functions from the vesa driver 
d9 1
a9 1
 * Authors: Paulo CÃ©sar Pereira de Andrade <pcpa@@conectiva.com.br> 
@


1.5
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d28 1
a28 1
    pointer memory;
d43 1
a43 1
extern _X_EXPORT xf86MonPtr vbeDoEDID(vbeInfoPtr pVbe, pointer pDDCModule);
d230 1
a230 1
               pointer *memory, int *size, int *real_mode_pages);
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d353 1
a353 1
extern _X_EXPORT void VBEInterpretPanelID(int scrnIndex,
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d23 1
a23 2
}
ddc_lvl;
d40 2
a41 1
extern _X_EXPORT vbeInfoPtr VBEExtendedInit(xf86Int10InfoPtr pInt, int entityIndex, int Flags);
d58 2
a59 2
    CARD8  Scratch[222];
    CARD8  OemData[256];
d63 1
a63 1
#pragma pack()	/* All GCC versions recognise this syntax */
d82 5
a86 4
    CARD8 VESASignature[4];		/* VESA */
    CARD16 VESAVersion;			/* Higher byte major, lower byte minor */
    /*CARD32*/char *OEMStringPtr;	/* Pointer to OEM string */
    CARD8 Capabilities[4];		/* Capabilities of the video environment */
d88 2
a89 1
    /*CARD32*/CARD16 *VideoModePtr;	/* pointer to supported Super VGA modes */
d91 1
a91 1
    CARD16 TotalMemory;			/* Number of 64kb memory blocks on board */
d95 10
a104 7
    CARD16 OemSoftwareRev;		/* VBE implementation Software revision */
    /*CARD32*/char *OemVendorNamePtr;	/* Pointer to Vendor Name String */
    /*CARD32*/char *OemProductNamePtr;	/* Pointer to Product Name String */
    /*CARD32*/char *OemProductRevPtr;	/* Pointer to Product Revision String */
    CARD8 Reserved[222];		/* Reserved for VBE implementation */
    CARD8 OemData[256];			/* Data Area for OEM Strings */
} __attribute__((packed));
d108 1
a108 1
extern _X_EXPORT void VBEFreeVBEInfo(VbeInfoBlock *block);
d115 9
a123 9
    CARD16 ModeAttributes;		/* mode attributes */
    CARD8 WinAAttributes;		/* window A attributes */
    CARD8 WinBAttributes;		/* window B attributes */
    CARD16 WinGranularity;		/* window granularity */
    CARD16 WinSize;			/* window size */
    CARD16 WinASegment;			/* window A start segment */
    CARD16 WinBSegment;			/* window B start segment */
    CARD32 WinFuncPtr;			/* real mode pointer to window function */
    CARD16 BytesPerScanline;		/* bytes per scanline */
d126 11
a136 11
    CARD16 XResolution;			/* horizontal resolution in pixels or characters */
    CARD16 YResolution;			/* vertical resolution in pixels or characters */
    CARD8 XCharSize;			/* character cell width in pixels */
    CARD8 YCharSize;			/* character cell height in pixels */
    CARD8 NumberOfPlanes;		/* number of memory planes */
    CARD8 BitsPerPixel;			/* bits per pixel */
    CARD8 NumberOfBanks;		/* number of banks */
    CARD8 MemoryModel;			/* memory model type */
    CARD8 BankSize;			/* bank size in KB */
    CARD8 NumberOfImages;		/* number of images */
    CARD8 Reserved;	/* 1 */		/* reserved for page function */
d139 9
a147 9
    CARD8 RedMaskSize;			/* size of direct color red mask in bits */
    CARD8 RedFieldPosition;		/* bit position of lsb of red mask */
    CARD8 GreenMaskSize;		/* size of direct color green mask in bits */
    CARD8 GreenFieldPosition;		/* bit position of lsb of green mask */
    CARD8 BlueMaskSize;			/* size of direct color blue mask in bits */
    CARD8 BlueFieldPosition;		/* bit position of lsb of blue mask */
    CARD8 RsvdMaskSize;			/* size of direct color reserved mask in bits */
    CARD8 RsvdFieldPosition;		/* bit position of lsb of reserved mask */
    CARD8 DirectColorModeInfo;		/* direct color mode attributes */
d150 3
a152 3
    CARD32 PhysBasePtr;			/* physical address for flat memory frame buffer */
    CARD32 Reserved32;	/* 0 */		/* Reserved - always set to 0 */
    CARD16 Reserved16;	/* 0 */		/* Reserved - always set to 0 */
d155 14
a168 14
    CARD16 LinBytesPerScanLine;		/* bytes per scan line for linear modes */
    CARD8 BnkNumberOfImagePages;	/* number of images for banked modes */
    CARD8 LinNumberOfImagePages;	/* number of images for linear modes */
    CARD8 LinRedMaskSize;		/* size of direct color red mask (linear modes) */
    CARD8 LinRedFieldPosition;		/* bit position of lsb of red mask (linear modes) */
    CARD8 LinGreenMaskSize;		/* size of direct color green mask (linear modes) */
    CARD8 LinGreenFieldPosition;	/* bit position of lsb of green mask (linear modes) */
    CARD8 LinBlueMaskSize;		/* size of direct color blue mask (linear modes) */
    CARD8 LinBlueFieldPosition;		/* bit position of lsb of blue mask (linear modes) */
    CARD8 LinRsvdMaskSize;		/* size of direct color reserved mask (linear modes) */
    CARD8 LinRsvdFieldPosition;		/* bit position of lsb of reserved mask (linear modes) */
    CARD32 MaxPixelClock;		/* maximum pixel clock (in Hz) for graphics mode */
    CARD8 Reserved2[189];		/* remainder of VbeModeInfoBlock */
} __attribute__((packed));
d172 1
a172 1
extern _X_EXPORT void VBEFreeModeInfo(VbeModeInfoBlock *block);
d184 12
a195 11
    CARD16 HorizontalTotal;		/* Horizontal total in pixels */
    CARD16 HorizontalSyncStart;		/* Horizontal sync start in pixels */
    CARD16 HorizontalSyncEnd;		/* Horizontal sync end in pixels */
    CARD16 VerticalTotal;		/* Vertical total in lines */
    CARD16 VerticalSyncStart;		/* Vertical sync start in lines */
    CARD16 VerticalSyncEnd;		/* Vertical sync end in lines */
    CARD8 Flags;			/* Flags (Interlaced, Double Scan etc) */
    CARD32 PixelClock;			/* Pixel clock in units of Hz */
    CARD16 RefreshRate;			/* Refresh rate in units of 0.01 Hz */
    CARD8 Reserved[40];			/* remainder of ModeInfoBlock */
} __attribute__((packed));
d198 2
a199 1
extern _X_EXPORT Bool VBESetVBEMode(vbeInfoPtr pVbe, int mode, VbeCRTCInfoBlock *crtc);
d222 3
a224 3
  MODE_QUERY,
  MODE_SAVE,
  MODE_RESTORE
d228 3
a230 2
VBESaveRestore(vbeInfoPtr pVbe, vbeSaveRestoreFunction fuction, 
	       pointer *memory, int *size, int *real_mode_pages);
d237 1
a237 1
VBEBankSwitch(vbeInfoPtr pVbe, unsigned int iBank, int window);
d244 4
a247 4
  SCANWID_SET,
  SCANWID_GET,
  SCANWID_SET_BYTES,
  SCANWID_GET_MAX
d263 4
a266 2
				    vbeScanwidthCommand command, int width,
				     int *pixels, int *bytes, int *max);
d273 2
a274 1
extern _X_EXPORT Bool VBESetDisplayStart(vbeInfoPtr pVbe, int x, int y, Bool wait_retrace);
d294 4
a297 2
extern _X_EXPORT CARD32 *VBESetGetPaletteData(vbeInfoPtr pVbe, Bool set, int first, int num,
			     CARD32 *data, Bool secondary, Bool wait_retrace);
d311 1
d333 1
d335 1
a335 1
		   vbeSaveRestoreFunction function);
d353 2
a354 1
extern _X_EXPORT void VBEInterpretPanelID(int scrnIndex, struct vbePanelID *data);
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d68 1
a68 1
#ifndef __GNUC__
d285 1
a285 1
#define VBEFreePaletteData(data)	xfree(data)
d298 1
a298 1
#define VESAFreeVBEpmi(pmi)	xfree(pmi)
@


1.1
log
@Initial revision
@
text
@d40 4
a43 4
vbeInfoPtr VBEInit(xf86Int10InfoPtr pInt, int entityIndex);
vbeInfoPtr VBEExtendedInit(xf86Int10InfoPtr pInt, int entityIndex, int Flags);
void vbeFree(vbeInfoPtr pVbe);
xf86MonPtr vbeDoEDID(vbeInfoPtr pVbe, pointer pDDCModule);
d102 2
a103 2
VbeInfoBlock *VBEGetVBEInfo(vbeInfoPtr pVbe);
void VBEFreeVBEInfo(VbeInfoBlock *block);
d166 2
a167 2
VbeModeInfoBlock *VBEGetModeInfo(vbeInfoPtr pVbe, int mode);
void VBEFreeModeInfo(VbeModeInfoBlock *block);
d192 1
a192 1
Bool VBESetVBEMode(vbeInfoPtr pVbe, int mode, VbeCRTCInfoBlock *crtc);
d198 1
a198 1
Bool VBEGetVBEMode(vbeInfoPtr pVbe, int *mode);
d220 1
a220 1
Bool
d228 1
a228 1
Bool
d254 1
a254 1
Bool VBESetGetLogicalScanlineLength(vbeInfoPtr pVbe, 
d263 2
a264 2
Bool VBESetDisplayStart(vbeInfoPtr pVbe, int x, int y, Bool wait_retrace);
Bool VBEGetDisplayStart(vbeInfoPtr pVbe, int *x, int *y);
d271 1
a271 1
int VBESetGetDACPaletteFormat(vbeInfoPtr pVbe, int bits);
d283 1
a283 1
CARD32 *VBESetGetPaletteData(vbeInfoPtr pVbe, Bool set, int first, int num,
d297 1
a297 1
VBEpmi *VBEGetVBEpmi(vbeInfoPtr pVbe);
a309 6
vbeModeInfoPtr    VBEBuildVbeModeList(vbeInfoPtr pVbe, 
			    VbeInfoBlock *vbe);

unsigned short VBECalcVbeModeIndex(vbeModeInfoPtr m, 
				   DisplayModePtr mode, int bpp);

d318 1
a318 1
void
d322 18
a339 2
int VBEGetPixelClock(vbeInfoPtr pVbe, int mode, int Clock);
Bool VBEDPMSSet(vbeInfoPtr pVbe, int mode);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@a330 16
struct vbePanelID {
    short hsize;
    short vsize;
    short fptype;
    char redbpp;
    char greenbpp;
    char bluebpp;
    char reservedbpp;
    int reserved_offscreen_mem_size;
    int reserved_offscreen_mem_pointer;
    char reserved[14];
};

void VBEInterpretPanelID(int scrnIndex, struct vbePanelID *data);
struct vbePanelID *VBEReadPanelID(vbeInfoPtr pVbe);

@

