head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.6
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	cVXoV5PxI8YrEaVA;

1.6
date	2012.06.10.13.21.27;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.05.13.32.52;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.25;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.17.35;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.17.35;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@#define DEBUG_VERB 2
/*
 * Copyright Â© 2002 David Dawes
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the author(s) shall
 * not be used in advertising or otherwise to promote the sale, use or other
 * dealings in this Software without prior written authorization from
 * the author(s).
 *
 * Authors: David Dawes <dawes@@xfree86.org>
 *
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <stdio.h>
#include <string.h>

#include "xf86.h"
#include "vbe.h"
#include "vbeModes.h"

static int
GetDepthFlag(vbeInfoPtr pVbe, int id)
{
    VbeModeInfoBlock *mode;
    int bpp;

    if ((mode = VBEGetModeInfo(pVbe, id)) == NULL)
        return 0;

    if (VBE_MODE_USABLE(mode, 0)) {
        int depth;

        if (VBE_MODE_COLOR(mode)) {
            depth = mode->RedMaskSize + mode->GreenMaskSize +
                mode->BlueMaskSize;
        }
        else {
            depth = 1;
        }
        bpp = mode->BitsPerPixel;
        VBEFreeModeInfo(mode);
        mode = NULL;
        switch (depth) {
        case 1:
            return V_DEPTH_1;
        case 4:
            return V_DEPTH_4;
        case 8:
            return V_DEPTH_8;
        case 15:
            return V_DEPTH_15;
        case 16:
            return V_DEPTH_16;
        case 24:
            switch (bpp) {
            case 24:
                return V_DEPTH_24_24;
            case 32:
                return V_DEPTH_24_32;
            }
        }
    }
    if (mode)
        VBEFreeModeInfo(mode);
    return 0;
}

/*
 * Find supported mode depths.
 */
int
VBEFindSupportedDepths(vbeInfoPtr pVbe, VbeInfoBlock * vbe, int *flags24,
                       int modeTypes)
{
    int i = 0;
    int depths = 0;

    if (modeTypes & V_MODETYPE_VBE) {
        while (vbe->VideoModePtr[i] != 0xffff) {
            depths |= GetDepthFlag(pVbe, vbe->VideoModePtr[i++]);
        }
    }

    /*
     * XXX This possibly only works with VBE 3.0 and later.
     */
    if (modeTypes & V_MODETYPE_VGA) {
        for (i = 0; i < 0x7F; i++) {
            depths |= GetDepthFlag(pVbe, i);
        }
    }

    if (flags24) {
        if (depths & V_DEPTH_24_24)
            *flags24 |= Support24bppFb;
        if (depths & V_DEPTH_24_32)
            *flags24 |= Support32bppFb;
    }

    return depths;
}

static DisplayModePtr
CheckMode(ScrnInfoPtr pScrn, vbeInfoPtr pVbe, VbeInfoBlock * vbe, int id,
          int flags)
{
    CARD16 major;
    VbeModeInfoBlock *mode;
    DisplayModePtr pMode;
    VbeModeInfoData *data;
    Bool modeOK = FALSE;

    major = (unsigned) (vbe->VESAVersion >> 8);

    if ((mode = VBEGetModeInfo(pVbe, id)) == NULL)
        return NULL;

    /* Does the mode match the depth/bpp? */
    /* Some BIOS's set BitsPerPixel to 15 instead of 16 for 15/16 */
    if (VBE_MODE_USABLE(mode, flags) &&
        ((pScrn->bitsPerPixel == 1 && !VBE_MODE_COLOR(mode)) ||
         (mode->BitsPerPixel > 8 &&
          (mode->RedMaskSize + mode->GreenMaskSize +
           mode->BlueMaskSize) == pScrn->depth &&
          mode->BitsPerPixel == pScrn->bitsPerPixel) ||
         (mode->BitsPerPixel == 15 && pScrn->depth == 15) ||
         (mode->BitsPerPixel <= 8 &&
          mode->BitsPerPixel == pScrn->bitsPerPixel))) {
        modeOK = TRUE;
        xf86ErrorFVerb(DEBUG_VERB, "*");
    }

    xf86ErrorFVerb(DEBUG_VERB,
                   "Mode: %x (%dx%d)\n", id, mode->XResolution,
                   mode->YResolution);
    xf86ErrorFVerb(DEBUG_VERB, "	ModeAttributes: 0x%x\n",
                   mode->ModeAttributes);
    xf86ErrorFVerb(DEBUG_VERB, "	WinAAttributes: 0x%x\n",
                   mode->WinAAttributes);
    xf86ErrorFVerb(DEBUG_VERB, "	WinBAttributes: 0x%x\n",
                   mode->WinBAttributes);
    xf86ErrorFVerb(DEBUG_VERB, "	WinGranularity: %d\n",
                   mode->WinGranularity);
    xf86ErrorFVerb(DEBUG_VERB, "	WinSize: %d\n", mode->WinSize);
    xf86ErrorFVerb(DEBUG_VERB,
                   "	WinASegment: 0x%x\n", mode->WinASegment);
    xf86ErrorFVerb(DEBUG_VERB,
                   "	WinBSegment: 0x%x\n", mode->WinBSegment);
    xf86ErrorFVerb(DEBUG_VERB,
                   "	WinFuncPtr: 0x%lx\n", (unsigned long) mode->WinFuncPtr);
    xf86ErrorFVerb(DEBUG_VERB,
                   "	BytesPerScanline: %d\n", mode->BytesPerScanline);
    xf86ErrorFVerb(DEBUG_VERB, "	XResolution: %d\n", mode->XResolution);
    xf86ErrorFVerb(DEBUG_VERB, "	YResolution: %d\n", mode->YResolution);
    xf86ErrorFVerb(DEBUG_VERB, "	XCharSize: %d\n", mode->XCharSize);
    xf86ErrorFVerb(DEBUG_VERB, "	YCharSize: %d\n", mode->YCharSize);
    xf86ErrorFVerb(DEBUG_VERB,
                   "	NumberOfPlanes: %d\n", mode->NumberOfPlanes);
    xf86ErrorFVerb(DEBUG_VERB,
                   "	BitsPerPixel: %d\n", mode->BitsPerPixel);
    xf86ErrorFVerb(DEBUG_VERB,
                   "	NumberOfBanks: %d\n", mode->NumberOfBanks);
    xf86ErrorFVerb(DEBUG_VERB, "	MemoryModel: %d\n", mode->MemoryModel);
    xf86ErrorFVerb(DEBUG_VERB, "	BankSize: %d\n", mode->BankSize);
    xf86ErrorFVerb(DEBUG_VERB,
                   "	NumberOfImages: %d\n", mode->NumberOfImages);
    xf86ErrorFVerb(DEBUG_VERB, "	RedMaskSize: %d\n", mode->RedMaskSize);
    xf86ErrorFVerb(DEBUG_VERB,
                   "	RedFieldPosition: %d\n", mode->RedFieldPosition);
    xf86ErrorFVerb(DEBUG_VERB,
                   "	GreenMaskSize: %d\n", mode->GreenMaskSize);
    xf86ErrorFVerb(DEBUG_VERB,
                   "	GreenFieldPosition: %d\n", mode->GreenFieldPosition);
    xf86ErrorFVerb(DEBUG_VERB,
                   "	BlueMaskSize: %d\n", mode->BlueMaskSize);
    xf86ErrorFVerb(DEBUG_VERB,
                   "	BlueFieldPosition: %d\n", mode->BlueFieldPosition);
    xf86ErrorFVerb(DEBUG_VERB,
                   "	RsvdMaskSize: %d\n", mode->RsvdMaskSize);
    xf86ErrorFVerb(DEBUG_VERB,
                   "	RsvdFieldPosition: %d\n", mode->RsvdFieldPosition);
    xf86ErrorFVerb(DEBUG_VERB,
                   "	DirectColorModeInfo: %d\n", mode->DirectColorModeInfo);
    if (major >= 2) {
        xf86ErrorFVerb(DEBUG_VERB,
                       "	PhysBasePtr: 0x%lx\n",
                       (unsigned long) mode->PhysBasePtr);
        if (major >= 3) {
            xf86ErrorFVerb(DEBUG_VERB,
                           "	LinBytesPerScanLine: %d\n",
                           mode->LinBytesPerScanLine);
            xf86ErrorFVerb(DEBUG_VERB, "	BnkNumberOfImagePages: %d\n",
                           mode->BnkNumberOfImagePages);
            xf86ErrorFVerb(DEBUG_VERB, "	LinNumberOfImagePages: %d\n",
                           mode->LinNumberOfImagePages);
            xf86ErrorFVerb(DEBUG_VERB, "	LinRedMaskSize: %d\n",
                           mode->LinRedMaskSize);
            xf86ErrorFVerb(DEBUG_VERB, "	LinRedFieldPosition: %d\n",
                           mode->LinRedFieldPosition);
            xf86ErrorFVerb(DEBUG_VERB, "	LinGreenMaskSize: %d\n",
                           mode->LinGreenMaskSize);
            xf86ErrorFVerb(DEBUG_VERB, "	LinGreenFieldPosition: %d\n",
                           mode->LinGreenFieldPosition);
            xf86ErrorFVerb(DEBUG_VERB, "	LinBlueMaskSize: %d\n",
                           mode->LinBlueMaskSize);
            xf86ErrorFVerb(DEBUG_VERB, "	LinBlueFieldPosition: %d\n",
                           mode->LinBlueFieldPosition);
            xf86ErrorFVerb(DEBUG_VERB, "	LinRsvdMaskSize: %d\n",
                           mode->LinRsvdMaskSize);
            xf86ErrorFVerb(DEBUG_VERB, "	LinRsvdFieldPosition: %d\n",
                           mode->LinRsvdFieldPosition);
            xf86ErrorFVerb(DEBUG_VERB, "	MaxPixelClock: %ld\n",
                           (unsigned long) mode->MaxPixelClock);
        }
    }

    if (!modeOK) {
        VBEFreeModeInfo(mode);
        return NULL;
    }
    pMode = xnfcalloc(sizeof(DisplayModeRec), 1);

    pMode->status = MODE_OK;
    pMode->type = M_T_BUILTIN;

    /* for adjust frame */
    pMode->HDisplay = mode->XResolution;
    pMode->VDisplay = mode->YResolution;

    data = xnfcalloc(sizeof(VbeModeInfoData), 1);
    data->mode = id;
    data->data = mode;
    pMode->PrivSize = sizeof(VbeModeInfoData);
    pMode->Private = (INT32 *) data;
    pMode->next = NULL;
    return pMode;
}

/*
 * Check the available BIOS modes, and extract those that match the
 * requirements into the modePool.  Note: modePool is a NULL-terminated
 * list.
 */

DisplayModePtr
VBEGetModePool(ScrnInfoPtr pScrn, vbeInfoPtr pVbe, VbeInfoBlock * vbe,
               int modeTypes)
{
    DisplayModePtr pMode, p = NULL, modePool = NULL;
    int i = 0;

    if (modeTypes & V_MODETYPE_VBE) {
        while (vbe->VideoModePtr[i] != 0xffff) {
            int id = vbe->VideoModePtr[i++];

            if ((pMode = CheckMode(pScrn, pVbe, vbe, id, modeTypes)) != NULL) {
                ModeStatus status = MODE_OK;

                /* Check the mode against a specified virtual size (if any) */
                if (pScrn->display->virtualX > 0 &&
                    pMode->HDisplay > pScrn->display->virtualX) {
                    status = MODE_VIRTUAL_X;
                }
                if (pScrn->display->virtualY > 0 &&
                    pMode->VDisplay > pScrn->display->virtualY) {
                    status = MODE_VIRTUAL_Y;
                }
                if (status != MODE_OK) {
                    xf86DrvMsg(pScrn->scrnIndex, X_INFO,
                               "Not using mode \"%dx%d\" (%s)\n",
                               pMode->HDisplay, pMode->VDisplay,
                               xf86ModeStatusToString(status));
                }
                else {
                    if (p == NULL) {
                        modePool = pMode;
                    }
                    else {
                        p->next = pMode;
                    }
                    pMode->prev = NULL;
                    p = pMode;
                }
            }
        }
    }
    if (modeTypes & V_MODETYPE_VGA) {
        for (i = 0; i < 0x7F; i++) {
            if ((pMode = CheckMode(pScrn, pVbe, vbe, i, modeTypes)) != NULL) {
                ModeStatus status = MODE_OK;

                /* Check the mode against a specified virtual size (if any) */
                if (pScrn->display->virtualX > 0 &&
                    pMode->HDisplay > pScrn->display->virtualX) {
                    status = MODE_VIRTUAL_X;
                }
                if (pScrn->display->virtualY > 0 &&
                    pMode->VDisplay > pScrn->display->virtualY) {
                    status = MODE_VIRTUAL_Y;
                }
                if (status != MODE_OK) {
                    xf86DrvMsg(pScrn->scrnIndex, X_INFO,
                               "Not using mode \"%dx%d\" (%s)\n",
                               pMode->HDisplay, pMode->VDisplay,
                               xf86ModeStatusToString(status));
                }
                else {
                    if (p == NULL) {
                        modePool = pMode;
                    }
                    else {
                        p->next = pMode;
                    }
                    pMode->prev = NULL;
                    p = pMode;
                }
            }
        }
    }
    return modePool;
}

void
VBESetModeNames(DisplayModePtr pMode)
{
    if (!pMode)
        return;

    do {
        if (!pMode->name) {
            /* Catch "bad" modes. */
            if (pMode->HDisplay > 10000 || pMode->HDisplay < 0 ||
                pMode->VDisplay > 10000 || pMode->VDisplay < 0) {
                pMode->name = strdup("BADMODE");
            }
            else {
                char *tmp;
                XNFasprintf(&tmp, "%dx%d",
                            pMode->HDisplay, pMode->VDisplay);
                pMode->name = tmp;
            }
        }
        pMode = pMode->next;
    } while (pMode);
}

/*
 * Go through the monitor modes and selecting the best set of
 * parameters for each BIOS mode.  Note: This is only supported in
 * VBE version 3.0 or later.
 */
void
VBESetModeParameters(ScrnInfoPtr pScrn, vbeInfoPtr pVbe)
{
    DisplayModePtr pMode;
    VbeModeInfoData *data;

    pMode = pScrn->modes;
    do {
        DisplayModePtr p, best = NULL;
        ModeStatus status;

        for (p = pScrn->monitor->Modes; p != NULL; p = p->next) {
            if ((p->HDisplay != pMode->HDisplay) ||
                (p->VDisplay != pMode->VDisplay) ||
                (p->Flags & (V_INTERLACE | V_DBLSCAN | V_CLKDIV2)))
                continue;
            /* XXX could support the various V_ flags */
            status = xf86CheckModeForMonitor(p, pScrn->monitor);
            if (status != MODE_OK)
                continue;
            if (!best || (p->Clock > best->Clock))
                best = p;
        }

        if (best) {
            int clock;

            data = (VbeModeInfoData *) pMode->Private;
            pMode->HSync = (float) best->Clock * 1000.0 / best->HTotal + 0.5;
            pMode->VRefresh = pMode->HSync / best->VTotal + 0.5;
            xf86DrvMsg(pScrn->scrnIndex, X_INFO,
                       "Attempting to use %dHz refresh for mode \"%s\" (%x)\n",
                       (int) pMode->VRefresh, pMode->name, data->mode);
            data->block = calloc(sizeof(VbeCRTCInfoBlock), 1);
            data->block->HorizontalTotal = best->HTotal;
            data->block->HorizontalSyncStart = best->HSyncStart;
            data->block->HorizontalSyncEnd = best->HSyncEnd;
            data->block->VerticalTotal = best->VTotal;
            data->block->VerticalSyncStart = best->VSyncStart;
            data->block->VerticalSyncEnd = best->VSyncEnd;
            data->block->Flags = ((best->Flags & V_NHSYNC) ? CRTC_NHSYNC : 0) |
                ((best->Flags & V_NVSYNC) ? CRTC_NVSYNC : 0);
            data->block->PixelClock = best->Clock * 1000;
            /* XXX May not have this. */
            clock = VBEGetPixelClock(pVbe, data->mode, data->block->PixelClock);
            DebugF("Setting clock %.2fMHz, closest is %.2fMHz\n",
                   (double) data->block->PixelClock / 1000000.0,
                   (double) clock / 1000000.0);
            if (clock)
                data->block->PixelClock = clock;
            data->mode |= (1 << 11);
            data->block->RefreshRate = ((double) (data->block->PixelClock) /
                                        (double) (best->HTotal *
                                                  best->VTotal)) * 100;
        }
        pMode = pMode->next;
    } while (pMode != pScrn->modes);
}

/*
 * These wrappers are to allow (temporary) funtionality divergences.
 */
int
VBEValidateModes(ScrnInfoPtr scrp, DisplayModePtr availModes,
                 const char **modeNames, ClockRangePtr clockRanges,
                 int *linePitches, int minPitch, int maxPitch, int pitchInc,
                 int minHeight, int maxHeight, int virtualX, int virtualY,
                 int apertureSize, LookupModeFlags strategy)
{
    return xf86ValidateModes(scrp, availModes, modeNames, clockRanges,
                             linePitches, minPitch, maxPitch, pitchInc,
                             minHeight, maxHeight, virtualX, virtualY,
                             apertureSize, strategy);
}

void
VBEPrintModes(ScrnInfoPtr scrp)
{
    xf86PrintModes(scrp);
}
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d359 2
a360 1
                XNFasprintf(&pMode->name, "%dx%d",
d362 1
d438 1
a438 1
                 char **modeNames, ClockRangePtr clockRanges,
@


1.5
log
@Update to xserver 1.11.2
@
text
@d50 1
a50 1
	return 0;
d53 1
a53 1
	int depth;
d55 29
a83 28
	if (VBE_MODE_COLOR(mode)) {
	    depth = mode->RedMaskSize + mode->GreenMaskSize +
		    mode->BlueMaskSize;
	} else {
	    depth = 1;
	}
	bpp = mode->BitsPerPixel;
	VBEFreeModeInfo(mode);
	mode = NULL;
	switch (depth) {
	case 1:
	    return V_DEPTH_1;
	case 4:
	    return V_DEPTH_4;
	case 8:
	    return V_DEPTH_8;
	case 15:
	    return V_DEPTH_15;
	case 16:
	    return V_DEPTH_16;
	case 24:
	    switch (bpp) {
	    case 24:
		return V_DEPTH_24_24;
	    case 32:
		return V_DEPTH_24_32;
	    }
	}
d86 1
a86 1
	VBEFreeModeInfo(mode);
d94 2
a95 2
VBEFindSupportedDepths(vbeInfoPtr pVbe, VbeInfoBlock *vbe, int *flags24,
			int modeTypes)
d101 3
a103 3
	while (vbe->VideoModePtr[i] != 0xffff) {
	    depths |= GetDepthFlag(pVbe, vbe->VideoModePtr[i++]);
	}
d110 3
a112 3
	for (i = 0; i < 0x7F; i++) {
	    depths |= GetDepthFlag(pVbe, i);
	}
d116 4
a119 4
	if (depths & V_DEPTH_24_24)
	    *flags24 |= Support24bppFb;
	if (depths & V_DEPTH_24_32)
	    *flags24 |= Support32bppFb;
d126 2
a127 2
CheckMode(ScrnInfoPtr pScrn, vbeInfoPtr pVbe, VbeInfoBlock *vbe, int id,
	  int flags)
d135 1
a135 1
    major = (unsigned)(vbe->VESAVersion >> 8);
d138 1
a138 1
	return NULL;
d143 10
a152 10
	((pScrn->bitsPerPixel == 1 && !VBE_MODE_COLOR(mode)) ||
	 (mode->BitsPerPixel > 8 &&
	  (mode->RedMaskSize + mode->GreenMaskSize +
	   mode->BlueMaskSize) == pScrn->depth &&
	  mode->BitsPerPixel == pScrn->bitsPerPixel) ||
	 (mode->BitsPerPixel == 15 && pScrn->depth == 15) ||
	 (mode->BitsPerPixel <= 8 &&
	  mode->BitsPerPixel == pScrn->bitsPerPixel))) {
	modeOK = TRUE;
	xf86ErrorFVerb(DEBUG_VERB, "*");
d156 11
a166 1
	    "Mode: %x (%dx%d)\n", id, mode->XResolution, mode->YResolution);
d168 1
a168 1
	    "	ModeAttributes: 0x%x\n", mode->ModeAttributes);
d170 1
a170 1
	    "	WinAAttributes: 0x%x\n", mode->WinAAttributes);
d172 1
a172 1
	    "	WinBAttributes: 0x%x\n", mode->WinBAttributes);
d174 5
a178 1
	    "	WinGranularity: %d\n", mode->WinGranularity);
d180 1
a180 1
	    "	WinSize: %d\n", mode->WinSize);
d182 1
a182 1
	    "	WinASegment: 0x%x\n", mode->WinASegment);
d184 3
a186 1
	    "	WinBSegment: 0x%x\n", mode->WinBSegment);
d188 2
a189 1
	    "	WinFuncPtr: 0x%lx\n", (unsigned long)mode->WinFuncPtr);
d191 1
a191 1
	    "	BytesPerScanline: %d\n", mode->BytesPerScanline);
d193 1
a193 1
	    "	XResolution: %d\n", mode->XResolution);
d195 1
a195 1
	    "	YResolution: %d\n", mode->YResolution);
d197 1
a197 1
	    "	XCharSize: %d\n", mode->XCharSize);
d199 1
a199 1
           "	YCharSize: %d\n", mode->YCharSize);
d201 1
a201 1
	    "	NumberOfPlanes: %d\n", mode->NumberOfPlanes);
d203 1
a203 1
	    "	BitsPerPixel: %d\n", mode->BitsPerPixel);
d205 1
a205 25
	    "	NumberOfBanks: %d\n", mode->NumberOfBanks);
    xf86ErrorFVerb(DEBUG_VERB,
	    "	MemoryModel: %d\n", mode->MemoryModel);
    xf86ErrorFVerb(DEBUG_VERB,
	    "	BankSize: %d\n", mode->BankSize);
    xf86ErrorFVerb(DEBUG_VERB,
	    "	NumberOfImages: %d\n", mode->NumberOfImages);
    xf86ErrorFVerb(DEBUG_VERB,
	    "	RedMaskSize: %d\n", mode->RedMaskSize);
    xf86ErrorFVerb(DEBUG_VERB,
	    "	RedFieldPosition: %d\n", mode->RedFieldPosition);
    xf86ErrorFVerb(DEBUG_VERB,
	    "	GreenMaskSize: %d\n", mode->GreenMaskSize);
    xf86ErrorFVerb(DEBUG_VERB,
	    "	GreenFieldPosition: %d\n", mode->GreenFieldPosition);
    xf86ErrorFVerb(DEBUG_VERB,
	    "	BlueMaskSize: %d\n", mode->BlueMaskSize);
    xf86ErrorFVerb(DEBUG_VERB,
	    "	BlueFieldPosition: %d\n", mode->BlueFieldPosition);
    xf86ErrorFVerb(DEBUG_VERB,
	    "	RsvdMaskSize: %d\n", mode->RsvdMaskSize);
    xf86ErrorFVerb(DEBUG_VERB,
	    "	RsvdFieldPosition: %d\n", mode->RsvdFieldPosition);
    xf86ErrorFVerb(DEBUG_VERB,
	    "	DirectColorModeInfo: %d\n", mode->DirectColorModeInfo);
d207 30
a236 29
	xf86ErrorFVerb(DEBUG_VERB,
		"	PhysBasePtr: 0x%lx\n",
		(unsigned long)mode->PhysBasePtr);
	if (major >= 3) {
	    xf86ErrorFVerb(DEBUG_VERB,
		    "	LinBytesPerScanLine: %d\n", mode->LinBytesPerScanLine);
	    xf86ErrorFVerb(DEBUG_VERB,
		    "	BnkNumberOfImagePages: %d\n", mode->BnkNumberOfImagePages);
	    xf86ErrorFVerb(DEBUG_VERB,
		    "	LinNumberOfImagePages: %d\n", mode->LinNumberOfImagePages);
	    xf86ErrorFVerb(DEBUG_VERB,
		    "	LinRedMaskSize: %d\n", mode->LinRedMaskSize);
	    xf86ErrorFVerb(DEBUG_VERB,
		    "	LinRedFieldPosition: %d\n", mode->LinRedFieldPosition);
	    xf86ErrorFVerb(DEBUG_VERB,
		    "	LinGreenMaskSize: %d\n", mode->LinGreenMaskSize);
	    xf86ErrorFVerb(DEBUG_VERB,
		    "	LinGreenFieldPosition: %d\n", mode->LinGreenFieldPosition);
	    xf86ErrorFVerb(DEBUG_VERB,
		    "	LinBlueMaskSize: %d\n", mode->LinBlueMaskSize);
	    xf86ErrorFVerb(DEBUG_VERB,
		    "	LinBlueFieldPosition: %d\n", mode->LinBlueFieldPosition);
	    xf86ErrorFVerb(DEBUG_VERB,
		    "	LinRsvdMaskSize: %d\n", mode->LinRsvdMaskSize);
	    xf86ErrorFVerb(DEBUG_VERB,
		    "	LinRsvdFieldPosition: %d\n", mode->LinRsvdFieldPosition);
	    xf86ErrorFVerb(DEBUG_VERB,
		    "	MaxPixelClock: %ld\n", (unsigned long)mode->MaxPixelClock);
	}
d240 2
a241 2
	VBEFreeModeInfo(mode);
	return NULL;
d256 1
a256 1
    pMode->Private = (INT32*)data;
d268 2
a269 2
VBEGetModePool(ScrnInfoPtr pScrn, vbeInfoPtr pVbe, VbeInfoBlock *vbe,
	       int modeTypes)
d275 2
a276 2
	while (vbe->VideoModePtr[i] != 0xffff) {
	    int id = vbe->VideoModePtr[i++];
d278 2
a279 2
	    if ((pMode = CheckMode(pScrn, pVbe, vbe, id, modeTypes)) != NULL) {
		ModeStatus status = MODE_OK;
d281 27
a307 25
		/* Check the mode against a specified virtual size (if any) */
		if (pScrn->display->virtualX > 0 &&
		    pMode->HDisplay > pScrn->display->virtualX) {
		    status = MODE_VIRTUAL_X;
		}
		if (pScrn->display->virtualY > 0 &&
		    pMode->VDisplay > pScrn->display->virtualY) {
		    status = MODE_VIRTUAL_Y;
		}
		if (status != MODE_OK) {
		     xf86DrvMsg(pScrn->scrnIndex, X_INFO,
				"Not using mode \"%dx%d\" (%s)\n",
				pMode->HDisplay, pMode->VDisplay,
				xf86ModeStatusToString(status));
		} else {
		    if (p == NULL) {
			modePool = pMode;
		    } else {
			p->next = pMode;
		    }
		    pMode->prev = NULL;
		    p = pMode;
		}
	    }
	}
d310 31
a340 29
	for (i = 0; i < 0x7F; i++) {
	    if ((pMode = CheckMode(pScrn, pVbe, vbe, i, modeTypes)) != NULL) {
		ModeStatus status = MODE_OK;

		/* Check the mode against a specified virtual size (if any) */
		if (pScrn->display->virtualX > 0 &&
		    pMode->HDisplay > pScrn->display->virtualX) {
		    status = MODE_VIRTUAL_X;
		}
		if (pScrn->display->virtualY > 0 &&
		    pMode->VDisplay > pScrn->display->virtualY) {
		    status = MODE_VIRTUAL_Y;
		}
		if (status != MODE_OK) {
		     xf86DrvMsg(pScrn->scrnIndex, X_INFO,
				"Not using mode \"%dx%d\" (%s)\n",
				pMode->HDisplay, pMode->VDisplay,
				xf86ModeStatusToString(status));
		} else {
		    if (p == NULL) {
			modePool = pMode;
		    } else {
			p->next = pMode;
		    }
		    pMode->prev = NULL;
		    p = pMode;
		}
	    }
	}
d349 1
a349 1
	return;
d352 12
a363 11
	if (!pMode->name) {
	    /* Catch "bad" modes. */
	    if (pMode->HDisplay > 10000 || pMode->HDisplay < 0 ||
		pMode->VDisplay > 10000 || pMode->VDisplay < 0) {
		pMode->name = strdup("BADMODE");
	    } else {
		XNFasprintf(&pMode->name, "%dx%d",
			    pMode->HDisplay, pMode->VDisplay);
	    }
	}
	pMode = pMode->next;
d380 2
a381 2
	DisplayModePtr p, best = NULL;
	ModeStatus status;
d383 45
a427 44
	for (p = pScrn->monitor->Modes; p != NULL; p = p->next) {
	    if ((p->HDisplay != pMode->HDisplay) ||
		(p->VDisplay != pMode->VDisplay) ||
		(p->Flags & (V_INTERLACE | V_DBLSCAN | V_CLKDIV2)))
		continue;
	    /* XXX could support the various V_ flags */
	    status = xf86CheckModeForMonitor(p, pScrn->monitor);
	    if (status != MODE_OK)
		continue;
	    if (!best || (p->Clock > best->Clock))
		best = p;
	}

	if (best) {
	    int clock;

	    data = (VbeModeInfoData*)pMode->Private;
	    pMode->HSync = (float)best->Clock * 1000.0 / best->HTotal + 0.5;
	    pMode->VRefresh = pMode->HSync / best->VTotal + 0.5;
	    xf86DrvMsg(pScrn->scrnIndex, X_INFO,
		       "Attempting to use %dHz refresh for mode \"%s\" (%x)\n",
		       (int)pMode->VRefresh, pMode->name, data->mode);
	    data->block = calloc(sizeof(VbeCRTCInfoBlock), 1);
	    data->block->HorizontalTotal = best->HTotal;
	    data->block->HorizontalSyncStart = best->HSyncStart;
	    data->block->HorizontalSyncEnd = best->HSyncEnd;
	    data->block->VerticalTotal = best->VTotal;
	    data->block->VerticalSyncStart = best->VSyncStart;
	    data->block->VerticalSyncEnd = best->VSyncEnd;
	    data->block->Flags = ((best->Flags & V_NHSYNC) ? CRTC_NHSYNC : 0) |
				 ((best->Flags & V_NVSYNC) ? CRTC_NVSYNC : 0);
	    data->block->PixelClock = best->Clock * 1000;
	    /* XXX May not have this. */
	    clock = VBEGetPixelClock(pVbe, data->mode, data->block->PixelClock);
	    DebugF("Setting clock %.2fMHz, closest is %.2fMHz\n",
		(double)data->block->PixelClock / 1000000.0, 
		(double)clock / 1000000.0);
	    if (clock)
		data->block->PixelClock = clock;
	    data->mode |= (1 << 11);
	    data->block->RefreshRate = ((double)(data->block->PixelClock) /
                       (double)(best->HTotal * best->VTotal)) * 100;
	}
	pMode = pMode->next;
d436 4
a439 4
		  char **modeNames, ClockRangePtr clockRanges,
		  int *linePitches, int minPitch, int maxPitch, int pitchInc,
		  int minHeight, int maxHeight, int virtualX, int virtualY,
		  int apertureSize, LookupModeFlags strategy)
d442 3
a444 3
			     linePitches, minPitch, maxPitch, pitchInc,
			     minHeight, maxHeight, virtualX, virtualY,
			     apertureSize, strategy);
a451 1

@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d359 2
a360 2
		pMode->name = xnfalloc(4 + 1 + 4 + 1);
		sprintf(pMode->name, "%dx%d", pMode->HDisplay, pMode->VDisplay);
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d405 1
a405 1
	    data->block = xcalloc(sizeof(VbeCRTCInfoBlock), 1);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d417 1
a417 2
#ifdef DEBUG
	    ErrorF("Setting clock %.2fMHz, closest is %.2fMHz\n",
a419 1
#endif
@


1.1
log
@Initial revision
@
text
@d130 1
a130 1
    DisplayModePtr pMode, p;
a132 1
    ModeStatus status = MODE_OK;
a151 28
    }

    /*
     * Check if there's a valid monitor mode that this one can be matched
     * up with.  The actual matching is done later.
     */
    if (modeOK) {
	Bool sizeMatch = FALSE;
	modeOK = FALSE;
	for (p = pScrn->monitor->Modes; p != NULL; p = p->next) {
	    if ((p->HDisplay != mode->XResolution) ||
		(p->VDisplay != mode->YResolution) ||
		(p->Flags & (V_INTERLACE | V_DBLSCAN | V_CLKDIV2)))
		continue;
	    sizeMatch = TRUE;
	    /* XXX could support the various V_ flags */
	    status = xf86CheckModeForMonitor(p, pScrn->monitor);
	    if (status == MODE_OK) {
		modeOK = TRUE;
		break;
	    }
	}
	if (sizeMatch && !modeOK) {
	    xf86DrvMsg(pScrn->scrnIndex, X_INFO,
		       "Not using built-in mode \"%dx%d\" (%s)\n",
		        mode->XResolution, mode->YResolution,
		        xf86ModeStatusToString(status));
	}
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
