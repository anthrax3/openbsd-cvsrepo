head	1.4;
access;
symbols
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.6
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.4
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v1_2_0:1.1.1.2
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2011.11.05.13.32.51;	author matthieu;	state dead;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.26;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.17.54;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.17.54;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.10.30;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.11.2
@
text
@/*
 * Copyright (c) 1997 The XFree86 Project, Inc.
 *
 * Permission to use, copy, modify, distribute, and sell this software
 * and its documentation for any purpose is hereby granted without
 * fee, provided that the above copyright notice appear in all copies
 * and that both that copyright notice and this permission notice
 * appear in supporting documentation, and that the name of the
 * XFree86 Project, Inc. not be used in advertising or publicity
 * pertaining to distribution of the software without specific,
 * written prior permission.  The Xfree86 Project, Inc. makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied
 * warranty.
 *
 * THE XFREE86 PROJECT, INC. DISCLAIMS ALL WARRANTIES WITH REGARD TO
 * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS, IN NO EVENT SHALL THE XFREE86 PROJECT, INC. BE LIABLE
 * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 */

/*
 * Once upon a time, X had multiple loader backends, three of which were
 * essentially libdl reimplementations.  This was nonsense so we chucked
 * it, but we still retain the factorization between loader API and
 * platform implementation.  This file is the libdl implementation, and
 * currently the only backend.  If you find yourself porting to a platform
 * without working libdl - hpux, win32, some forsaken a.out host, etc. -
 * make a new backend rather than hacking up this file.
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <dlfcn.h>

#include <X11/Xos.h>
#include "os.h"

#include "loader.h"
#include "dlloader.h"

#if defined(DL_LAZY)
#define DLOPEN_LAZY DL_LAZY
#elif defined(RTLD_LAZY)
#define DLOPEN_LAZY RTLD_LAZY
#elif defined(__FreeBSD__)
#define DLOPEN_LAZY 1
#else
#define DLOPEN_LAZY 0
#endif

#if defined(LD_GLOBAL)
#define DLOPEN_GLOBAL LD_GLOBAL
#elif defined(RTLD_GLOBAL)
#define DLOPEN_GLOBAL RTLD_GLOBAL
#else
#define DLOPEN_GLOBAL 0
#endif

#if defined(CSRG_BASED) && !defined(__ELF__)
#define DLSYM_PREFIX "_"
#else
#define DLSYM_PREFIX ""
#endif

/* Hooray, yet another open coded linked list! FIXME */
typedef struct DLModuleList {
    void *module;
    struct DLModuleList *next;
} DLModuleList;

static DLModuleList *dlModuleList = NULL;

static void *
DLFindSymbolLocal(pointer module, const char *name)
{
    void *p;
    char *n;

    static const char symPrefix[] = DLSYM_PREFIX;

    if (sizeof(symPrefix) > 1) {
	n = malloc(strlen(symPrefix) + strlen(name) + 1);
	sprintf(n, "%s%s", symPrefix, name);
	name = n;
    }

    p = dlsym(module, name);

    if (sizeof(symPrefix) > 1)
	free(n);

    return p;
}

static void *global_scope = NULL;

void *
DLFindSymbol(const char *name)
{
    DLModuleList *l;
    void *p;

    p = dlsym(RTLD_DEFAULT, name);
    if (p != NULL)
	return p;

    for (l = dlModuleList; l != NULL; l = l->next) {
        p = DLFindSymbolLocal(l->module, name);
	if (p)
	    return p;
    }

    if (!global_scope)
	global_scope = dlopen(NULL, DLOPEN_LAZY | DLOPEN_GLOBAL);

    if (global_scope)
	return DLFindSymbolLocal(global_scope, name);

    return NULL;
}

void *
DLLoadModule(loaderPtr modrec, int flags)
{
    void * dlfile;
    DLModuleList *l;
    int dlopen_flags;

    if (flags & LD_FLAG_GLOBAL)
	dlopen_flags = DLOPEN_LAZY | DLOPEN_GLOBAL;
    else
	dlopen_flags = DLOPEN_LAZY;
    dlfile = dlopen(modrec->name, dlopen_flags);
    if (dlfile == NULL) {
	ErrorF("dlopen: %s\n", dlerror());
	return NULL;
    }

    l = malloc(sizeof(DLModuleList));
    l->module = dlfile;
    l->next = dlModuleList;
    dlModuleList = l;

    return (void *)dlfile;
}

void
DLUnloadModule(void *modptr)
{
    DLModuleList *l, *p;

    /* remove it from dlModuleList. */
    if (dlModuleList->module == modptr) {
	l = dlModuleList;
	dlModuleList = l->next;
	free(l);
    } else {
	p = dlModuleList;
	for (l = dlModuleList->next; l != NULL; l = l->next) {
	    if (l->module == modptr) {
		p->next = l->next;
		free(l);
		break;
	    }
	    p = l;
	}
    }
    dlclose(modptr);
}
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d90 1
a90 1
    if (strlen(symPrefix)) {
d93 1
a93 2
    } else {
	n = name;
d96 1
a96 1
    p = dlsym(module, n);
d98 1
a98 1
    if (strlen(symPrefix))
@


1.1
log
@Initial revision
@
text
@a73 6
typedef struct {
    int handle;
    void *dlhandle;
    int flags;
} DLModuleRec, *DLModulePtr;

d76 1
a76 1
    DLModulePtr module;
a84 1
    DLModulePtr dlfile = module;
d90 9
a98 1
    n = malloc(strlen(symPrefix) + strlen(name) + 1);
d100 1
a100 5
	sprintf(n, "%s%s", symPrefix, name);
    else
	sprintf(n, "%s", name);
    p = dlsym(dlfile->dlhandle, n);
    free(n);
d113 4
d127 1
a127 1
	return dlsym(global_scope, name);
d135 1
a135 1
    DLModulePtr dlfile;
a138 5
    if ((dlfile = calloc(1, sizeof(DLModuleRec))) == NULL) {
	ErrorF("Unable to allocate DLModuleRec\n");
	return NULL;
    }
    dlfile->handle = modrec->handle;
d143 2
a144 2
    dlfile->dlhandle = dlopen(modrec->name, dlopen_flags);
    if (dlfile->dlhandle == NULL) {
a145 1
	free(dlfile);
a159 1
    DLModulePtr dlfile = (DLModulePtr) modptr;
d178 1
a178 2
    dlclose(dlfile->dlhandle);
    free(modptr);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@Import xserver version 1.2.0 (X.Org 7.2 final).
@
text
@a115 4
    p = dlsym(RTLD_DEFAULT, name);
    if (p != NULL)
	return p;

@

