head	1.5;
access;
symbols
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.06.07.17.28.52;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.24;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.07;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.17.54;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.17.54;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@/*
 * Copyright (c) 2000 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

/* Maybe this file belongs elsewhere? */

#define LOADERDECLARATIONS
#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "loaderProcs.h"
#include "misc.h"
#include "xf86.h"

/*
 * This should be static, but miinitext wants it.  FIXME: make extension
 * initialization not completely terrible.
 */
ExtensionModule *ExtensionModuleList = NULL;
static int numExtensionModules = 0;

static ExtensionModule *
NewExtensionModule(void)
{
    ExtensionModule *save = ExtensionModuleList;
    int n;

    /* Sanity check */
    if (!ExtensionModuleList)
        numExtensionModules = 0;

    n = numExtensionModules + 1;
    ExtensionModuleList = realloc(ExtensionModuleList,
                                  (n + 1) * sizeof(ExtensionModule));
    if (ExtensionModuleList == NULL) {
        ExtensionModuleList = save;
        return NULL;
    }
    else {
        numExtensionModules++;
        ExtensionModuleList[numExtensionModules].name = NULL;
        return ExtensionModuleList + (numExtensionModules - 1);
    }
}

void
LoadExtension(ExtensionModule * e, Bool builtin)
{
    ExtensionModule *newext;

    if (e == NULL || e->name == NULL)
        return;

    if (!(newext = NewExtensionModule()))
        return;

    if (builtin)
        xf86MsgVerb(X_INFO, 2, "Initializing built-in extension %s\n", e->name);
    else
        xf86MsgVerb(X_INFO, 2, "Loading extension %s\n", e->name);

    newext->name = e->name;
    newext->initFunc = e->initFunc;
    newext->disablePtr = e->disablePtr;
    newext->setupFunc = e->setupFunc;
    newext->initDependencies = e->initDependencies;

    if (e->setupFunc != NULL)
        e->setupFunc();
}

/*
 * Sort ExtensionModuleList according to the initialisation order
 * dependencies.  The code for this is taken from BSD's tsort,
 * and carries the following copyright/license:
 *
 *
 * Copyright (c) 1989, 1993, 1994
 *      The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Michael Rendell of Memorial University of Newfoundland.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the University of
 *      California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#define	NF_MARK		0x1     /* marker for cycle detection */
#define	NF_ACYCLIC	0x2     /* this node is cycle free */
#define	NF_NODEST	0x4     /* Unreachable */

typedef struct node_str NODE;
struct node_str {
    NODE **n_prevp;             /* pointer to previous node's n_next */
    NODE *n_next;               /* next node in graph */
    NODE **n_arcs;              /* array of arcs to other nodes */
    int n_narcs;                /* number of arcs in n_arcs[] */
    int n_arcsize;              /* size of n_arcs[] array */
    int n_refcnt;               /* # of arcs pointing to this node */
    int n_flags;                /* NF_* */
    const char *n_name;         /* name of this node */
};

static NODE *graph = NULL, **cycle_buf = NULL, **longest_cycle = NULL;
static int longest = 0;
static NODE *sorted = NULL, *last = NULL;

/* Find a node in the graph (insert if not found) and return a pointer to it. */
static NODE *
get_node(const char *name)
{
    NODE *n;

    for (n = graph; n && n->n_name && strcmp(n->n_name, name); n = n->n_next);
    if (n)
        return n;

    n = xnfalloc(sizeof(NODE));

    n->n_narcs = 0;
    n->n_arcsize = 0;
    n->n_arcs = NULL;
    n->n_refcnt = 0;
    n->n_flags = 0;
    n->n_name = name;

    /* Add to linked list. */
    if ((n->n_next = graph) != NULL)
        graph->n_prevp = &n->n_next;
    n->n_prevp = &graph;
    graph = n;

    return n;
}

/*
 * add an arc from node s1 to node s2 in the graph.  If s1 or s2 are not in
 * the graph, then add them.
 */
static void
add_arc(const char *s1, const char *s2)
{
    NODE *n1;
    NODE *n2;
    int bsize, i;

    n1 = get_node(s1);

    if (!strcmp(s1, s2))
        return;

    n2 = get_node(s2);

    /*
     * Check if this arc is already here.
     */
    for (i = 0; i < n1->n_narcs; i++)
        if (n1->n_arcs[i] == n2)
            return;
    /*
     * Add it.
     */
    if (n1->n_narcs == n1->n_arcsize) {
        if (!n1->n_arcsize)
            n1->n_arcsize = 10;
        bsize = n1->n_arcsize * sizeof(*n1->n_arcs) * 2;
        n1->n_arcs = xnfrealloc(n1->n_arcs, bsize);
        n1->n_arcsize = bsize / sizeof(*n1->n_arcs);
    }
    n1->n_arcs[n1->n_narcs++] = n2;
    ++n2->n_refcnt;
}

/*
 * Clear the NODEST flag from all nodes.
 */
static void
clear_cycle(void)
{
    NODE *n;

    for (n = graph; n != NULL; n = n->n_next)
        n->n_flags &= ~NF_NODEST;
}

/* print node and remove from graph (does not actually free node) */
static void
remove_node(NODE * n)
{
    NODE **np;
    NODE *newnode;
    int i;

#ifdef DEBUG
    ErrorF("%s\n", n->n_name);
#endif
    newnode = xnfalloc(sizeof(NODE));
    memcpy(newnode, n, sizeof(NODE));
    if (last)
        last->n_next = newnode;
    else
        sorted = newnode;
    last = newnode;
    newnode->n_next = NULL;

    for (np = n->n_arcs, i = n->n_narcs; --i >= 0; np++)
        --(*np)->n_refcnt;
    n->n_narcs = 0;
    *n->n_prevp = n->n_next;
    if (n->n_next)
        n->n_next->n_prevp = n->n_prevp;
}

static void
free_nodes(NODE * nodelist)
{
    NODE *n, *nextnode;

    for (n = nodelist; n;) {
        nextnode = n->n_next;
        free(n);
        n = nextnode;
    }
}

/* look for the longest? cycle from node from to node to. */
static int
find_cycle(NODE * from, NODE * to, int longest_len, int depth)
{
    NODE **np;
    int i, len;

    /*
     * avoid infinite loops and ignore portions of the graph known
     * to be acyclic
     */
    if (from->n_flags & (NF_NODEST | NF_MARK | NF_ACYCLIC))
        return 0;
    from->n_flags |= NF_MARK;

    for (np = from->n_arcs, i = from->n_narcs; --i >= 0; np++) {
        cycle_buf[depth] = *np;
        if (*np == to) {
            if (depth + 1 > longest_len) {
                longest_len = depth + 1;
                memcpy((char *) longest_cycle,
                       (char *) cycle_buf, longest_len * sizeof(NODE *));
            }
        }
        else {
            if ((*np)->n_flags & (NF_MARK | NF_ACYCLIC | NF_NODEST))
                continue;
            len = find_cycle(*np, to, longest_len, depth + 1);

#ifdef DEBUG
            ErrorF("%*s %s->%s %d\n", depth, "", from->n_name, to->n_name, len);
#endif

            if (len == 0)
                (*np)->n_flags |= NF_NODEST;

            if (len > longest_len)
                longest_len = len;

            if (len > 0 && !longest)
                break;
        }
    }
    from->n_flags &= ~NF_MARK;
    return longest_len;
}

/* do topological sort on graph */
static void
tsort(void)
{
    NODE *n, *next;
    int cnt, i;

    while (graph != NULL) {
        /*
         * Keep getting rid of simple cases until there are none left,
         * if there are any nodes still in the graph, then there is
         * a cycle in it.
         */
        do {
            for (cnt = 0, n = graph; n != NULL; n = next) {
                next = n->n_next;
                if (n->n_refcnt == 0) {
                    remove_node(n);
                    ++cnt;
                }
            }
        } while (graph != NULL && cnt);

        if (graph == NULL)
            break;

        if (!cycle_buf) {
            /*
             * Allocate space for two cycle logs - one to be used
             * as scratch space, the other to save the longest
             * cycle.
             */
            for (cnt = 0, n = graph; n != NULL; n = n->n_next)
                ++cnt;
            cycle_buf = xnfalloc(sizeof(NODE *) * cnt);
            longest_cycle = xnfalloc(sizeof(NODE *) * cnt);
            if (cycle_buf == NULL || longest_cycle == NULL)
                return;
        }
        for (n = graph; n != NULL; n = n->n_next)
            if (!(n->n_flags & NF_ACYCLIC)) {
                if ((cnt = find_cycle(n, n, 0, 0))) {
                    ErrorF("tsort: cycle in data");
                    for (i = 0; i < cnt; i++)
                        ErrorF("%s", longest_cycle[i]->n_name);
                    remove_node(n);
                    clear_cycle();
                    break;
                }
                else {
                    /* to avoid further checks */
                    n->n_flags |= NF_ACYCLIC;
                    clear_cycle();
                }
            }

        if (n == NULL)
            ErrorF("tsort: internal error -- could not find cycle");
    }
    free(cycle_buf);
    free(longest_cycle);
    if (graph)
        free_nodes(graph);
}

void
LoaderSortExtensions(void)
{
    int i, j;
    ExtensionModule *ext, *newList;
    NODE *node;

    graph = NULL;
    longest = 0;
    sorted = NULL;
    last = NULL;
    cycle_buf = NULL;
    longest_cycle = NULL;

    /*
     * Parse list and build the graph.  Enter them in reverse order
     * because tsort() will reverse those that have no depedencies.
     */
    for (i = numExtensionModules - 1; i >= 0; i--) {
        ext = &ExtensionModuleList[i];
        add_arc(ext->name, ext->name);
#ifdef DEBUG
        ErrorF("Extension %s:\n", ext->name);
#endif
        if (ext->initDependencies)
            for (j = 0; ext->initDependencies[j]; j++) {
                add_arc(ext->initDependencies[j], ext->name);
#ifdef DEBUG
                ErrorF("\t%s\n", ext->initDependencies[j]);
#endif
            }
    }
    tsort();
    newList = xnfalloc((numExtensionModules + 1) * sizeof(ExtensionModule));
    i = 0;
    for (node = sorted; node; node = node->n_next) {
        for (j = 0; j < numExtensionModules; j++)
            if (!strcmp(node->n_name, ExtensionModuleList[j].name))
                break;
        if (j != numExtensionModules)
            newList[i++] = ExtensionModuleList[j];
    }
    if (sorted)
        free_nodes(sorted);
    if (graph)
        free_nodes(graph);
    newList[i].name = NULL;
    free(ExtensionModuleList);
    ExtensionModuleList = newList;
#ifdef DEBUG
    for (i = 0; ExtensionModuleList[i].name; i++)
        ErrorF("Extension %s\n", ExtensionModuleList[i].name);
#endif
}
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d54 1
a54 1
	numExtensionModules = 0;
d58 1
a58 1
				   (n + 1) * sizeof(ExtensionModule));
d60 7
a66 6
	ExtensionModuleList = save;
	return NULL;
    } else {
	numExtensionModules++;
	ExtensionModuleList[numExtensionModules].name = NULL;
	return ExtensionModuleList + (numExtensionModules - 1);
d76 1
a76 1
	return;
d79 1
a79 1
	return;
d82 1
a82 2
	xf86MsgVerb(X_INFO, 2, "Initializing built-in extension %s\n",
		    e->name);
d84 1
a84 1
	xf86MsgVerb(X_INFO, 2, "Loading extension %s\n", e->name);
d93 1
a93 1
	e->setupFunc();
d137 3
a139 3
#define	NF_MARK		0x1	/* marker for cycle detection */
#define	NF_ACYCLIC	0x2	/* this node is cycle free */
#define	NF_NODEST	0x4	/* Unreachable */
d143 8
a150 8
    NODE **n_prevp;		/* pointer to previous node's n_next */
    NODE *n_next;		/* next node in graph */
    NODE **n_arcs;		/* array of arcs to other nodes */
    int n_narcs;		/* number of arcs in n_arcs[] */
    int n_arcsize;		/* size of n_arcs[] array */
    int n_refcnt;		/* # of arcs pointing to this node */
    int n_flags;		/* NF_* */
    const char *n_name;		/* name of this node */
d163 1
a163 2
    for (n = graph; n && n->n_name && strcmp(n->n_name, name);
	 n = n->n_next) ;
d165 1
a165 1
	return n;
d178 1
a178 1
	graph->n_prevp = &n->n_next;
d199 1
a199 1
	return;
d207 2
a208 2
	if (n1->n_arcs[i] == n2)
	    return;
d213 5
a217 5
	if (!n1->n_arcsize)
	    n1->n_arcsize = 10;
	bsize = n1->n_arcsize * sizeof(*n1->n_arcs) * 2;
	n1->n_arcs = xnfrealloc(n1->n_arcs, bsize);
	n1->n_arcsize = bsize / sizeof(*n1->n_arcs);
d232 1
a232 1
	n->n_flags &= ~NF_NODEST;
d249 1
a249 1
	last->n_next = newnode;
d251 1
a251 1
	sorted = newnode;
d256 1
a256 1
	--(*np)->n_refcnt;
d260 1
a260 1
	n->n_next->n_prevp = n->n_prevp;
d269 3
a271 3
	nextnode = n->n_next;
	free(n);
	n = nextnode;
d287 1
a287 1
	return 0;
d291 12
a302 11
	cycle_buf[depth] = *np;
	if (*np == to) {
	    if (depth + 1 > longest_len) {
		longest_len = depth + 1;
		memcpy((char *)longest_cycle,
		       (char *)cycle_buf, longest_len * sizeof(NODE *));
	    }
	} else {
	    if ((*np)->n_flags & (NF_MARK | NF_ACYCLIC | NF_NODEST))
		continue;
	    len = find_cycle(*np, to, longest_len, depth + 1);
d305 1
a305 2
	    ErrorF("%*s %s->%s %d\n", depth, "",
		   from->n_name, to->n_name, len);
d308 2
a309 2
	    if (len == 0)
		(*np)->n_flags |= NF_NODEST;
d311 2
a312 2
	    if (len > longest_len)
		longest_len = len;
d314 3
a316 3
	    if (len > 0 && !longest)
		break;
	}
d330 47
a376 46
	/*
	 * Keep getting rid of simple cases until there are none left,
	 * if there are any nodes still in the graph, then there is
	 * a cycle in it.
	 */
	do {
	    for (cnt = 0, n = graph; n != NULL; n = next) {
		next = n->n_next;
		if (n->n_refcnt == 0) {
		    remove_node(n);
		    ++cnt;
		}
	    }
	} while (graph != NULL && cnt);

	if (graph == NULL)
	    break;

	if (!cycle_buf) {
	    /*
	     * Allocate space for two cycle logs - one to be used
	     * as scratch space, the other to save the longest
	     * cycle.
	     */
	    for (cnt = 0, n = graph; n != NULL; n = n->n_next)
		++cnt;
	    cycle_buf = xnfalloc(sizeof(NODE *) * cnt);
	    longest_cycle = xnfalloc(sizeof(NODE *) * cnt);
	    if (cycle_buf == NULL || longest_cycle == NULL)
		return;
	}
	for (n = graph; n != NULL; n = n->n_next)
	    if (!(n->n_flags & NF_ACYCLIC)) {
		if ((cnt = find_cycle(n, n, 0, 0))) {
		    ErrorF("tsort: cycle in data");
		    for (i = 0; i < cnt; i++)
			ErrorF("%s", longest_cycle[i]->n_name);
		    remove_node(n);
		    clear_cycle();
		    break;
		} else {
		    /* to avoid further checks */
		    n->n_flags |= NF_ACYCLIC;
		    clear_cycle();
		}
	    }
d378 2
a379 2
	if (n == NULL)
	    ErrorF("tsort: internal error -- could not find cycle");
d384 1
a384 1
	free_nodes(graph);
d406 2
a407 2
	ext = &ExtensionModuleList[i];
	add_arc(ext->name, ext->name);
d409 1
a409 1
	ErrorF("Extension %s:\n", ext->name);
d411 3
a413 3
	if (ext->initDependencies)
	    for (j = 0; ext->initDependencies[j]; j++) {
		add_arc(ext->initDependencies[j], ext->name);
d415 1
a415 1
		ErrorF("\t%s\n", ext->initDependencies[j]);
d417 1
a417 1
	    }
d423 5
a427 5
	for (j = 0; j < numExtensionModules; j++)
	    if (!strcmp(node->n_name, ExtensionModuleList[j].name))
		break;
	if (j != numExtensionModules)
	    newList[i++] = ExtensionModuleList[j];
d430 1
a430 1
	free_nodes(sorted);
d432 1
a432 1
	free_nodes(graph);
d438 1
a438 1
	ErrorF("Extension %s\n", ExtensionModuleList[i].name);
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d57 1
a57 1
    ExtensionModuleList = xrealloc(ExtensionModuleList,
d166 1
a166 1
	return (n);
d183 1
a183 1
    return (n);
d271 1
a271 1
	xfree(n);
d288 1
a288 1
	return (0);
d320 1
a320 1
    return (longest_len);
d381 2
a382 4
    if (cycle_buf)
	xfree(cycle_buf);
    if (longest_cycle)
	xfree(longest_cycle);
d434 1
a434 1
    xfree(ExtensionModuleList);
@


1.1
log
@Initial revision
@
text
@d69 1
a69 1
_X_EXPORT void
d390 1
a390 1
LoaderSortExtensions()
d433 2
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
