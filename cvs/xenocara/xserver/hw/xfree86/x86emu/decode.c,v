head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.12
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.10
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.8
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.05.02.19.27.49;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.10.13.21.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.18.12;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.18.12;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@/****************************************************************************
*
*						Realmode X86 Emulator Library
*
*            	Copyright (C) 1996-1999 SciTech Software, Inc.
* 				     Copyright (C) David Mosberger-Tang
* 					   Copyright (C) 1999 Egbert Eich
*
*  ========================================================================
*
*  Permission to use, copy, modify, distribute, and sell this software and
*  its documentation for any purpose is hereby granted without fee,
*  provided that the above copyright notice appear in all copies and that
*  both that copyright notice and this permission notice appear in
*  supporting documentation, and that the name of the authors not be used
*  in advertising or publicity pertaining to distribution of the software
*  without specific, written prior permission.  The authors makes no
*  representations about the suitability of this software for any purpose.
*  It is provided "as is" without express or implied warranty.
*
*  THE AUTHORS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
*  INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
*  EVENT SHALL THE AUTHORS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
*  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
*  USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
*  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
*  PERFORMANCE OF THIS SOFTWARE.
*
*  ========================================================================
*
* Language:		ANSI C
* Environment:	Any
* Developer:    Kendall Bennett
*
* Description:  This file includes subroutines which are related to
*				instruction decoding and accessess of immediate data via IP.  etc.
*
****************************************************************************/

#include <stdlib.h>

#if defined(__sun) && defined(CS) /* avoid conflicts with Solaris sys/regset.h */
# undef CS
# undef DS
# undef SS
# undef ES
# undef FS
# undef GS
#endif

#include "x86emu/x86emui.h"

/*----------------------------- Implementation ----------------------------*/

/****************************************************************************
REMARKS:
Handles any pending asychronous interrupts.
****************************************************************************/
static void
x86emu_intr_handle(void)
{
    u8 intno;

    if (M.x86.intr & INTR_SYNCH) {
        intno = M.x86.intno;
        if (_X86EMU_intrTab[intno]) {
            (*_X86EMU_intrTab[intno]) (intno);
        }
        else {
            push_word((u16) M.x86.R_FLG);
            CLEAR_FLAG(F_IF);
            CLEAR_FLAG(F_TF);
            push_word(M.x86.R_CS);
            M.x86.R_CS = mem_access_word(intno * 4 + 2);
            push_word(M.x86.R_IP);
            M.x86.R_IP = mem_access_word(intno * 4);
            M.x86.intr = 0;
        }
    }
}

/****************************************************************************
PARAMETERS:
intrnum - Interrupt number to raise

REMARKS:
Raise the specified interrupt to be handled before the execution of the
next instruction.
****************************************************************************/
void
x86emu_intr_raise(u8 intrnum)
{
    M.x86.intno = intrnum;
    M.x86.intr |= INTR_SYNCH;
}

/****************************************************************************
REMARKS:
Main execution loop for the emulator. We return from here when the system
halts, which is normally caused by a stack fault when we return from the
original real mode call.
****************************************************************************/
void
X86EMU_exec(void)
{
    u8 op1;

    M.x86.intr = 0;
    DB(x86emu_end_instr();
        )

        for (;;) {
        DB(if (CHECK_IP_FETCH())
           x86emu_check_ip_access();)
            /* If debugging, save the IP and CS values. */
            SAVE_IP_CS(M.x86.R_CS, M.x86.R_IP);
        INC_DECODED_INST_LEN(1);
        if (M.x86.intr) {
            if (M.x86.intr & INTR_HALTED) {
                DB(if (M.x86.R_SP != 0) {
                   printk("halted\n"); X86EMU_trace_regs();}
                   else {
                   if (M.x86.debug)
                   printk("Service completed successfully\n");}
                )
                    return;
            }
            if (((M.x86.intr & INTR_SYNCH) &&
                 (M.x86.intno == 0 || M.x86.intno == 2)) ||
                !ACCESS_FLAG(F_IF)) {
                x86emu_intr_handle();
            }
        }
        op1 = (*sys_rdb) (((u32) M.x86.R_CS << 4) + (M.x86.R_IP++));
        (*x86emu_optab[op1]) (op1);
        if (M.x86.debug & DEBUG_EXIT) {
            M.x86.debug &= ~DEBUG_EXIT;
            return;
        }
    }
}

/****************************************************************************
REMARKS:
Halts the system by setting the halted system flag.
****************************************************************************/
void
X86EMU_halt_sys(void)
{
    M.x86.intr |= INTR_HALTED;
}

/****************************************************************************
PARAMETERS:
mod		- Mod value from decoded byte
regh	- Reg h value from decoded byte
regl	- Reg l value from decoded byte

REMARKS:
Raise the specified interrupt to be handled before the execution of the
next instruction.

NOTE: Do not inline this function, as (*sys_rdb) is already inline!
****************************************************************************/
void
fetch_decode_modrm(int *mod, int *regh, int *regl)
{
    int fetched;

    DB(if (CHECK_IP_FETCH())
       x86emu_check_ip_access();)
        fetched = (*sys_rdb) (((u32) M.x86.R_CS << 4) + (M.x86.R_IP++));
    INC_DECODED_INST_LEN(1);
    *mod = (fetched >> 6) & 0x03;
    *regh = (fetched >> 3) & 0x07;
    *regl = (fetched >> 0) & 0x07;
}

/****************************************************************************
RETURNS:
Immediate byte value read from instruction queue

REMARKS:
This function returns the immediate byte from the instruction queue, and
moves the instruction pointer to the next value.

NOTE: Do not inline this function, as (*sys_rdb) is already inline!
****************************************************************************/
u8
fetch_byte_imm(void)
{
    u8 fetched;

    DB(if (CHECK_IP_FETCH())
       x86emu_check_ip_access();)
        fetched = (*sys_rdb) (((u32) M.x86.R_CS << 4) + (M.x86.R_IP++));
    INC_DECODED_INST_LEN(1);
    return fetched;
}

/****************************************************************************
RETURNS:
Immediate word value read from instruction queue

REMARKS:
This function returns the immediate byte from the instruction queue, and
moves the instruction pointer to the next value.

NOTE: Do not inline this function, as (*sys_rdw) is already inline!
****************************************************************************/
u16
fetch_word_imm(void)
{
    u16 fetched;

    DB(if (CHECK_IP_FETCH())
       x86emu_check_ip_access();)
        fetched = (*sys_rdw) (((u32) M.x86.R_CS << 4) + (M.x86.R_IP));
    M.x86.R_IP += 2;
    INC_DECODED_INST_LEN(2);
    return fetched;
}

/****************************************************************************
RETURNS:
Immediate lone value read from instruction queue

REMARKS:
This function returns the immediate byte from the instruction queue, and
moves the instruction pointer to the next value.

NOTE: Do not inline this function, as (*sys_rdw) is already inline!
****************************************************************************/
u32
fetch_long_imm(void)
{
    u32 fetched;

    DB(if (CHECK_IP_FETCH())
       x86emu_check_ip_access();)
        fetched = (*sys_rdl) (((u32) M.x86.R_CS << 4) + (M.x86.R_IP));
    M.x86.R_IP += 4;
    INC_DECODED_INST_LEN(4);
    return fetched;
}

/****************************************************************************
RETURNS:
Value of the default data segment

REMARKS:
Inline function that returns the default data segment for the current
instruction.

On the x86 processor, the default segment is not always DS if there is
no segment override. Address modes such as -3[BP] or 10[BP+SI] all refer to
addresses relative to SS (ie: on the stack). So, at the minimum, all
decodings of addressing modes would have to set/clear a bit describing
whether the access is relative to DS or SS.  That is the function of the
cpu-state-varible M.x86.mode. There are several potential states:

	repe prefix seen  (handled elsewhere)
	repne prefix seen  (ditto)

	cs segment override
	ds segment override
	es segment override
	fs segment override
	gs segment override
	ss segment override

	ds/ss select (in absense of override)

Each of the above 7 items are handled with a bit in the mode field.
****************************************************************************/
_INLINE u32
get_data_segment(void)
{
#define	GET_SEGMENT(segment)
    switch (M.x86.mode & SYSMODE_SEGMASK) {
    case 0:                    /* default case: use ds register */
    case SYSMODE_SEGOVR_DS:
    case SYSMODE_SEGOVR_DS | SYSMODE_SEG_DS_SS:
        return M.x86.R_DS;
    case SYSMODE_SEG_DS_SS:    /* non-overridden, use ss register */
        return M.x86.R_SS;
    case SYSMODE_SEGOVR_CS:
    case SYSMODE_SEGOVR_CS | SYSMODE_SEG_DS_SS:
        return M.x86.R_CS;
    case SYSMODE_SEGOVR_ES:
    case SYSMODE_SEGOVR_ES | SYSMODE_SEG_DS_SS:
        return M.x86.R_ES;
    case SYSMODE_SEGOVR_FS:
    case SYSMODE_SEGOVR_FS | SYSMODE_SEG_DS_SS:
        return M.x86.R_FS;
    case SYSMODE_SEGOVR_GS:
    case SYSMODE_SEGOVR_GS | SYSMODE_SEG_DS_SS:
        return M.x86.R_GS;
    case SYSMODE_SEGOVR_SS:
    case SYSMODE_SEGOVR_SS | SYSMODE_SEG_DS_SS:
        return M.x86.R_SS;
    default:
#ifdef	DEBUG
        printk("error: should not happen:  multiple overrides.\n");
#endif
        HALT_SYS();
        return 0;
    }
}

/****************************************************************************
PARAMETERS:
offset	- Offset to load data from

RETURNS:
Byte value read from the absolute memory location.

NOTE: Do not inline this function as (*sys_rdX) is already inline!
****************************************************************************/
u8
fetch_data_byte(uint offset)
{
#ifdef DEBUG
    if (CHECK_DATA_ACCESS())
        x86emu_check_data_access((u16) get_data_segment(), offset);
#endif
    return (*sys_rdb) ((get_data_segment() << 4) + offset);
}

/****************************************************************************
PARAMETERS:
offset	- Offset to load data from

RETURNS:
Word value read from the absolute memory location.

NOTE: Do not inline this function as (*sys_rdX) is already inline!
****************************************************************************/
u16
fetch_data_word(uint offset)
{
#ifdef DEBUG
    if (CHECK_DATA_ACCESS())
        x86emu_check_data_access((u16) get_data_segment(), offset);
#endif
    return (*sys_rdw) ((get_data_segment() << 4) + offset);
}

/****************************************************************************
PARAMETERS:
offset	- Offset to load data from

RETURNS:
Long value read from the absolute memory location.

NOTE: Do not inline this function as (*sys_rdX) is already inline!
****************************************************************************/
u32
fetch_data_long(uint offset)
{
#ifdef DEBUG
    if (CHECK_DATA_ACCESS())
        x86emu_check_data_access((u16) get_data_segment(), offset);
#endif
    return (*sys_rdl) ((get_data_segment() << 4) + offset);
}

/****************************************************************************
PARAMETERS:
segment	- Segment to load data from
offset	- Offset to load data from

RETURNS:
Byte value read from the absolute memory location.

NOTE: Do not inline this function as (*sys_rdX) is already inline!
****************************************************************************/
u8
fetch_data_byte_abs(uint segment, uint offset)
{
#ifdef DEBUG
    if (CHECK_DATA_ACCESS())
        x86emu_check_data_access(segment, offset);
#endif
    return (*sys_rdb) (((u32) segment << 4) + offset);
}

/****************************************************************************
PARAMETERS:
segment	- Segment to load data from
offset	- Offset to load data from

RETURNS:
Word value read from the absolute memory location.

NOTE: Do not inline this function as (*sys_rdX) is already inline!
****************************************************************************/
u16
fetch_data_word_abs(uint segment, uint offset)
{
#ifdef DEBUG
    if (CHECK_DATA_ACCESS())
        x86emu_check_data_access(segment, offset);
#endif
    return (*sys_rdw) (((u32) segment << 4) + offset);
}

/****************************************************************************
PARAMETERS:
segment	- Segment to load data from
offset	- Offset to load data from

RETURNS:
Long value read from the absolute memory location.

NOTE: Do not inline this function as (*sys_rdX) is already inline!
****************************************************************************/
u32
fetch_data_long_abs(uint segment, uint offset)
{
#ifdef DEBUG
    if (CHECK_DATA_ACCESS())
        x86emu_check_data_access(segment, offset);
#endif
    return (*sys_rdl) (((u32) segment << 4) + offset);
}

/****************************************************************************
PARAMETERS:
offset	- Offset to store data at
val		- Value to store

REMARKS:
Writes a word value to an segmented memory location. The segment used is
the current 'default' segment, which may have been overridden.

NOTE: Do not inline this function as (*sys_wrX) is already inline!
****************************************************************************/
void
store_data_byte(uint offset, u8 val)
{
#ifdef DEBUG
    if (CHECK_DATA_ACCESS())
        x86emu_check_data_access((u16) get_data_segment(), offset);
#endif
    (*sys_wrb) ((get_data_segment() << 4) + offset, val);
}

/****************************************************************************
PARAMETERS:
offset	- Offset to store data at
val		- Value to store

REMARKS:
Writes a word value to an segmented memory location. The segment used is
the current 'default' segment, which may have been overridden.

NOTE: Do not inline this function as (*sys_wrX) is already inline!
****************************************************************************/
void
store_data_word(uint offset, u16 val)
{
#ifdef DEBUG
    if (CHECK_DATA_ACCESS())
        x86emu_check_data_access((u16) get_data_segment(), offset);
#endif
    (*sys_wrw) ((get_data_segment() << 4) + offset, val);
}

/****************************************************************************
PARAMETERS:
offset	- Offset to store data at
val		- Value to store

REMARKS:
Writes a long value to an segmented memory location. The segment used is
the current 'default' segment, which may have been overridden.

NOTE: Do not inline this function as (*sys_wrX) is already inline!
****************************************************************************/
void
store_data_long(uint offset, u32 val)
{
#ifdef DEBUG
    if (CHECK_DATA_ACCESS())
        x86emu_check_data_access((u16) get_data_segment(), offset);
#endif
    (*sys_wrl) ((get_data_segment() << 4) + offset, val);
}

/****************************************************************************
PARAMETERS:
segment	- Segment to store data at
offset	- Offset to store data at
val		- Value to store

REMARKS:
Writes a byte value to an absolute memory location.

NOTE: Do not inline this function as (*sys_wrX) is already inline!
****************************************************************************/
void
store_data_byte_abs(uint segment, uint offset, u8 val)
{
#ifdef DEBUG
    if (CHECK_DATA_ACCESS())
        x86emu_check_data_access(segment, offset);
#endif
    (*sys_wrb) (((u32) segment << 4) + offset, val);
}

/****************************************************************************
PARAMETERS:
segment	- Segment to store data at
offset	- Offset to store data at
val		- Value to store

REMARKS:
Writes a word value to an absolute memory location.

NOTE: Do not inline this function as (*sys_wrX) is already inline!
****************************************************************************/
void
store_data_word_abs(uint segment, uint offset, u16 val)
{
#ifdef DEBUG
    if (CHECK_DATA_ACCESS())
        x86emu_check_data_access(segment, offset);
#endif
    (*sys_wrw) (((u32) segment << 4) + offset, val);
}

/****************************************************************************
PARAMETERS:
segment	- Segment to store data at
offset	- Offset to store data at
val		- Value to store

REMARKS:
Writes a long value to an absolute memory location.

NOTE: Do not inline this function as (*sys_wrX) is already inline!
****************************************************************************/
void
store_data_long_abs(uint segment, uint offset, u32 val)
{
#ifdef DEBUG
    if (CHECK_DATA_ACCESS())
        x86emu_check_data_access(segment, offset);
#endif
    (*sys_wrl) (((u32) segment << 4) + offset, val);
}

/****************************************************************************
PARAMETERS:
reg	- Register to decode

RETURNS:
Pointer to the appropriate register

REMARKS:
Return a pointer to the register given by the R/RM field of the
modrm byte, for byte operands. Also enables the decoding of instructions.
****************************************************************************/
u8 *
decode_rm_byte_register(int reg)
{
    switch (reg) {
    case 0:
        DECODE_PRINTF("AL");
        return &M.x86.R_AL;
    case 1:
        DECODE_PRINTF("CL");
        return &M.x86.R_CL;
    case 2:
        DECODE_PRINTF("DL");
        return &M.x86.R_DL;
    case 3:
        DECODE_PRINTF("BL");
        return &M.x86.R_BL;
    case 4:
        DECODE_PRINTF("AH");
        return &M.x86.R_AH;
    case 5:
        DECODE_PRINTF("CH");
        return &M.x86.R_CH;
    case 6:
        DECODE_PRINTF("DH");
        return &M.x86.R_DH;
    case 7:
        DECODE_PRINTF("BH");
        return &M.x86.R_BH;
    }
    HALT_SYS();
    return NULL;                /* NOT REACHED OR REACHED ON ERROR */
}

/****************************************************************************
PARAMETERS:
reg	- Register to decode

RETURNS:
Pointer to the appropriate register

REMARKS:
Return a pointer to the register given by the R/RM field of the
modrm byte, for word operands.  Also enables the decoding of instructions.
****************************************************************************/
u16 *
decode_rm_word_register(int reg)
{
    switch (reg) {
    case 0:
        DECODE_PRINTF("AX");
        return &M.x86.R_AX;
    case 1:
        DECODE_PRINTF("CX");
        return &M.x86.R_CX;
    case 2:
        DECODE_PRINTF("DX");
        return &M.x86.R_DX;
    case 3:
        DECODE_PRINTF("BX");
        return &M.x86.R_BX;
    case 4:
        DECODE_PRINTF("SP");
        return &M.x86.R_SP;
    case 5:
        DECODE_PRINTF("BP");
        return &M.x86.R_BP;
    case 6:
        DECODE_PRINTF("SI");
        return &M.x86.R_SI;
    case 7:
        DECODE_PRINTF("DI");
        return &M.x86.R_DI;
    }
    HALT_SYS();
    return NULL;                /* NOTREACHED OR REACHED ON ERROR */
}

/****************************************************************************
PARAMETERS:
reg	- Register to decode

RETURNS:
Pointer to the appropriate register

REMARKS:
Return a pointer to the register given by the R/RM field of the
modrm byte, for dword operands.  Also enables the decoding of instructions.
****************************************************************************/
u32 *
decode_rm_long_register(int reg)
{
    switch (reg) {
    case 0:
        DECODE_PRINTF("EAX");
        return &M.x86.R_EAX;
    case 1:
        DECODE_PRINTF("ECX");
        return &M.x86.R_ECX;
    case 2:
        DECODE_PRINTF("EDX");
        return &M.x86.R_EDX;
    case 3:
        DECODE_PRINTF("EBX");
        return &M.x86.R_EBX;
    case 4:
        DECODE_PRINTF("ESP");
        return &M.x86.R_ESP;
    case 5:
        DECODE_PRINTF("EBP");
        return &M.x86.R_EBP;
    case 6:
        DECODE_PRINTF("ESI");
        return &M.x86.R_ESI;
    case 7:
        DECODE_PRINTF("EDI");
        return &M.x86.R_EDI;
    }
    HALT_SYS();
    return NULL;                /* NOTREACHED OR REACHED ON ERROR */
}

/****************************************************************************
PARAMETERS:
reg	- Register to decode

RETURNS:
Pointer to the appropriate register

REMARKS:
Return a pointer to the register given by the R/RM field of the
modrm byte, for word operands, modified from above for the weirdo
special case of segreg operands.  Also enables the decoding of instructions.
****************************************************************************/
u16 *
decode_rm_seg_register(int reg)
{
    switch (reg) {
    case 0:
        DECODE_PRINTF("ES");
        return &M.x86.R_ES;
    case 1:
        DECODE_PRINTF("CS");
        return &M.x86.R_CS;
    case 2:
        DECODE_PRINTF("SS");
        return &M.x86.R_SS;
    case 3:
        DECODE_PRINTF("DS");
        return &M.x86.R_DS;
    case 4:
        DECODE_PRINTF("FS");
        return &M.x86.R_FS;
    case 5:
        DECODE_PRINTF("GS");
        return &M.x86.R_GS;
    case 6:
    case 7:
        DECODE_PRINTF("ILLEGAL SEGREG");
        break;
    }
    HALT_SYS();
    return NULL;                /* NOT REACHED OR REACHED ON ERROR */
}

/*
 *
 * return offset from the SIB Byte
 */
u32
decode_sib_address(int sib, int mod)
{
    u32 base = 0, i = 0, scale = 1;

    switch (sib & 0x07) {
    case 0:
        DECODE_PRINTF("[EAX]");
        base = M.x86.R_EAX;
        break;
    case 1:
        DECODE_PRINTF("[ECX]");
        base = M.x86.R_ECX;
        break;
    case 2:
        DECODE_PRINTF("[EDX]");
        base = M.x86.R_EDX;
        break;
    case 3:
        DECODE_PRINTF("[EBX]");
        base = M.x86.R_EBX;
        break;
    case 4:
        DECODE_PRINTF("[ESP]");
        base = M.x86.R_ESP;
        M.x86.mode |= SYSMODE_SEG_DS_SS;
        break;
    case 5:
        if (mod == 0) {
            base = fetch_long_imm();
            DECODE_PRINTF2("%08x", base);
        }
        else {
            DECODE_PRINTF("[EBP]");
            base = M.x86.R_ESP;
            M.x86.mode |= SYSMODE_SEG_DS_SS;
        }
        break;
    case 6:
        DECODE_PRINTF("[ESI]");
        base = M.x86.R_ESI;
        break;
    case 7:
        DECODE_PRINTF("[EDI]");
        base = M.x86.R_EDI;
        break;
    }
    switch ((sib >> 3) & 0x07) {
    case 0:
        DECODE_PRINTF("[EAX");
        i = M.x86.R_EAX;
        break;
    case 1:
        DECODE_PRINTF("[ECX");
        i = M.x86.R_ECX;
        break;
    case 2:
        DECODE_PRINTF("[EDX");
        i = M.x86.R_EDX;
        break;
    case 3:
        DECODE_PRINTF("[EBX");
        i = M.x86.R_EBX;
        break;
    case 4:
        i = 0;
        break;
    case 5:
        DECODE_PRINTF("[EBP");
        i = M.x86.R_EBP;
        break;
    case 6:
        DECODE_PRINTF("[ESI");
        i = M.x86.R_ESI;
        break;
    case 7:
        DECODE_PRINTF("[EDI");
        i = M.x86.R_EDI;
        break;
    }
    scale = 1 << ((sib >> 6) & 0x03);
    if (((sib >> 3) & 0x07) != 4) {
        if (scale == 1) {
            DECODE_PRINTF("]");
        }
        else {
            DECODE_PRINTF2("*%d]", scale);
        }
    }
    return base + (i * scale);
}

/****************************************************************************
PARAMETERS:
rm	- RM value to decode

RETURNS:
Offset in memory for the address decoding

REMARKS:
Return the offset given by mod=00 addressing.  Also enables the
decoding of instructions.

NOTE: 	The code which specifies the corresponding segment (ds vs ss)
		below in the case of [BP+..].  The assumption here is that at the
		point that this subroutine is called, the bit corresponding to
		SYSMODE_SEG_DS_SS will be zero.  After every instruction
		except the segment override instructions, this bit (as well
		as any bits indicating segment overrides) will be clear.  So
		if a SS access is needed, set this bit.  Otherwise, DS access
		occurs (unless any of the segment override bits are set).
****************************************************************************/
u32
decode_rm00_address(int rm)
{
    u32 offset;
    int sib;

    if (M.x86.mode & SYSMODE_PREFIX_ADDR) {
        /* 32-bit addressing */
        switch (rm) {
        case 0:
            DECODE_PRINTF("[EAX]");
            return M.x86.R_EAX;
        case 1:
            DECODE_PRINTF("[ECX]");
            return M.x86.R_ECX;
        case 2:
            DECODE_PRINTF("[EDX]");
            return M.x86.R_EDX;
        case 3:
            DECODE_PRINTF("[EBX]");
            return M.x86.R_EBX;
        case 4:
            sib = fetch_byte_imm();
            return decode_sib_address(sib, 0);
        case 5:
            offset = fetch_long_imm();
            DECODE_PRINTF2("[%08x]", offset);
            return offset;
        case 6:
            DECODE_PRINTF("[ESI]");
            return M.x86.R_ESI;
        case 7:
            DECODE_PRINTF("[EDI]");
            return M.x86.R_EDI;
        }
        HALT_SYS();
    }
    else {
        /* 16-bit addressing */
        switch (rm) {
        case 0:
            DECODE_PRINTF("[BX+SI]");
            return (M.x86.R_BX + M.x86.R_SI) & 0xffff;
        case 1:
            DECODE_PRINTF("[BX+DI]");
            return (M.x86.R_BX + M.x86.R_DI) & 0xffff;
        case 2:
            DECODE_PRINTF("[BP+SI]");
            M.x86.mode |= SYSMODE_SEG_DS_SS;
            return (M.x86.R_BP + M.x86.R_SI) & 0xffff;
        case 3:
            DECODE_PRINTF("[BP+DI]");
            M.x86.mode |= SYSMODE_SEG_DS_SS;
            return (M.x86.R_BP + M.x86.R_DI) & 0xffff;
        case 4:
            DECODE_PRINTF("[SI]");
            return M.x86.R_SI;
        case 5:
            DECODE_PRINTF("[DI]");
            return M.x86.R_DI;
        case 6:
            offset = fetch_word_imm();
            DECODE_PRINTF2("[%04x]", offset);
            return offset;
        case 7:
            DECODE_PRINTF("[BX]");
            return M.x86.R_BX;
        }
        HALT_SYS();
    }
    return 0;
}

/****************************************************************************
PARAMETERS:
rm	- RM value to decode

RETURNS:
Offset in memory for the address decoding

REMARKS:
Return the offset given by mod=01 addressing.  Also enables the
decoding of instructions.
****************************************************************************/
u32
decode_rm01_address(int rm)
{
    int displacement = 0;
    int sib;

    /* Fetch disp8 if no SIB byte */
    if (!((M.x86.mode & SYSMODE_PREFIX_ADDR) && (rm == 4)))
        displacement = (s8) fetch_byte_imm();

    if (M.x86.mode & SYSMODE_PREFIX_ADDR) {
        /* 32-bit addressing */
        switch (rm) {
        case 0:
            DECODE_PRINTF2("%d[EAX]", displacement);
            return M.x86.R_EAX + displacement;
        case 1:
            DECODE_PRINTF2("%d[ECX]", displacement);
            return M.x86.R_ECX + displacement;
        case 2:
            DECODE_PRINTF2("%d[EDX]", displacement);
            return M.x86.R_EDX + displacement;
        case 3:
            DECODE_PRINTF2("%d[EBX]", displacement);
            return M.x86.R_EBX + displacement;
        case 4:
            sib = fetch_byte_imm();
            displacement = (s8) fetch_byte_imm();
            DECODE_PRINTF2("%d", displacement);
            return decode_sib_address(sib, 1) + displacement;
        case 5:
            DECODE_PRINTF2("%d[EBP]", displacement);
            return M.x86.R_EBP + displacement;
        case 6:
            DECODE_PRINTF2("%d[ESI]", displacement);
            return M.x86.R_ESI + displacement;
        case 7:
            DECODE_PRINTF2("%d[EDI]", displacement);
            return M.x86.R_EDI + displacement;
        }
        HALT_SYS();
    }
    else {
        /* 16-bit addressing */
        switch (rm) {
        case 0:
            DECODE_PRINTF2("%d[BX+SI]", displacement);
            return (M.x86.R_BX + M.x86.R_SI + displacement) & 0xffff;
        case 1:
            DECODE_PRINTF2("%d[BX+DI]", displacement);
            return (M.x86.R_BX + M.x86.R_DI + displacement) & 0xffff;
        case 2:
            DECODE_PRINTF2("%d[BP+SI]", displacement);
            M.x86.mode |= SYSMODE_SEG_DS_SS;
            return (M.x86.R_BP + M.x86.R_SI + displacement) & 0xffff;
        case 3:
            DECODE_PRINTF2("%d[BP+DI]", displacement);
            M.x86.mode |= SYSMODE_SEG_DS_SS;
            return (M.x86.R_BP + M.x86.R_DI + displacement) & 0xffff;
        case 4:
            DECODE_PRINTF2("%d[SI]", displacement);
            return (M.x86.R_SI + displacement) & 0xffff;
        case 5:
            DECODE_PRINTF2("%d[DI]", displacement);
            return (M.x86.R_DI + displacement) & 0xffff;
        case 6:
            DECODE_PRINTF2("%d[BP]", displacement);
            M.x86.mode |= SYSMODE_SEG_DS_SS;
            return (M.x86.R_BP + displacement) & 0xffff;
        case 7:
            DECODE_PRINTF2("%d[BX]", displacement);
            return (M.x86.R_BX + displacement) & 0xffff;
        }
        HALT_SYS();
    }
    return 0;                   /* SHOULD NOT HAPPEN */
}

/****************************************************************************
PARAMETERS:
rm	- RM value to decode

RETURNS:
Offset in memory for the address decoding

REMARKS:
Return the offset given by mod=10 addressing.  Also enables the
decoding of instructions.
****************************************************************************/
u32
decode_rm10_address(int rm)
{
    u32 displacement = 0;
    int sib;

    /* Fetch disp16 if 16-bit addr mode */
    if (!(M.x86.mode & SYSMODE_PREFIX_ADDR))
        displacement = (u16) fetch_word_imm();
    else {
        /* Fetch disp32 if no SIB byte */
        if (rm != 4)
            displacement = (u32) fetch_long_imm();
    }

    if (M.x86.mode & SYSMODE_PREFIX_ADDR) {
        /* 32-bit addressing */
        switch (rm) {
        case 0:
            DECODE_PRINTF2("%08x[EAX]", displacement);
            return M.x86.R_EAX + displacement;
        case 1:
            DECODE_PRINTF2("%08x[ECX]", displacement);
            return M.x86.R_ECX + displacement;
        case 2:
            DECODE_PRINTF2("%08x[EDX]", displacement);
            M.x86.mode |= SYSMODE_SEG_DS_SS;
            return M.x86.R_EDX + displacement;
        case 3:
            DECODE_PRINTF2("%08x[EBX]", displacement);
            return M.x86.R_EBX + displacement;
        case 4:
            sib = fetch_byte_imm();
            displacement = (u32) fetch_long_imm();
            DECODE_PRINTF2("%08x", displacement);
            return decode_sib_address(sib, 2) + displacement;
            break;
        case 5:
            DECODE_PRINTF2("%08x[EBP]", displacement);
            return M.x86.R_EBP + displacement;
        case 6:
            DECODE_PRINTF2("%08x[ESI]", displacement);
            return M.x86.R_ESI + displacement;
        case 7:
            DECODE_PRINTF2("%08x[EDI]", displacement);
            return M.x86.R_EDI + displacement;
        }
        HALT_SYS();
    }
    else {
        /* 16-bit addressing */
        switch (rm) {
        case 0:
            DECODE_PRINTF2("%04x[BX+SI]", displacement);
            return (M.x86.R_BX + M.x86.R_SI + displacement) & 0xffff;
        case 1:
            DECODE_PRINTF2("%04x[BX+DI]", displacement);
            return (M.x86.R_BX + M.x86.R_DI + displacement) & 0xffff;
        case 2:
            DECODE_PRINTF2("%04x[BP+SI]", displacement);
            M.x86.mode |= SYSMODE_SEG_DS_SS;
            return (M.x86.R_BP + M.x86.R_SI + displacement) & 0xffff;
        case 3:
            DECODE_PRINTF2("%04x[BP+DI]", displacement);
            M.x86.mode |= SYSMODE_SEG_DS_SS;
            return (M.x86.R_BP + M.x86.R_DI + displacement) & 0xffff;
        case 4:
            DECODE_PRINTF2("%04x[SI]", displacement);
            return (M.x86.R_SI + displacement) & 0xffff;
        case 5:
            DECODE_PRINTF2("%04x[DI]", displacement);
            return (M.x86.R_DI + displacement) & 0xffff;
        case 6:
            DECODE_PRINTF2("%04x[BP]", displacement);
            M.x86.mode |= SYSMODE_SEG_DS_SS;
            return (M.x86.R_BP + displacement) & 0xffff;
        case 7:
            DECODE_PRINTF2("%04x[BX]", displacement);
            return (M.x86.R_BX + displacement) & 0xffff;
        }
        HALT_SYS();
    }
    return 0;
    /*NOTREACHED */
}
@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d41 10
@


1.1
log
@Initial revision
@
text
@d49 2
a50 1
static void x86emu_intr_handle(void)
d52 1
a52 1
	u8	intno;
d54 16
a69 15
	if (M.x86.intr & INTR_SYNCH) {
		intno = M.x86.intno;
		if (_X86EMU_intrTab[intno]) {
			(*_X86EMU_intrTab[intno])(intno);
		} else {
			push_word((u16)M.x86.R_FLG);
			CLEAR_FLAG(F_IF);
			CLEAR_FLAG(F_TF);
			push_word(M.x86.R_CS);
			M.x86.R_CS = mem_access_word(intno * 4 + 2);
			push_word(M.x86.R_IP);
			M.x86.R_IP = mem_access_word(intno * 4);
			M.x86.intr = 0;
		}
	}
d80 2
a81 2
void x86emu_intr_raise(
	u8 intrnum)
d83 2
a84 2
	M.x86.intno = intrnum;
	M.x86.intr |= INTR_SYNCH;
d93 2
a94 1
void X86EMU_exec(void)
d96 1
a96 1
	u8 op1;
d98 24
a121 20
	M.x86.intr = 0;
	DB(x86emu_end_instr();)

    for (;;) {
DB(		if (CHECK_IP_FETCH())
		  x86emu_check_ip_access();)
		/* If debugging, save the IP and CS values. */
		SAVE_IP_CS(M.x86.R_CS, M.x86.R_IP);
		INC_DECODED_INST_LEN(1);
		if (M.x86.intr) {
			if (M.x86.intr & INTR_HALTED) {
DB(             if (M.x86.R_SP != 0) {
                    printk("halted\n");
                    X86EMU_trace_regs();
                    }
                else {
                    if (M.x86.debug)
                        printk("Service completed successfully\n");
                    })
				return;
d123 3
a125 7
			if (((M.x86.intr & INTR_SYNCH) && (M.x86.intno == 0 || M.x86.intno == 2)) ||
				!ACCESS_FLAG(F_IF)) {
				x86emu_intr_handle();
			}
		}
		op1 = (*sys_rdb)(((u32)M.x86.R_CS << 4) + (M.x86.R_IP++));
		(*x86emu_optab[op1])(op1);
d137 2
a138 1
void X86EMU_halt_sys(void)
d140 1
a140 1
	M.x86.intr |= INTR_HALTED;
d155 11
a165 13
void fetch_decode_modrm(
	int *mod,
	int *regh,
	int *regl)
{
	int fetched;

DB(	if (CHECK_IP_FETCH())
	  x86emu_check_ip_access();)
	fetched = (*sys_rdb)(((u32)M.x86.R_CS << 4) + (M.x86.R_IP++));
	INC_DECODED_INST_LEN(1);
	*mod  = (fetched >> 6) & 0x03;
	*regh = (fetched >> 3) & 0x07;
d179 2
a180 1
u8 fetch_byte_imm(void)
d182 1
a182 1
	u8 fetched;
d184 5
a188 5
DB(	if (CHECK_IP_FETCH())
		x86emu_check_ip_access();)
	fetched = (*sys_rdb)(((u32)M.x86.R_CS << 4) + (M.x86.R_IP++));
	INC_DECODED_INST_LEN(1);
	return fetched;
d201 2
a202 1
u16 fetch_word_imm(void)
d204 1
a204 1
	u16	fetched;
d206 6
a211 6
DB(	if (CHECK_IP_FETCH())
		x86emu_check_ip_access();)
	fetched = (*sys_rdw)(((u32)M.x86.R_CS << 4) + (M.x86.R_IP));
	M.x86.R_IP += 2;
	INC_DECODED_INST_LEN(2);
	return fetched;
d224 2
a225 1
u32 fetch_long_imm(void)
d227 1
a227 1
	u32 fetched;
d229 6
a234 6
DB(	if (CHECK_IP_FETCH())
	  x86emu_check_ip_access();)
	fetched = (*sys_rdl)(((u32)M.x86.R_CS << 4) + (M.x86.R_IP));
	M.x86.R_IP += 4;
	INC_DECODED_INST_LEN(4);
	return fetched;
d266 2
a267 1
_INLINE u32 get_data_segment(void)
d270 23
a292 23
	switch (M.x86.mode & SYSMODE_SEGMASK) {
	  case 0:					/* default case: use ds register */
	  case SYSMODE_SEGOVR_DS:
	  case SYSMODE_SEGOVR_DS | SYSMODE_SEG_DS_SS:
		return  M.x86.R_DS;
	  case SYSMODE_SEG_DS_SS:	/* non-overridden, use ss register */
		return  M.x86.R_SS;
	  case SYSMODE_SEGOVR_CS:
	  case SYSMODE_SEGOVR_CS | SYSMODE_SEG_DS_SS:
		return  M.x86.R_CS;
	  case SYSMODE_SEGOVR_ES:
	  case SYSMODE_SEGOVR_ES | SYSMODE_SEG_DS_SS:
		return  M.x86.R_ES;
	  case SYSMODE_SEGOVR_FS:
	  case SYSMODE_SEGOVR_FS | SYSMODE_SEG_DS_SS:
		return  M.x86.R_FS;
	  case SYSMODE_SEGOVR_GS:
	  case SYSMODE_SEGOVR_GS | SYSMODE_SEG_DS_SS:
		return  M.x86.R_GS;
	  case SYSMODE_SEGOVR_SS:
	  case SYSMODE_SEGOVR_SS | SYSMODE_SEG_DS_SS:
		return  M.x86.R_SS;
	  default:
d294 1
a294 1
		printk("error: should not happen:  multiple overrides.\n");
d296 3
a298 3
		HALT_SYS();
		return 0;
	}
d310 2
a311 2
u8 fetch_data_byte(
	uint offset)
d314 2
a315 2
	if (CHECK_DATA_ACCESS())
		x86emu_check_data_access((u16)get_data_segment(), offset);
d317 1
a317 1
	return (*sys_rdb)((get_data_segment() << 4) + offset);
d329 2
a330 2
u16 fetch_data_word(
	uint offset)
d333 2
a334 2
	if (CHECK_DATA_ACCESS())
		x86emu_check_data_access((u16)get_data_segment(), offset);
d336 1
a336 1
	return (*sys_rdw)((get_data_segment() << 4) + offset);
d348 2
a349 2
u32 fetch_data_long(
	uint offset)
d352 2
a353 2
	if (CHECK_DATA_ACCESS())
		x86emu_check_data_access((u16)get_data_segment(), offset);
d355 1
a355 1
	return (*sys_rdl)((get_data_segment() << 4) + offset);
d368 2
a369 3
u8 fetch_data_byte_abs(
	uint segment,
	uint offset)
d372 2
a373 2
	if (CHECK_DATA_ACCESS())
		x86emu_check_data_access(segment, offset);
d375 1
a375 1
	return (*sys_rdb)(((u32)segment << 4) + offset);
d388 2
a389 3
u16 fetch_data_word_abs(
	uint segment,
	uint offset)
d392 2
a393 2
	if (CHECK_DATA_ACCESS())
		x86emu_check_data_access(segment, offset);
d395 1
a395 1
	return (*sys_rdw)(((u32)segment << 4) + offset);
d408 2
a409 3
u32 fetch_data_long_abs(
	uint segment,
	uint offset)
d412 2
a413 2
	if (CHECK_DATA_ACCESS())
		x86emu_check_data_access(segment, offset);
d415 1
a415 1
	return (*sys_rdl)(((u32)segment << 4) + offset);
d429 2
a430 3
void store_data_byte(
	uint offset,
	u8 val)
d433 2
a434 2
	if (CHECK_DATA_ACCESS())
		x86emu_check_data_access((u16)get_data_segment(), offset);
d436 1
a436 1
	(*sys_wrb)((get_data_segment() << 4) + offset, val);
d450 2
a451 3
void store_data_word(
	uint offset,
	u16 val)
d454 2
a455 2
	if (CHECK_DATA_ACCESS())
		x86emu_check_data_access((u16)get_data_segment(), offset);
d457 1
a457 1
	(*sys_wrw)((get_data_segment() << 4) + offset, val);
d471 2
a472 3
void store_data_long(
	uint offset,
	u32 val)
d475 2
a476 2
	if (CHECK_DATA_ACCESS())
		x86emu_check_data_access((u16)get_data_segment(), offset);
d478 1
a478 1
	(*sys_wrl)((get_data_segment() << 4) + offset, val);
d492 2
a493 4
void store_data_byte_abs(
	uint segment,
	uint offset,
	u8 val)
d496 2
a497 2
	if (CHECK_DATA_ACCESS())
		x86emu_check_data_access(segment, offset);
d499 1
a499 1
	(*sys_wrb)(((u32)segment << 4) + offset, val);
d513 2
a514 4
void store_data_word_abs(
	uint segment,
	uint offset,
	u16 val)
d517 2
a518 2
	if (CHECK_DATA_ACCESS())
		x86emu_check_data_access(segment, offset);
d520 1
a520 1
	(*sys_wrw)(((u32)segment << 4) + offset, val);
d534 2
a535 4
void store_data_long_abs(
	uint segment,
	uint offset,
	u32 val)
d538 2
a539 2
	if (CHECK_DATA_ACCESS())
		x86emu_check_data_access(segment, offset);
d541 1
a541 1
	(*sys_wrl)(((u32)segment << 4) + offset, val);
d555 2
a556 2
u8* decode_rm_byte_register(
	int reg)
d558 28
a585 28
	switch (reg) {
      case 0:
		DECODE_PRINTF("AL");
		return &M.x86.R_AL;
	  case 1:
		DECODE_PRINTF("CL");
		return &M.x86.R_CL;
	  case 2:
		DECODE_PRINTF("DL");
		return &M.x86.R_DL;
	  case 3:
		DECODE_PRINTF("BL");
		return &M.x86.R_BL;
	  case 4:
		DECODE_PRINTF("AH");
		return &M.x86.R_AH;
	  case 5:
		DECODE_PRINTF("CH");
		return &M.x86.R_CH;
	  case 6:
		DECODE_PRINTF("DH");
		return &M.x86.R_DH;
	  case 7:
		DECODE_PRINTF("BH");
		return &M.x86.R_BH;
	}
	HALT_SYS();
	return NULL;                /* NOT REACHED OR REACHED ON ERROR */
d599 2
a600 2
u16* decode_rm_word_register(
	int reg)
d602 27
a628 27
	switch (reg) {
	  case 0:
		DECODE_PRINTF("AX");
		return &M.x86.R_AX;
	  case 1:
		DECODE_PRINTF("CX");
		return &M.x86.R_CX;
	  case 2:
		DECODE_PRINTF("DX");
		return &M.x86.R_DX;
	  case 3:
		DECODE_PRINTF("BX");
		return &M.x86.R_BX;
	  case 4:
		DECODE_PRINTF("SP");
		return &M.x86.R_SP;
	  case 5:
		DECODE_PRINTF("BP");
		return &M.x86.R_BP;
	  case 6:
		DECODE_PRINTF("SI");
		return &M.x86.R_SI;
	  case 7:
		DECODE_PRINTF("DI");
		return &M.x86.R_DI;
	}
	HALT_SYS();
d643 2
a644 2
u32* decode_rm_long_register(
	int reg)
d647 26
a672 26
      case 0:
		DECODE_PRINTF("EAX");
		return &M.x86.R_EAX;
	  case 1:
		DECODE_PRINTF("ECX");
		return &M.x86.R_ECX;
	  case 2:
		DECODE_PRINTF("EDX");
		return &M.x86.R_EDX;
	  case 3:
		DECODE_PRINTF("EBX");
		return &M.x86.R_EBX;
	  case 4:
		DECODE_PRINTF("ESP");
		return &M.x86.R_ESP;
	  case 5:
		DECODE_PRINTF("EBP");
		return &M.x86.R_EBP;
	  case 6:
		DECODE_PRINTF("ESI");
		return &M.x86.R_ESI;
	  case 7:
		DECODE_PRINTF("EDI");
		return &M.x86.R_EDI;
	}
	HALT_SYS();
d688 2
a689 2
u16* decode_rm_seg_register(
	int reg)
d691 26
a716 26
	switch (reg) {
	  case 0:
		DECODE_PRINTF("ES");
		return &M.x86.R_ES;
	  case 1:
		DECODE_PRINTF("CS");
		return &M.x86.R_CS;
	  case 2:
		DECODE_PRINTF("SS");
		return &M.x86.R_SS;
	  case 3:
		DECODE_PRINTF("DS");
		return &M.x86.R_DS;
	  case 4:
		DECODE_PRINTF("FS");
		return &M.x86.R_FS;
	  case 5:
		DECODE_PRINTF("GS");
		return &M.x86.R_GS;
	  case 6:
	  case 7:
		DECODE_PRINTF("ILLEGAL SEGREG");
		break;
	}
	HALT_SYS();
	return NULL;                /* NOT REACHED OR REACHED ON ERROR */
d723 2
a724 1
u32 decode_sib_address(int sib, int mod)
d728 1
a728 1
    switch(sib & 0x07) {
d730 3
a732 3
	DECODE_PRINTF("[EAX]");
	base = M.x86.R_EAX;
	break;
d734 3
a736 3
	DECODE_PRINTF("[ECX]");
	base = M.x86.R_ECX;
	break;
d738 3
a740 3
	DECODE_PRINTF("[EDX]");
	base = M.x86.R_EDX;
	break;
d742 3
a744 3
	DECODE_PRINTF("[EBX]");
	base = M.x86.R_EBX;
	break;
d746 4
a749 4
	DECODE_PRINTF("[ESP]");
	base = M.x86.R_ESP;
	M.x86.mode |= SYSMODE_SEG_DS_SS;
	break;
d751 10
a760 9
	if (mod == 0) {
	    base = fetch_long_imm();
	    DECODE_PRINTF2("%08x", base);
	} else {
	    DECODE_PRINTF("[EBP]");
	    base = M.x86.R_ESP;
	    M.x86.mode |= SYSMODE_SEG_DS_SS;
	}
	break;
d762 3
a764 3
	DECODE_PRINTF("[ESI]");
	base = M.x86.R_ESI;
	break;
d766 3
a768 3
	DECODE_PRINTF("[EDI]");
	base = M.x86.R_EDI;
	break;
d772 3
a774 3
	DECODE_PRINTF("[EAX");
	i = M.x86.R_EAX;
	break;
d776 3
a778 3
	DECODE_PRINTF("[ECX");
	i = M.x86.R_ECX;
	break;
d780 3
a782 3
	DECODE_PRINTF("[EDX");
	i = M.x86.R_EDX;
	break;
d784 3
a786 3
	DECODE_PRINTF("[EBX");
	i = M.x86.R_EBX;
	break;
d788 2
a789 2
	i = 0;
	break;
d791 3
a793 3
	DECODE_PRINTF("[EBP");
	i = M.x86.R_EBP;
	break;
d795 3
a797 3
	DECODE_PRINTF("[ESI");
	i = M.x86.R_ESI;
	break;
d799 3
a801 3
	DECODE_PRINTF("[EDI");
	i = M.x86.R_EDI;
	break;
d805 6
a810 5
	if (scale == 1) {
	    DECODE_PRINTF("]");
	} else {
	    DECODE_PRINTF2("*%d]", scale);
	}
d835 2
a836 2
u32 decode_rm00_address(
	int rm)
d843 30
a872 29
	switch (rm) {
	  case 0:
		DECODE_PRINTF("[EAX]");
		return M.x86.R_EAX;
	  case 1:
		DECODE_PRINTF("[ECX]");
		return M.x86.R_ECX;
	  case 2:
		DECODE_PRINTF("[EDX]");
		return M.x86.R_EDX;
	  case 3:
		DECODE_PRINTF("[EBX]");
		return M.x86.R_EBX;
	  case 4:
		sib = fetch_byte_imm();
		return decode_sib_address(sib, 0);
	  case 5:
		offset = fetch_long_imm();
		DECODE_PRINTF2("[%08x]", offset);
		return offset;
	  case 6:
		DECODE_PRINTF("[ESI]");
		return M.x86.R_ESI;
	  case 7:
		DECODE_PRINTF("[EDI]");
		return M.x86.R_EDI;
	}
	HALT_SYS();
    } else {
d874 3
a876 3
	switch (rm) {
	  case 0:
		DECODE_PRINTF("[BX+SI]");
d878 2
a879 2
	  case 1:
		DECODE_PRINTF("[BX+DI]");
d881 3
a883 3
	  case 2:
		DECODE_PRINTF("[BP+SI]");
		M.x86.mode |= SYSMODE_SEG_DS_SS;
d885 3
a887 3
	  case 3:
		DECODE_PRINTF("[BP+DI]");
		M.x86.mode |= SYSMODE_SEG_DS_SS;
d889 15
a903 15
	  case 4:
		DECODE_PRINTF("[SI]");
		return M.x86.R_SI;
	  case 5:
		DECODE_PRINTF("[DI]");
		return M.x86.R_DI;
	  case 6:
		offset = fetch_word_imm();
		DECODE_PRINTF2("[%04x]", offset);
		return offset;
	  case 7:
		DECODE_PRINTF("[BX]");
		return M.x86.R_BX;
	}
	HALT_SYS();
d919 2
a920 2
u32 decode_rm01_address(
	int rm)
d927 1
a927 1
	displacement = (s8)fetch_byte_imm();
d931 31
a961 30
	switch (rm) {
	  case 0:
		DECODE_PRINTF2("%d[EAX]", displacement);
		return M.x86.R_EAX + displacement;
	  case 1:
		DECODE_PRINTF2("%d[ECX]", displacement);
		return M.x86.R_ECX + displacement;
	  case 2:
		DECODE_PRINTF2("%d[EDX]", displacement);
		return M.x86.R_EDX + displacement;
	  case 3:
		DECODE_PRINTF2("%d[EBX]", displacement);
		return M.x86.R_EBX + displacement;
	  case 4:
		sib = fetch_byte_imm();
		displacement = (s8)fetch_byte_imm();
		DECODE_PRINTF2("%d", displacement);
		return decode_sib_address(sib, 1) + displacement;
	  case 5:
		DECODE_PRINTF2("%d[EBP]", displacement);
		return M.x86.R_EBP + displacement;
	  case 6:
		DECODE_PRINTF2("%d[ESI]", displacement);
		return M.x86.R_ESI + displacement;
	  case 7:
		DECODE_PRINTF2("%d[EDI]", displacement);
		return M.x86.R_EDI + displacement;
	}
	HALT_SYS();
    } else {
d963 3
a965 3
	switch (rm) {
	  case 0:
		DECODE_PRINTF2("%d[BX+SI]", displacement);
d967 2
a968 2
	  case 1:
		DECODE_PRINTF2("%d[BX+DI]", displacement);
d970 3
a972 3
	  case 2:
		DECODE_PRINTF2("%d[BP+SI]", displacement);
		M.x86.mode |= SYSMODE_SEG_DS_SS;
d974 3
a976 3
	  case 3:
		DECODE_PRINTF2("%d[BP+DI]", displacement);
		M.x86.mode |= SYSMODE_SEG_DS_SS;
d978 2
a979 2
	  case 4:
		DECODE_PRINTF2("%d[SI]", displacement);
d981 2
a982 2
	  case 5:
		DECODE_PRINTF2("%d[DI]", displacement);
d984 3
a986 3
	  case 6:
		DECODE_PRINTF2("%d[BP]", displacement);
		M.x86.mode |= SYSMODE_SEG_DS_SS;
d988 2
a989 2
	  case 7:
		DECODE_PRINTF2("%d[BX]", displacement);
d991 2
a992 2
	}
	HALT_SYS();
d1008 2
a1009 2
u32 decode_rm10_address(
	int rm)
d1016 1
a1016 1
	displacement = (u16)fetch_word_imm();
d1018 3
a1020 3
	/* Fetch disp32 if no SIB byte */
	if (rm != 4)
	    displacement = (u32)fetch_long_imm();
d1025 33
a1057 32
      switch (rm) {
	  case 0:
		DECODE_PRINTF2("%08x[EAX]", displacement);
		return M.x86.R_EAX + displacement;
	  case 1:
		DECODE_PRINTF2("%08x[ECX]", displacement);
		return M.x86.R_ECX + displacement;
	  case 2:
		DECODE_PRINTF2("%08x[EDX]", displacement);
		M.x86.mode |= SYSMODE_SEG_DS_SS;
		return M.x86.R_EDX + displacement;
	  case 3:
		DECODE_PRINTF2("%08x[EBX]", displacement);
		return M.x86.R_EBX + displacement;
	  case 4:
		sib = fetch_byte_imm();
		displacement = (u32)fetch_long_imm();
		DECODE_PRINTF2("%08x", displacement);
		return decode_sib_address(sib, 2) + displacement;
		break;
	  case 5:
		DECODE_PRINTF2("%08x[EBP]", displacement);
		return M.x86.R_EBP + displacement;
	  case 6:
		DECODE_PRINTF2("%08x[ESI]", displacement);
		return M.x86.R_ESI + displacement;
	  case 7:
		DECODE_PRINTF2("%08x[EDI]", displacement);
		return M.x86.R_EDI + displacement;
	}
	HALT_SYS();
    } else {
d1059 2
a1060 2
      switch (rm) {
	  case 0:
d1063 1
a1063 1
	  case 1:
d1066 3
a1068 3
	  case 2:
		DECODE_PRINTF2("%04x[BP+SI]", displacement);
		M.x86.mode |= SYSMODE_SEG_DS_SS;
d1070 3
a1072 3
	  case 3:
		DECODE_PRINTF2("%04x[BP+DI]", displacement);
		M.x86.mode |= SYSMODE_SEG_DS_SS;
d1074 1
a1074 1
	  case 4:
d1077 1
a1077 1
	  case 5:
d1080 3
a1082 3
	  case 6:
		DECODE_PRINTF2("%04x[BP]", displacement);
		M.x86.mode |= SYSMODE_SEG_DS_SS;
d1084 1
a1084 1
	  case 7:
d1087 2
a1088 2
	}
	HALT_SYS();
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
