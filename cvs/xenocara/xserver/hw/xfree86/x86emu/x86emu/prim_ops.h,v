head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.22
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.20
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.18
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.16
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.14
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.16
	OPENBSD_5_0:1.2.0.14
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.10
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.12
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2012.06.10.13.21.27;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.10.22.31.30;	author mbalmer;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.18.22;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.18.22;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/****************************************************************************
*
*						Realmode X86 Emulator Library
*
*            	Copyright (C) 1996-1999 SciTech Software, Inc.
* 				     Copyright (C) David Mosberger-Tang
* 					   Copyright (C) 1999 Egbert Eich
*
*  ========================================================================
*
*  Permission to use, copy, modify, distribute, and sell this software and
*  its documentation for any purpose is hereby granted without fee,
*  provided that the above copyright notice appear in all copies and that
*  both that copyright notice and this permission notice appear in
*  supporting documentation, and that the name of the authors not be used
*  in advertising or publicity pertaining to distribution of the software
*  without specific, written prior permission.  The authors makes no
*  representations about the suitability of this software for any purpose.
*  It is provided "as is" without express or implied warranty.
*
*  THE AUTHORS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
*  INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
*  EVENT SHALL THE AUTHORS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
*  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
*  USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
*  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
*  PERFORMANCE OF THIS SOFTWARE.
*
*  ========================================================================
*
* Language:		ANSI C
* Environment:	Any
* Developer:    Kendall Bennett
*
* Description:  Header file for primitive operation functions.
*
****************************************************************************/

#ifndef __X86EMU_PRIM_OPS_H
#define __X86EMU_PRIM_OPS_H

#ifdef  __cplusplus
extern "C" {                    /* Use "C" linkage when in C++ mode */
#endif

    u16 aaa_word(u16 d);
    u16 aas_word(u16 d);
    u16 aad_word(u16 d);
    u16 aam_word(u8 d);
    u8 adc_byte(u8 d, u8 s);
    u16 adc_word(u16 d, u16 s);
    u32 adc_long(u32 d, u32 s);
    u8 add_byte(u8 d, u8 s);
    u16 add_word(u16 d, u16 s);
    u32 add_long(u32 d, u32 s);
    u8 and_byte(u8 d, u8 s);
    u16 and_word(u16 d, u16 s);
    u32 and_long(u32 d, u32 s);
    u8 cmp_byte(u8 d, u8 s);
    u16 cmp_word(u16 d, u16 s);
    u32 cmp_long(u32 d, u32 s);
    u8 daa_byte(u8 d);
    u8 das_byte(u8 d);
    u8 dec_byte(u8 d);
    u16 dec_word(u16 d);
    u32 dec_long(u32 d);
    u8 inc_byte(u8 d);
    u16 inc_word(u16 d);
    u32 inc_long(u32 d);
    u8 or_byte(u8 d, u8 s);
    u16 or_word(u16 d, u16 s);
    u32 or_long(u32 d, u32 s);
    u8 neg_byte(u8 s);
    u16 neg_word(u16 s);
    u32 neg_long(u32 s);
    u8 not_byte(u8 s);
    u16 not_word(u16 s);
    u32 not_long(u32 s);
    u8 rcl_byte(u8 d, u8 s);
    u16 rcl_word(u16 d, u8 s);
    u32 rcl_long(u32 d, u8 s);
    u8 rcr_byte(u8 d, u8 s);
    u16 rcr_word(u16 d, u8 s);
    u32 rcr_long(u32 d, u8 s);
    u8 rol_byte(u8 d, u8 s);
    u16 rol_word(u16 d, u8 s);
    u32 rol_long(u32 d, u8 s);
    u8 ror_byte(u8 d, u8 s);
    u16 ror_word(u16 d, u8 s);
    u32 ror_long(u32 d, u8 s);
    u8 shl_byte(u8 d, u8 s);
    u16 shl_word(u16 d, u8 s);
    u32 shl_long(u32 d, u8 s);
    u8 shr_byte(u8 d, u8 s);
    u16 shr_word(u16 d, u8 s);
    u32 shr_long(u32 d, u8 s);
    u8 sar_byte(u8 d, u8 s);
    u16 sar_word(u16 d, u8 s);
    u32 sar_long(u32 d, u8 s);
    u16 shld_word(u16 d, u16 fill, u8 s);
    u32 shld_long(u32 d, u32 fill, u8 s);
    u16 shrd_word(u16 d, u16 fill, u8 s);
    u32 shrd_long(u32 d, u32 fill, u8 s);
    u8 sbb_byte(u8 d, u8 s);
    u16 sbb_word(u16 d, u16 s);
    u32 sbb_long(u32 d, u32 s);
    u8 sub_byte(u8 d, u8 s);
    u16 sub_word(u16 d, u16 s);
    u32 sub_long(u32 d, u32 s);
    void test_byte(u8 d, u8 s);
    void test_word(u16 d, u16 s);
    void test_long(u32 d, u32 s);
    u8 xor_byte(u8 d, u8 s);
    u16 xor_word(u16 d, u16 s);
    u32 xor_long(u32 d, u32 s);
    void imul_byte(u8 s);
    void imul_word(u16 s);
    void imul_long(u32 s);
    void imul_long_direct(u32 * res_lo, u32 * res_hi, u32 d, u32 s);
    void mul_byte(u8 s);
    void mul_word(u16 s);
    void mul_long(u32 s);
    void idiv_byte(u8 s);
    void idiv_word(u16 s);
    void idiv_long(u32 s);
    void div_byte(u8 s);
    void div_word(u16 s);
    void div_long(u32 s);
    void ins(int size);
    void outs(int size);
    u16 mem_access_word(int addr);
    void push_word(u16 w);
    void push_long(u32 w);
    u16 pop_word(void);
    u32 pop_long(void);
    void cpuid(void);

#ifdef  __cplusplus
}                               /* End of "C" linkage for C++           */
#endif
#endif                          /* __X86EMU_PRIM_OPS_H */
@


1.2
log
@Pull in a patch from X.Org-current to let X11 run on AMD Geode LX
CPUs in basic VESA mode:

X86EMU: handle CPUID instruction

Starting X on an AMD Geode LX system such as an Alix board with VGA
connector, the Xorg driver attempts to issue INT 10/0 to go to mode
3 (VGA).  The emulator, running the BIOS code, would then spit out:

	c000:0282: A2 ILLEGAL EXTENDED X86 OPCODE!

The opcode was 0F A2, or CPUID; it was not implemented in the
emulator. With this patch it handles the CPUID instruction in one of
two ways:

1) if ran on __i386__ or __x86_64__ then it calls the CPUID instruction
   directly.

2) if ran elsewhere it returns a canned 486dx4 set of values for function 1.

Tested with & ok matthieu
@
text
@d43 1
a43 1
extern "C" {            			/* Use "C" linkage when in C++ mode */
d46 91
a136 91
u16     aaa_word (u16 d);
u16     aas_word (u16 d);
u16     aad_word (u16 d);
u16     aam_word (u8 d);
u8      adc_byte (u8 d, u8 s);
u16     adc_word (u16 d, u16 s);
u32     adc_long (u32 d, u32 s);
u8      add_byte (u8 d, u8 s);
u16     add_word (u16 d, u16 s);
u32     add_long (u32 d, u32 s);
u8      and_byte (u8 d, u8 s);
u16     and_word (u16 d, u16 s);
u32     and_long (u32 d, u32 s);
u8      cmp_byte (u8 d, u8 s);
u16     cmp_word (u16 d, u16 s);
u32     cmp_long (u32 d, u32 s);
u8      daa_byte (u8 d);
u8      das_byte (u8 d);
u8      dec_byte (u8 d);
u16     dec_word (u16 d);
u32     dec_long (u32 d);
u8      inc_byte (u8 d);
u16     inc_word (u16 d);
u32     inc_long (u32 d);
u8      or_byte (u8 d, u8 s);
u16     or_word (u16 d, u16 s);
u32     or_long (u32 d, u32 s);
u8      neg_byte (u8 s);
u16     neg_word (u16 s);
u32     neg_long (u32 s);
u8      not_byte (u8 s);
u16     not_word (u16 s);
u32     not_long (u32 s);
u8      rcl_byte (u8 d, u8 s);
u16     rcl_word (u16 d, u8 s);
u32     rcl_long (u32 d, u8 s);
u8      rcr_byte (u8 d, u8 s);
u16     rcr_word (u16 d, u8 s);
u32     rcr_long (u32 d, u8 s);
u8      rol_byte (u8 d, u8 s);
u16     rol_word (u16 d, u8 s);
u32     rol_long (u32 d, u8 s);
u8      ror_byte (u8 d, u8 s);
u16     ror_word (u16 d, u8 s);
u32     ror_long (u32 d, u8 s);
u8      shl_byte (u8 d, u8 s);
u16     shl_word (u16 d, u8 s);
u32     shl_long (u32 d, u8 s);
u8      shr_byte (u8 d, u8 s);
u16     shr_word (u16 d, u8 s);
u32     shr_long (u32 d, u8 s);
u8      sar_byte (u8 d, u8 s);
u16     sar_word (u16 d, u8 s);
u32     sar_long (u32 d, u8 s);
u16     shld_word (u16 d, u16 fill, u8 s);
u32     shld_long (u32 d, u32 fill, u8 s);
u16     shrd_word (u16 d, u16 fill, u8 s);
u32     shrd_long (u32 d, u32 fill, u8 s);
u8      sbb_byte (u8 d, u8 s);
u16     sbb_word (u16 d, u16 s);
u32     sbb_long (u32 d, u32 s);
u8      sub_byte (u8 d, u8 s);
u16     sub_word (u16 d, u16 s);
u32     sub_long (u32 d, u32 s);
void    test_byte (u8 d, u8 s);
void    test_word (u16 d, u16 s);
void    test_long (u32 d, u32 s);
u8      xor_byte (u8 d, u8 s);
u16     xor_word (u16 d, u16 s);
u32     xor_long (u32 d, u32 s);
void    imul_byte (u8 s);
void    imul_word (u16 s);
void    imul_long (u32 s);
void 	imul_long_direct(u32 *res_lo, u32* res_hi,u32 d, u32 s);
void    mul_byte (u8 s);
void    mul_word (u16 s);
void    mul_long (u32 s);
void    idiv_byte (u8 s);
void    idiv_word (u16 s);
void    idiv_long (u32 s);
void    div_byte (u8 s);
void    div_word (u16 s);
void    div_long (u32 s);
void    ins (int size);
void    outs (int size);
u16     mem_access_word (int addr);
void    push_word (u16 w);
void    push_long (u32 w);
u16     pop_word (void);
u32		pop_long (void);
void    cpuid (void);
d139 1
a139 1
}                       			/* End of "C" linkage for C++   	*/
d141 1
a141 2

#endif /* __X86EMU_PRIM_OPS_H */
@


1.1
log
@Initial revision
@
text
@d136 1
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
