head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.18
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.16
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2012.06.10.13.21.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.18.21;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.18.21;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/****************************************************************************
*
*						Realmode X86 Emulator Library
*
*            	Copyright (C) 1996-1999 SciTech Software, Inc.
* 				     Copyright (C) David Mosberger-Tang
* 					   Copyright (C) 1999 Egbert Eich
*
*  ========================================================================
*
*  Permission to use, copy, modify, distribute, and sell this software and
*  its documentation for any purpose is hereby granted without fee,
*  provided that the above copyright notice appear in all copies and that
*  both that copyright notice and this permission notice appear in
*  supporting documentation, and that the name of the authors not be used
*  in advertising or publicity pertaining to distribution of the software
*  without specific, written prior permission.  The authors makes no
*  representations about the suitability of this software for any purpose.
*  It is provided "as is" without express or implied warranty.
*
*  THE AUTHORS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
*  INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
*  EVENT SHALL THE AUTHORS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
*  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
*  USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
*  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
*  PERFORMANCE OF THIS SOFTWARE.
*
*  ========================================================================
*
* Language:		ANSI C
* Environment:	Any
* Developer:    Kendall Bennett
*
* Description:  Header file for debug definitions.
*
****************************************************************************/

#ifndef __X86EMU_DEBUG_H
#define __X86EMU_DEBUG_H

/*---------------------- Macros and type definitions ----------------------*/

/* checks to be enabled for "runtime" */

#define CHECK_IP_FETCH_F                0x1
#define CHECK_SP_ACCESS_F               0x2
#define CHECK_MEM_ACCESS_F              0x4     /*using regular linear pointer */
#define CHECK_DATA_ACCESS_F             0x8     /*using segment:offset */

#ifdef DEBUG
#define CHECK_IP_FETCH()              	(M.x86.check & CHECK_IP_FETCH_F)
#define CHECK_SP_ACCESS()             	(M.x86.check & CHECK_SP_ACCESS_F)
#define CHECK_MEM_ACCESS()            	(M.x86.check & CHECK_MEM_ACCESS_F)
#define CHECK_DATA_ACCESS()           	(M.x86.check & CHECK_DATA_ACCESS_F)
#else
#define CHECK_IP_FETCH()
#define CHECK_SP_ACCESS()
#define CHECK_MEM_ACCESS()
#define CHECK_DATA_ACCESS()
#endif

#ifdef DEBUG
#define DEBUG_INSTRUMENT()    	(M.x86.debug & DEBUG_INSTRUMENT_F)
#define DEBUG_DECODE()        	(M.x86.debug & DEBUG_DECODE_F)
#define DEBUG_TRACE()         	(M.x86.debug & DEBUG_TRACE_F)
#define DEBUG_STEP()          	(M.x86.debug & DEBUG_STEP_F)
#define DEBUG_DISASSEMBLE()   	(M.x86.debug & DEBUG_DISASSEMBLE_F)
#define DEBUG_BREAK()         	(M.x86.debug & DEBUG_BREAK_F)
#define DEBUG_SVC()           	(M.x86.debug & DEBUG_SVC_F)
#define DEBUG_SAVE_IP_CS()     (M.x86.debug & DEBUG_SAVE_IP_CS_F)

#define DEBUG_FS()            	(M.x86.debug & DEBUG_FS_F)
#define DEBUG_PROC()          	(M.x86.debug & DEBUG_PROC_F)
#define DEBUG_SYSINT()        	(M.x86.debug & DEBUG_SYSINT_F)
#define DEBUG_TRACECALL()     	(M.x86.debug & DEBUG_TRACECALL_F)
#define DEBUG_TRACECALLREGS() 	(M.x86.debug & DEBUG_TRACECALL_REGS_F)
#define DEBUG_SYS()           	(M.x86.debug & DEBUG_SYS_F)
#define DEBUG_MEM_TRACE()     	(M.x86.debug & DEBUG_MEM_TRACE_F)
#define DEBUG_IO_TRACE()      	(M.x86.debug & DEBUG_IO_TRACE_F)
#define DEBUG_DECODE_NOPRINT() (M.x86.debug & DEBUG_DECODE_NOPRINT_F)
#else
#define DEBUG_INSTRUMENT()    	0
#define DEBUG_DECODE()        	0
#define DEBUG_TRACE()         	0
#define DEBUG_STEP()          	0
#define DEBUG_DISASSEMBLE()   	0
#define DEBUG_BREAK()         	0
#define DEBUG_SVC()           	0
#define DEBUG_SAVE_IP_CS()     0
#define DEBUG_FS()            	0
#define DEBUG_PROC()          	0
#define DEBUG_SYSINT()        	0
#define DEBUG_TRACECALL()     	0
#define DEBUG_TRACECALLREGS() 	0
#define DEBUG_SYS()           	0
#define DEBUG_MEM_TRACE()     	0
#define DEBUG_IO_TRACE()      	0
#define DEBUG_DECODE_NOPRINT() 0
#endif

#ifdef DEBUG

#define DECODE_PRINTF(x)     	if (DEBUG_DECODE()) \
									x86emu_decode_printf(x)
#define DECODE_PRINTF2(x,y)  	if (DEBUG_DECODE()) \
									x86emu_decode_printf2(x,y)

/*
 * The following allow us to look at the bytes of an instruction.  The
 * first INCR_INSTRN_LEN, is called everytime bytes are consumed in
 * the decoding process.  The SAVE_IP_CS is called initially when the
 * major opcode of the instruction is accessed.
 */
#define INC_DECODED_INST_LEN(x)                    	\
	if (DEBUG_DECODE())  	                       	\
		x86emu_inc_decoded_inst_len(x)

#define SAVE_IP_CS(x,y)                               			\
	if (DEBUG_DECODE() | DEBUG_TRACECALL() | DEBUG_BREAK() \
              | DEBUG_IO_TRACE() | DEBUG_SAVE_IP_CS()) { \
		M.x86.saved_cs = x;                          			\
		M.x86.saved_ip = y;                          			\
	}
#else
#define INC_DECODED_INST_LEN(x)
#define DECODE_PRINTF(x)
#define DECODE_PRINTF2(x,y)
#define SAVE_IP_CS(x,y)
#endif

#ifdef DEBUG
#define TRACE_REGS()                                   		\
	if (DEBUG_DISASSEMBLE()) {                         		\
		x86emu_just_disassemble();                        	\
		goto EndOfTheInstructionProcedure;             		\
	}                                                   	\
	if (DEBUG_TRACE() || DEBUG_DECODE()) X86EMU_trace_regs()
#else
#define TRACE_REGS()
#endif

#ifdef DEBUG
#define SINGLE_STEP()		if (DEBUG_STEP()) x86emu_single_step()
#else
#define SINGLE_STEP()
#endif

#define TRACE_AND_STEP()	\
	TRACE_REGS();			\
	SINGLE_STEP()

#ifdef DEBUG
#define START_OF_INSTR()
#define END_OF_INSTR()		EndOfTheInstructionProcedure: x86emu_end_instr();
#define END_OF_INSTR_NO_TRACE()	x86emu_end_instr();
#else
#define START_OF_INSTR()
#define END_OF_INSTR()
#define END_OF_INSTR_NO_TRACE()
#endif

#ifdef DEBUG
#define  CALL_TRACE(u,v,w,x,s)                                 \
	if (DEBUG_TRACECALLREGS())									\
		x86emu_dump_regs();                                     \
	if (DEBUG_TRACECALL())                                     	\
		printk("%04x:%04x: CALL %s%04x:%04x\n", u , v, s, w, x);
#define RETURN_TRACE(n,u,v)                                    \
	if (DEBUG_TRACECALLREGS())									\
		x86emu_dump_regs();                                     \
	if (DEBUG_TRACECALL())                                     	\
		printk("%04x:%04x: %s\n",u,v,n);
#else
#define CALL_TRACE(u,v,w,x,s)
#define RETURN_TRACE(n,u,v)
#endif

#ifdef DEBUG
#define	DB(x)	x
#else
#define	DB(x)
#endif

/*-------------------------- Function Prototypes --------------------------*/

#ifdef  __cplusplus
extern "C" {                    /* Use "C" linkage when in C++ mode */
#endif

    extern void x86emu_inc_decoded_inst_len(int x);
    extern void x86emu_decode_printf(const char *x);
    extern void x86emu_decode_printf2(const char *x, int y);
    extern void x86emu_just_disassemble(void);
    extern void x86emu_single_step(void);
    extern void x86emu_end_instr(void);
    extern void x86emu_dump_regs(void);
    extern void x86emu_dump_xregs(void);
    extern void x86emu_print_int_vect(u16 iv);
    extern void x86emu_instrument_instruction(void);
    extern void x86emu_check_ip_access(void);
    extern void x86emu_check_sp_access(void);
    extern void x86emu_check_mem_access(u32 p);
    extern void x86emu_check_data_access(uint s, uint o);

#ifdef  __cplusplus
}                               /* End of "C" linkage for C++           */
#endif
#endif                          /* __X86EMU_DEBUG_H */
@


1.1
log
@Initial revision
@
text
@d48 2
a49 2
#define CHECK_MEM_ACCESS_F              0x4 /*using regular linear pointer */
#define CHECK_DATA_ACCESS_F             0x8 /*using segment:offset*/
d52 9
a60 9
# define CHECK_IP_FETCH()              	(M.x86.check & CHECK_IP_FETCH_F)
# define CHECK_SP_ACCESS()             	(M.x86.check & CHECK_SP_ACCESS_F)
# define CHECK_MEM_ACCESS()            	(M.x86.check & CHECK_MEM_ACCESS_F)
# define CHECK_DATA_ACCESS()           	(M.x86.check & CHECK_DATA_ACCESS_F)
#else
# define CHECK_IP_FETCH()
# define CHECK_SP_ACCESS()
# define CHECK_MEM_ACCESS()
# define CHECK_DATA_ACCESS()
d64 36
a99 36
# define DEBUG_INSTRUMENT()    	(M.x86.debug & DEBUG_INSTRUMENT_F)
# define DEBUG_DECODE()        	(M.x86.debug & DEBUG_DECODE_F)
# define DEBUG_TRACE()         	(M.x86.debug & DEBUG_TRACE_F)
# define DEBUG_STEP()          	(M.x86.debug & DEBUG_STEP_F)
# define DEBUG_DISASSEMBLE()   	(M.x86.debug & DEBUG_DISASSEMBLE_F)
# define DEBUG_BREAK()         	(M.x86.debug & DEBUG_BREAK_F)
# define DEBUG_SVC()           	(M.x86.debug & DEBUG_SVC_F)
# define DEBUG_SAVE_IP_CS()     (M.x86.debug & DEBUG_SAVE_IP_CS_F)

# define DEBUG_FS()            	(M.x86.debug & DEBUG_FS_F)
# define DEBUG_PROC()          	(M.x86.debug & DEBUG_PROC_F)
# define DEBUG_SYSINT()        	(M.x86.debug & DEBUG_SYSINT_F)
# define DEBUG_TRACECALL()     	(M.x86.debug & DEBUG_TRACECALL_F)
# define DEBUG_TRACECALLREGS() 	(M.x86.debug & DEBUG_TRACECALL_REGS_F)
# define DEBUG_SYS()           	(M.x86.debug & DEBUG_SYS_F)
# define DEBUG_MEM_TRACE()     	(M.x86.debug & DEBUG_MEM_TRACE_F)
# define DEBUG_IO_TRACE()      	(M.x86.debug & DEBUG_IO_TRACE_F)
# define DEBUG_DECODE_NOPRINT() (M.x86.debug & DEBUG_DECODE_NOPRINT_F)
#else
# define DEBUG_INSTRUMENT()    	0
# define DEBUG_DECODE()        	0
# define DEBUG_TRACE()         	0
# define DEBUG_STEP()          	0
# define DEBUG_DISASSEMBLE()   	0
# define DEBUG_BREAK()         	0
# define DEBUG_SVC()           	0
# define DEBUG_SAVE_IP_CS()     0
# define DEBUG_FS()            	0
# define DEBUG_PROC()          	0
# define DEBUG_SYSINT()        	0
# define DEBUG_TRACECALL()     	0
# define DEBUG_TRACECALLREGS() 	0
# define DEBUG_SYS()           	0
# define DEBUG_MEM_TRACE()     	0
# define DEBUG_IO_TRACE()      	0
# define DEBUG_DECODE_NOPRINT() 0
d104 1
a104 1
# define DECODE_PRINTF(x)     	if (DEBUG_DECODE()) \
d106 1
a106 1
# define DECODE_PRINTF2(x,y)  	if (DEBUG_DECODE()) \
d126 4
a129 4
# define INC_DECODED_INST_LEN(x)
# define DECODE_PRINTF(x)
# define DECODE_PRINTF2(x,y)
# define SAVE_IP_CS(x,y)
d140 1
a140 1
# define TRACE_REGS()
d144 1
a144 1
# define SINGLE_STEP()		if (DEBUG_STEP()) x86emu_single_step()
d146 1
a146 1
# define SINGLE_STEP()
d154 3
a156 3
# define START_OF_INSTR()
# define END_OF_INSTR()		EndOfTheInstructionProcedure: x86emu_end_instr();
# define END_OF_INSTR_NO_TRACE()	x86emu_end_instr();
d158 3
a160 3
# define START_OF_INSTR()
# define END_OF_INSTR()
# define END_OF_INSTR_NO_TRACE()
d164 1
a164 1
# define  CALL_TRACE(u,v,w,x,s)                                 \
d169 1
a169 1
# define RETURN_TRACE(n,u,v)                                    \
d175 2
a176 2
# define CALL_TRACE(u,v,w,x,s)
# define RETURN_TRACE(n,u,v)
d188 1
a188 1
extern "C" {            			/* Use "C" linkage when in C++ mode */
d191 14
a204 14
extern void x86emu_inc_decoded_inst_len (int x);
extern void x86emu_decode_printf (char *x);
extern void x86emu_decode_printf2 (char *x, int y);
extern void x86emu_just_disassemble (void);
extern void x86emu_single_step (void);
extern void x86emu_end_instr (void);
extern void x86emu_dump_regs (void);
extern void x86emu_dump_xregs (void);
extern void x86emu_print_int_vect (u16 iv);
extern void x86emu_instrument_instruction (void);
extern void x86emu_check_ip_access (void);
extern void x86emu_check_sp_access (void);
extern void x86emu_check_mem_access (u32 p);
extern void x86emu_check_data_access (uint s, uint o);
d207 1
a207 1
}                       			/* End of "C" linkage for C++   	*/
d209 1
a209 2

#endif /* __X86EMU_DEBUG_H */
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
