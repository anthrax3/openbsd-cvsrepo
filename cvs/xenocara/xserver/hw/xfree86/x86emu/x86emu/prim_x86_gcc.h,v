head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.18
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.16
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.14
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.06.10.13.21.27;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.28;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.10.22.31.30;	author mbalmer;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/****************************************************************************
*
* Inline helpers for x86emu
*
* Copyright (C) 2008 Bart Trojanowski, Symbio Technologies, LLC
*
*  ========================================================================
*
*  Permission to use, copy, modify, distribute, and sell this software and
*  its documentation for any purpose is hereby granted without fee,
*  provided that the above copyright notice appear in all copies and that
*  both that copyright notice and this permission notice appear in
*  supporting documentation, and that the name of the authors not be used
*  in advertising or publicity pertaining to distribution of the software
*  without specific, written prior permission.  The authors makes no
*  representations about the suitability of this software for any purpose.
*  It is provided "as is" without express or implied warranty.
*
*  THE AUTHORS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
*  INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
*  EVENT SHALL THE AUTHORS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
*  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
*  USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
*  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
*  PERFORMANCE OF THIS SOFTWARE.
*
*  ========================================================================
*
* Language:     GNU C
* Environment:  GCC on i386 or x86-64
* Developer:    Bart Trojanowski
*
* Description:  This file defines a few x86 macros that can be used by the
*               emulator to execute native instructions.
*
*               For PIC vs non-PIC code refer to:
*               http://sam.zoy.org/blog/2007-04-13-shlib-with-non-pic-code-have-inline-assembly-and-pic-mix-well
*
****************************************************************************/
#ifndef __X86EMU_PRIM_X86_GCC_H
#define __X86EMU_PRIM_X86_GCC_H

#include "x86emu/types.h"

#if !defined(__GNUC__) || !(defined (__i386__) || defined(__i386) || defined(__AMD64__) || defined(__amd64__))
#error This file is intended to be used by gcc on i386 or x86-64 system
#endif

#if defined(__PIC__) && defined(__i386__)

#define X86EMU_HAS_HW_CPUID 1
static inline void
hw_cpuid(u32 * a, u32 * b, u32 * c, u32 * d)
{
    __asm__ __volatile__("pushl %%ebx      \n\t"
                         "cpuid            \n\t"
                         "movl %%ebx, %1   \n\t"
                         "popl %%ebx       \n\t":"=a"(*a), "=r"(*b),
                         "=c"(*c), "=d"(*d)
                         :"a"(*a), "c"(*c)
                         :"cc");
}

#else                           /* ! (__PIC__ && __i386__) */

#define x86EMU_HAS_HW_CPUID 1
static inline void
hw_cpuid(u32 * a, u32 * b, u32 * c, u32 * d)
{
    __asm__ __volatile__("cpuid":"=a"(*a), "=b"(*b), "=c"(*c), "=d"(*d)
                         :"a"(*a), "c"(*c)
                         :"cc");
}

#endif                          /* __PIC__ && __i386__ */

#endif                          /* __X86EMU_PRIM_X86_GCC_H */
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d52 2
a53 1
static inline void hw_cpuid (u32 *a, u32 *b, u32 *c, u32 *d)
d55 7
a61 8
    __asm__ __volatile__ ("pushl %%ebx      \n\t"
                          "cpuid            \n\t"
                          "movl %%ebx, %1   \n\t"
                          "popl %%ebx       \n\t"
                          : "=a" (*a), "=r" (*b),
                            "=c" (*c), "=d" (*d)
                          : "a" (*a), "c" (*c)
                          : "cc");
d64 1
a64 1
#else /* ! (__PIC__ && __i386__) */
d67 2
a68 1
static inline void hw_cpuid (u32 *a, u32 *b, u32 *c, u32 *d)
d70 3
a72 5
    __asm__ __volatile__ ("cpuid"
                          : "=a" (*a), "=b" (*b),
                            "=c" (*c), "=d" (*d)
                          : "a" (*a), "c" (*c)
                          : "cc");
d75 1
a75 1
#endif /* __PIC__ && __i386__ */
d77 1
a77 2

#endif /* __X86EMU_PRIM_X86_GCC_H */
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d64 1
a64 1
#else // ! (__PIC__ && __i386__)
d76 1
a76 1
#endif // __PIC__ && __i386__
d79 1
a79 1
#endif // __X86EMU_PRIM_X86_GCC_H
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d45 1
a45 1
#if !defined(__GNUC__) || !(defined (__i386__) || defined(__i386) || defined(__AMD64__) || defined(__x86_64__) || defined(__amd64__) || defined(__x86_64__))
@


1.1
log
@Pull in a patch from X.Org-current to let X11 run on AMD Geode LX
CPUs in basic VESA mode:

X86EMU: handle CPUID instruction

Starting X on an AMD Geode LX system such as an Alix board with VGA
connector, the Xorg driver attempts to issue INT 10/0 to go to mode
3 (VGA).  The emulator, running the BIOS code, would then spit out:

	c000:0282: A2 ILLEGAL EXTENDED X86 OPCODE!

The opcode was 0F A2, or CPUID; it was not implemented in the
emulator. With this patch it handles the CPUID instruction in one of
two ways:

1) if ran on __i386__ or __x86_64__ then it calls the CPUID instruction
   directly.

2) if ran elsewhere it returns a canned 486dx4 set of values for function 1.

Tested with & ok matthieu
@
text
@d45 1
a45 1
#if !defined(__GNUC__) || !(defined (__i386__) || defined(__i386) || defined(__AMD64__) || defined(__x86_64__) || defined(__amd64__))
@

