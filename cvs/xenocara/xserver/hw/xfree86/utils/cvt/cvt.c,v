head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.05.29.12.02.38;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	s0SI41sEunLdyFfd;

1.6
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	cVXoV5PxI8YrEaVA;

1.5
date	2014.05.02.19.27.49;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.27;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.52;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.18.30;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.18.30;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 * Copyright 2005-2006 Luc Verhaegen.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/* Standalone VESA CVT standard timing modelines generator. */

#include "xf86.h"
#include "xf86Modes.h"

/* FatalError implementation used by the server code we built in */
void
FatalError(const char *f, ...)
{
    va_list args;

    va_start(args, f);
    vfprintf(stderr, f, args);
    va_end(args);
    exit(1);
}

/* xnfalloc implementation used by the server code we built in */
void *
XNFalloc(unsigned long n)
{
    void *r;

    r = malloc(n);
    if (!r) {
        perror("malloc failed");
        exit(1);
    }
    return r;
}

/* xnfcalloc implementation used by the server code we built in */
void *
XNFcallocarray(size_t nmemb, size_t size)
{
    void *r;

    r = calloc(nmemb, size);
    if (!r) {
        perror("calloc failed");
        exit(1);
    }
    return r;
}

/*
 * Quickly check wether this is a CVT standard mode.
 */
static Bool
CVTCheckStandard(int HDisplay, int VDisplay, float VRefresh, Bool Reduced,
                 Bool Verbose)
{
    Bool IsCVT = TRUE;

    if ((!(VDisplay % 3) && ((VDisplay * 4 / 3) == HDisplay)) ||
        (!(VDisplay % 9) && ((VDisplay * 16 / 9) == HDisplay)) ||
        (!(VDisplay % 10) && ((VDisplay * 16 / 10) == HDisplay)) ||
        (!(VDisplay % 4) && ((VDisplay * 5 / 4) == HDisplay)) ||
        (!(VDisplay % 9) && ((VDisplay * 15 / 9) == HDisplay)));
    else {
        if (Verbose)
            fprintf(stderr, "Warning: Aspect Ratio is not CVT standard.\n");
        IsCVT = FALSE;
    }

    if ((VRefresh != 50.0) && (VRefresh != 60.0) &&
        (VRefresh != 75.0) && (VRefresh != 85.0)) {
        if (Verbose)
            fprintf(stderr, "Warning: Refresh Rate is not CVT standard "
                    "(50, 60, 75 or 85Hz).\n");
        IsCVT = FALSE;
    }

    return IsCVT;
}

/*
 * I'm not documenting --interlaced for obvious reasons, even though I did
 * implement it. I also can't deny having looked at gtf here.
 */
static void
PrintUsage(char *Name)
{
    fprintf(stderr, "\n");
    fprintf(stderr, "usage: %s [-v|--verbose] [-r|--reduced] X Y [refresh]\n",
            Name);
    fprintf(stderr, "\n");
    fprintf(stderr, " -v|--verbose : Warn about CVT standard adherance.\n");
    fprintf(stderr, " -r|--reduced : Create a mode with reduced blanking "
            "(default: normal blanking).\n");
    fprintf(stderr, "            X : Desired horizontal resolution "
            "(multiple of 8, required).\n");
    fprintf(stderr,
            "            Y : Desired vertical resolution (required).\n");
    fprintf(stderr,
            "      refresh : Desired refresh rate (default: 60.0Hz).\n");
    fprintf(stderr, "\n");

    fprintf(stderr, "Calculates VESA CVT (Coordinated Video Timing) modelines"
            " for use with X.\n");
}

/*
 *
 */
static void
PrintComment(DisplayModeRec * Mode, Bool CVT, Bool Reduced)
{
    printf("# %dx%d %.2f Hz ", Mode->HDisplay, Mode->VDisplay, Mode->VRefresh);

    if (CVT) {
        printf("(CVT %.2fM",
               ((float) Mode->HDisplay * Mode->VDisplay) / 1000000.0);

        if (!(Mode->VDisplay % 3) &&
            ((Mode->VDisplay * 4 / 3) == Mode->HDisplay))
            printf("3");
        else if (!(Mode->VDisplay % 9) &&
                 ((Mode->VDisplay * 16 / 9) == Mode->HDisplay))
            printf("9");
        else if (!(Mode->VDisplay % 10) &&
                 ((Mode->VDisplay * 16 / 10) == Mode->HDisplay))
            printf("A");
        else if (!(Mode->VDisplay % 4) &&
                 ((Mode->VDisplay * 5 / 4) == Mode->HDisplay))
            printf("4");
        else if (!(Mode->VDisplay % 9) &&
                 ((Mode->VDisplay * 15 / 9) == Mode->HDisplay))
            printf("9");

        if (Reduced)
            printf("-R");

        printf(") ");
    }
    else
        printf("(CVT) ");

    printf("hsync: %.2f kHz; ", Mode->HSync);
    printf("pclk: %.2f MHz", ((float) Mode->Clock) / 1000.0);

    printf("\n");
}

/*
 * Originally grabbed from xf86Mode.c.
 *
 * Ignoring the actual Mode->name, as the user will want something solid
 * to grab hold of.
 */
static void
PrintModeline(DisplayModePtr Mode, int HDisplay, int VDisplay, float VRefresh,
              Bool Reduced)
{
    if (Reduced)
        printf("Modeline \"%dx%dR\"  ", HDisplay, VDisplay);
    else
        printf("Modeline \"%dx%d_%.2f\"  ", HDisplay, VDisplay, VRefresh);

    printf("%6.2f  %i %i %i %i  %i %i %i %i", Mode->Clock / 1000.,
           Mode->HDisplay, Mode->HSyncStart, Mode->HSyncEnd, Mode->HTotal,
           Mode->VDisplay, Mode->VSyncStart, Mode->VSyncEnd, Mode->VTotal);

    if (Mode->Flags & V_INTERLACE)
        printf(" interlace");
    if (Mode->Flags & V_PHSYNC)
        printf(" +hsync");
    if (Mode->Flags & V_NHSYNC)
        printf(" -hsync");
    if (Mode->Flags & V_PVSYNC)
        printf(" +vsync");
    if (Mode->Flags & V_NVSYNC)
        printf(" -vsync");

    printf("\n");
}

/*
 *
 */
int
main(int argc, char *argv[])
{
    DisplayModeRec *Mode;
    int HDisplay = 0, VDisplay = 0;
    float VRefresh = 0.0;
    Bool Reduced = FALSE, Verbose = FALSE, IsCVT;
    Bool Interlaced = FALSE;
    int n;

    if ((argc < 3) || (argc > 7)) {
        PrintUsage(argv[0]);
        return 1;
    }

    /* This doesn't filter out bad flags properly. Bad flags get passed down
     * to atoi/atof, which then return 0, so that these variables can get
     * filled next time round. So this is just a cosmetic problem.
     */
    for (n = 1; n < argc; n++) {
        if (!strcmp(argv[n], "-r") || !strcmp(argv[n], "--reduced"))
            Reduced = TRUE;
        else if (!strcmp(argv[n], "-i") || !strcmp(argv[n], "--interlaced"))
            Interlaced = TRUE;
        else if (!strcmp(argv[n], "-v") || !strcmp(argv[n], "--verbose"))
            Verbose = TRUE;
        else if (!strcmp(argv[n], "-h") || !strcmp(argv[n], "--help")) {
            PrintUsage(argv[0]);
            return 0;
        }
        else if (!HDisplay) {
            HDisplay = atoi(argv[n]);
            if (!HDisplay) {
                PrintUsage(argv[0]);
                return 1;
            }
        }
        else if (!VDisplay) {
            VDisplay = atoi(argv[n]);
            if (!VDisplay) {
                PrintUsage(argv[0]);
                return 1;
            }
        }
        else if (!VRefresh) {
            VRefresh = atof(argv[n]);
            if (!VRefresh) {
                PrintUsage(argv[0]);
                return 1;
            }
        }
        else {
            PrintUsage(argv[0]);
            return 1;
        }
    }

    if (!HDisplay || !VDisplay) {
        PrintUsage(argv[0]);
        return 0;
    }

    /* Default to 60.0Hz */
    if (!VRefresh)
        VRefresh = 60.0;

    /* Horizontal timing is always a multiple of 8: round up. */
    if (HDisplay & 0x07) {
        HDisplay &= ~0x07;
        HDisplay += 8;
    }

    if (Reduced) {
        if ((VRefresh / 60.0) != floor(VRefresh / 60.0)) {
            fprintf(stderr,
                    "\nERROR: Multiple of 60Hz refresh rate required for "
                    " reduced blanking.\n");
            PrintUsage(argv[0]);
            return 0;
        }
    }

    IsCVT = CVTCheckStandard(HDisplay, VDisplay, VRefresh, Reduced, Verbose);

    Mode = xf86CVTMode(HDisplay, VDisplay, VRefresh, Reduced, Interlaced);

    PrintComment(Mode, IsCVT, Reduced);
    PrintModeline(Mode, HDisplay, VDisplay, VRefresh, Reduced);

    return 0;
}
@


1.6
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d57 1
a57 1
XNFcalloc(unsigned long n)
d61 1
a61 1
    r = calloc(1, n);
@


1.5
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d42 1
a42 1
pointer
d45 1
a45 1
    pointer r;
d56 1
a56 1
pointer
d59 1
a59 1
    pointer r;
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d27 1
@


1.3
log
@Update to xserver 1.11.2
@
text
@a27 7
/* Error implementation used by the server code we built in */
void
Error(const char *str)
{
    perror(str);
}

d33 1
d73 1
a73 1
                     Bool Verbose)
d75 1
a75 1
    Bool  IsCVT = TRUE;
d81 1
a81 2
        (!(VDisplay % 9) && ((VDisplay * 15 / 9) == HDisplay)))
        ;
d87 1
a87 1
    
d95 1
a95 1
    
a98 1

d115 4
a118 2
    fprintf(stderr, "            Y : Desired vertical resolution (required).\n");
    fprintf(stderr, "      refresh : Desired refresh rate (default: 60.0Hz).\n");
d122 1
a122 1
	    " for use with X.\n");
a124 1

d129 1
a129 1
PrintComment(DisplayModeRec *Mode, Bool CVT, Bool Reduced)
d157 2
a158 1
    } else
d162 1
a162 1
    printf("pclk: %.2f MHz", ((float ) Mode->Clock) / 1000.0);
a166 1

d182 3
a184 3
    printf("%6.2f  %i %i %i %i  %i %i %i %i", Mode->Clock/1000., Mode->HDisplay,
           Mode->HSyncStart, Mode->HSyncEnd, Mode->HTotal, Mode->VDisplay,
           Mode->VSyncStart, Mode->VSyncEnd, Mode->VTotal);
a199 1

d204 1
a204 1
main (int argc, char *argv[])
d206 6
a211 6
    DisplayModeRec  *Mode;
    int  HDisplay = 0, VDisplay = 0;
    float  VRefresh = 0.0;
    Bool  Reduced = FALSE, Verbose = FALSE, IsCVT;
    Bool  Interlaced = FALSE;
    int  n;
d232 2
a233 1
        } else if (!HDisplay) {
d235 5
a239 5
	    if (!HDisplay) {
		PrintUsage(argv[0]);
		return 1;
	    }
	}
d242 5
a246 5
	    if (!VDisplay) {
		PrintUsage(argv[0]);
		return 1;
	    }
	}
d249 5
a253 5
	    if (!VRefresh) {
		PrintUsage(argv[0]);
		return 1;
	    }
	}
d276 7
a282 7
	if ((VRefresh / 60.0) != floor(VRefresh / 60.0)) {
	    fprintf(stderr,
		    "\nERROR: Multiple of 60Hz refresh rate required for "
		    " reduced blanking.\n");
	    PrintUsage(argv[0]);
	    return 0;
	}
d291 1
a291 1
    
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d28 18
@


1.1
log
@Initial revision
@
text
@d28 28
d205 1
a205 1
        return 0;
d222 1
a222 1
        } else if (!HDisplay)
d224 6
a229 1
        else if (!VDisplay)
d231 6
a236 1
        else if (!VRefresh)
d238 5
d245 1
a245 1
            return 0;
d264 8
a271 5
    if (Reduced && (VRefresh != 60.0)) {
        fprintf(stderr, "\nERROR: 60Hz refresh rate required for reduced"
                " blanking.\n");
        PrintUsage(argv[0]);
        return 0;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
