head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	Te1daavkBLskZ8gc;

1.4
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.40;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.40;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.57.31;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*******************************************************************************
  for Alpha Linux
*******************************************************************************/

/*
 *   Create a dependency that should be immune from the effect of register
 *   renaming as is commonly seen in superscalar processors.  This should
 *   insert a minimum of 100-ns delays between reads/writes at clock rates
 *   up to 100 MHz---GGL
 *
 *   Slowbcopy(char *src, char *dst, int count)
 *
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/X.h>
#include "xf86.h"
#include "xf86Priv.h"
#include "xf86_OSlib.h"
#include "compiler.h"

static int really_slow_bcopy;

void
xf86SetReallySlowBcopy(void)
{
    really_slow_bcopy = 1;
}

#if defined(__i386__) || defined(__amd64__)
static void
xf86_really_slow_bcopy(unsigned char *src, unsigned char *dst, int len)
{
    while (len--) {
        *dst++ = *src++;
        outb(0x80, 0x00);
    }
}
#endif

/* The outb() isn't needed on my machine, but who knows ... -- ost */
void
xf86SlowBcopy(unsigned char *src, unsigned char *dst, int len)
{
#if defined(__i386__) || defined(__amd64__)
    if (really_slow_bcopy) {
        xf86_really_slow_bcopy(src, dst, len);
        return;
    }
#endif
    while (len--)
        *dst++ = *src++;
}

#ifdef __alpha__

#ifdef linux

unsigned long _bus_base(void);

#define useSparse() (!_bus_base())

#define SPARSE (7)

#else

#define useSparse() 0

#define SPARSE 0

#endif

void
xf86SlowBCopyFromBus(unsigned char *src, unsigned char *dst, int count)
{
    if (useSparse()) {
        unsigned long addr;
        long result;

        addr = (unsigned long) src;
        while (count) {
            result = *(volatile int *) addr;
            result >>= ((addr >> SPARSE) & 3) * 8;
            *dst++ = (unsigned char) (0xffUL & result);
            addr += 1 << SPARSE;
            count--;
            outb(0x80, 0x00);
        }
    }
    else
        xf86SlowBcopy(src, dst, count);
}

void
xf86SlowBCopyToBus(unsigned char *src, unsigned char *dst, int count)
{
    if (useSparse()) {
        unsigned long addr;

        addr = (unsigned long) dst;
        while (count) {
            *(volatile unsigned int *) addr =
                (unsigned short) (*src) * 0x01010101;
            src++;
            addr += 1 << SPARSE;
            count--;
            outb(0x80, 0x00);
        }
    }
    else
        xf86SlowBcopy(src, dst, count);
}
#endif
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d5 1
a5 1
/* 
d10 3
a12 3
 *   
 *   Slowbcopy(char *src, char *dst, int count)   
 *   
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d4 1
a4 1
 
d13 1
a13 1
 */ 
d30 1
a30 1
	really_slow_bcopy = 1;
d34 2
a35 1
static void xf86_really_slow_bcopy(unsigned char *src, unsigned char *dst, int len)
d37 3
a39 4
    while(len--)
    {
	*dst++ = *src++;
	outb(0x80, 0x00);
d50 2
a51 2
	xf86_really_slow_bcopy(src, dst, len);
	return;
d54 2
a55 2
    while(len--)
	*dst++ = *src++;
d79 16
a94 17
	if (useSparse())
	{
		unsigned long addr;
		long result;

		addr = (unsigned long) src;
		while (count) {
			result = *(volatile int *) addr;
			result >>= ((addr>>SPARSE) & 3) * 8;
			*dst++ = (unsigned char) (0xffUL & result);
			addr += 1<<SPARSE;
			count--;
			outb(0x80, 0x00);
		}
	}
	else
		xf86SlowBcopy(src, dst, count);
d100 15
a114 15
	if (useSparse())
	{
		unsigned long addr;

		addr = (unsigned long) dst;
		while (count) {
			*(volatile unsigned int *) addr = (unsigned short)(*src) * 0x01010101;
			src++;
			addr += 1<<SPARSE;
			count--;
			outb(0x80, 0x00);
		}
	}
	else
		xf86SlowBcopy(src, dst, count);
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d27 1
a27 1
_X_EXPORT void
d45 1
a45 1
_X_EXPORT void
d62 4
d70 2
d76 1
a76 1
_X_EXPORT void
d79 18
a96 2
    unsigned long addr;
    long result;
d98 1
a98 12
    addr = (unsigned long) src;
    while( count ){
	result = *(volatile int *) addr;
	result >>= ((addr>>SPARSE) & 3) * 8;
	*dst++ = (unsigned char) (0xffUL & result);
	addr += 1<<SPARSE;
	count--;
	outb(0x80, 0x00);
    }
}
  
_X_EXPORT void
d101 15
a115 10
    unsigned long addr;

    addr = (unsigned long) dst;
    while(count) {
	*(volatile unsigned int *) addr = (unsigned short)(*src) * 0x01010101;
	src++;
	addr += 1<<SPARSE;
	count--;
	outb(0x80, 0x00);
    }
@


1.1
log
@Initial revision
@
text
@a0 2

/* $XConsortium: SlowBcopy.c /main/1 1996/05/07 17:14:10 kaleb $ */
a3 1

d25 2
a26 1
/* The outb() isn't needed on my machine, but who knows ... -- ost */
d28 7
a34 1
xf86SlowBcopy(unsigned char *src, unsigned char *dst, int len)
a38 4
#if !defined(__sparc__) && \
    !defined(__powerpc__) && \
    !defined(__mips__) && \
    !defined(__ia64__)
d40 2
d43 9
d53 3
a58 7
/*
 * The Jensen lacks dense memory, thus we have to address the bus via
 * the sparse addressing scheme. Time critical code uses routines from
 * BUSmemcpy.c
 *
 * Martin Ostermann (ost@@comnets.rwth-aachen.de) - Apr.-Sep. 1996
 */
a61 5
unsigned long _bus_base(void);

#ifdef TEST_JENSEN_CODE /* define to test the Sparse addressing on a non-Jensen */
#define SPARSE (5)
#else
a62 3
#endif

#define isJensen() (!_bus_base())
a65 1
#define isJensen() 0
d73 2
a74 4
    if (isJensen())
    {
	unsigned long addr;
	long result;
d76 8
a83 9
	addr = (unsigned long) src;
	while( count ){
	    result = *(volatile int *) addr;
	    result >>= ((addr>>SPARSE) & 3) * 8;
	    *dst++ = (unsigned char) (0xffUL & result);
	    addr += 1<<SPARSE;
	    count--;
	    outb(0x80, 0x00);
	}
a84 2
    else
	xf86SlowBcopy(src,dst,count);
d90 1
a90 3
    if (isJensen())
    {
	unsigned long addr;
d92 7
a98 8
	addr = (unsigned long) dst;
	while(count) {
	    *(volatile unsigned int *) addr = (unsigned short)(*src) * 0x01010101;
	    src++;
	    addr += 1<<SPARSE;
	    count--;
	    outb(0x80, 0x00);
	}
a99 2
    else
	xf86SlowBcopy(src,dst,count);    
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 2
d6 1
d28 1
a28 2
static int really_slow_bcopy;

d30 1
a30 7
xf86SetReallySlowBcopy(void)
{
	really_slow_bcopy = 1;
}

#if defined(__i386__) || defined(__x86_64__)
static void xf86_really_slow_bcopy(unsigned char *src, unsigned char *dst, int len)
d35 4
a39 2
    }
}
a40 9

/* The outb() isn't needed on my machine, but who knows ... -- ost */
_X_EXPORT void
xf86SlowBcopy(unsigned char *src, unsigned char *dst, int len)
{
#if defined(__i386__) || defined(__x86_64__)
    if (really_slow_bcopy) {
	xf86_really_slow_bcopy(src, dst, len);
	return;
a41 3
#endif
    while(len--)
	*dst++ = *src++;
@

