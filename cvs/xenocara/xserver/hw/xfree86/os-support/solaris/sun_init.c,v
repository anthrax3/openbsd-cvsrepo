head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.8
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.6
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	Te1daavkBLskZ8gc;

1.8
date	2014.09.27.17.53.02;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	cVXoV5PxI8YrEaVA;

1.7
date	2013.08.24.19.44.43;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.05.13.32.52;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.27;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.42;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.42;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.57.33;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright 1990,91 by Thomas Roell, Dinkelscherben, Germany
 * Copyright 1993 by David Wexelblat <dwex@@goblin.org>
 * Copyright 1999 by David Holland <davidh@@iquest.net>
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that copyright
 * notice and this permission notice appear in supporting documentation, and
 * that the names of the copyright holders not be used in advertising or
 * publicity pertaining to distribution of the software without specific,
 * written prior permission.  The copyright holders make no representations
 * about the suitability of this software for any purpose.  It is provided "as
 * is" without express or implied warranty.
 *
 * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, AND IN NO
 * EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
 * OF THIS SOFTWARE.
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "xf86.h"
#include "xf86Priv.h"
#include "xf86_OSlib.h"
#ifdef HAVE_SYS_KD_H
#include <sys/kd.h>
#endif

/*
 * Applications see VT number as consecutive integers starting from 1.
 * VT number			VT device
 * -------------------------------------------------------
 *     1             :          /dev/vt/0 (Alt + Ctrl + F1)
 *     2             :          /dev/vt/2 (Alt + Ctrl + F2)
 *     3             :          /dev/vt/3 (Alt + Ctrl + F3)
 *  ... ...
 */
#define	CONSOLE_VTNO	1
#define	SOL_CONSOLE_DEV	"/dev/console"

static Bool KeepTty = FALSE;
static Bool UseConsole = FALSE;

#ifdef HAS_USL_VTS
static int VTnum = -1;
static int xf86StartVT = -1;
static int vtEnabled = 0;
#endif

/* Device to open as xf86Info.consoleFd */
static char consoleDev[PATH_MAX] = "/dev/fb";

/* Set by -dev argument on CLI
   Used by hw/xfree86/common/xf86AutoConfig.c for VIS_GETIDENTIFIER */
_X_HIDDEN char xf86SolarisFbDev[PATH_MAX] = "/dev/fb";

static void
switch_to(int vt, const char *from)
{
    int ret;

    SYSCALL(ret = ioctl(xf86Info.consoleFd, VT_ACTIVATE, vt));
    if (ret != 0)
        xf86Msg(X_WARNING, "%s: VT_ACTIVATE failed: %s\n",
                from, strerror(errno));

    SYSCALL(ret = ioctl(xf86Info.consoleFd, VT_WAITACTIVE, vt));
    if (ret != 0)
        xf86Msg(X_WARNING, "%s: VT_WAITACTIVE failed: %s\n",
                from, strerror(errno));
}

void
xf86OpenConsole(void)
{
    int i;

#ifdef HAS_USL_VTS
    int fd;
    struct vt_mode VT;
    struct vt_stat vtinfo;
    MessageType from = X_PROBED;
#endif

    if (serverGeneration == 1) {
        /* Check if we're run with euid==0 */
        if (geteuid() != 0)
            FatalError("xf86OpenConsole: Server must be suid root\n");

#ifdef HAS_USL_VTS

        /*
         * Setup the virtual terminal manager
         */
        if ((fd = open("/dev/vt/0", O_RDWR, 0)) == -1) {
            xf86ErrorF("xf86OpenConsole: Cannot open /dev/vt/0 (%s)\n",
                       strerror(errno));
            vtEnabled = 0;
        }
        else {
            if (ioctl(fd, VT_ENABLED, &vtEnabled) < 0) {
                xf86ErrorF("xf86OpenConsole: VT_ENABLED failed (%s)\n",
                           strerror(errno));
                vtEnabled = 0;
            }
        }
#endif                          /*  HAS_USL_VTS */

        if (UseConsole) {
            strlcpy(consoleDev, SOL_CONSOLE_DEV, sizeof(consoleDev));

#ifdef HAS_USL_VTS
            xf86Info.vtno = CONSOLE_VTNO;

            if (vtEnabled == 0) {
                xf86StartVT = 0;
            }
            else {
                if (ioctl(fd, VT_GETSTATE, &vtinfo) < 0)
                    FatalError
                        ("xf86OpenConsole: Cannot determine current VT\n");
                xf86StartVT = vtinfo.v_active;
            }
#endif                          /*  HAS_USL_VTS */
            goto OPENCONSOLE;
        }

#ifdef HAS_USL_VTS
        if (vtEnabled == 0) {
            /* VT not enabled - kernel too old or Sparc platforms
               without visual_io support */
            xf86Msg(from, "VT infrastructure is not available\n");

            xf86StartVT = 0;
            xf86Info.vtno = 0;
            strlcpy(consoleDev, xf86SolarisFbDev, sizeof(consoleDev));
            goto OPENCONSOLE;
        }

        if (ioctl(fd, VT_GETSTATE, &vtinfo) < 0)
            FatalError("xf86OpenConsole: Cannot determine current VT\n");

        xf86StartVT = vtinfo.v_active;

        if (VTnum != -1) {
            xf86Info.vtno = VTnum;
            from = X_CMDLINE;
        }
        else if (xf86Info.ShareVTs) {
            xf86Info.vtno = vtinfo.v_active;
            from = X_CMDLINE;
        }
        else {
            if ((ioctl(fd, VT_OPENQRY, &xf86Info.vtno) < 0) ||
                (xf86Info.vtno == -1)) {
                FatalError("xf86OpenConsole: Cannot find a free VT\n");
            }
        }

        xf86Msg(from, "using VT number %d\n\n", xf86Info.vtno);
        snprintf(consoleDev, PATH_MAX, "/dev/vt/%d", xf86Info.vtno);

        if (fd != -1) {
            close(fd);
        }

#endif                          /* HAS_USL_VTS */

 OPENCONSOLE:
        if (!KeepTty)
            setpgrp();

        if (((xf86Info.consoleFd = open(consoleDev, O_RDWR | O_NDELAY, 0)) < 0))
            FatalError("xf86OpenConsole: Cannot open %s (%s)\n",
                       consoleDev, strerror(errno));

        /* Change ownership of the vt or console */
        chown(consoleDev, getuid(), getgid());

#ifdef HAS_USL_VTS
        if (xf86Info.ShareVTs)
            return;

        if (vtEnabled) {
            /*
             * Now get the VT
             */
            switch_to(xf86Info.vtno, "xf86OpenConsole");

#ifdef VT_SET_CONSUSER          /* added in snv_139 */
            if (strcmp(display, "0") == 0)
                if (ioctl(xf86Info.consoleFd, VT_SET_CONSUSER) != 0)
                    xf86Msg(X_WARNING,
                            "xf86OpenConsole: VT_SET_CONSUSER failed\n");
#endif

            if (ioctl(xf86Info.consoleFd, VT_GETMODE, &VT) < 0)
                FatalError("xf86OpenConsole: VT_GETMODE failed\n");

            OsSignal(SIGUSR1, xf86VTAcquire);
            OsSignal(SIGUSR2, xf86VTRelease);

            VT.mode = VT_PROCESS;
            VT.acqsig = SIGUSR1;
            VT.relsig = SIGUSR2;

            if (ioctl(xf86Info.consoleFd, VT_SETMODE, &VT) < 0)
                FatalError("xf86OpenConsole: VT_SETMODE VT_PROCESS failed\n");

            if (ioctl(xf86Info.consoleFd, VT_SETDISPINFO, atoi(display)) < 0)
                xf86Msg(X_WARNING, "xf86OpenConsole: VT_SETDISPINFO failed\n");
        }
#endif

#ifdef KDSETMODE
        SYSCALL(i = ioctl(xf86Info.consoleFd, KDSETMODE, KD_GRAPHICS));
        if (i < 0) {
            xf86Msg(X_WARNING,
                    "xf86OpenConsole: KDSETMODE KD_GRAPHICS failed on %s (%s)\n",
                    consoleDev, strerror(errno));
        }
#endif
    }
    else {                      /* serverGeneration != 1 */

#ifdef HAS_USL_VTS
        if (vtEnabled && !xf86Info.ShareVTs) {
            /*
             * Now re-get the VT
             */
            if (xf86Info.autoVTSwitch)
                switch_to(xf86Info.vtno, "xf86OpenConsole");

#ifdef VT_SET_CONSUSER          /* added in snv_139 */
            if (strcmp(display, "0") == 0)
                if (ioctl(xf86Info.consoleFd, VT_SET_CONSUSER) != 0)
                    xf86Msg(X_WARNING,
                            "xf86OpenConsole: VT_SET_CONSUSER failed\n");
#endif

            /*
             * If the server doesn't have the VT when the reset occurs,
             * this is to make sure we don't continue until the activate
             * signal is received.
             */
            if (!xf86VTOwner())
                sleep(5);
        }
#endif                          /* HAS_USL_VTS */

    }
}

void
xf86CloseConsole(void)
{
#ifdef HAS_USL_VTS
    struct vt_mode VT;
#endif

#if !defined(__i386__) && !defined(__i386) && !defined(__x86)

    if (!xf86DoConfigure) {
        int fd;

        /*
         * Wipe out framebuffer just like the non-SI Xsun server does.  This
         * could be improved by saving framebuffer contents in
         * xf86OpenConsole() above and restoring them here.  Also, it's unclear
         * at this point whether this should be done for all framebuffers in
         * the system, rather than only the console.
         */
        if ((fd = open(xf86SolarisFbDev, O_RDWR, 0)) < 0) {
            xf86Msg(X_WARNING,
                    "xf86CloseConsole():  unable to open framebuffer (%s)\n",
                    strerror(errno));
        }
        else {
            struct fbgattr fbattr;

            if ((ioctl(fd, FBIOGATTR, &fbattr) < 0) &&
                (ioctl(fd, FBIOGTYPE, &fbattr.fbtype) < 0)) {
                xf86Msg(X_WARNING,
                        "xf86CloseConsole():  unable to retrieve framebuffer"
                        " attributes (%s)\n", strerror(errno));
            }
            else {
                void *fbdata;

                fbdata = mmap(NULL, fbattr.fbtype.fb_size,
                              PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
                if (fbdata == MAP_FAILED) {
                    xf86Msg(X_WARNING,
                            "xf86CloseConsole():  unable to mmap framebuffer"
                            " (%s)\n", strerror(errno));
                }
                else {
                    memset(fbdata, 0, fbattr.fbtype.fb_size);
                    munmap(fbdata, fbattr.fbtype.fb_size);
                }
            }

            close(fd);
        }
    }

#endif

#ifdef KDSETMODE
    /* Reset the display back to text mode */
    SYSCALL(ioctl(xf86Info.consoleFd, KDSETMODE, KD_TEXT));
#endif

#ifdef HAS_USL_VTS
    if (vtEnabled) {
        if (ioctl(xf86Info.consoleFd, VT_GETMODE, &VT) != -1) {
            VT.mode = VT_AUTO;  /* Set default vt handling */
            ioctl(xf86Info.consoleFd, VT_SETMODE, &VT);
        }

        /* Activate the VT that X was started on */
        if (xf86Info.autoVTSwitch)
            switch_to(xf86StartVT, "xf86CloseConsole");
    }
#endif                          /* HAS_USL_VTS */

    close(xf86Info.consoleFd);
}

int
xf86ProcessArgument(int argc, char **argv, int i)
{
    /*
     * Keep server from detaching from controlling tty.  This is useful when
     * debugging, so the server can receive keyboard signals.
     */
    if (!strcmp(argv[i], "-keeptty")) {
        KeepTty = TRUE;
        return 1;
    }

    /*
     * Use /dev/console as the console device.
     */
    if (!strcmp(argv[i], "-C")) {
        UseConsole = TRUE;
        return 1;
    }

#ifdef HAS_USL_VTS

    if ((argv[i][0] == 'v') && (argv[i][1] == 't')) {
        if (sscanf(argv[i], "vt%d", &VTnum) == 0) {
            UseMsg();
            VTnum = -1;
            return 0;
        }

        return 1;
    }

#endif                          /* HAS_USL_VTS */

    if ((i + 1) < argc) {
        if (!strcmp(argv[i], "-dev")) {
            strlcpy(xf86SolarisFbDev, argv[i + 1], sizeof(xf86SolarisFbDev));
            return 2;
        }
    }

    return 0;
}

void
xf86UseMsg(void)
{
#ifdef HAS_USL_VTS
    ErrorF("vtX                    Use the specified VT number\n");
#endif
    ErrorF("-dev <fb>              Framebuffer device\n");
    ErrorF("-keeptty               Don't detach controlling tty\n");
    ErrorF("                       (for debugging only)\n");
    ErrorF("-C                     Use /dev/console as the console device\n");
}
@


1.8
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@a48 1
static Bool Protect0 = FALSE;
a54 2
extern void xf86VTAcquire(int);
extern void xf86VTRelease(int);
a96 21
        /* Protect page 0 to help find NULL dereferencing */
        /* mprotect() doesn't seem to work */
        if (Protect0) {
            int fd = -1;

            if ((fd = open("/dev/zero", O_RDONLY, 0)) < 0) {
                xf86Msg(X_WARNING,
                        "xf86OpenConsole: cannot open /dev/zero (%s)\n",
                        strerror(errno));
            }
            else {
                if (mmap(0, 0x1000, PROT_NONE,
                         MAP_FIXED | MAP_SHARED, fd, 0) == MAP_FAILED)
                    xf86Msg(X_WARNING,
                            "xf86OpenConsole: failed to protect page 0 (%s)\n",
                            strerror(errno));

                close(fd);
            }
        }

a345 9
        return 1;
    }

    /*
     * Undocumented flag to protect page 0 from read/write to help catch NULL
     * pointer dereferences.  This is purely a debugging flag.
     */
    if (!strcmp(argv[i], "-protect0")) {
        Protect0 = TRUE;
@


1.7
log
@Uodate to xserver 1.14.2. Tested by krw@@, shadchin@@, todd@@
@
text
@d319 1
a319 1
                pointer fbdata;
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d277 1
a277 1
            if (!xf86Screens[0]->vtSema)
@


1.5
log
@Update to xserver 1.11.2
@
text
@d33 1
a33 1
# include <sys/kd.h>
d51 1
d67 16
d87 1
d95 25
a119 29
    if (serverGeneration == 1)
    {
	/* Check if we're run with euid==0 */
	if (geteuid() != 0)
	    FatalError("xf86OpenConsole: Server must be suid root\n");

	/* Protect page 0 to help find NULL dereferencing */
	/* mprotect() doesn't seem to work */
	if (Protect0)
	{
	    int fd = -1;

	    if ((fd = open("/dev/zero", O_RDONLY, 0)) < 0)
	    {
		xf86Msg(X_WARNING,
			"xf86OpenConsole: cannot open /dev/zero (%s)\n",
			strerror(errno));
	    }
	    else
	    {
		if (mmap(0, 0x1000, PROT_NONE,
			 MAP_FIXED | MAP_SHARED, fd, 0) == MAP_FAILED)
		    xf86Msg(X_WARNING,
			"xf86OpenConsole: failed to protect page 0 (%s)\n",
			strerror(errno));

		close(fd);
	    }
	}
d123 19
a141 23
	/*
	 * Setup the virtual terminal manager
	 */
	if ((fd = open("/dev/vt/0",O_RDWR,0)) == -1)
	{
	    xf86ErrorF("xf86OpenConsole: Cannot open /dev/vt/0 (%s)\n",
		       strerror(errno));
	    vtEnabled = 0;
	}
	else
	{
	    if (ioctl(fd, VT_ENABLED, &vtEnabled) < 0)
	    {
		xf86ErrorF("xf86OpenConsole: VT_ENABLED failed (%s)\n",
			   strerror(errno));
		vtEnabled = 0;
	    }
	}
#endif /*  HAS_USL_VTS */

	if (UseConsole)
	{
	    strlcpy(consoleDev, SOL_CONSOLE_DEV, sizeof(consoleDev));
d144 1
a144 1
	    xf86Info.vtno = CONSOLE_VTNO;
d146 12
a157 13
	    if (vtEnabled == 0)
	    {
		xf86StartVT = 0;
	    }
	    else
	    {
		if (ioctl(fd, VT_GETSTATE, &vtinfo) < 0)
		    FatalError("xf86OpenConsole: Cannot determine current VT\n");
		xf86StartVT = vtinfo.v_active;
	    }
#endif /*  HAS_USL_VTS */
	    goto OPENCONSOLE;
	}
d160 47
a206 48
	if (vtEnabled == 0)
	{
	    /* VT not enabled - kernel too old or Sparc platforms
	       without visual_io support */
	    xf86Msg(from, "VT infrastructure is not available\n");

	    xf86StartVT = 0;
	    xf86Info.vtno = 0;
	    strlcpy(consoleDev, xf86SolarisFbDev, sizeof(consoleDev));
	    goto OPENCONSOLE;
	}

	if (ioctl(fd, VT_GETSTATE, &vtinfo) < 0)
	    FatalError("xf86OpenConsole: Cannot determine current VT\n");

	xf86StartVT = vtinfo.v_active;

	if (VTnum != -1)
	{
	    xf86Info.vtno = VTnum;
	    from = X_CMDLINE;
	}
	else
	{
	    if ((ioctl(fd, VT_OPENQRY, &xf86Info.vtno) < 0) ||
		(xf86Info.vtno == -1))
	    {
		FatalError("xf86OpenConsole: Cannot find a free VT\n");
	    }
	}

	xf86Msg(from, "using VT number %d\n\n", xf86Info.vtno);
	snprintf(consoleDev, PATH_MAX, "/dev/vt/%d", xf86Info.vtno);

	if (fd != -1)
	{
	    close(fd);
	}

#endif /* HAS_USL_VTS */

OPENCONSOLE:
	if (!KeepTty)
	    setpgrp();

	if (((xf86Info.consoleFd = open(consoleDev, O_RDWR | O_NDELAY, 0)) < 0))
	    FatalError("xf86OpenConsole: Cannot open %s (%s)\n",
		       consoleDev, strerror(errno));
d208 2
a209 2
	/* Change ownership of the vt or console */
	chown(consoleDev, getuid(), getgid());
d212 14
a225 16
	if (vtEnabled)
	{
	    /*
	     * Now get the VT
	     */
	    if (ioctl(xf86Info.consoleFd, VT_ACTIVATE, xf86Info.vtno) != 0)
		xf86Msg(X_WARNING, "xf86OpenConsole: VT_ACTIVATE failed\n");

	    if (ioctl(xf86Info.consoleFd, VT_WAITACTIVE, xf86Info.vtno) != 0)
		xf86Msg(X_WARNING, "xf86OpenConsole: VT_WAITACTIVE failed\n");

#ifdef VT_SET_CONSUSER /* added in snv_139 */
	    if (strcmp(display, "0") == 0)
		if (ioctl(xf86Info.consoleFd, VT_SET_CONSUSER) != 0)
		    xf86Msg(X_WARNING,
			"xf86OpenConsole: VT_SET_CONSUSER failed\n");
d228 2
a229 2
	    if (ioctl(xf86Info.consoleFd, VT_GETMODE, &VT) < 0)
		FatalError("xf86OpenConsole: VT_GETMODE failed\n");
d231 2
a232 2
	    OsSignal(SIGUSR1, xf86VTAcquire);
	    OsSignal(SIGUSR2, xf86VTRelease);
d234 10
a243 10
	    VT.mode = VT_PROCESS;
	    VT.acqsig = SIGUSR1;
	    VT.relsig = SIGUSR2;

	    if (ioctl(xf86Info.consoleFd, VT_SETMODE, &VT) < 0)
		FatalError("xf86OpenConsole: VT_SETMODE VT_PROCESS failed\n");

	    if (ioctl(xf86Info.consoleFd, VT_SETDISPINFO, atoi(display)) < 0)
		xf86Msg(X_WARNING, "xf86OpenConsole: VT_SETDISPINFO failed\n");
	}
d247 6
a252 6
	SYSCALL(i = ioctl(xf86Info.consoleFd, KDSETMODE, KD_GRAPHICS));
	if (i < 0) {
	    xf86Msg(X_WARNING,
		    "xf86OpenConsole: KDSETMODE KD_GRAPHICS failed on %s (%s)\n",
		    consoleDev, strerror(errno));
	}
d255 2
a256 2
    else /* serverGeneration != 1 */
    {
d258 12
a269 16
	if (vtEnabled)
	{
	    /*
	     * Now re-get the VT
	     */
	    if (ioctl(xf86Info.consoleFd, VT_ACTIVATE, xf86Info.vtno) != 0)
		xf86Msg(X_WARNING, "xf86OpenConsole: VT_ACTIVATE failed\n");

	    if (ioctl(xf86Info.consoleFd, VT_WAITACTIVE, xf86Info.vtno) != 0)
		xf86Msg(X_WARNING, "xf86OpenConsole: VT_WAITACTIVE failed\n");

#ifdef VT_SET_CONSUSER /* added in snv_139 */
	    if (strcmp(display, "0") == 0)
		if (ioctl(xf86Info.consoleFd, VT_SET_CONSUSER) != 0)
		    xf86Msg(X_WARNING,
			"xf86OpenConsole: VT_SET_CONSUSER failed\n");
d272 9
a280 9
	    /*
	     * If the server doesn't have the VT when the reset occurs,
	     * this is to make sure we don't continue until the activate
	     * signal is received.
	     */
	    if (!xf86Screens[0]->vtSema)
		sleep(5);
	}
#endif /* HAS_USL_VTS */
d295 1
a295 1
	int fd;
d297 36
a332 33
	/*
	 * Wipe out framebuffer just like the non-SI Xsun server does.  This
	 * could be improved by saving framebuffer contents in
	 * xf86OpenConsole() above and restoring them here.  Also, it's unclear
	 * at this point whether this should be done for all framebuffers in
	 * the system, rather than only the console.
	 */
	if ((fd = open(xf86SolarisFbDev, O_RDWR, 0)) < 0) {
	    xf86Msg(X_WARNING,
		    "xf86CloseConsole():  unable to open framebuffer (%s)\n",
		    strerror(errno));
	} else {
	    struct fbgattr fbattr;

	    if ((ioctl(fd, FBIOGATTR, &fbattr) < 0) &&
		(ioctl(fd, FBIOGTYPE, &fbattr.fbtype) < 0)) {
		xf86Msg(X_WARNING,
			"xf86CloseConsole():  unable to retrieve framebuffer"
			" attributes (%s)\n", strerror(errno));
	    } else {
		pointer fbdata;

		fbdata = mmap(NULL, fbattr.fbtype.fb_size,
			      PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
		if (fbdata == MAP_FAILED) {
		    xf86Msg(X_WARNING,
			    "xf86CloseConsole():  unable to mmap framebuffer"
			    " (%s)\n", strerror(errno));
		} else {
		    memset(fbdata, 0, fbattr.fbtype.fb_size);
		    munmap(fbdata, fbattr.fbtype.fb_size);
		}
	    }
d334 2
a335 2
	    close(fd);
	}
d346 9
a354 10
    if (vtEnabled)
    {
	if (ioctl(xf86Info.consoleFd, VT_GETMODE, &VT) != -1)
	{
	    VT.mode = VT_AUTO;		/* Set default vt handling */
	    ioctl(xf86Info.consoleFd, VT_SETMODE, &VT);
	}

	/* Activate the VT that X was started on */
	ioctl(xf86Info.consoleFd, VT_ACTIVATE, xf86StartVT);
d356 1
a356 1
#endif /* HAS_USL_VTS */
d368 3
a370 4
    if (!strcmp(argv[i], "-keeptty"))
    {
	KeepTty = TRUE;
	return 1;
d377 3
a379 4
    if (!strcmp(argv[i], "-protect0"))
    {
	Protect0 = TRUE;
	return 1;
d385 3
a387 4
    if (!strcmp(argv[i], "-C"))
    {
	UseConsole = TRUE;
	return 1;
d392 6
a397 8
    if ((argv[i][0] == 'v') && (argv[i][1] == 't'))
    {
	if (sscanf(argv[i], "vt%d", &VTnum) == 0)
	{
	    UseMsg();
	    VTnum = -1;
	    return 0;
	}
d399 1
a399 1
	return 1;
d402 1
a402 1
#endif /* HAS_USL_VTS */
d405 4
a408 4
	if (!strcmp(argv[i], "-dev")) {
	    strlcpy(xf86SolarisFbDev, argv[i+1], sizeof(xf86SolarisFbDev));
	    return 2;
	}
d414 2
a415 1
void xf86UseMsg(void)
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a73 1
    int FreeVTslot;
d97 2
a98 2
		if ((int)mmap(0, 0x1000, PROT_NONE,
			      MAP_FIXED | MAP_SHARED, fd, 0) == -1)
d415 1
a415 1
void xf86UseMsg()
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d36 12
d50 1
d54 3
d59 6
a64 5
#if defined(__SOL8__) || (!defined(__i386__) && !defined(__i386))
static char fb_dev[PATH_MAX] = "/dev/fb";
#else
static char fb_dev[PATH_MAX] = "/dev/console";
#endif
d113 1
a113 1
	if (VTnum != -1)
d115 3
a117 2
	    xf86Info.vtno = VTnum;
	    from = X_CMDLINE;
d121 15
a135 3
	    if ((fd = open("/dev/vt00",O_RDWR,0)) < 0)
		FatalError("xf86OpenConsole: Cannot open /dev/vt00 (%s)\n",
		    strerror(errno));
d137 13
a149 2
	    if (ioctl(fd, VT_GETSTATE, &vtinfo) < 0)
		FatalError("xf86OpenConsole: Cannot determine current VT\n");
d151 12
a162 1
	    xf86StartVT = vtinfo.v_active;
d164 2
a165 12
	    /*
	     * There is a SEVERE problem with x86's VT's.  The VT_OPENQRY
	     * ioctl() will panic the entire system if all 8 (7 VT's+Console)
	     * terminals are used.  The only other way I've found to determine
	     * if there is a free VT is to try activating all the the available
	     * VT's and see if they all succeed - if they do, there there is no
	     * free VT, and the Xserver cannot continue without panic'ing the
	     * system.  (It's ugly, but it seems to work.)  Note there is a
	     * possible race condition here.
	     *
	     * David Holland 2/23/94
	     */
d167 1
a167 4
	    FreeVTslot = 0;
	    for (i = 7; (i >= 0) && !FreeVTslot; i--)
		if (ioctl(fd, VT_ACTIVATE, i) != 0)
		    FreeVTslot = 1;
d169 8
a176 2
	    if (!FreeVTslot ||
	        (ioctl(fd, VT_OPENQRY, &xf86Info.vtno) < 0) ||
d178 1
d180 1
a180 2

	    close(fd);
d184 1
d186 4
a189 1
	sprintf(fb_dev, "/dev/vt%02d", xf86Info.vtno); /* Solaris 2.1 x86 */
d193 1
d197 1
a197 1
	if (((xf86Info.consoleFd = open(fb_dev, O_RDWR | O_NDELAY, 0)) < 0))
d199 4
a202 1
		       fb_dev, strerror(errno));
d205 7
d213 2
a214 2
	/* Change ownership of the vt */
	chown(fb_dev, getuid(), getgid());
d216 6
a221 5
	/*
	 * Now get the VT
	 */
	if (ioctl(xf86Info.consoleFd, VT_ACTIVATE, xf86Info.vtno) != 0)
	    xf86Msg(X_WARNING, "xf86OpenConsole: VT_ACTIVATE failed\n");
d223 2
a224 2
	if (ioctl(xf86Info.consoleFd, VT_WAITACTIVE, xf86Info.vtno) != 0)
	    xf86Msg(X_WARNING, "xf86OpenConsole: VT_WAITACTIVE failed\n");
d226 2
a227 2
	if (ioctl(xf86Info.consoleFd, VT_GETMODE, &VT) < 0)
	    FatalError("xf86OpenConsole: VT_GETMODE failed\n");
d229 3
a231 1
	signal(SIGUSR1, xf86VTRequest);
d233 2
a234 3
	VT.mode = VT_PROCESS;
	VT.relsig = SIGUSR1;
	VT.acqsig = SIGUSR1;
d236 3
a238 2
	if (ioctl(xf86Info.consoleFd, VT_SETMODE, &VT) < 0)
	    FatalError("xf86OpenConsole: VT_SETMODE VT_PROCESS failed\n");
d246 1
a246 1
		    fb_dev, strerror(errno));
d253 7
a259 5
	/*
	 * Now re-get the VT
	 */
	if (ioctl(xf86Info.consoleFd, VT_ACTIVATE, xf86Info.vtno) != 0)
	    xf86Msg(X_WARNING, "xf86OpenConsole: VT_ACTIVATE failed\n");
d261 2
a262 2
	if (ioctl(xf86Info.consoleFd, VT_WAITACTIVE, xf86Info.vtno) != 0)
	    xf86Msg(X_WARNING, "xf86OpenConsole: VT_WAITACTIVE failed\n");
d264 6
a269 7
	/*
	 * If the server doesn't have the VT when the reset occurs,
	 * this is to make sure we don't continue until the activate
	 * signal is received.
	 */
	if (!xf86Screens[0]->vtSema)
	    sleep(5);
d271 8
d293 1
a293 1
    if (!xf86DoProbe && !xf86DoConfigure) {
d303 1
a303 1
	if ((fd = open("/dev/fb", O_RDWR, 0)) < 0) {
d342 7
d350 2
a351 18
    /*
     * Solaris 2.1 x86 doesn't seem to "switch" back to the console when the VT
     * is relinquished and its mode is reset to auto.  Also, Solaris 2.1 seems
     * to associate vt00 with the console so I've opened the "console" back up
     * and made it the active vt again in text mode and then closed it.  There
     * must be a better hack for this but I'm not aware of one at this time.
     *
     * Doug Anson 11/6/93
     * danson@@lgc.com
     *
     * Fixed - 12/5/93 - David Holland - davidh@@dorite.use.com
     * Did the whole thing similarly to the way linux does it
     */

    if (ioctl(xf86Info.consoleFd, VT_GETMODE, &VT) != -1)
    {
	VT.mode = VT_AUTO;		/* Set default vt handling */
	ioctl(xf86Info.consoleFd, VT_SETMODE, &VT);
a352 4

    /* Activate the VT that X was started on */
    ioctl(xf86Info.consoleFd, VT_ACTIVATE, xf86StartVT);

d381 9
d394 1
a394 1
	if (sscanf(argv[i], "vt%2d", &VTnum) == 0)
d408 1
a408 2
	    strncpy(fb_dev, argv[i+1], PATH_MAX);
	    fb_dev[PATH_MAX - 1] = '\0';
d419 1
a419 1
    ErrorF("vtXX                   Use the specified VT number\n");
d424 1
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d32 1
a32 1
#if defined(__i386__) || defined(__i386) || defined(__x86)
d52 1
d54 1
a54 1
    int fd, i;
d177 1
d179 6
a184 2
	if (ioctl(xf86Info.consoleFd, KDSETMODE, KD_GRAPHICS) < 0)
	    FatalError("xf86OpenConsole: KDSETMODE KD_GRAPHICS failed\n");
d253 2
a254 2
		    (void)memset(fbdata, 0, fbattr.fbtype.fb_size);
		    (void)munmap(fbdata, fbattr.fbtype.fb_size);
d266 1
a266 1
    ioctl(xf86Info.consoleFd, KDSETMODE, KD_TEXT);
a337 2
#if defined(__SOL8__) || (!defined(__i386__) && !defined(__i386))

a345 2
#endif

a353 1
#if defined(__SOL8__) || !defined(__i386__)
a354 1
#endif
@


1.1
log
@Initial revision
@
text
@d32 1
a32 1
#if defined(__i386) || defined(__x86)
d43 1
a43 1
#if defined(__SOL8__) || !defined(__i386)
a211 3
#if defined(__SOL8__) || !defined(i386)
    int tmp;
#endif
d213 1
a213 1
#if !defined(i386) && !defined(__x86)
a290 17

#if defined(__SOL8__) || !defined(i386)

    /*
     * This probably shouldn't be here.  However, there is no corresponding
     * xf86CloseKbd() routine - DWH
     */

    /* Set the keyboard into "indirect" mode and turn off even translation */
    tmp = 0;
    (void) ioctl(xf86Info.kbdFd, KIOCSDIRECT, &tmp);
    tmp = TR_ASCII;
    (void) ioctl(xf86Info.kbdFd, KIOCTRANS, &tmp);

    close(xf86Info.kbdFd);

#endif
d332 1
a332 1
#if defined(__SOL8__) || !defined(i386)
a339 10

	if (!strcmp(argv[i], "-ar1")) {
	    xf86Info.kbdDelay = atoi(argv[i + 1]) * 1000;
	    return 2;
	}

	if (!strcmp(argv[i], "-ar2")) {
	    xf86Info.kbdRate = atoi(argv[i + 1]) * 1000;
	    return 2;
	}
d352 1
a352 1
#if defined(__SOL8__) || !defined(i386)
a353 4
    ErrorF("-ar1 <float>           Set autorepeat initiate time (sec)\n");
    ErrorF("                       (if not using XKB)\n");
    ErrorF("-ar2 <float>           Set autorepeat interval time (sec)\n");
    ErrorF("                       (if not using XKB)\n");
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d294 17
d360 10
d384 4
@

