head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.16
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.52;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * Copyright (c) 2009, Oracle and/or its affiliates. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/X.h>

#include "xf86.h"
#include "xf86Priv.h"
#include "xf86_OSlib.h"

#include <door.h>
#include <sys/vtdaemon.h>

/*
 * Handle the VT-switching interface for Solaris/OpenSolaris
 */

static int xf86VTPruneDoor = 0;

void
xf86VTRelease(int sig)
{
    if (xf86Info.vtPendingNum == -1) {
        xf86VTPruneDoor = 1;
        xf86Info.vtRequestsPending = TRUE;
        return;
    }

    ioctl(xf86Info.consoleFd, VT_RELDISP, 1);
    xf86Info.vtPendingNum = -1;

    return;
}

void
xf86VTAcquire(int sig)
{
    xf86Info.vtRequestsPending = TRUE;
    return;
}

Bool
xf86VTSwitchPending(void)
{
    return xf86Info.vtRequestsPending ? TRUE : FALSE;
}

Bool
xf86VTSwitchAway(void)
{
    int door_fd;
    vt_cmd_arg_t vt_door_arg;
    door_arg_t door_arg;

    xf86Info.vtRequestsPending = FALSE;

    if (xf86VTPruneDoor) {
        xf86VTPruneDoor = 0;
        ioctl(xf86Info.consoleFd, VT_RELDISP, 1);
        return TRUE;
    }

    vt_door_arg.vt_ev = VT_EV_HOTKEYS;
    vt_door_arg.vt_num = xf86Info.vtPendingNum;
    door_arg.data_ptr = (char *) &vt_door_arg;
    door_arg.data_size = sizeof(vt_cmd_arg_t);
    door_arg.rbuf = NULL;
    door_arg.rsize = 0;
    door_arg.desc_ptr = NULL;
    door_arg.desc_num = 0;

    if ((door_fd = open(VT_DAEMON_DOOR_FILE, O_RDONLY)) < 0)
        return FALSE;

    if (door_call(door_fd, &door_arg) != 0) {
        close(door_fd);
        return FALSE;
    }

    close(door_fd);
    return TRUE;
}

Bool
xf86VTSwitchTo(void)
{
    xf86Info.vtRequestsPending = FALSE;
    if (ioctl(xf86Info.consoleFd, VT_RELDISP, VT_ACKACQ) < 0) {
        return FALSE;
    }
    else {
        return TRUE;
    }
}

Bool
xf86VTActivate(int vtno)
{
    struct vt_stat state;

    if (ioctl(xf86Info.consoleFd, VT_GETSTATE, &state) < 0)
        return FALSE;

    if ((state.v_state & (1 << vtno)) == 0)
        return FALSE;

    xf86Info.vtRequestsPending = TRUE;
    xf86Info.vtPendingNum = vtno;

    return TRUE;
}
@


1.3
log
@Update to xserver 1.11.2
@
text
@d46 5
a50 6
	if (xf86Info.vtPendingNum == -1)
	{
		xf86VTPruneDoor = 1;
		xf86Info.vtRequestsPending = TRUE;
		return;
	}
d52 2
a53 2
	ioctl(xf86Info.consoleFd, VT_RELDISP, 1);
	xf86Info.vtPendingNum = -1;
d55 1
a55 1
	return;
d61 2
a62 2
	xf86Info.vtRequestsPending = TRUE;
	return;
d74 28
a101 28
	int door_fd;
	vt_cmd_arg_t vt_door_arg;
	door_arg_t door_arg;

	xf86Info.vtRequestsPending = FALSE;

	if (xf86VTPruneDoor) {
		xf86VTPruneDoor = 0;
		ioctl(xf86Info.consoleFd, VT_RELDISP, 1);
		return TRUE;
	}

	vt_door_arg.vt_ev = VT_EV_HOTKEYS;
	vt_door_arg.vt_num = xf86Info.vtPendingNum;
	door_arg.data_ptr = (char *)&vt_door_arg;
	door_arg.data_size = sizeof (vt_cmd_arg_t);
	door_arg.rbuf = NULL;
	door_arg.rsize = 0;
	door_arg.desc_ptr = NULL;
	door_arg.desc_num = 0;

	if ((door_fd = open(VT_DAEMON_DOOR_FILE, O_RDONLY)) < 0)
		return FALSE;

	if (door_call(door_fd, &door_arg) != 0) {
		close(door_fd);
		return FALSE;
	}
d103 2
a104 2
	close(door_fd);
	return TRUE;
d110 7
a116 9
	xf86Info.vtRequestsPending = FALSE;
	if (ioctl(xf86Info.consoleFd, VT_RELDISP, VT_ACKACQ) < 0)
	{
		return FALSE;
	}
	else
	{
		return TRUE;
	}
d122 1
a122 1
	struct vt_stat state;
d124 2
a125 2
	if (ioctl(xf86Info.consoleFd, VT_GETSTATE, &state) < 0)
		return FALSE;
d127 2
a128 2
	if ((state.v_state & (1 << vtno)) == 0)
		return FALSE;
d130 2
a131 2
	xf86Info.vtRequestsPending = TRUE;
	xf86Info.vtPendingNum = vtno;
d133 1
a133 1
	return TRUE;
@


1.2
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d2 1
a2 1
 * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
@


1.1
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d69 1
a69 1
    return(xf86Info.vtRequestsPending ? TRUE : FALSE);
d84 1
a84 1
		return (TRUE);
d97 1
a97 1
		return (FALSE);
d101 1
a101 1
		return (FALSE);
d105 1
a105 1
	return (TRUE);
d114 1
a114 1
		return(FALSE);
d118 1
a118 1
		return(TRUE);
d128 1
a128 1
		return(FALSE);
d131 1
a131 1
		return(FALSE);
d136 1
a136 1
	return(TRUE);
@

