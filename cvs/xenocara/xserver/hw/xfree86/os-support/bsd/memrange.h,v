head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.12
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.10
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.18
	OPENBSD_5_0:1.1.1.2.0.16
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.12
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.14
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.08.24.04.31.54;	author mlarkin;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.29;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.57.26;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@

Corresponding xenocara cleanup from the amd64/i386 MTRR cleanup diff just
committed. Removes a #define that wasn't used anywhere (for completeness
and to make the range definitions match what's in the kernel now).

ok jsg@@, deraadt@@
@
text
@/*
 * Memory range attribute operations, peformed on /dev/mem
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#ifndef _MEMRANGE_H
#define _MEMRANGE_H

/* Memory range attributes */
#define MDF_UNCACHEABLE		(1<<0)  /* region not cached */
#define MDF_WRITECOMBINE	(1<<1)  /* region supports "write combine"
                                         * action */
#define MDF_WRITETHROUGH	(1<<2)  /* write-through cached */
#define MDF_WRITEBACK		(1<<3)  /* write-back cached */
#define MDF_WRITEPROTECT	(1<<4)  /* read-only region */
#define MDF_ATTRMASK		(0x00ffffff)

#define MDF_FIXBASE		(1<<24) /* fixed base */
#define MDF_FIXLEN		(1<<25) /* fixed length */
#define MDF_FIRMWARE		(1<<26) /* set by firmware (XXX not useful?) */
#define MDF_ACTIVE		(1<<27) /* currently active */
#define MDF_BOGUS		(1<<28) /* we don't like it */
#define MDF_FIXACTIVE		(1<<29) /* can't be turned off */

struct mem_range_desc {
    u_int64_t mr_base;
    u_int64_t mr_len;
    int mr_flags;
    char mr_owner[8];
};

struct mem_range_op {
    struct mem_range_desc *mo_desc;
    int mo_arg[2];
#define MEMRANGE_SET_UPDATE	0
#define MEMRANGE_SET_REMOVE	1
    /* XXX want a flag that says "set and undo when I exit" */
};

#define MEMRANGE_GET	_IOWR('m', 50, struct mem_range_op)
#define MEMRANGE_SET	_IOW('m', 51, struct mem_range_op)

#ifdef _KERNEL

struct mem_range_softc;
struct mem_range_ops {
    void (*init) __P((struct mem_range_softc * sc));
    int (*set)
        __P((struct mem_range_softc * sc, struct mem_range_desc * mrd,
             int *arg));
    void (*initAP) __P((struct mem_range_softc * sc));
};

struct mem_range_softc {
    struct mem_range_ops *mr_op;
    int mr_cap;
    int mr_ndesc;
    struct mem_range_desc *mr_desc;
};

extern struct mem_range_softc mem_range_softc;

extern int mem_range_attr_get __P((struct mem_range_desc * mrd, int *arg));
extern int mem_range_attr_set __P((struct mem_range_desc * mrd, int *arg));
extern void mem_range_AP_init __P((void));
#endif

#endif
@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a26 1
#define MDF_BUSY		(1<<30) /* range is in use */
@


1.1
log
@Initial revision
@
text
@a2 2
 *
 * $FreeBSD: src/sys/sys/memrange.h,v 1.4 1999/12/29 04:24:44 peter Exp $
a3 1
/* $XFree86$ */
d13 6
a18 6
#define MDF_UNCACHEABLE		(1<<0)	/* region not cached */
#define MDF_WRITECOMBINE	(1<<1)	/* region supports "write combine"
					 * action */
#define MDF_WRITETHROUGH	(1<<2)	/* write-through cached */
#define MDF_WRITEBACK		(1<<3)	/* write-back cached */
#define MDF_WRITEPROTECT	(1<<4)	/* read-only region */
d21 7
a27 7
#define MDF_FIXBASE		(1<<24)	/* fixed base */
#define MDF_FIXLEN		(1<<25)	/* fixed length */
#define MDF_FIRMWARE		(1<<26)	/* set by firmware (XXX not useful?) */
#define MDF_ACTIVE		(1<<27)	/* currently active */
#define MDF_BOGUS		(1<<28)	/* we don't like it */
#define MDF_FIXACTIVE		(1<<29)	/* can't be turned off */
#define MDF_BUSY		(1<<30)	/* range is in use */
d30 4
a33 4
	u_int64_t mr_base;
	u_int64_t mr_len;
	int     mr_flags;
	char    mr_owner[8];
d37 2
a38 2
	struct mem_range_desc *mo_desc;
	int     mo_arg[2];
d41 1
a41 1
	/* XXX want a flag that says "set and undo when I exit" */
d43 1
d51 5
a55 3
	void    (*init) __P((struct mem_range_softc * sc));
	int     (*set) __P((struct mem_range_softc * sc, struct mem_range_desc * mrd, int *arg));
	void    (*initAP) __P((struct mem_range_softc * sc));
d59 4
a62 4
	struct mem_range_ops *mr_op;
	int     mr_cap;
	int     mr_ndesc;
	struct mem_range_desc *mr_desc;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d3 2
d6 1
@

