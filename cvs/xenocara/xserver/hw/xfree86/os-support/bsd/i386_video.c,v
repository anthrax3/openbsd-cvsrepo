head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.6
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.4
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	Te1daavkBLskZ8gc;

1.12
date	2014.09.27.17.53.02;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	cVXoV5PxI8YrEaVA;

1.11
date	2013.06.07.17.28.52;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2010.12.05.15.36.07;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2010.07.27.19.02.33;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2009.09.06.19.44.26;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.02.15.26.22;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.09.22.55.10;	author phessler;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.25.18.41.23;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.24.19.04.04;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.28.20.29.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.30;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.30;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.57.25;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright 1992 by Rich Murphey <Rich@@Rice.edu>
 * Copyright 1993 by David Wexelblat <dwex@@goblin.org>
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the names of Rich Murphey and David Wexelblat
 * not be used in advertising or publicity pertaining to distribution of
 * the software without specific, written prior permission.  Rich Murphey and
 * David Wexelblat make no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without express or
 * implied warranty.
 *
 * RICH MURPHEY AND DAVID WEXELBLAT DISCLAIM ALL WARRANTIES WITH REGARD TO
 * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS, IN NO EVENT SHALL RICH MURPHEY OR DAVID WEXELBLAT BE LIABLE FOR
 * ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
 * CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/X.h>
#include "xf86.h"
#include "xf86Priv.h"

#include <errno.h>
#include <sys/mman.h>

#include "xf86_OSlib.h"
#include "xf86OSpriv.h"

#if defined(__NetBSD__) && !defined(MAP_FILE)
#define MAP_FLAGS MAP_SHARED
#else
#define MAP_FLAGS (MAP_FILE | MAP_SHARED)
#endif

#ifdef __OpenBSD__
#define SYSCTL_MSG "\tCheck that you have set 'machdep.allowaperture=1'\n"\
		   "\tin /etc/sysctl.conf and reboot your machine\n" \
		   "\trefer to xf86(4) for details\n"
#define SYSCTL_MSG2 \
		"Check that you have set 'machdep.allowaperture=2'\n" \
		"\tin /etc/sysctl.conf and reboot your machine\n" \
		"\trefer to xf86(4) for details\n"
#endif

/***************************************************************************/
/* Video Memory Mapping section                                            */
/***************************************************************************/

static Bool useDevMem = FALSE;
static int devMemFd = -1;

#ifdef HAS_APERTURE_DRV
#define DEV_APERTURE "/dev/xf86"
#endif

/*
 * Check if /dev/mem can be mmap'd.  If it can't print a warning when
 * "warn" is TRUE.
 */
static void
checkDevMem(Bool warn)
{
    static Bool devMemChecked = FALSE;
    int fd;
    void *base;

    if (devMemChecked)
        return;
    devMemChecked = TRUE;
    
#ifdef HAS_APERTURE_DRV
    /* Try the aperture driver first */
    if ((fd = open(DEV_APERTURE, O_RDWR)) >= 0) {
        /* Try to map a page at the VGA address */
        base = mmap((caddr_t)0, 4096, PROT_READ | PROT_WRITE,
                    MAP_FLAGS, fd, (off_t)0xA0000);
        
        if (base != MAP_FAILED) {
            munmap((caddr_t)base, 4096);
            devMemFd = fd;
            useDevMem = TRUE;
            xf86Msg(X_PROBED, "checkDevMem: using aperture driver %s\n",
                    DEV_APERTURE);
            return;
        }
        else {
            if (warn) {
                xf86Msg(X_WARNING, "checkDevMem: failed to mmap %s (%s)\n",
                        DEV_APERTURE, strerror(errno));
            }
        }
    }
#endif
    if ((fd = open(DEV_MEM, O_RDWR)) >= 0) {
        /* Try to map a page at the VGA address */
        base = mmap((caddr_t)0, 4096, PROT_READ | PROT_WRITE,
                    MAP_FLAGS, fd, (off_t)0xA0000);
        
        if (base != MAP_FAILED) {
            munmap((caddr_t)base, 4096);
            devMemFd = fd;
            useDevMem = TRUE;
            return;
        }
        else {
            if (warn) {
                xf86Msg(X_WARNING, "checkDevMem: failed to mmap %s (%s)\n",
                        DEV_MEM, strerror(errno));
            }
        }
    }
    if (warn) {
#ifndef HAS_APERTURE_DRV
        xf86Msg(X_WARNING, "checkDevMem: failed to open/mmap %s (%s)\n",
                DEV_MEM, strerror(errno));
        xf86ErrorF("\tlinear framebuffer access unavailable\n");
#else
#ifndef __OpenBSD__
        xf86Msg(X_WARNING, "checkDevMem: failed to open %s and %s\n"
		"\t(%s)\n", DEV_APERTURE, DEV_MEM, strerror(errno));
#else /* __OpenBSD__ */
        xf86Msg(X_WARNING, "checkDevMem: failed to open %s and %s\n"
                "\t(%s)\n%s", DEV_APERTURE, DEV_MEM, strerror(errno),
                SYSCTL_MSG);
#endif /* __OpenBSD__ */
        
        xf86ErrorF("\tlinear framebuffer access unavailable\n");
    }
    useDevMem = FALSE;
    return;
#endif
}

void
xf86OSInitVidMem(VidMemInfoPtr pVidMem)
{
    checkDevMem(TRUE);

    pci_system_init_dev_mem(devMemFd);
    pVidMem->initialised = TRUE;
}

#ifdef USE_I386_IOPL
/***************************************************************************/
/* I/O Permissions section                                                 */
/***************************************************************************/

static Bool ExtendedEnabled = FALSE;

Bool
xf86EnableIO()
{
    if (ExtendedEnabled)
        return TRUE;

    if (i386_iopl(TRUE) < 0) {
#ifndef __OpenBSD__
        xf86Msg(X_WARNING, "%s: Failed to set IOPL for extended I/O",
                "xf86EnableIO");
#else
        xf86Msg(X_WARNING, "%s: Failed to set IOPL for extended I/O\n%s",
                "xf86EnableIO", SYSCTL_MSG);
#endif
        return FALSE;
    }
    ExtendedEnabled = TRUE;

    return TRUE;
}

void
xf86DisableIO()
{
    if (!ExtendedEnabled)
        return;

    if (i386_iopl(FALSE) == 0) {
        ExtendedEnabled = FALSE;
    }
    /* Otherwise, the X server has revoqued its root uid,
       and thus cannot give up IO privileges any more */
    return;
}

#endif                          /* USE_I386_IOPL */

#ifdef USE_AMD64_IOPL
/***************************************************************************/
/* I/O Permissions section                                                 */
/***************************************************************************/

static Bool ExtendedEnabled = FALSE;

Bool
xf86EnableIO()
{
    if (ExtendedEnabled)
        return TRUE;

    if (amd64_iopl(TRUE) < 0) {
#ifndef __OpenBSD__
        xf86Msg(X_WARNING, "%s: Failed to set IOPL for extended I/O",
                "xf86EnableIO");
#else
        xf86Msg(X_WARNING, "%s: Failed to set IOPL for extended I/O\n%s",
                "xf86EnableIO", SYSCTL_MSG);
#endif
        return FALSE;
    }
    ExtendedEnabled = TRUE;

    return TRUE;
}

void
xf86DisableIO()
{
    if (!ExtendedEnabled)
        return;
    
    if (amd64_iopl(FALSE) == 0) {
        ExtendedEnabled = FALSE;
    }
    /* Otherwise, the X server has revoqued its root uid,
       and thus cannot give up IO privileges any more */
    
    return;
}

#endif                          /* USE_AMD64_IOPL */

#ifdef USE_DEV_IO
static int IoFd = -1;

Bool
xf86EnableIO()
{
    if (IoFd >= 0)
        return TRUE;

    if ((IoFd = open("/dev/io", O_RDWR)) == -1) {
        xf86Msg(X_WARNING, "xf86EnableIO: "
                "Failed to open /dev/io for extended I/O");
        return FALSE;
    }
    return TRUE;
}

void
xf86DisableIO()
{
    if (IoFd < 0)
        return;

    close(IoFd);
    IoFd = -1;
    return;
}

#endif

#ifdef __NetBSD__
/***************************************************************************/
/* Set TV output mode                                                      */
/***************************************************************************/
void
xf86SetTVOut(int mode)
{
    switch (xf86Info.consType) {
#ifdef PCCONS_SUPPORT
      case PCCONS:{
          
          if (ioctl (xf86Info.consoleFd, CONSOLE_X_TV_ON, &mode) < 0) {
              xf86Msg(X_WARNING,
                      "xf86SetTVOut: Could not set console to TV output, %s\n",
                      strerror(errno));
          }
      }
	break;
#endif /* PCCONS_SUPPORT */

      default:
        FatalError("Xf86SetTVOut: Unsupported console");
        break;
    }
    return;
}

void
xf86SetRGBOut()
{
    switch (xf86Info.consType) {
#ifdef PCCONS_SUPPORT
      case PCCONS:{
          
          if (ioctl (xf86Info.consoleFd, CONSOLE_X_TV_OFF, 0) < 0) {
              xf86Msg(X_WARNING,
                      "xf86SetTVOut: Could not set console to RGB output, %s\n",
                      strerror(errno));
          }
      }
	break;
#endif /* PCCONS_SUPPORT */

      default:
        FatalError("Xf86SetTVOut: Unsupported console");
        break;
    }
    return;
}
#endif

#ifdef X_PRIVSEP
#include <pciaccess.h>

/*
 * Do all things that need root privileges early
 * and revoke those privileges
 */
_X_EXPORT void
xf86PrivilegedInit(void)
{
    checkDevMem(TRUE);
    
    pci_system_init();
    pci_legacy_open_io(NULL, 0, 64*1024);
    ExtendedEnabled = TRUE;	/* Will die with xf86EnableIO() */
    xf86OpenConsole();
}
#endif
@


1.12
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@a36 20
#ifdef HAS_MTRR_SUPPORT
#ifndef __NetBSD__
#include <sys/memrange.h>
#else
#include "memrange.h"
#endif
#define X_MTRR_ID "XFree86"
#endif

#if defined(HAS_MTRR_BUILTIN) && defined(__NetBSD__)
#include <machine/mtrr.h>
#include <machine/sysarch.h>
#include <sys/queue.h>
#ifdef __x86_64__
#define i386_set_mtrr x86_64_set_mtrr
#define i386_get_mtrr x86_64_get_mtrr
#define i386_iopl x86_64_iopl
#endif
#endif

a66 14
static void *mapVidMem(int, unsigned long, unsigned long, int);
static void unmapVidMem(int, void *, unsigned long);

#ifdef HAS_MTRR_SUPPORT
static void *setWC(int, unsigned long, unsigned long, Bool, MessageType);
static void undoWC(int, void *);
static Bool cleanMTRR(void);
#endif
#if defined(HAS_MTRR_BUILTIN) && defined(__NetBSD__)
static void *NetBSDsetWC(int, unsigned long, unsigned long, Bool,
                           MessageType);
static void NetBSDundoWC(int, void *);
#endif

d149 2
a150 19
    pVidMem->linearSupported = useDevMem;
    pVidMem->mapMem = mapVidMem;
    pVidMem->unmapMem = unmapVidMem;

    if (useDevMem)
        pci_system_init_dev_mem(devMemFd);

#ifdef HAS_MTRR_SUPPORT
    if (useDevMem) {
        if (cleanMTRR()) {
            pVidMem->setWC = setWC;
            pVidMem->undoWC = undoWC;
        }
    }
#endif
#if defined(HAS_MTRR_BUILTIN) && defined(__NetBSD__)
    pVidMem->setWC = NetBSDsetWC;
    pVidMem->undoWC = NetBSDundoWC;
#endif
a153 95
static void *
mapVidMem(int ScreenNum, unsigned long Base, unsigned long Size, int flags)
{
    void *base;

    checkDevMem(FALSE);
    
    if (useDevMem) {
        if (devMemFd < 0) {
            FatalError("xf86MapVidMem: failed to open %s (%s)",
                       DEV_MEM, strerror(errno));
        }
        base = mmap((caddr_t)0, Size,
                    (flags & VIDMEM_READONLY) ?
                    PROT_READ : (PROT_READ | PROT_WRITE),
                    MAP_FLAGS, devMemFd, (off_t)Base);
        if (base == MAP_FAILED) {
            FatalError("%s: could not mmap %s [s=%lx,a=%lx] (%s)",
                       "xf86MapVidMem", DEV_MEM, Size, Base,
                       strerror(errno));
        }
        return base;
    }

    /* else, mmap /dev/vga */
    if ((unsigned long)Base < 0xA0000 || (unsigned long)Base >= 0xC0000) {
        FatalError("%s: Address 0x%lx outside allowable range",
                   "xf86MapVidMem", Base);
    }
    base = mmap(0, Size,
                (flags & VIDMEM_READONLY) ?
                PROT_READ : (PROT_READ | PROT_WRITE),
                MAP_FLAGS, xf86Info.consoleFd,
                (unsigned long)Base - 0xA0000);
    if (base == MAP_FAILED) {
        FatalError("xf86MapVidMem: Could not mmap /dev/vga (%s)",
                   strerror(errno));
    }
    return base;
}

static void
unmapVidMem(int ScreenNum, void *Base, unsigned long Size)
{
    munmap((caddr_t) Base, Size);
}

/*
 * Read BIOS via mmap()ing DEV_MEM
 */

int
xf86ReadBIOS(unsigned long Base, unsigned long Offset, unsigned char *Buf,
             int Len)
{
    unsigned char *ptr;
    int psize;
    int mlen;
    
    checkDevMem(TRUE);
    if (devMemFd == -1) {
        return -1;
    }
    
    psize = getpagesize();
    Offset += Base & (psize - 1);
    Base &= ~(psize - 1);
    mlen = (Offset + Len + psize - 1) & ~(psize - 1);
    ptr = (unsigned char *)mmap((caddr_t)0, mlen, PROT_READ,
                                MAP_SHARED, devMemFd, (off_t)Base);
    if ((long)ptr == -1) {
        xf86Msg(X_WARNING,
                "xf86ReadBIOS: %s mmap[s=%x,a=%lx,o=%lx] failed (%s)\n",
                DEV_MEM, Len, Base, Offset, strerror(errno));
#ifdef __OpenBSD__
        if (Base < 0xa0000) {
            xf86Msg(X_WARNING, SYSCTL_MSG2);
        }
#endif
        return -1;
    }
#ifdef DEBUG
    ErrorF("xf86ReadBIOS: BIOS at 0x%08x has signature 0x%04x\n",
           Base, ptr[0] | (ptr[1] << 8));
#endif
    (void) memcpy(Buf, (void *) (ptr + Offset), Len);
    (void) munmap((caddr_t) ptr, mlen);
#ifdef DEBUG
    xf86MsgVerb(X_INFO, 3, "xf86ReadBIOS(%x, %x, Buf, %x)"
                "-> %02x %02x %02x %02x...\n",
                Base, Offset, Len, Buf[0], Buf[1], Buf[2], Buf[3]);
#endif
    return Len;
}

a320 415
}
#endif

#ifdef HAS_MTRR_SUPPORT
/* memory range (MTRR) support for FreeBSD */

/*
 * This code is experimental.  Some parts may be overkill, and other parts
 * may be incomplete.
 */

/*
 * getAllRanges returns the full list of memory ranges with attributes set.
 */

static struct mem_range_desc *
getAllRanges(int *nmr)
{
    struct mem_range_desc *mrd;
    struct mem_range_op mro;

    /*
     * Find how many ranges there are.  If this fails, then the kernel
     * probably doesn't have MTRR support.
     */
    mro.mo_arg[0] = 0;
    if (ioctl(devMemFd, MEMRANGE_GET, &mro))
        return NULL;
    *nmr = mro.mo_arg[0];
    mrd = xnfalloc(*nmr * sizeof(struct mem_range_desc));
    mro.mo_arg[0] = *nmr;
    mro.mo_desc = mrd;
    if (ioctl(devMemFd, MEMRANGE_GET, &mro)) {
        free(mrd);
        return NULL;
    }
    return mrd;
}

/*
 * cleanMTRR removes any memory attribute that may be left by a previous
 * X server.  Normally there won't be any, but this takes care of the
 * case where a server crashed without being able finish cleaning up.
 */

static Bool
cleanMTRR()
{
    struct mem_range_desc *mrd;
    struct mem_range_op mro;
    int nmr, i;

    /* This shouldn't happen */
    if (devMemFd < 0)
        return FALSE;

    if (!(mrd = getAllRanges(&nmr)))
        return FALSE;

    for (i = 0; i < nmr; i++) {
        if (strcmp(mrd[i].mr_owner, X_MTRR_ID) == 0 &&
            (mrd[i].mr_flags & MDF_ACTIVE)) {
#ifdef DEBUG
            ErrorF("Clean for (0x%lx,0x%lx)\n",
                   (unsigned long) mrd[i].mr_base,
                   (unsigned long) mrd[i].mr_len);
#endif
            if (mrd[i].mr_flags & MDF_FIXACTIVE) {
                mro.mo_arg[0] = MEMRANGE_SET_UPDATE;
                mrd[i].mr_flags = MDF_UNCACHEABLE;
            }
            else {
                mro.mo_arg[0] = MEMRANGE_SET_REMOVE;
            }
            mro.mo_desc = mrd + i;
            ioctl(devMemFd, MEMRANGE_SET, &mro);
        }
    }
#ifdef DEBUG
    sleep(10);
#endif
    free(mrd);
    return TRUE;
}

typedef struct x_RangeRec {
    struct mem_range_desc mrd;
    Bool wasWC;
    struct x_RangeRec *next;
} RangeRec, *RangePtr;

static void
freeRangeList(RangePtr range)
{
    RangePtr rp;

    while (range) {
        rp = range;
        range = rp->next;
        free(rp);
    }
}

static RangePtr
dupRangeList(RangePtr list)
{
    RangePtr new = NULL, rp, p;

    rp = list;
    while (rp) {
        p = xnfalloc(sizeof(RangeRec));
        *p = *rp;
        p->next = new;
        new = p;
        rp = rp->next;
    }
    return new;
}

static RangePtr
sortRangeList(RangePtr list)
{
    RangePtr rp1, rp2, copy, sorted = NULL, minp, prev, minprev;
    unsigned long minBase;

    /* Sort by base address */
    rp1 = copy = dupRangeList(list);
    while (rp1) {
        minBase = rp1->mrd.mr_base;
        minp = rp1;
        minprev = NULL;
        prev = rp1;
        rp2 = rp1->next;
        while (rp2) {
            if (rp2->mrd.mr_base < minBase) {
                minBase = rp2->mrd.mr_base;
                minp = rp2;
                minprev = prev;
            }
            prev = rp2;
            rp2 = rp2->next;
        }
        if (minprev) {
            minprev->next = minp->next;
            rp1 = copy;
        }
        else {
            rp1 = minp->next;
        }
        minp->next = sorted;
        sorted = minp;
    }
    return sorted;
}

/*
 * findRanges returns a list of ranges that overlap the specified range.
 */

static void
findRanges(unsigned long base, unsigned long size, RangePtr * ucp,
           RangePtr * wcp)
{
    struct mem_range_desc *mrd;
    int nmr, i;
    RangePtr rp, *p;
    
    if (!(mrd = getAllRanges(&nmr)))
        return;
    
    for (i = 0; i < nmr; i++) {
        if ((mrd[i].mr_flags & MDF_ACTIVE) &&
            mrd[i].mr_base < base + size &&
            mrd[i].mr_base + mrd[i].mr_len > base) {
            if (mrd[i].mr_flags & MDF_WRITECOMBINE)
                p = wcp;
            else if (mrd[i].mr_flags & MDF_UNCACHEABLE)
                p = ucp;
            else
                continue;
            rp = xnfalloc(sizeof(RangeRec));
            rp->mrd = mrd[i];
            rp->next = *p;
            *p = rp;
        }
    }
    free(mrd);
}

/*
 * This checks if the existing overlapping ranges fully cover the requested
 * range.  Is this overkill?
 */

static Bool
fullCoverage(unsigned long base, unsigned long size, RangePtr overlap)
{
    RangePtr rp1, sorted = NULL;
    unsigned long end;

    sorted = sortRangeList(overlap);
    /* Look for gaps */
    rp1 = sorted;
    end = base + size;
    while (rp1) {
        if (rp1->mrd.mr_base > base) {
            freeRangeList(sorted);
            return FALSE;
        }
        else {
            base = rp1->mrd.mr_base + rp1->mrd.mr_len;
        }
        if (base >= end) {
            freeRangeList(sorted);
            return TRUE;
        }
        rp1 = rp1->next;
    }
    freeRangeList(sorted);
    return FALSE;
}

static void *
addWC(int screenNum, unsigned long base, unsigned long size, MessageType from)
{
    RangePtr uc = NULL, wc = NULL, retlist = NULL;
    struct mem_range_desc mrd;
    struct mem_range_op mro;
    
    findRanges(base, size, &uc, &wc);
    
    /* See of the full range is already WC */
    if (!uc && fullCoverage(base, size, wc)) {
        xf86DrvMsg(screenNum, from,
		   "Write-combining range (0x%lx,0x%lx) was already set\n",
                   base, size);
        return NULL;
    }
    
    /* Otherwise, try to add the new range */
    mrd.mr_base = base;
    mrd.mr_len = size;
    strcpy(mrd.mr_owner, X_MTRR_ID);
    mrd.mr_flags = MDF_WRITECOMBINE;
    mro.mo_desc = &mrd;
    mro.mo_arg[0] = MEMRANGE_SET_UPDATE;
    if (ioctl(devMemFd, MEMRANGE_SET, &mro)) {
        xf86DrvMsg(screenNum, X_WARNING,
                   "Failed to set write-combining range "
                   "(0x%lx,0x%lx)\n", base, size);
        return NULL;
    }
    else {
        xf86DrvMsg(screenNum, from,
                   "Write-combining range (0x%lx,0x%lx)\n", base, size);
        retlist = xnfalloc(sizeof(RangeRec));
        retlist->mrd = mrd;
        retlist->wasWC = FALSE;
        retlist->next = NULL;
        return retlist;
    }
}

static void *
delWC(int screenNum, unsigned long base, unsigned long size, MessageType from)
{
    RangePtr uc = NULL, wc = NULL, retlist = NULL;
    struct mem_range_desc mrd;
    struct mem_range_op mro;
    
    findRanges(base, size, &uc, &wc);
    
    /*
     * See of the full range is already not WC, or if there is full
     * coverage from UC ranges.
     */
    if (!wc || fullCoverage(base, size, uc)) {
        xf86DrvMsg(screenNum, from,
		   "Write-combining range (0x%lx,0x%lx) was already clear\n",
                   base, size);
        return NULL;
    }
    
    /* Otherwise, try to add the new range */
    mrd.mr_base = base;
    mrd.mr_len = size;
    strcpy(mrd.mr_owner, X_MTRR_ID);
    mrd.mr_flags = MDF_UNCACHEABLE;
    mro.mo_desc = &mrd;
    mro.mo_arg[0] = MEMRANGE_SET_UPDATE;
    if (ioctl(devMemFd, MEMRANGE_SET, &mro)) {
        xf86DrvMsg(screenNum, X_WARNING,
                   "Failed to remove write-combining range "
                   "(0x%lx,0x%lx)\n", base, size);
        /* XXX Should then remove all of the overlapping WC ranges */
        return NULL;
    }
    else {
        xf86DrvMsg(screenNum, from,
                   "Removed Write-combining range (0x%lx,0x%lx)\n",
                   base, size);
        retlist = xnfalloc(sizeof(RangeRec));
        retlist->mrd = mrd;
        retlist->wasWC = TRUE;
        retlist->next = NULL;
        return retlist;
    }
}

static void *
setWC(int screenNum, unsigned long base, unsigned long size, Bool enable,
      MessageType from)
{
    if (enable)
        return addWC(screenNum, base, size, from);
    else
        return delWC(screenNum, base, size, from);
}

static void
undoWC(int screenNum, void *list)
{
    RangePtr rp;
    struct mem_range_op mro;
    Bool failed;

    rp = list;
    while (rp) {
#ifdef DEBUG
        ErrorF("Undo for (0x%lx,0x%lx), %d\n",
               (unsigned long) rp->mrd.mr_base,
               (unsigned long) rp->mrd.mr_len, rp->wasWC);
#endif
        failed = FALSE;
        if (rp->wasWC) {
            mro.mo_arg[0] = MEMRANGE_SET_UPDATE;
            rp->mrd.mr_flags = MDF_WRITECOMBINE;
            strcpy(rp->mrd.mr_owner, "unknown");
        }
        else {
            mro.mo_arg[0] = MEMRANGE_SET_REMOVE;
        }
        mro.mo_desc = &rp->mrd;

        if (ioctl(devMemFd, MEMRANGE_SET, &mro)) {
            if (!rp->wasWC) {
                mro.mo_arg[0] = MEMRANGE_SET_UPDATE;
                rp->mrd.mr_flags = MDF_UNCACHEABLE;
                strcpy(rp->mrd.mr_owner, "unknown");
                if (ioctl(devMemFd, MEMRANGE_SET, &mro))
                    failed = TRUE;
            }
            else
                failed = TRUE;
        }
        if (failed) {
            xf86DrvMsg(screenNum, X_WARNING,
                       "Failed to restore MTRR range (0x%lx,0x%lx)\n",
                       (unsigned long) rp->mrd.mr_base,
                       (unsigned long) rp->mrd.mr_len);
        }
        rp = rp->next;
    }
}

#endif                          /* HAS_MTRR_SUPPORT */

#if defined(HAS_MTRR_BUILTIN) && defined(__NetBSD__)
static void *
NetBSDsetWC(int screenNum, unsigned long base, unsigned long size, Bool enable,
            MessageType from)
{
    struct mtrr *mtrrp;
    int n;

    xf86DrvMsg(screenNum, X_WARNING,
               "%s MTRR %lx - %lx\n", enable ? "set" : "remove",
               base, (base + size));

    mtrrp = xnfalloc(sizeof(struct mtrr));
    mtrrp->base = base;
    mtrrp->len = size;
    mtrrp->type = MTRR_TYPE_WC;

    /*
     * MTRR_PRIVATE will make this MTRR get reset automatically
     * if this process exits, so we have no need for an explicit
     * cleanup operation when starting a new server.
     */

    if (enable)
        mtrrp->flags = MTRR_VALID | MTRR_PRIVATE;
    else
        mtrrp->flags = 0;
    n = 1;

    if (i386_set_mtrr(mtrrp, &n) < 0) {
        free(mtrrp);
        return NULL;
    }
    return mtrrp;
}

static void
NetBSDundoWC(int screenNum, void *list)
{
    struct mtrr *mtrrp = (struct mtrr *) list;
    int n;

    if (mtrrp == NULL)
        return;
    n = 1;
    mtrrp->flags &= ~MTRR_VALID;
    i386_set_mtrr(mtrrp, &n);
    free(mtrrp);
@


1.11
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d87 2
a88 2
static pointer mapVidMem(int, unsigned long, unsigned long, int);
static void unmapVidMem(int, pointer, unsigned long);
d91 2
a92 2
static pointer setWC(int, unsigned long, unsigned long, Bool, MessageType);
static void undoWC(int, pointer);
d96 1
a96 1
static pointer NetBSDsetWC(int, unsigned long, unsigned long, Bool,
d98 1
a98 1
static void NetBSDundoWC(int, pointer);
d110 2
a111 2
    pointer base;
    
d205 1
a205 1
static pointer
d208 2
a209 2
    pointer base;
    
d247 1
a247 1
unmapVidMem(int ScreenNum, pointer Base, unsigned long Size)
d689 1
a689 1
static pointer
d730 1
a730 1
static pointer
d776 1
a776 1
static pointer
d787 1
a787 1
undoWC(int screenNum, pointer list)
d835 1
a835 1
static pointer
d871 1
a871 1
NetBSDundoWC(int screenNum, pointer list)
@


1.10
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d68 2
a69 2
                   "\tin /etc/sysctl.conf and reboot your machine\n" \
                   "\trefer to xf86(4) for details\n"
d71 3
a73 3
                "Check that you have set 'machdep.allowaperture=2'\n" \
                "\tin /etc/sysctl.conf and reboot your machine\n" \
                "\trefer to xf86(4) for details\n"
d81 1
a81 1
static int  devMemFd = -1;
d111 1
a111 1

d115 1
a115 1

d122 1
a122 1

d143 1
a143 1

d165 1
a165 1
                "\t(%s)\n", DEV_APERTURE, DEV_MEM, strerror(errno));
d171 1
a171 1

d209 1
a209 1

d211 1
a211 1

d249 1
a249 1
    munmap((caddr_t)Base, Size);
d263 1
a263 1

d268 1
a268 1

d290 2
a291 2
    (void)memcpy(Buf, (void *)(ptr + Offset), Len);
    (void)munmap((caddr_t)ptr, mlen);
d313 1
a313 2
    if (i386_iopl(TRUE) < 0)
    {
d315 1
a315 1
        xf86Msg(X_WARNING,"%s: Failed to set IOPL for extended I/O",
d318 1
a318 1
        xf86Msg(X_WARNING,"%s: Failed to set IOPL for extended I/O\n%s",
a338 1

d342 1
a342 1
#endif /* USE_I386_IOPL */
d359 1
a359 1
        xf86Msg(X_WARNING,"%s: Failed to set IOPL for extended I/O",
d362 1
a362 1
        xf86Msg(X_WARNING,"%s: Failed to set IOPL for extended I/O\n%s",
d377 1
a377 1

d383 1
a383 1

d387 1
a387 1
#endif /* USE_AMD64_IOPL */
d399 1
a399 1
        xf86Msg(X_WARNING,"xf86EnableIO: "
d428 9
a436 8
    case PCCONS:{
        if (ioctl (xf86Info.consoleFd, CONSOLE_X_TV_ON, &mode) < 0) {
            xf86Msg(X_WARNING,
                    "xf86SetTVOut: Could not set console to TV output, %s\n",
                    strerror(errno));
        }
    }
    break;
d439 1
a439 1
    default:
d451 9
a459 8
    case PCCONS:{
        if (ioctl (xf86Info.consoleFd, CONSOLE_X_TV_OFF, 0) < 0) {
            xf86Msg(X_WARNING,
                    "xf86SetTVOut: Could not set console to RGB output, %s\n",
                    strerror(errno));
        }
    }
    break;
d462 1
a462 1
    default:
d531 2
a532 2
                   (unsigned long)mrd[i].mr_base,
                   (unsigned long)mrd[i].mr_len);
d627 2
a628 1
findRanges(unsigned long base, unsigned long size, RangePtr *ucp, RangePtr *wcp)
d633 1
a633 1

d636 1
a636 1

d695 1
a695 1

d697 1
a697 1

d701 1
a701 1
                   "Write-combining range (0x%lx,0x%lx) was already set\n",
d705 1
a705 1

d736 1
a736 1

d738 1
a738 1

d745 1
a745 1
                   "Write-combining range (0x%lx,0x%lx) was already clear\n",
d749 1
a749 1

d797 2
a798 2
               (unsigned long)rp->mrd.mr_base,
               (unsigned long)rp->mrd.mr_len, rp->wasWC);
d825 2
a826 2
                       (unsigned long)rp->mrd.mr_base,
                       (unsigned long)rp->mrd.mr_len);
d832 1
a832 2
#endif /* HAS_MTRR_SUPPORT */

d846 1
a846 1
    mtrrp = xnfalloc(sizeof (struct mtrr));
d873 1
a873 1
    struct mtrr *mtrrp = (struct mtrr *)list;
@


1.9
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d9 2
a10 2
 * documentation, and that the names of Rich Murphey and David Wexelblat 
 * not be used in advertising or publicity pertaining to distribution of 
d12 2
a13 2
 * David Wexelblat make no representations about the suitability of this 
 * software for any purpose.  It is provided "as is" without express or 
d16 6
a21 6
 * RICH MURPHEY AND DAVID WEXELBLAT DISCLAIM ALL WARRANTIES WITH REGARD TO 
 * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND 
 * FITNESS, IN NO EVENT SHALL RICH MURPHEY OR DAVID WEXELBLAT BE LIABLE FOR 
 * ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER 
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF 
 * CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
a65 4
#ifndef MAP_FAILED
#define MAP_FAILED ((caddr_t)-1)
#endif

d68 2
a69 2
		   "\tin /etc/sysctl.conf and reboot your machine\n" \
		   "\trefer to xf86(4) for details\n"
d71 3
a73 3
		"Check that you have set 'machdep.allowaperture=2'\n" \
		"\tin /etc/sysctl.conf and reboot your machine\n" \
		"\trefer to xf86(4) for details\n"
a85 1
#define DEV_MEM "/dev/mem"
d97 1
a97 1
			   MessageType);
d108 7
a114 7
	static Bool devMemChecked = FALSE;
	int fd;
	pointer base;

	if (devMemChecked)
	    return;
	devMemChecked = TRUE;
d117 41
a157 39
	/* Try the aperture driver first */
	if ((fd = open(DEV_APERTURE, O_RDWR)) >= 0) {
	    /* Try to map a page at the VGA address */
	    base = mmap((caddr_t)0, 4096, PROT_READ | PROT_WRITE,
		MAP_FLAGS, fd, (off_t)0xA0000);
	    
	    if (base != MAP_FAILED) {
		munmap((caddr_t)base, 4096);
		devMemFd = fd;
		useDevMem = TRUE;
		xf86Msg(X_PROBED, "checkDevMem: using aperture driver %s\n",
		        DEV_APERTURE);
		return;
	    } else {
		if (warn) {
		    xf86Msg(X_WARNING, "checkDevMem: failed to mmap %s (%s)\n",
			    DEV_APERTURE, strerror(errno));
		}
	    }
	} 
#endif
	if ((fd = open(DEV_MEM, O_RDWR)) >= 0) {
	    /* Try to map a page at the VGA address */
	    base = mmap((caddr_t)0, 4096, PROT_READ | PROT_WRITE,
		MAP_FLAGS, fd, (off_t)0xA0000);
	
	    if (base != MAP_FAILED) {
		munmap((caddr_t)base, 4096);
		devMemFd = fd;
		useDevMem = TRUE;
		return;
	    } else {
		if (warn) {
		    xf86Msg(X_WARNING, "checkDevMem: failed to mmap %s (%s)\n",
			    DEV_MEM, strerror(errno));
		}
	    }
	}
	if (warn) {
d159 3
a161 3
	    xf86Msg(X_WARNING, "checkDevMem: failed to open/mmap %s (%s)\n",
		    DEV_MEM, strerror(errno));
	    xf86ErrorF("\tlinear framebuffer access unavailable\n");
d164 2
a165 2
	    xf86Msg(X_WARNING, "checkDevMem: failed to open %s and %s\n"
		"\t(%s)\n", DEV_APERTURE, DEV_MEM, strerror(errno));
d167 3
a169 3
	    xf86Msg(X_WARNING, "checkDevMem: failed to open %s and %s\n"
		    "\t(%s)\n%s", DEV_APERTURE, DEV_MEM, strerror(errno),
		    SYSCTL_MSG);
d172 4
a175 4
	    xf86ErrorF("\tlinear framebuffer access unavailable\n");
	}
	useDevMem = FALSE;
	return;
d182 7
a188 9
	checkDevMem(TRUE);
	pVidMem->linearSupported = useDevMem;
	pVidMem->mapMem = mapVidMem;
	pVidMem->unmapMem = unmapVidMem;

#if HAVE_PCI_SYSTEM_INIT_DEV_MEM
	if (useDevMem)
		pci_system_init_dev_mem(devMemFd);
#endif
d191 6
a196 6
	if (useDevMem) {
		if (cleanMTRR()) {
			pVidMem->setWC = setWC;
			pVidMem->undoWC = undoWC;
		}
	}
d199 2
a200 2
	pVidMem->setWC = NetBSDsetWC;
	pVidMem->undoWC = NetBSDundoWC;
d202 1
a202 1
	pVidMem->initialised = TRUE;
d208 1
a208 1
	pointer base;
d210 1
a210 1
	checkDevMem(FALSE);
d212 32
a243 37
	if (useDevMem)
	{
	    if (devMemFd < 0) 
	    {
		FatalError("xf86MapVidMem: failed to open %s (%s)",
			   DEV_MEM, strerror(errno));
	    }
	    base = mmap((caddr_t)0, Size,
			(flags & VIDMEM_READONLY) ?
			 PROT_READ : (PROT_READ | PROT_WRITE),
			MAP_FLAGS, devMemFd, (off_t)Base);
	    if (base == MAP_FAILED)
	    {
		FatalError("%s: could not mmap %s [s=%lx,a=%lx] (%s)",
			   "xf86MapVidMem", DEV_MEM, Size, Base, 
			   strerror(errno));
	    }
	    return base;
	}
		
	/* else, mmap /dev/vga */
	if ((unsigned long)Base < 0xA0000 || (unsigned long)Base >= 0xC0000)
	{
		FatalError("%s: Address 0x%lx outside allowable range",
			   "xf86MapVidMem", Base);
	}
	base = mmap(0, Size,
		    (flags & VIDMEM_READONLY) ?
		     PROT_READ : (PROT_READ | PROT_WRITE),
		    MAP_FLAGS, xf86Info.screenFd,
		    (unsigned long)Base - 0xA0000);
	if (base == MAP_FAILED)
	{
	    FatalError("xf86MapVidMem: Could not mmap /dev/vga (%s)",
		       strerror(errno));
	}
	return base;
d249 1
a249 1
	munmap((caddr_t)Base, Size);
d258 1
a258 1
	     int Len)
d260 19
a278 20
	unsigned char *ptr;
	int psize;
	int mlen;

	checkDevMem(TRUE);
	if (devMemFd == -1) {
	    return -1;
	}

	psize = getpagesize();
	Offset += Base & (psize - 1);
	Base &= ~(psize - 1);
	mlen = (Offset + Len + psize - 1) & ~(psize - 1);
	ptr = (unsigned char *)mmap((caddr_t)0, mlen, PROT_READ,
					MAP_SHARED, devMemFd, (off_t)Base);
	if ((long)ptr == -1)
	{
		xf86Msg(X_WARNING, 
			"xf86ReadBIOS: %s mmap[s=%x,a=%lx,o=%lx] failed (%s)\n",
			DEV_MEM, Len, Base, Offset, strerror(errno));
d280 3
a282 3
		if (Base < 0xa0000) {
		    xf86Msg(X_WARNING, SYSCTL_MSG2);
		} 
d284 2
a285 2
		return -1;
	}
d287 2
a288 2
	ErrorF("xf86ReadBIOS: BIOS at 0x%08x has signature 0x%04x\n",
		Base, ptr[0] | (ptr[1] << 8));
d290 2
a291 2
	(void)memcpy(Buf, (void *)(ptr + Offset), Len);
	(void)munmap((caddr_t)ptr, mlen);
d293 3
a295 3
	xf86MsgVerb(X_INFO, 3, "xf86ReadBIOS(%x, %x, Buf, %x)"
		"-> %02x %02x %02x %02x...\n",
		Base, Offset, Len, Buf[0], Buf[1], Buf[2], Buf[3]);
d297 1
a297 1
	return Len;
d310 2
a311 2
	if (ExtendedEnabled)
		return TRUE;
d313 2
a314 2
	if (i386_iopl(TRUE) < 0)
	{
d316 2
a317 2
		xf86Msg(X_WARNING,"%s: Failed to set IOPL for extended I/O",
			   "xf86EnableIO");
d319 2
a320 2
		xf86Msg(X_WARNING,"%s: Failed to set IOPL for extended I/O\n%s",
			   "xf86EnableIO", SYSCTL_MSG);
d322 3
a324 3
		return FALSE;
	}
	ExtendedEnabled = TRUE;
d326 1
a326 1
	return TRUE;
d328 1
a328 1
	
d332 2
a333 2
	if (!ExtendedEnabled)
		return;
d335 7
a341 7
	if (i386_iopl(FALSE) == 0) {
		ExtendedEnabled = FALSE;
	}
	/* Otherwise, the X server has revoqued its root uid, 
	   and thus cannot give up IO privileges any more */
	   
	return;
d356 2
a357 2
	if (ExtendedEnabled)
		return TRUE;
d359 1
a359 2
	if (amd64_iopl(TRUE) < 0)
	{
d361 2
a362 2
		xf86Msg(X_WARNING,"%s: Failed to set IOPL for extended I/O",
			   "xf86EnableIO");
d364 2
a365 2
		xf86Msg(X_WARNING,"%s: Failed to set IOPL for extended I/O\n%s",
			   "xf86EnableIO", SYSCTL_MSG);
d367 3
a369 3
		return FALSE;
	}
	ExtendedEnabled = TRUE;
d371 1
a371 1
	return TRUE;
d373 1
a373 1
	
d377 8
a384 2
	if (!ExtendedEnabled)
		return;
d386 1
a386 7
	if (amd64_iopl(FALSE) == 0) {
		ExtendedEnabled = FALSE;
	}
	/* Otherwise, the X server has revoqued its root uid, 
	   and thus cannot give up IO privileges any more */
	   
	return;
d397 2
a398 2
	if (IoFd >= 0)
		return TRUE;
d400 6
a405 7
	if ((IoFd = open("/dev/io", O_RDWR)) == -1)
	{
		xf86Msg(X_WARNING,"xf86EnableIO: "
				"Failed to open /dev/io for extended I/O");
		return FALSE;
	}
	return TRUE;
d411 2
a412 2
	if (IoFd < 0)
		return;
d414 3
a416 3
	close(IoFd);
	IoFd = -1;
	return;
d427 2
a428 3
{    
    switch (xf86Info.consType)
    {
d430 8
a437 10
	case PCCONS:{

	    if (ioctl (xf86Info.consoleFd, CONSOLE_X_TV_ON, &mode) < 0)
	    {
		xf86Msg(X_WARNING,
		    "xf86SetTVOut: Could not set console to TV output, %s\n",
		    strerror(errno));
	    }
	}
	break;
d440 3
a442 3
	default:
	    FatalError("Xf86SetTVOut: Unsupported console");
	    break; 
d449 2
a450 3
{    
    switch (xf86Info.consType)
    {
d452 8
a459 10
	case PCCONS:{
	    
	    if (ioctl (xf86Info.consoleFd, CONSOLE_X_TV_OFF, 0) < 0)
	    {
		xf86Msg(X_WARNING,
		    "xf86SetTVOut: Could not set console to RGB output, %s\n",
		    strerror(errno));
	    }
	}
	break;
d462 3
a464 3
	default:
	    FatalError("Xf86SetTVOut: Unsupported console");
	    break; 
d485 2
a486 2
	struct mem_range_desc *mrd;
	struct mem_range_op mro;
d488 16
a503 16
	/*
	 * Find how many ranges there are.  If this fails, then the kernel
	 * probably doesn't have MTRR support.
	 */
	mro.mo_arg[0] = 0;
	if (ioctl(devMemFd, MEMRANGE_GET, &mro))
		return NULL;
	*nmr = mro.mo_arg[0];
	mrd = xnfalloc(*nmr * sizeof(struct mem_range_desc));
	mro.mo_arg[0] = *nmr;
	mro.mo_desc = mrd;
	if (ioctl(devMemFd, MEMRANGE_GET, &mro)) {
		free(mrd);
		return NULL;
	}
	return mrd;
d515 14
a528 14
	struct mem_range_desc *mrd;
	struct mem_range_op mro;
	int nmr, i;

	/* This shouldn't happen */
	if (devMemFd < 0)
		return FALSE;

	if (!(mrd = getAllRanges(&nmr)))
		return FALSE;

	for (i = 0; i < nmr; i++) {
		if (strcmp(mrd[i].mr_owner, X_MTRR_ID) == 0 &&
		    (mrd[i].mr_flags & MDF_ACTIVE)) {
d530 15
a544 14
			ErrorF("Clean for (0x%lx,0x%lx)\n",
				(unsigned long)mrd[i].mr_base,
				(unsigned long)mrd[i].mr_len);
#endif
			if (mrd[i].mr_flags & MDF_FIXACTIVE) {
				mro.mo_arg[0] = MEMRANGE_SET_UPDATE;
				mrd[i].mr_flags = MDF_UNCACHEABLE;
			} else {
				mro.mo_arg[0] = MEMRANGE_SET_REMOVE;
			}
			mro.mo_desc = mrd + i;
			ioctl(devMemFd, MEMRANGE_SET, &mro);
		}
	}
d546 1
a546 1
	sleep(10);
d548 2
a549 2
	free(mrd);
	return TRUE;
d553 3
a555 3
	struct mem_range_desc	mrd;
	Bool			wasWC;
	struct x_RangeRec *	next;
d561 1
a561 1
	RangePtr rp;
d563 5
a567 5
	while (range) {
		rp = range;
		range = rp->next;
		free(rp);
	}
d573 1
a573 1
	RangePtr new = NULL, rp, p;
d575 9
a583 9
	rp = list;
	while (rp) {
		p = xnfalloc(sizeof(RangeRec));
		*p = *rp;
		p->next = new;
		new = p;
		rp = rp->next;
	}
	return new;
d589 2
a590 2
	RangePtr rp1, rp2, copy, sorted = NULL, minp, prev, minprev;
	unsigned long minBase;
d592 28
a619 27
	/* Sort by base address */
	rp1 = copy = dupRangeList(list);
	while (rp1) {
		minBase = rp1->mrd.mr_base;
		minp = rp1;
		minprev = NULL;
		prev = rp1;
		rp2 = rp1->next;
		while (rp2) {
			if (rp2->mrd.mr_base < minBase) {
				minBase = rp2->mrd.mr_base;
				minp = rp2;
				minprev = prev;
			}
			prev = rp2;
			rp2 = rp2->next;
		}
		if (minprev) {
			minprev->next = minp->next;
			rp1 = copy;
		} else {
			rp1 = minp->next;
		}
		minp->next = sorted;
		sorted = minp;
	}
	return sorted;
d629 24
a652 24
	struct mem_range_desc *mrd;
	int nmr, i;
	RangePtr rp, *p;
	
	if (!(mrd = getAllRanges(&nmr)))
		return;

	for (i = 0; i < nmr; i++) {
		if ((mrd[i].mr_flags & MDF_ACTIVE) &&
		    mrd[i].mr_base < base + size &&
		    mrd[i].mr_base + mrd[i].mr_len > base) {
			if (mrd[i].mr_flags & MDF_WRITECOMBINE)
				p = wcp;
			else if (mrd[i].mr_flags & MDF_UNCACHEABLE)
				p = ucp;
			else
				continue;
			rp = xnfalloc(sizeof(RangeRec));
			rp->mrd = mrd[i];
			rp->next = *p;
			*p = rp;
		}
	}
	free(mrd);
d663 2
a664 2
	RangePtr rp1, sorted = NULL;
	unsigned long end;
d666 20
a685 19
	sorted = sortRangeList(overlap);
	/* Look for gaps */
	rp1 = sorted;
	end = base + size;
	while (rp1) {
		if (rp1->mrd.mr_base > base) {
			freeRangeList(sorted);
			return FALSE;
		} else {
			base = rp1->mrd.mr_base + rp1->mrd.mr_len;
		}
		if (base >= end) {
			freeRangeList(sorted);
			return TRUE;
		}
		rp1 = rp1->next;
	}
	freeRangeList(sorted);
	return FALSE;
d691 36
a726 35
	RangePtr uc = NULL, wc = NULL, retlist = NULL;
	struct mem_range_desc mrd;
	struct mem_range_op mro;

	findRanges(base, size, &uc, &wc);

	/* See of the full range is already WC */
	if (!uc && fullCoverage(base, size, wc)) {
		xf86DrvMsg(screenNum, from, 
		   "Write-combining range (0x%lx,0x%lx) was already set\n",
		    base, size);
		return NULL;
	}

	/* Otherwise, try to add the new range */
	mrd.mr_base = base;
	mrd.mr_len = size;
	strcpy(mrd.mr_owner, X_MTRR_ID);
	mrd.mr_flags = MDF_WRITECOMBINE;
	mro.mo_desc = &mrd;
	mro.mo_arg[0] = MEMRANGE_SET_UPDATE;
	if (ioctl(devMemFd, MEMRANGE_SET, &mro)) {
		xf86DrvMsg(screenNum, X_WARNING,
			   "Failed to set write-combining range "
			   "(0x%lx,0x%lx)\n", base, size);
		return NULL;
	} else {
		xf86DrvMsg(screenNum, from,
			   "Write-combining range (0x%lx,0x%lx)\n", base, size);
		retlist = xnfalloc(sizeof(RangeRec));
		retlist->mrd = mrd;
		retlist->wasWC = FALSE;
		retlist->next = NULL;
		return retlist;
	}
d732 41
a772 40
	RangePtr uc = NULL, wc = NULL, retlist = NULL;
	struct mem_range_desc mrd;
	struct mem_range_op mro;

	findRanges(base, size, &uc, &wc);

	/*
	 * See of the full range is already not WC, or if there is full
	 * coverage from UC ranges.
	 */
	if (!wc || fullCoverage(base, size, uc)) {
		xf86DrvMsg(screenNum, from, 
		   "Write-combining range (0x%lx,0x%lx) was already clear\n",
		    base, size);
		return NULL;
	}

	/* Otherwise, try to add the new range */
	mrd.mr_base = base;
	mrd.mr_len = size;
	strcpy(mrd.mr_owner, X_MTRR_ID);
	mrd.mr_flags = MDF_UNCACHEABLE;
	mro.mo_desc = &mrd;
	mro.mo_arg[0] = MEMRANGE_SET_UPDATE;
	if (ioctl(devMemFd, MEMRANGE_SET, &mro)) {
		xf86DrvMsg(screenNum, X_WARNING,
			   "Failed to remove write-combining range "
			   "(0x%lx,0x%lx)\n", base, size);
		/* XXX Should then remove all of the overlapping WC ranges */
		return NULL;
	} else {
		xf86DrvMsg(screenNum, from,
			   "Removed Write-combining range (0x%lx,0x%lx)\n",
			   base, size);
		retlist = xnfalloc(sizeof(RangeRec));
		retlist->mrd = mrd;
		retlist->wasWC = TRUE;
		retlist->next = NULL;
		return retlist;
	}
d777 1
a777 1
	MessageType from)
d779 4
a782 4
	if (enable)
		return addWC(screenNum, base, size, from);
	else
		return delWC(screenNum, base, size, from);
d788 3
a790 3
	RangePtr rp;
	struct mem_range_op mro;
	Bool failed;
d792 2
a793 2
	rp = list;
	while (rp) {
d795 34
a828 32
		ErrorF("Undo for (0x%lx,0x%lx), %d\n",
			(unsigned long)rp->mrd.mr_base,
			(unsigned long)rp->mrd.mr_len, rp->wasWC);
#endif
		failed = FALSE;
		if (rp->wasWC) {
			mro.mo_arg[0] = MEMRANGE_SET_UPDATE;
			rp->mrd.mr_flags = MDF_WRITECOMBINE;
			strcpy(rp->mrd.mr_owner, "unknown");
		} else {
			mro.mo_arg[0] = MEMRANGE_SET_REMOVE;
		}
		mro.mo_desc = &rp->mrd;

		if (ioctl(devMemFd, MEMRANGE_SET, &mro)) {
			if (!rp->wasWC) {
				mro.mo_arg[0] = MEMRANGE_SET_UPDATE;
				rp->mrd.mr_flags = MDF_UNCACHEABLE;
				strcpy(rp->mrd.mr_owner, "unknown");
				if (ioctl(devMemFd, MEMRANGE_SET, &mro))
					failed = TRUE;
			} else
				failed = TRUE;
		}
		if (failed) {
			xf86DrvMsg(screenNum, X_WARNING,
				"Failed to restore MTRR range (0x%lx,0x%lx)\n",
				(unsigned long)rp->mrd.mr_base,
				(unsigned long)rp->mrd.mr_len);
		}
		rp = rp->next;
	}
d837 1
a837 1
	    MessageType from)
d839 2
a840 2
	struct mtrr *mtrrp;
	int n;
d842 26
a867 26
	xf86DrvMsg(screenNum, X_WARNING,
		   "%s MTRR %lx - %lx\n", enable ? "set" : "remove",
		   base, (base + size));

	mtrrp = xnfalloc(sizeof (struct mtrr));
	mtrrp->base = base;
	mtrrp->len = size;
	mtrrp->type = MTRR_TYPE_WC;

	/*
	 * MTRR_PRIVATE will make this MTRR get reset automatically
	 * if this process exits, so we have no need for an explicit
	 * cleanup operation when starting a new server.
	 */

	if (enable)
		mtrrp->flags = MTRR_VALID | MTRR_PRIVATE;
	else
		mtrrp->flags = 0;
	n = 1;

	if (i386_set_mtrr(mtrrp, &n) < 0) {
		free(mtrrp);
		return NULL;
	}
	return mtrrp;
d873 2
a874 2
	struct mtrr *mtrrp = (struct mtrr *)list;
	int n;
d876 6
a881 6
	if (mtrrp == NULL)
		return;
	n = 1;
	mtrrp->flags &= ~MTRR_VALID;
	i386_set_mtrr(mtrrp, &n);
	free(mtrrp);
d889 2
a890 2
 * Do all things that need root privileges early 
 * and revoke those privileges 
d895 6
a900 4
	checkDevMem(TRUE);
	xf86EnableIO();
	pci_system_init();
	xf86OpenConsole();
@


1.8
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d234 1
a234 1
	    return(base);
d253 1
a253 1
	return(base);
d276 1
a276 1
	    return(-1);
d295 1
a295 1
		return(-1);
d308 1
a308 1
	return(Len);
d519 1
a519 1
		xfree(mrd);
d566 1
a566 1
	xfree(mrd);
d584 1
a584 1
		xfree(rp);
d669 1
a669 1
	xfree(mrd);
d876 1
a876 1
		xfree(mtrrp);
d893 1
a893 1
	xfree(mtrrp);
@


1.7
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d266 1
a266 1
_X_EXPORT int
d318 1
a318 1
_X_EXPORT Bool
d340 1
a340 1
_X_EXPORT void
@


1.6
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a433 32

/***************************************************************************/
/* Interrupt Handling section                                              */
/***************************************************************************/

_X_EXPORT Bool
xf86DisableInterrupts()
{

#ifdef __GNUC__
	__asm__ __volatile__("cli");
#else 
	asm("cli");
#endif /* __GNUC__ */

	return(TRUE);
}

_X_EXPORT void
xf86EnableInterrupts()
{

#ifdef __GNUC__
	__asm__ __volatile__("sti");
#else 
	asm("sti");
#endif /* __GNUC__ */

	return;
}


@


1.5
log
@Remove the special case for amd64 using MTRR.  Wasn't compiled in in the
first place, and didn't work anyways.

ok deraadt, oga, matthieu
@
text
@d190 5
d279 1
a279 1
	psize = xf86getpagesize();
d583 1
a583 1
				(unsigned long)rd[i].mr_len);
a824 4
	xf86DrvMsg(screenNum, X_WARNING,
		"%s MTRR %lx - %lx\n", enable ? "set" : "remove",
		base, (base + size));

d930 2
d941 1
@


1.4
log
@Support the new AGP device. Work by oga@@ and me, with some ideas from
dim@@ long ago.
@
text
@a56 5
#if defined(__OpenBSD__) && defined(__amd64__)
#include <machine/mtrr.h>
#include <machine/sysarch.h>
#endif

a104 5
#if defined(__amd64__) && defined(__OpenBSD__)
static pointer amd64setWC(int, unsigned long, unsigned long, Bool, 
    MessageType);
static void amd64undoWC(int, pointer);
#endif
a201 4
#if defined(__amd64__) && defined(__OpenBSD__)
	pVidMem->setWC = amd64setWC;
	pVidMem->undoWC = amd64undoWC;
#endif
d820 4
a926 51

#if defined(__OpenBSD__) && defined(__amd64__)
static pointer
amd64setWC(int screenNum, unsigned long base, unsigned long size, Bool enable,
	    MessageType from)
{
	struct mtrr *mtrrp;
	int n;

	xf86DrvMsg(screenNum, X_WARNING,
		   "%s MTRR %lx - %lx\n", enable ? "set" : "remove",
		   base, (base + size));

	mtrrp = xnfalloc(sizeof (struct mtrr));
	mtrrp->base = base;
	mtrrp->len = size;
	mtrrp->type = MTRR_TYPE_WC;

	/*
	 * MTRR_PRIVATE will make this MTRR get reset automatically
	 * if this process exits, so we have no need for an explicit
	 * cleanup operation when starting a new server.
	 */

	if (enable)
		mtrrp->flags = MTRR_VALID | MTRR_PRIVATE;
	else
		mtrrp->flags = 0;
	n = 1;

	if (amd64_set_mtrr(mtrrp, &n) < 0) {
		xfree(mtrrp);
		return NULL;
	}
	return mtrrp;
}

static void
amd64undoWC(int screenNum, pointer list)
{
	struct mtrr *mtrrp = (struct mtrr *)list;
	int n;

	if (mtrrp == NULL)
		return;
	n = 1;
	mtrrp->flags &= ~MTRR_VALID;
	amd64_set_mtrr(mtrrp, &n);
	xfree(mtrrp);
}
#endif /* OpenBSD/amd64 */
@


1.3
log
@merge xserver 1.4, 1st pass
@
text
@a999 1
	xf86AgpGARTSupported();
@


1.2
log
@OpenBSD local modifications:
- privilege separation
- some snprintf/strlc{at,py} conversions
- support for more architectures
- signal handler fixes
- default mouse wheel support in config tools
- sunmouse protocol
@
text
@a25 2
/* $XConsortium: bsd_video.c /main/10 1996/10/25 11:37:57 kaleb $ */

d50 5
@


1.1
log
@Initial revision
@
text
@a40 1
#include <sys/types.h>
d75 1
a75 1
		   "\trefer to xf86(4) for details"
d79 1
a79 1
		"\trefer to xf86(4) for details"
d128 3
a130 2
	if ((fd = open(DEV_MEM, O_RDWR)) >= 0)
	{
d133 3
a135 4
				 MAP_FLAGS, fd, (off_t)0xA0000);
	
	    if (base != MAP_FAILED)
	    {
d139 2
d143 1
a143 3
		/* This should not happen */
		if (warn)
		{
d145 1
a145 1
			    DEV_MEM, strerror(errno));
a146 2
		useDevMem = FALSE;
		return;
a147 6
	}
#ifndef HAS_APERTURE_DRV
	if (warn)
	{ 
	    xf86Msg(X_WARNING, "checkDevMem: failed to open %s (%s)\n",
		    DEV_MEM, strerror(errno));
d149 2
a150 6
	useDevMem = FALSE;
	return;
#else
	/* Failed to open /dev/mem, try the aperture driver */
	if ((fd = open(DEV_APERTURE, O_RDWR)) >= 0)
	{
d153 1
a153 1
			     MAP_FLAGS, fd, (off_t)0xA0000);
d155 1
a155 2
	    if (base != MAP_FAILED)
	    {
a158 2
		xf86Msg(X_INFO, "checkDevMem: using aperture driver %s\n",
		        DEV_APERTURE);
d161 1
a161 3

		if (warn)
		{
d163 1
a163 1
			    DEV_APERTURE, strerror(errno));
d166 7
a172 3
	} else {
	    if (warn)
	    {
d174 2
a175 2
		xf86Msg(X_WARNING, "checkDevMem: failed to open %s and %s\n"
			"\t(%s)\n", DEV_MEM, DEV_APERTURE, strerror(errno));
d177 3
a179 3
		xf86Msg(X_WARNING, "checkDevMem: failed to open %s and %s\n"
			"\t(%s)\n%s", DEV_MEM, DEV_APERTURE, strerror(errno),
			SYSCTL_MSG);
d181 2
a182 1
	    }
a183 1
	
a185 1

d253 1
a253 2
		    (unsigned long)Base - 0xA0000
	    );
d352 6
a357 3
	i386_iopl(FALSE);
	ExtendedEnabled = FALSE;

d986 14
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d26 2
a52 5
#ifdef __x86_64__
#define i386_set_mtrr x86_64_set_mtrr
#define i386_get_mtrr x86_64_get_mtrr
#define i386_iopl x86_64_iopl
#endif
@

