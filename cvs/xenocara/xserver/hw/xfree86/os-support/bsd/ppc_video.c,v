head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.8
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.6
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.2
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	OPENBSD_5_0:1.7.0.6
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.09.28.06.20.25;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	NMNhkYguWmFprv6a;

1.12
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	Te1daavkBLskZ8gc;

1.11
date	2014.09.27.17.53.02;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	cVXoV5PxI8YrEaVA;

1.10
date	2014.02.26.22.29.17;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2013.06.07.17.28.52;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2010.07.31.17.47.50;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2009.09.06.19.44.26;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.02.15.26.22;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2007.12.03.12.45.10;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.24.19.04.04;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.28.20.29.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.32;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.32;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.57.26;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Post-xserver 1.17 cleanup.
@
text
@/*
 * Copyright 1992 by Rich Murphey <Rich@@Rice.edu>
 * Copyright 1993 by David Wexelblat <dwex@@goblin.org>
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the names of Rich Murphey and David Wexelblat
 * not be used in advertising or publicity pertaining to distribution of
 * the software without specific, written prior permission.  Rich Murphey and
 * David Wexelblat make no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without express or
 * implied warranty.
 *
 * RICH MURPHEY AND DAVID WEXELBLAT DISCLAIM ALL WARRANTIES WITH REGARD TO
 * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS, IN NO EVENT SHALL RICH MURPHEY OR DAVID WEXELBLAT BE LIABLE FOR
 * ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
 * CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/X.h>
#include "xf86.h"
#include "xf86Priv.h"

#include "xf86_OSlib.h"
#include "xf86OSpriv.h"

#include "bus/Pci.h"

/***************************************************************************/
/* Video Memory Mapping section                                            */
/***************************************************************************/

#ifdef __OpenBSD__
#define DEV_MEM "/dev/xf86"
#endif

#ifdef __NetBSD__
Bool xf86EnableIO(void);
void xf86DisableIO(void);
#endif

void
xf86OSInitVidMem(VidMemInfoPtr pVidMem)
{
    xf86OpenConsole();
    
    pVidMem->initialised = TRUE;
    
    pci_system_init_dev_mem(xf86Info.consoleFd);
    xf86EnableIO();
}

volatile unsigned char *ioBase = MAP_FAILED;

#ifdef X_PRIVSEP
/*
 * Do all initialisation that need root privileges
 */
_X_EXPORT void
xf86PrivilegedInit(void)
{
    int kmem;

    kmem = open(DEV_MEM, 2);
    if (kmem == -1) {
        xf86Msg(X_PROBED,
                "no aperture driver access: only wsfb driver useable\n");
    }
    pci_system_init();
    xf86OpenConsole();
}
#endif

#ifdef __NetBSD__

Bool xf86EnableIO()
{
    int fd = xf86Info.consoleFd;

    xf86MsgVerb(X_WARNING, 3, "xf86EnableIO %d\n", fd);
    if (ioBase == MAP_FAILED) {
        ioBase = mmap(NULL, 0x10000, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
                      0xf2000000);
        xf86MsgVerb(X_INFO, 3, "xf86EnableIO: %08x\n", ioBase);
        if (ioBase == MAP_FAILED) {
            xf86MsgVerb(X_WARNING, 3, "Can't map IO space!\n");
            return FALSE;
        }
    }
    return TRUE;
}

void
xf86DisableIO()
{

    if (ioBase != MAP_FAILED) {
        munmap(__UNVOLATILE(ioBase), 0x10000);
        ioBase = MAP_FAILED;
    }
}

#endif /* __NetBSD__ */
@


1.12
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@a62 1

a64 11

static int kmem = -1;

_X_EXPORT int
xf86ReadBIOS(unsigned long Base, unsigned long Offset, unsigned char *Buf,
             int Len)
{

    return -1;
}

d72 2
d85 1
@


1.11
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@a46 3
static void *ppcMapVidMem(int, unsigned long, unsigned long, int flags);
static void ppcUnmapVidMem(int, void *, unsigned long);

a56 3
    pVidMem->linearSupported = TRUE;
    pVidMem->mapMem = ppcMapVidMem;
    pVidMem->unmapMem = ppcUnmapVidMem;
a65 27
static void *
ppcMapVidMem(int ScreenNum, unsigned long Base, unsigned long Size, int flags)
{
    int fd = xf86Info.consoleFd;
    void *base;

#ifdef DEBUG
    xf86MsgVerb(X_INFO, 3, "mapVidMem %lx, %lx, fd = %d",
                Base, Size, fd);
#endif

    base = mmap(0, Size,
                (flags & VIDMEM_READONLY) ?
                PROT_READ : (PROT_READ | PROT_WRITE),
                MAP_SHARED, fd, Base);
    if (base == MAP_FAILED)
        FatalError("%s: could not mmap screen [s=%lx,a=%lx] (%s)",
                   "xf86MapVidMem", Size, Base, strerror(errno));

    return base;
}

static void
ppcUnmapVidMem(int ScreenNum, void *Base, unsigned long Size)
{
    munmap(Base, Size);
}
a72 20
    int rv;
    
    if (Base < 0x80000000) {
        xf86Msg(X_WARNING, "No VGA Base=%#lx\n", Base);
        return 0;
    }

    if (kmem == -1) {
        kmem = open(DEV_MEM, 2);
        if (kmem == -1) {
            FatalError("xf86ReadBIOS: open %s", DEV_MEM);
        }
    }

#ifdef DEBUG
    xf86MsgVerb(X_INFO, 3, "xf86ReadBIOS() %lx %lx, %x\n", Base, Offset, Len);
#endif

    lseek(kmem, Base + Offset, 0);
    rv = read(kmem, Buf, Len);
d74 1
a74 1
    return rv;
@


1.10
log
@Call pci_system_init(), even if opening /dev/xf86 fails.  Makes it possible to
run X with machdep.allowaperture=0 on hardware supported by radeondrm(4)
on macppc too.

tested by landry@@
ok matthieu@@, deraadt@@
@
text
@d47 2
a48 2
static pointer ppcMapVidMem(int, unsigned long, unsigned long, int flags);
static void ppcUnmapVidMem(int, pointer, unsigned long);
d72 1
a72 1
static pointer
d76 1
a76 1
    pointer base;
d95 1
a95 1
ppcUnmapVidMem(int ScreenNum, pointer Base, unsigned long Size)
@


1.9
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d142 1
a142 3
    else {
        pci_system_init();
    }
@


1.8
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d59 1
a59 1

d64 1
a64 1

d70 1
a70 1
_X_EXPORT volatile unsigned char *ioBase = MAP_FAILED;
d77 1
d107 1
a107 1

d121 1
a121 2
    xf86MsgVerb(X_INFO, 3, "xf86ReadBIOS() %lx %lx, %x\n",
                Base, Offset, Len);
a123 1

a129 1

d156 1
a156 1
        ioBase = mmap(NULL, 0x10000, PROT_READ|PROT_WRITE, MAP_SHARED, fd,
d167 2
a168 1
void xf86DisableIO()
@


1.7
log
@Fix X -keepPriv by calling xf86OpenConsole() early enough on architectures
that don't have a separate /dev/xf86. Problem noticed by kettenis@@ and krw@@
ok kettenis@@.
@
text
@d9 2
a10 2
 * documentation, and that the names of Rich Murphey and David Wexelblat 
 * not be used in advertising or publicity pertaining to distribution of 
d12 2
a13 2
 * David Wexelblat make no representations about the suitability of this 
 * software for any purpose.  It is provided "as is" without express or 
d16 6
a21 6
 * RICH MURPHEY AND DAVID WEXELBLAT DISCLAIM ALL WARRANTIES WITH REGARD TO 
 * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND 
 * FITNESS, IN NO EVENT SHALL RICH MURPHEY OR DAVID WEXELBLAT BE LIABLE FOR 
 * ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER 
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF 
 * CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
a38 5
#ifndef MAP_FAILED
#define MAP_FAILED ((caddr_t)-1)
#endif


d43 1
a43 3
#ifndef __OpenBSD__
#define DEV_MEM "/dev/mem"
#else
d58 6
a63 1
	xf86OpenConsole();
d65 2
a66 8
	pVidMem->linearSupported = TRUE;
	pVidMem->mapMem = ppcMapVidMem;
	pVidMem->unmapMem = ppcUnmapVidMem;
	pVidMem->initialised = TRUE;
#if HAVE_PCI_SYSTEM_INIT_DEV_MEM
	pci_system_init_dev_mem(xf86Info.screenFd);
#endif
	xf86EnableIO();
d75 2
a76 2
	int fd = xf86Info.screenFd;
	pointer base;
d78 2
a79 2
	xf86MsgVerb(X_INFO, 3, "mapVidMem %lx, %lx, fd = %d", 
		    Base, Size, fd);
d82 7
a88 7
	base = mmap(0, Size,
		    (flags & VIDMEM_READONLY) ?
		     PROT_READ : (PROT_READ | PROT_WRITE),
		    MAP_SHARED, fd, Base);
	if (base == MAP_FAILED)
		FatalError("%s: could not mmap screen [s=%lx,a=%lx] (%s)",
			   "xf86MapVidMem", Size, Base, strerror(errno));
d90 1
a90 1
	return base;
d96 1
a96 1
	munmap(Base, Size);
d103 1
a103 1
	     int Len)
d105 1
a105 1
	int rv;
d107 11
a117 11
	if (Base < 0x80000000) {
		xf86Msg(X_WARNING, "No VGA Base=%#lx\n", Base);
		return 0;
	}

	if (kmem == -1) {
		kmem = open(DEV_MEM, 2);
		if (kmem == -1) {
			FatalError("xf86ReadBIOS: open %s", DEV_MEM);
		}
	}
d120 2
a121 2
	xf86MsgVerb(X_INFO, 3, "xf86ReadBIOS() %lx %lx, %x\n", 
		    Base, Offset, Len);
d125 2
a126 2
	lseek(kmem, Base + Offset, 0);
	rv = read(kmem, Buf, Len);
d128 1
a128 1
	return rv;
d134 1
a134 1
 * Do all initialisation that need root privileges 
d139 9
a147 8
 	kmem = open(DEV_MEM, 2);
 	if (kmem == -1) {
		xf86Msg(X_PROBED, 
		    "no aperture driver access: only wsfb driver useable\n");
 	} else {
		pci_system_init();
	}
	xf86OpenConsole();
d154 1
a154 1
        int fd = xf86Info.screenFd;
d156 8
a163 10
        xf86MsgVerb(X_WARNING, 3, "xf86EnableIO %d\n", fd);
        if (ioBase == MAP_FAILED)
        {
                ioBase=mmap(NULL, 0x10000, PROT_READ|PROT_WRITE, MAP_SHARED, fd,
                    0xf2000000);
                xf86MsgVerb(X_INFO, 3, "xf86EnableIO: %08x\n", ioBase);
                if (ioBase == MAP_FAILED) {
                        xf86MsgVerb(X_WARNING, 3, "Can't map IO space!\n");
			return FALSE;
		}
d165 2
a166 1
	return TRUE;
d172 4
a175 5
        if (ioBase != MAP_FAILED)
        {
                munmap(__UNVOLATILE(ioBase), 0x10000);
                ioBase = MAP_FAILED;
        }
@


1.6
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d65 2
@


1.5
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a136 17
/***************************************************************************/
/* Interrupt Handling section                                              */
/***************************************************************************/

_X_EXPORT Bool
xf86DisableInterrupts()
{

	return(TRUE);
}

_X_EXPORT void
xf86EnableInterrupts()
{

	return;
}
@


1.4
log
@Revert xf86EnableIO()/xf86DisableIO() on macpcc to NOP for now.
@
text
@d69 3
d167 1
a167 1
		pciInit();
@


1.3
log
@merge xserver 1.4, 1st pass
@
text
@d57 1
d60 1
d170 1
d199 1
@


1.2
log
@OpenBSD local modifications:
- privilege separation
- some snprintf/strlc{at,py} conversions
- support for more architectures
- signal handler fixes
- default mouse wheel support in config tools
- sunmouse protocol
@
text
@a25 2
/* $XConsortium: bsd_video.c /main/10 1996/10/25 11:37:57 kaleb $ */

d57 3
d67 1
d167 29
@


1.1
log
@Initial revision
@
text
@d86 1
a86 1
		FatalError("%s: could not mmap screen [s=%x,a=%x] (%s)",
d98 2
d105 5
a109 1
	static int kmem = -1;
d147 18
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d26 2
a58 3
Bool xf86EnableIO(void);
void xf86DisableIO(void);

a65 1
	xf86EnableIO();
a140 29

Bool xf86EnableIO()
{
        int fd = xf86Info.screenFd;

        xf86MsgVerb(X_WARNING, 3, "xf86EnableIO %d\n", fd);
        if (ioBase == MAP_FAILED)
        {
                ioBase=mmap(NULL, 0x10000, PROT_READ|PROT_WRITE, MAP_SHARED, fd,
                    0xf2000000);
                xf86MsgVerb(X_INFO, 3, "xf86EnableIO: %08x\n", ioBase);
                if (ioBase == MAP_FAILED) {
                        xf86MsgVerb(X_WARNING, 3, "Can't map IO space!\n");
			return FALSE;
		}
        }
	return TRUE;
}

void xf86DisableIO()
{

        if (ioBase != MAP_FAILED)
        {
                munmap(__UNVOLATILE(ioBase), 0x10000);
                ioBase = MAP_FAILED;
        }
}

@

