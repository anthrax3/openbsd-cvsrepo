head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.10
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.6
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.6
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	Te1daavkBLskZ8gc;

1.9
date	2014.09.27.17.53.02;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	cVXoV5PxI8YrEaVA;

1.8
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2010.08.28.17.59.01;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.27.19.02.33;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2009.09.08.06.56.28;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.06.19.44.26;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.25.19.49.29;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.24.21.02.23;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.21.20.06.35;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright (c) 2008 Mark Kettenis <kettenis@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/X.h>
#include "xf86.h"
#include "xf86Priv.h"

#include "xf86_OSlib.h"
#include "xf86OSpriv.h"

#include "xf86Bus.h"

#include <dev/wscons/wsconsio.h>

sbusDevice sbusInfo;

void
xf86SbusProbe(void)
{
	int fd = xf86Info.consoleFd;
	u_int gtype;

	if (ioctl(fd, WSDISPLAYIO_GTYPE, &gtype) == -1)
		return;

	switch (gtype) {
	case WSDISPLAY_TYPE_MGX:
		sbusInfo.devId = SBUS_DEVICE_MGX;
		break;
	case WSDISPLAY_TYPE_SUN24:
		sbusInfo.devId = SBUS_DEVICE_LEO;
		break;
	case WSDISPLAY_TYPE_SUNBW:
		sbusInfo.devId = SBUS_DEVICE_BW2;
		break;
	case WSDISPLAY_TYPE_SUNCG2:
		sbusInfo.devId = SBUS_DEVICE_CG2;
		break;
	case WSDISPLAY_TYPE_SUNCG3:
		sbusInfo.devId = SBUS_DEVICE_CG3;
		break;
	case WSDISPLAY_TYPE_SUNCG4:
		sbusInfo.devId = SBUS_DEVICE_CG4;
		break;
	case WSDISPLAY_TYPE_SUNCG6:
		sbusInfo.devId = SBUS_DEVICE_CG6;
		break;
	case WSDISPLAY_TYPE_SUNCG8:
		sbusInfo.devId = SBUS_DEVICE_CG8;
		break;
	case WSDISPLAY_TYPE_SUNCG12:
		sbusInfo.devId = SBUS_DEVICE_CG12;
		break;
	case WSDISPLAY_TYPE_SUNCG14:
		sbusInfo.devId = SBUS_DEVICE_CG14;
		break;
	case WSDISPLAY_TYPE_SUNFFB:
		sbusInfo.devId = SBUS_DEVICE_FFB;
		break;
	case WSDISPLAY_TYPE_SUNTCX:
		sbusInfo.devId = SBUS_DEVICE_TCX;
		break;
	}

	sbusInfo.fd = fd;
}

_X_EXPORT int
xf86MatchSbusInstances(const char *driverName, int sbusDevId,
		       GDevPtr *devList, int numDevs, DriverPtr drvp,
		       int **foundEntities)
{
	int *retEntities = NULL;
	EntityPtr p = NULL;
	int num;

	*foundEntities = NULL;
	if (sbusDevId == sbusInfo.devId) {
		if (xf86DoConfigure && xf86DoConfigurePass1) {
			GDevPtr pGDev;

			pGDev = xf86AddBusDeviceToConfigure(drvp->driverName,
							    BUS_SBUS,
							    &sbusInfo, -1);
			if (pGDev) {
				/*
				 * XF86Match???Instances() treat
				 * chipID and chipRev as overrides, so
				 * clobber them here.
				 */
				pGDev->chipID = pGDev->chipRev = -1;
			}
			return 1;
		}

		sbusInfo.device = devList[0]->identifier;
		num = xf86AllocateEntity();
		p = xf86Entities[num];
		p->driver = drvp;
		p->chipset = -1;
		p->bus.type = BUS_SBUS;
		xf86AddDevToEntity(num, devList[0]);
		p->active = TRUE;
		p->inUse = FALSE;
		retEntities = malloc(sizeof(int));
		retEntities[0] = num;
		*foundEntities = retEntities;
		return 1;
	}

	return 0;
}

_X_EXPORT sbusDevicePtr
xf86GetSbusInfoForEntity(int entityIndex)
{
	return &sbusInfo;
}

_X_EXPORT void
xf86SbusUseBuiltinMode(ScrnInfoPtr pScrn, sbusDevicePtr psdp)
{
	int fd = xf86Info.consoleFd;
	struct wsdisplay_fbinfo wdf;
	DisplayModePtr mode;

	if (ioctl(fd, WSDISPLAYIO_GINFO, &wdf) == -1)
		FatalError("%s: could not get mode (%s)",
			   "xf86SbusUseBuiltinMode", strerror(errno));

	mode = calloc(1, sizeof(DisplayModeRec));
	mode->name = "current";
	mode->next = mode;
	mode->prev = mode;
	mode->type = M_T_BUILTIN;
	mode->HDisplay = wdf.width;
	mode->VDisplay = wdf.height;
	pScrn->modes = mode;
	pScrn->virtualX = wdf.width;
	pScrn->virtualY = wdf.height;
}

_X_EXPORT void *
xf86MapSbusMem(sbusDevicePtr psdp, unsigned long Base, unsigned long Size)
{
	return mmap((void *)Base, (size_t)Size, PROT_READ|PROT_WRITE,
		0, psdp->fd, 0);
}

_X_EXPORT void
xf86UnmapSbusMem(sbusDevicePtr psdp, void *Base, unsigned long Size)
{
	munmap(Base, (size_t)Size);
}

_X_EXPORT void
xf86SbusHideOsHwCursor(sbusDevicePtr psdp)
{
}

int
sparcPromInit(void)
{
	return -1;
}

char *
sparcPromNode2Pathname(sbusPromNodePtr pnode)
{
	return NULL;
}

void
sparcPromClose(void)
{
}

char *
sparcDriverName(void)
{
	switch (sbusInfo.devId) {
	case SBUS_DEVICE_FFB:
		return "sunffb";
	default:
		return NULL;
	}
}
@


1.9
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d82 1
a82 1
	sbusInfo.fd = -1;
d163 2
a164 1
	return xf86MapVidMem(0, 0, Base, Size);
d170 1
a170 1
	xf86UnMapVidMem(0, Base, Size);
@


1.8
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d160 1
a160 1
_X_EXPORT pointer
d167 1
a167 1
xf86UnmapSbusMem(sbusDevicePtr psdp, pointer Base, unsigned long Size)
@


1.7
log
@Fix autoconfiguration for accelerated drivers on sparc/sparc64.  Currently
limited to sunffb; others will need to be added to bsd_sbus.c if we start
shipping them.

ok matthieu@@, oga@@
@
text
@d37 1
a37 1
	int fd = xf86Info.screenFd;
d122 1
a122 1
		retEntities = xalloc(sizeof(int));
d140 1
a140 1
	int fd = xf86Info.screenFd;
d148 1
a148 1
	mode = xnfcalloc(sizeof(DisplayModeRec), 1);
@


1.6
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d193 11
@


1.5
log
@sparcDeviceName: do not fall back to wsfb if no hw specific driver
was found. This is done in the caller already.
While there change to a switch() construct to prepare for potential
future drivers addition.
@
text
@d118 1
a118 1
		p->busType = BUS_SBUS;
a121 4
		/* Here we initialize the access structure */
		p->access = xnfcalloc(1,sizeof(EntityAccessRec));
		p->access->fallback = &AccessNULL;
		p->access->pAccess = &AccessNULL;
a191 12
}

char *
sparcDriverName(void)
{

	switch (sbusInfo.devId) {
	case SBUS_DEVICE_FFB:
		return "sunffb";
	default:
		return NULL;
	}
@


1.4
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d201 3
a203 1
	if (sbusInfo.devId == SBUS_DEVICE_FFB) 
d205 3
a207 2
	else
		return "wsfb";
@


1.3
log
@Since wscons(4) manages the hardware cursor for us, there's no nee to
fiddle with it here.  Pointed out by miod@@.

ok matthieu@@
@
text
@d197 9
@


1.2
log
@Make -configure work for SBus/UPA devices instead of crashing.

ok matthieu@@
@
text
@a178 8
	int fd = xf86Info.screenFd;
	struct wsdisplay_cursor curs;

	curs.which = WSDISPLAY_CURSOR_DOCUR;
	curs.enable = 0;
	if (ioctl(fd, WSDISPLAYIO_SCURSOR, &curs) == -1)
		FatalError("%s: could not disable cursor (%s)",
			   "xf86SbusHideOsHWCursor", strerror(errno));
@


1.1
log
@Add enough OpenBSD-specific sbus support code to be able to support the
sunffb driver.

ok matthieu@@
@
text
@d96 17
d187 17
@

