head	1.14;
access;
symbols
	OPENBSD_6_0:1.14.0.2
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.4
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.6
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.4
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2016.03.27.18.48.41;	author matthieu;	state Exp;
branches;
next	1.13;
commitid	johapJdQI1tPdy53;

1.13
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	Te1daavkBLskZ8gc;

1.12
date	2014.09.27.17.53.02;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	cVXoV5PxI8YrEaVA;

1.11
date	2013.06.07.17.28.52;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2010.12.05.15.36.07;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2009.09.06.19.44.26;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.04.22.22.12;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.04.05.58.43;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.02.15.26.22;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.24.19.04.04;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.03.13.20.49;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.28.20.29.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.30;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.30;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.57.25;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Make alpha_video.c build in recent X server.

Completely broken on VGA cards (libpciaccess doesn't know about
the alpha specific ways of mapping the PCI space),
only XRender is broken on TGA cards.
@
text
@/*
 * Copyright 1992 by Rich Murphey <Rich@@Rice.edu>
 * Copyright 1993 by David Wexelblat <dwex@@goblin.org>
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the names of Rich Murphey and David Wexelblat
 * not be used in advertising or publicity pertaining to distribution of
 * the software without specific, written prior permission.  Rich Murphey and
 * David Wexelblat make no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without express or
 * implied warranty.
 *
 * RICH MURPHEY AND DAVID WEXELBLAT DISCLAIM ALL WARRANTIES WITH REGARD TO
 * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS, IN NO EVENT SHALL RICH MURPHEY OR DAVID WEXELBLAT BE LIABLE FOR
 * ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
 * CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/X.h>
#include "xf86.h"
#include "xf86Priv.h"

#include <sys/param.h>
#ifndef __NetBSD__
#include <sys/sysctl.h>
#endif
#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__NetBSD__)
#include <machine/sysarch.h>
#endif
#include <machine/cpu.h>

#include "xf86_OSlib.h"
#include "xf86OSpriv.h"

#if defined(__NetBSD__) && !defined(MAP_FILE)
#define MAP_FLAGS MAP_SHARED
#else
#define MAP_FLAGS (MAP_FILE | MAP_SHARED)
#endif

#ifndef __NetBSD__
extern unsigned long dense_base(void);
#else                           /* __NetBSD__ */
static struct alpha_bus_window *abw;
static int abw_count = -1;

static void
init_abw(void)
{
    if (abw_count < 0) {
        abw_count = alpha_bus_getwindows(ALPHA_BUS_TYPE_PCI_MEM, &abw);
        if (abw_count <= 0)
            FatalError("init_abw: alpha_bus_getwindows failed\n");
    }
}

static unsigned long
dense_base(void)
{
    if (abw_count < 0)
        init_abw();

    /* XXX check abst_flags for ABST_DENSE just to be safe? */
    xf86Msg(X_INFO, "dense base = %#lx\n", abw[0].abw_abst.abst_sys_start);     /* XXXX */
    return abw[0].abw_abst.abst_sys_start;
}

static unsigned long
memory_base(void)
{
    if (abw_count < 0)
        init_abw();

    if (abw_count > 0) {
        xf86Msg(X_INFO, "memory base = %#lx\n",
                abw[1].abw_abst.abst_sys_start); /* XXXX */
        return abw[1].abw_abst.abst_sys_start;
    }
    else {
        xf86Msg(X_INFO, "no memory base\n"); /* XXXX */
        return 0;
    }
}
#endif                          /* __NetBSD__ */

static int
has_bwx(void)
{
    static int bwx = 0;
    size_t len = sizeof(bwx);
    int error;

    int mib[3];

    mib[0] = CTL_MACHDEP;
    mib[1] = CPU_CHIPSET;
    mib[2] = CPU_CHIPSET_BWX;

    if ((error = sysctl(mib, 3, &bwx, &len, NULL, 0)) < 0)
        return FALSE;
    else
        return bwx;
}

#define BUS_BASE	dense_base()
#define BUS_BASE_BWX	memory_base()

/***************************************************************************/
/* Video Memory Mapping section                                            */
/***************************************************************************/

#ifdef __OpenBSD__
#define SYSCTL_MSG "\tCheck that you have set 'machdep.allowaperture=1'\n"\
                  "\tin /etc/sysctl.conf and reboot your machine\n" \
                  "\trefer to xf86(4) for details"
#endif

static int devMemFd = -1;

#ifdef HAS_APERTURE_DRV
#define DEV_APERTURE "/dev/xf86"
#endif

/*
 * Check if /dev/mem can be mmap'd.  If it can't print a warning when
 * "warn" is TRUE.
 */
static void
checkDevMem(Bool warn)
{
    static Bool devMemChecked = FALSE;
    int fd;
    void *base;

    if (devMemChecked)
        return;
    devMemChecked = TRUE;

#ifdef HAS_APERTURE_DRV
    /* Try the aperture driver first */
    if ((fd = open(DEV_APERTURE, O_RDWR)) >= 0) {
        /* Try to map a page at the VGA address */
        base = mmap((caddr_t) 0, 4096, PROT_READ | PROT_WRITE,
                    MAP_FLAGS, fd, (off_t) 0xA0000 + BUS_BASE);

        if (base != MAP_FAILED) {
            munmap((caddr_t) base, 4096);
            devMemFd = fd;
            xf86Msg(X_INFO, "checkDevMem: using aperture driver %s\n",
                    DEV_APERTURE);
            return;
        }
        else {
            if (warn) {
                xf86Msg(X_WARNING, "checkDevMem: failed to mmap %s (%s)\n",
                        DEV_APERTURE, strerror(errno));
            }
        }
    }
#endif
    if ((fd = open(DEV_MEM, O_RDWR)) >= 0) {
        /* Try to map a page at the VGA address */
        base = mmap((caddr_t) 0, 4096, PROT_READ | PROT_WRITE,
                    MAP_FLAGS, fd, (off_t) 0xA0000 + BUS_BASE);

        if (base != MAP_FAILED) {
            munmap((caddr_t) base, 4096);
            devMemFd = fd;
            return;
        }
        else {
            if (warn) {
                xf86Msg(X_WARNING, "checkDevMem: failed to mmap %s (%s)\n",
                        DEV_MEM, strerror(errno));
            }
        }
    }
    if (warn) {
#ifndef HAS_APERTURE_DRV
        xf86Msg(X_WARNING, "checkDevMem: failed to open/mmap %s (%s)\n",
                DEV_MEM, strerror(errno));
#else
#ifndef __OpenBSD__
        xf86Msg(X_WARNING, "checkDevMem: failed to open %s and %s\n"
                "\t(%s)\n", DEV_APERTURE, DEV_MEM, strerror(errno));
#else                           /* __OpenBSD__ */
        xf86Msg(X_WARNING, "checkDevMem: failed to open %s and %s\n"
                "\t(%s)\n%s", DEV_APERTURE, DEV_MEM, strerror(errno),
                SYSCTL_MSG);
#endif                          /* __OpenBSD__ */
#endif
        xf86ErrorF("\tlinear framebuffer access unavailable\n");
    }
    return;
}

void
xf86OSInitVidMem(VidMemInfoPtr pVidMem)
{
    checkDevMem(TRUE);

    if (has_bwx()) {
        xf86Msg(X_PROBED, "Machine type has 8/16 bit access\n");
    }
    else {
        xf86Msg(X_PROBED, "Machine needs sparse mapping\n");
    }
    pVidMem->initialised = TRUE;
}


/*
 * Read BIOS via mmap()ing DEV_MEM
 */

_X_EXPORT int
xf86ReadBIOS(unsigned long Base, unsigned long Offset, unsigned char *Buf,
             int Len)
{
    unsigned char *ptr;
    int psize;
    int mlen;

    checkDevMem(TRUE);
    if (devMemFd == -1) {
        return -1;
    }

    psize = getpagesize();
    Offset += Base & (psize - 1);
    Base &= ~(psize - 1);
    mlen = (Offset + Len + psize - 1) & ~(psize - 1);
    ptr = (unsigned char *) mmap((caddr_t) 0, mlen, PROT_READ,
                                 MAP_SHARED, devMemFd, (off_t) Base + BUS_BASE);
    if ((long) ptr == -1) {
        xf86Msg(X_WARNING,
                "xf86ReadBIOS: %s mmap[s=%x,a=%lx,o=%lx] failed (%s)\n",
                DEV_MEM, Len, Base, Offset, strerror(errno));
        return -1;
    }
#ifdef DEBUG
    xf86MsgVerb(X_INFO, 3,
                "xf86ReadBIOS: BIOS at 0x%08x has signature 0x%04x\n", Base,
                ptr[0] | (ptr[1] << 8));
#endif
    (void) memcpy(Buf, (void *) (ptr + Offset), Len);
    (void) munmap((caddr_t) ptr, mlen);
#ifdef DEBUG
    xf86MsgVerb(X_INFO, 3, "xf86ReadBIOS(%x, %x, Buf, %x)"
                "-> %02x %02x %02x %02x...\n",
                Base, Offset, Len, Buf[0], Buf[1], Buf[2], Buf[3]);
#endif
    return Len;
}

#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__OpenBSD__)

extern int ioperm(unsigned long from, unsigned long num, int on);

_X_EXPORT Bool
xf86EnableIO()
{
    if (!ioperm(0, 65536, TRUE))
        return TRUE;
    return FALSE;
}

_X_EXPORT void
xf86DisableIO()
{
    return;
}

#endif                          /* __FreeBSD_kernel__ || __OpenBSD__ */

#ifdef USE_ALPHA_PIO

Bool
xf86EnableIO()
{
    alpha_pci_io_enable(1);
    return TRUE;
}

void
xf86DisableIO()
{
    alpha_pci_io_enable(0);
}

#endif                          /* USE_ALPHA_PIO */

extern int readDense8(void *Base, register unsigned long Offset);
extern int readDense16(void *Base, register unsigned long Offset);
extern int readDense32(void *Base, register unsigned long Offset);
extern void
 writeDense8(int Value, void *Base, register unsigned long Offset);
extern void
 writeDense16(int Value, void *Base, register unsigned long Offset);
extern void
 writeDense32(int Value, void *Base, register unsigned long Offset);

void (*xf86WriteMmio8) (int Value, void *Base, unsigned long Offset)
    = writeDense8;
void (*xf86WriteMmio16) (int Value, void *Base, unsigned long Offset)
    = writeDense16;
void (*xf86WriteMmio32) (int Value, void *Base, unsigned long Offset)
    = writeDense32;
int (*xf86ReadMmio8) (void *Base, unsigned long Offset)
    = readDense8;
int (*xf86ReadMmio16) (void *Base, unsigned long Offset)
    = readDense16;
int (*xf86ReadMmio32) (void *Base, unsigned long Offset)
    = readDense32;

/*
 * Do all things that need root privileges early 
 * and revoke those priviledges 
 */
_X_EXPORT void
xf86PrivilegedInit(void)
{
    xf86EnableIO();
    checkDevMem(TRUE);
    pci_system_init();
    xf86OpenConsole();
}

@


1.13
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d41 1
a41 2

#include "shared/xf86Axp.h"
d97 19
a211 1
    pVidMem->linearSupported = useDevMem;
a214 2
        pVidMem->mapMem = mapVidMem;
        pVidMem->unmapMem = unmapVidMem;
a217 8
        pVidMem->mapMem = mapVidMemSparse;
        pVidMem->unmapMem = unmapVidMemSparse;
#ifndef __NetBSD__
        if (axpSystem == -1)
            axpSystem = bsdGetAXP();
        hae_thresh = xf86AXPParams[axpSystem].hae_thresh;
        hae_mask = xf86AXPParams[axpSystem].hae_mask;
#endif                          /* __NetBSD__ */
a221 45
static void *
mapVidMem(int ScreenNum, unsigned long Base, unsigned long Size, int flags)
{
    void *base;

    checkDevMem(FALSE);
    Base = Base & ((1L << 32) - 1);

    if (useDevMem) {
        if (devMemFd < 0) {
            FatalError("xf86MapVidMem: failed to open %s (%s)\n",
                       DEV_MEM, strerror(errno));
        }
        base = mmap((caddr_t) 0, Size,
                    (flags & VIDMEM_READONLY) ?
                    PROT_READ : (PROT_READ | PROT_WRITE),
                    MAP_FLAGS, devMemFd, (off_t) Base + BUS_BASE_BWX);
        if (base == MAP_FAILED) {
            FatalError("%s: could not mmap %s [s=%lx,a=%lx] (%s)\n",
                       "xf86MapVidMem", DEV_MEM, Size, Base, strerror(errno));
        }
        return base;
    }

    /* else, mmap /dev/vga */
    if ((unsigned long) Base < 0xA0000 || (unsigned long) Base >= 0xC0000) {
        FatalError("%s: Address 0x%lx outside allowable range\n",
                   "xf86MapVidMem", Base);
    }
    base = mmap(0, Size,
                (flags & VIDMEM_READONLY) ?
                PROT_READ : (PROT_READ | PROT_WRITE),
                MAP_FLAGS, xf86Info.consoleFd, (unsigned long) Base + BUS_BASE);
    if (base == MAP_FAILED) {
        FatalError("xf86MapVidMem: Could not mmap /dev/vga (%s)\n",
                   strerror(errno));
    }
    return base;
}

static void
unmapVidMem(int ScreenNum, void *Base, unsigned long Size)
{
    munmap((caddr_t) Base, Size);
}
@


1.12
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d9 2
a10 2
 * documentation, and that the names of Rich Murphey and David Wexelblat 
 * not be used in advertising or publicity pertaining to distribution of 
d12 2
a13 2
 * David Wexelblat make no representations about the suitability of this 
 * software for any purpose.  It is provided "as is" without express or 
d16 6
a21 6
 * RICH MURPHEY AND DAVID WEXELBLAT DISCLAIM ALL WARRANTIES WITH REGARD TO 
 * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND 
 * FITNESS, IN NO EVENT SHALL RICH MURPHEY OR DAVID WEXELBLAT BE LIABLE FOR 
 * ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER 
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF 
 * CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
a52 2
axpDevice bsdGetAXP(void);

a54 56

static int axpSystem = -1;
static unsigned long hae_thresh;
static unsigned long hae_mask;

static unsigned long
memory_base(void)
{
    static unsigned long base = 0;

    if (base == 0) {
        size_t len = sizeof(base);
        int error;

#ifdef __OpenBSD__
        int mib[3];

        mib[0] = CTL_MACHDEP;
        mib[1] = CPU_CHIPSET;
        mib[2] = CPU_CHIPSET_MEM;

        if ((error = sysctl(mib, 3, &base, &len, NULL, 0)) < 0)
#else
        if ((error = sysctlbyname("hw.chipset.memory", &base, &len, 0, 0)) < 0)
#endif
            FatalError("xf86MapVidMem: can't find memory\n");
    }

    return base;
}

static int
has_bwx(void)
{
    static int bwx = 0;
    size_t len = sizeof(bwx);
    int error;

#ifdef __OpenBSD__
    int mib[3];

    mib[0] = CTL_MACHDEP;
    mib[1] = CPU_CHIPSET;
    mib[2] = CPU_CHIPSET_BWX;

    if ((error = sysctl(mib, 3, &bwx, &len, NULL, 0)) < 0)
        return FALSE;
    else
        return bwx;
#else
    if ((error = sysctlbyname("hw.chipset.bwx", &bwx, &len, 0, 0)) < 0)
        return FALSE;
    else
        return bwx;
#endif
}
a55 2
static unsigned long hae_thresh = (1UL << 24);
static unsigned long hae_mask = 0xf8000000UL;   /* XXX - should use xf86AXP.c */
a68 10
static int
has_bwx(void)
{
    if (abw_count < 0)
        init_abw();

    xf86Msg(X_INFO, "has_bwx = %d\n", abw[0].abw_abst.abst_flags & ABST_BWX ? 1 : 0);   /* XXXX */
    return abw[0].abw_abst.abst_flags & ABST_BWX;
}

a110 1
static Bool useDevMem = FALSE;
a116 5
static void *mapVidMem(int, unsigned long, unsigned long, int);
static void unmapVidMem(int, void *, unsigned long);
static void *mapVidMemSparse(int, unsigned long, unsigned long, int);
static void unmapVidMemSparse(int, void *, unsigned long);

a141 1
            useDevMem = TRUE;
a161 1
            useDevMem = TRUE;
a186 1
    useDevMem = FALSE;
a341 5
#define vuip    volatile unsigned int *

static void *memSBase = 0;
static void *memBase = 0;

a345 6
 writeDenseNB8(int Value, void *Base, register unsigned long Offset);
extern void
 writeDenseNB16(int Value, void *Base, register unsigned long Offset);
extern void
 writeDenseNB32(int Value, void *Base, register unsigned long Offset);
extern void
a351 217
static int readSparse8(void *Base, register unsigned long Offset);
static int readSparse16(void *Base, register unsigned long Offset);
static int readSparse32(void *Base, register unsigned long Offset);
static void
 writeSparseNB8(int Value, void *Base, register unsigned long Offset);
static void
 writeSparseNB16(int Value, void *Base, register unsigned long Offset);
static void
 writeSparseNB32(int Value, void *Base, register unsigned long Offset);
static void
 writeSparse8(int Value, void *Base, register unsigned long Offset);
static void
 writeSparse16(int Value, void *Base, register unsigned long Offset);
static void
 writeSparse32(int Value, void *Base, register unsigned long Offset);

#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
extern int sysarch(int, void *);

struct parms {
    u_int64_t hae;
};

static void
sethae(u_int64_t hae)
{
#ifndef ALPHA_SETHAE
#define ALPHA_SETHAE 0
#endif
    static struct parms p;

    if (p.hae != hae) {
        p.hae = hae;
        sysarch(ALPHA_SETHAE, (char *) &p);
    }
}
#endif

static void *
mapVidMemSparse(int ScreenNum, unsigned long Base, unsigned long Size,
                int flags)
{
    static Bool was_here = FALSE;

    if (!was_here) {
        was_here = TRUE;

        checkDevMem(FALSE);

        xf86WriteMmio8 = writeSparse8;
        xf86WriteMmio16 = writeSparse16;
        xf86WriteMmio32 = writeSparse32;
        xf86WriteMmioNB8 = writeSparseNB8;
        xf86WriteMmioNB16 = writeSparseNB16;
        xf86WriteMmioNB32 = writeSparseNB32;
        xf86ReadMmio8 = readSparse8;
        xf86ReadMmio16 = readSparse16;
        xf86ReadMmio32 = readSparse32;

        memBase = mmap((caddr_t) 0, 0x100000000,
                       PROT_READ | PROT_WRITE,
                       MAP_SHARED, devMemFd, (off_t) BUS_BASE);
        memSBase = mmap((caddr_t) 0, 0x100000000,
                        PROT_READ | PROT_WRITE,
                        MAP_SHARED, devMemFd, (off_t) BUS_BASE_BWX);

        if (memSBase == MAP_FAILED || memBase == MAP_FAILED) {
            FatalError("xf86MapVidMem: Could not mmap framebuffer (%s)\n",
                       strerror(errno));
        }
    }
    return (void *) ((unsigned long) memBase + Base);
}

static void
unmapVidMemSparse(int ScreenNum, void *Base, unsigned long Size)
{
}

static int
readSparse8(void *Base, register unsigned long Offset)
{
    register unsigned long result, shift;
    register unsigned long msb;

    mem_barrier();
    Offset += (unsigned long) Base - (unsigned long) memBase;
    shift = (Offset & 0x3) << 3;
    if (Offset >= (hae_thresh)) {
        msb = Offset & hae_mask;
        Offset -= msb;
#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
        sethae(msb);
#endif
    }
    result = *(vuip) ((unsigned long) memSBase + (Offset << 5));
    result >>= shift;
    return 0xffUL & result;
}

static int
readSparse16(void *Base, register unsigned long Offset)
{
    register unsigned long result, shift;
    register unsigned long msb;

    mem_barrier();
    Offset += (unsigned long) Base - (unsigned long) memBase;
    shift = (Offset & 0x2) << 3;
    if (Offset >= (hae_thresh)) {
        msb = Offset & hae_mask;
        Offset -= msb;
#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
        sethae(msb);
#endif
    }
    result =
        *(vuip) ((unsigned long) memSBase + (Offset << 5) + (1 << (5 - 2)));
    result >>= shift;
    return 0xffffUL & result;
}

static int
readSparse32(void *Base, register unsigned long Offset)
{
    mem_barrier();
    return *(vuip) ((unsigned long) Base + (Offset));
}

static void
writeSparse8(int Value, void *Base, register unsigned long Offset)
{
    register unsigned long msb;
    register unsigned int b = Value & 0xffU;

    write_mem_barrier();
    Offset += (unsigned long) Base - (unsigned long) memBase;
    if (Offset >= (hae_thresh)) {
        msb = Offset & hae_mask;
        Offset -= msb;
#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
        sethae(msb);
#endif
    }
    *(vuip) ((unsigned long) memSBase + (Offset << 5)) = b * 0x01010101;
}

static void
writeSparse16(int Value, void *Base, register unsigned long Offset)
{
    register unsigned long msb;
    register unsigned int w = Value & 0xffffU;

    write_mem_barrier();
    Offset += (unsigned long) Base - (unsigned long) memBase;
    if (Offset >= (hae_thresh)) {
        msb = Offset & hae_mask;
        Offset -= msb;
#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
        sethae(msb);
#endif
    }
    *(vuip) ((unsigned long) memSBase + (Offset << 5) + (1 << (5 - 2))) =
        w * 0x00010001;

}

static void
writeSparse32(int Value, void *Base, register unsigned long Offset)
{
    write_mem_barrier();
    *(vuip) ((unsigned long) Base + (Offset)) = Value;
    return;
}

static void
writeSparseNB8(int Value, void *Base, register unsigned long Offset)
{
    register unsigned long msb;
    register unsigned int b = Value & 0xffU;

    Offset += (unsigned long) Base - (unsigned long) memBase;
    if (Offset >= (hae_thresh)) {
        msb = Offset & hae_mask;
        Offset -= msb;
#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
        sethae(msb);
#endif
    }
    *(vuip) ((unsigned long) memSBase + (Offset << 5)) = b * 0x01010101;
}

static void
writeSparseNB16(int Value, void *Base, register unsigned long Offset)
{
    register unsigned long msb;
    register unsigned int w = Value & 0xffffU;

    Offset += (unsigned long) Base - (unsigned long) memBase;
    if (Offset >= (hae_thresh)) {
        msb = Offset & hae_mask;
        Offset -= msb;
#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
        sethae(msb);
#endif
    }
    *(vuip) ((unsigned long) memSBase + (Offset << 5) + (1 << (5 - 2))) =
        w * 0x00010001;
}

static void
writeSparseNB32(int Value, void *Base, register unsigned long Offset)
{
    *(vuip) ((unsigned long) Base + (Offset)) = Value;
    return;
}

a357 6
void (*xf86WriteMmioNB8) (int Value, void *Base, unsigned long Offset)
    = writeDenseNB8;
void (*xf86WriteMmioNB16) (int Value, void *Base, unsigned long Offset)
    = writeDenseNB16;
void (*xf86WriteMmioNB32) (int Value, void *Base, unsigned long Offset)
    = writeDenseNB32;
@


1.11
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d188 4
a191 4
static pointer mapVidMem(int, unsigned long, unsigned long, int);
static void unmapVidMem(int, pointer, unsigned long);
static pointer mapVidMemSparse(int, unsigned long, unsigned long, int);
static void unmapVidMemSparse(int, pointer, unsigned long);
d202 1
a202 1
    pointer base;
d294 1
a294 1
static pointer
d297 1
a297 1
    pointer base;
d335 1
a335 1
unmapVidMem(int ScreenNum, pointer Base, unsigned long Size)
d423 2
a424 2
static pointer memSBase = 0;
static pointer memBase = 0;
d426 3
a428 3
extern int readDense8(pointer Base, register unsigned long Offset);
extern int readDense16(pointer Base, register unsigned long Offset);
extern int readDense32(pointer Base, register unsigned long Offset);
d430 1
a430 1
 writeDenseNB8(int Value, pointer Base, register unsigned long Offset);
d432 1
a432 1
 writeDenseNB16(int Value, pointer Base, register unsigned long Offset);
d434 1
a434 1
 writeDenseNB32(int Value, pointer Base, register unsigned long Offset);
d436 1
a436 1
 writeDense8(int Value, pointer Base, register unsigned long Offset);
d438 1
a438 1
 writeDense16(int Value, pointer Base, register unsigned long Offset);
d440 1
a440 1
 writeDense32(int Value, pointer Base, register unsigned long Offset);
d442 3
a444 3
static int readSparse8(pointer Base, register unsigned long Offset);
static int readSparse16(pointer Base, register unsigned long Offset);
static int readSparse32(pointer Base, register unsigned long Offset);
d446 1
a446 1
 writeSparseNB8(int Value, pointer Base, register unsigned long Offset);
d448 1
a448 1
 writeSparseNB16(int Value, pointer Base, register unsigned long Offset);
d450 1
a450 1
 writeSparseNB32(int Value, pointer Base, register unsigned long Offset);
d452 1
a452 1
 writeSparse8(int Value, pointer Base, register unsigned long Offset);
d454 1
a454 1
 writeSparse16(int Value, pointer Base, register unsigned long Offset);
d456 1
a456 1
 writeSparse32(int Value, pointer Base, register unsigned long Offset);
d480 1
a480 1
static pointer
d513 1
a513 1
    return (pointer) ((unsigned long) memBase + Base);
d517 1
a517 1
unmapVidMemSparse(int ScreenNum, pointer Base, unsigned long Size)
d522 1
a522 1
readSparse8(pointer Base, register unsigned long Offset)
d543 1
a543 1
readSparse16(pointer Base, register unsigned long Offset)
d565 1
a565 1
readSparse32(pointer Base, register unsigned long Offset)
d572 1
a572 1
writeSparse8(int Value, pointer Base, register unsigned long Offset)
d590 1
a590 1
writeSparse16(int Value, pointer Base, register unsigned long Offset)
d610 1
a610 1
writeSparse32(int Value, pointer Base, register unsigned long Offset)
d618 1
a618 1
writeSparseNB8(int Value, pointer Base, register unsigned long Offset)
d635 1
a635 1
writeSparseNB16(int Value, pointer Base, register unsigned long Offset)
d653 1
a653 1
writeSparseNB32(int Value, pointer Base, register unsigned long Offset)
d659 1
a659 1
void (*xf86WriteMmio8) (int Value, pointer Base, unsigned long Offset)
d661 1
a661 1
void (*xf86WriteMmio16) (int Value, pointer Base, unsigned long Offset)
d663 1
a663 1
void (*xf86WriteMmio32) (int Value, pointer Base, unsigned long Offset)
d665 1
a665 1
void (*xf86WriteMmioNB8) (int Value, pointer Base, unsigned long Offset)
d667 1
a667 1
void (*xf86WriteMmioNB16) (int Value, pointer Base, unsigned long Offset)
d669 1
a669 1
void (*xf86WriteMmioNB32) (int Value, pointer Base, unsigned long Offset)
d671 1
a671 1
int (*xf86ReadMmio8) (pointer Base, unsigned long Offset)
d673 1
a673 1
int (*xf86ReadMmio16) (pointer Base, unsigned long Offset)
d675 1
a675 1
int (*xf86ReadMmio32) (pointer Base, unsigned long Offset)
@


1.10
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d9 2
a10 2
 * documentation, and that the names of Rich Murphey and David Wexelblat
 * not be used in advertising or publicity pertaining to distribution of
d12 2
a13 2
 * David Wexelblat make no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without express or
d16 6
a21 6
 * RICH MURPHEY AND DAVID WEXELBLAT DISCLAIM ALL WARRANTIES WITH REGARD TO
 * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS, IN NO EVENT SHALL RICH MURPHEY OR DAVID WEXELBLAT BE LIABLE FOR
 * ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
 * CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
d70 1
d80 1
a80 2
        if ((error = sysctlbyname("hw.chipset.memory", &base, &len,
                                      0, 0)) < 0)
d84 1
d94 1
d113 1
a113 1
#else /* __NetBSD__ */
d115 1
a115 1
static unsigned long hae_mask = 0xf8000000UL; /* XXX - should use xf86AXP.c */
d135 1
a135 2
    xf86Msg(X_INFO, "has_bwx = %d\n",
            abw[0].abw_abst.abst_flags & ABST_BWX ? 1 : 0);     /* XXXX */
d146 1
a146 2
    xf86Msg(X_INFO, "dense base = %#lx\n",
            abw[0].abw_abst.abst_sys_start); /* XXXX */
d166 1
a166 1
#endif /* __NetBSD__ */
d168 2
a169 2
#define BUS_BASE        dense_base()
#define BUS_BASE_BWX    memory_base()
d176 1
a176 1
#define SYSCTL_MSG "\tCheck that you have set 'machdep.allowaperture=1'\n" \
d182 1
a182 1
static int  devMemFd = -1;
d212 2
a213 2
        base = mmap((caddr_t)0, 4096, PROT_READ | PROT_WRITE,
                    MAP_FLAGS, fd, (off_t)0xA0000 + BUS_BASE);
d216 1
a216 1
            munmap((caddr_t)base, 4096);
d233 2
a234 2
        base = mmap((caddr_t)0, 4096, PROT_READ | PROT_WRITE,
                    MAP_FLAGS, fd, (off_t)0xA0000 + BUS_BASE);
d237 1
a237 1
            munmap((caddr_t)base, 4096);
d257 1
a257 1
#else /* __OpenBSD__ */
d261 1
a261 1
#endif /* __OpenBSD__ */
d276 1
a276 1
        xf86Msg(X_PROBED,"Machine type has 8/16 bit access\n");
d281 1
a281 1
        xf86Msg(X_PROBED,"Machine needs sparse mapping\n");
d289 1
a289 1
#endif /* __NetBSD__ */
d300 1
a300 1
    Base = Base & ((1L<<32) - 1);
d307 1
a307 1
        base = mmap((caddr_t)0, Size,
d310 1
a310 1
                    MAP_FLAGS, devMemFd, (off_t)Base + BUS_BASE_BWX);
d313 1
a313 2
                       "xf86MapVidMem", DEV_MEM, Size, Base,
                       strerror(errno));
d319 1
a319 1
    if ((unsigned long)Base < 0xA0000 || (unsigned long)Base >= 0xC0000) {
d326 1
a326 2
                MAP_FLAGS, xf86Info.consoleFd,
                (unsigned long)Base + BUS_BASE);
d337 1
a337 1
    munmap((caddr_t)Base, Size);
d361 3
a363 3
    ptr = (unsigned char *)mmap((caddr_t)0, mlen, PROT_READ,
                                MAP_SHARED, devMemFd, (off_t)Base+BUS_BASE);
    if ((long)ptr == -1) {
d370 3
a372 2
    xf86MsgVerb(X_INFO, 3, "xf86ReadBIOS: BIOS at 0x%08x has signature 0x%04x\n",
                Base, ptr[0] | (ptr[1] << 8));
d374 2
a375 2
    (void)memcpy(Buf, (void *)(ptr + Offset), Len);
    (void)munmap((caddr_t)ptr, mlen);
a383 1

d402 1
a402 1
#endif /* __FreeBSD_kernel__ || __OpenBSD__ */
d419 1
a419 1
#endif /* USE_ALPHA_PIO */
d430 1
a430 1
writeDenseNB8(int Value, pointer Base, register unsigned long Offset);
d432 1
a432 1
writeDenseNB16(int Value, pointer Base, register unsigned long Offset);
d434 1
a434 1
writeDenseNB32(int Value, pointer Base, register unsigned long Offset);
d436 1
a436 1
writeDense8(int Value, pointer Base, register unsigned long Offset);
d438 1
a438 1
writeDense16(int Value, pointer Base, register unsigned long Offset);
d440 1
a440 1
writeDense32(int Value, pointer Base, register unsigned long Offset);
d446 1
a446 1
writeSparseNB8(int Value, pointer Base, register unsigned long Offset);
d448 1
a448 1
writeSparseNB16(int Value, pointer Base, register unsigned long Offset);
d450 1
a450 1
writeSparseNB32(int Value, pointer Base, register unsigned long Offset);
d452 1
a452 1
writeSparse8(int Value, pointer Base, register unsigned long Offset);
d454 1
a454 1
writeSparse16(int Value, pointer Base, register unsigned long Offset);
d456 1
a456 1
writeSparse32(int Value, pointer Base, register unsigned long Offset);
d475 1
a475 1
        sysarch(ALPHA_SETHAE, (char *)&p);
d481 2
a482 1
mapVidMemSparse(int ScreenNum, unsigned long Base, unsigned long Size, int flags)
d501 1
a501 1
        memBase = mmap((caddr_t)0, 0x100000000,
d503 2
a504 3
                       MAP_SHARED, devMemFd,
                       (off_t) BUS_BASE);
        memSBase = mmap((caddr_t)0, 0x100000000,
d506 1
a506 2
                        MAP_SHARED, devMemFd,
                        (off_t) BUS_BASE_BWX);
d508 1
a508 1
        if (memSBase == MAP_FAILED || memBase == MAP_FAILED)    {
d513 1
a513 1
    return (pointer)((unsigned long)memBase + Base);
d526 1
d528 1
a528 1
    Offset += (unsigned long)Base - (unsigned long)memBase;
d537 1
a537 1
    result = *(vuip) ((unsigned long)memSBase + (Offset << 5));
d549 1
a549 1
    Offset += (unsigned long)Base - (unsigned long)memBase;
d558 2
a559 1
    result = *(vuip)((unsigned long)memSBase+(Offset<<5)+(1<<(5-2)));
d568 1
a568 1
    return *(vuip)((unsigned long)Base+(Offset));
d578 1
a578 1
    Offset += (unsigned long)Base - (unsigned long)memBase;
d586 1
a586 1
    *(vuip) ((unsigned long)memSBase + (Offset << 5)) = b * 0x01010101;
d596 1
a596 1
    Offset += (unsigned long)Base - (unsigned long)memBase;
d604 1
a604 1
    *(vuip)((unsigned long)memSBase+(Offset<<5)+(1<<(5-2))) =
d613 1
a613 1
    *(vuip)((unsigned long)Base + (Offset)) = Value;
d623 1
a623 1
    Offset += (unsigned long)Base - (unsigned long)memBase;
d631 1
a631 1
    *(vuip) ((unsigned long)memSBase + (Offset << 5)) = b * 0x01010101;
d640 1
a640 1
    Offset += (unsigned long)Base - (unsigned long)memBase;
d642 1
a642 1
        msb = Offset & hae_mask ;
d648 1
a648 1
    *(vuip)((unsigned long)memSBase+(Offset<<5)+(1<<(5-2))) =
d655 1
a655 1
    *(vuip)((unsigned long)Base + (Offset)) = Value;
d659 18
a676 18
_X_EXPORT void (*xf86WriteMmio8)(int Value, pointer Base, unsigned long Offset)
     = writeDense8;
_X_EXPORT void (*xf86WriteMmio16)(int Value, pointer Base, unsigned long Offset)
     = writeDense16;
_X_EXPORT void (*xf86WriteMmio32)(int Value, pointer Base, unsigned long Offset)
     = writeDense32;
_X_EXPORT void (*xf86WriteMmioNB8)(int Value, pointer Base, unsigned long Offset)
     = writeDenseNB8;
_X_EXPORT void (*xf86WriteMmioNB16)(int Value, pointer Base, unsigned long Offset)
     = writeDenseNB16;
_X_EXPORT void (*xf86WriteMmioNB32)(int Value, pointer Base, unsigned long Offset)
     = writeDenseNB32;
_X_EXPORT int  (*xf86ReadMmio8)(pointer Base, unsigned long Offset)
     = readDense8;
_X_EXPORT int  (*xf86ReadMmio16)(pointer Base, unsigned long Offset)
     = readDense16;
_X_EXPORT int  (*xf86ReadMmio32)(pointer Base, unsigned long Offset)
     = readDense32;
d679 2
a680 2
 * Do all things that need root privileges early
 * and revoke those priviledges
d690 1
@


1.9
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d9 2
a10 2
 * documentation, and that the names of Rich Murphey and David Wexelblat 
 * not be used in advertising or publicity pertaining to distribution of 
d12 2
a13 2
 * David Wexelblat make no representations about the suitability of this 
 * software for any purpose.  It is provided "as is" without express or 
d16 6
a21 6
 * RICH MURPHEY AND DAVID WEXELBLAT DISCLAIM ALL WARRANTIES WITH REGARD TO 
 * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND 
 * FITNESS, IN NO EVENT SHALL RICH MURPHEY OR DAVID WEXELBLAT BE LIABLE FOR 
 * ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER 
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF 
 * CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
d36 4
a39 6
#  include <sys/sysctl.h>
#  if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
#      include <machine/sysarch.h>
#   endif
# else
#  include <machine/sysarch.h>
a52 4
#ifndef MAP_FAILED
#define MAP_FAILED ((caddr_t)-1)
#endif

a60 2
static unsigned long bus_base;
static unsigned long sparse_size;
d68 2
a69 2
	size_t len = sizeof(base);
	int error;
d71 1
a71 1
       int mib[3];
d73 3
a75 3
       mib[0] = CTL_MACHDEP;
       mib[1] = CPU_CHIPSET;
       mib[2] = CPU_CHIPSET_MEM;
d77 1
a77 1
       if ((error = sysctl(mib, 3, &base, &len, NULL, 0)) < 0)
d79 2
a80 2
	if ((error = sysctlbyname("hw.chipset.memory", &base, &len,
				  0, 0)) < 0)
d82 1
a82 1
	    FatalError("xf86MapVidMem: can't find memory\n");
a83 1

d101 1
a101 1
	return FALSE;
d103 1
a103 1
	return bwx;
d106 1
a106 1
	return FALSE;
d108 1
a108 1
	return bwx;
d120 5
a124 5
	if (abw_count < 0) {
		abw_count = alpha_bus_getwindows(ALPHA_BUS_TYPE_PCI_MEM, &abw);
		if (abw_count <= 0)
			FatalError("init_abw: alpha_bus_getwindows failed\n");
	}
d130 2
a131 2
	if (abw_count < 0)
		init_abw();
d133 3
a135 3
	xf86Msg(X_INFO, "has_bwx = %d\n", 
		abw[0].abw_abst.abst_flags & ABST_BWX ? 1 : 0);	/* XXXX */
	return abw[0].abw_abst.abst_flags & ABST_BWX;
d141 2
a142 2
	if (abw_count < 0)
		init_abw();
d144 4
a147 4
	/* XXX check abst_flags for ABST_DENSE just to be safe? */
	xf86Msg(X_INFO, "dense base = %#lx\n", 
		abw[0].abw_abst.abst_sys_start); /* XXXX */
	return abw[0].abw_abst.abst_sys_start;
d153 12
a164 11
	if (abw_count < 0)
		init_abw();
	
	if (abw_count > 0) {
		xf86Msg(X_INFO, "memory base = %#lx\n", 
			abw[1].abw_abst.abst_sys_start); /* XXXX */
		return abw[1].abw_abst.abst_sys_start;
	} else {
		xf86Msg(X_INFO, "no memory base\n"); /* XXXX */
		return 0;
	}
d168 2
a169 2
#define BUS_BASE	dense_base()
#define BUS_BASE_BWX	memory_base()
d176 1
a176 1
#define SYSCTL_MSG "\tCheck that you have set 'machdep.allowaperture=1'\n"\
a186 1
#define DEV_MEM "/dev/mem"
d200 7
a206 7
	static Bool devMemChecked = FALSE;
	int fd;
	pointer base;

	if (devMemChecked)
	    return;
	devMemChecked = TRUE;
d209 41
a249 39
       /* Try the aperture driver first */
       if ((fd = open(DEV_APERTURE, O_RDWR)) >= 0) {
           /* Try to map a page at the VGA address */
           base = mmap((caddr_t)0, 4096, PROT_READ | PROT_WRITE,
                            MAP_FLAGS, fd, (off_t)0xA0000 + BUS_BASE);
       
           if (base != MAP_FAILED) {
               munmap((caddr_t)base, 4096);
               devMemFd = fd;
               useDevMem = TRUE;
               xf86Msg(X_INFO, "checkDevMem: using aperture driver %s\n",
                       DEV_APERTURE);
               return;
           } else {
               if (warn) {
                   xf86Msg(X_WARNING, "checkDevMem: failed to mmap %s (%s)\n",
                           DEV_APERTURE, strerror(errno));
               }
           }
       } 
#endif
       if ((fd = open(DEV_MEM, O_RDWR)) >= 0) {
	    /* Try to map a page at the VGA address */
	    base = mmap((caddr_t)0, 4096, PROT_READ | PROT_WRITE,
				 MAP_FLAGS, fd, (off_t)0xA0000 + BUS_BASE);
	
	    if (base != MAP_FAILED) {
		munmap((caddr_t)base, 4096);
		devMemFd = fd;
		useDevMem = TRUE;
		return;
	    } else {
		if (warn) {
		    xf86Msg(X_WARNING, "checkDevMem: failed to mmap %s (%s)\n",
			    DEV_MEM, strerror(errno));
		}
	    }
	}
	if (warn) { 
d251 2
a252 2
           xf86Msg(X_WARNING, "checkDevMem: failed to open/mmap %s (%s)\n",
                   DEV_MEM, strerror(errno));
d255 2
a256 2
           xf86Msg(X_WARNING, "checkDevMem: failed to open %s and %s\n"
               "\t(%s)\n", DEV_APERTURE, DEV_MEM, strerror(errno));
d258 3
a260 3
           xf86Msg(X_WARNING, "checkDevMem: failed to open %s and %s\n"
                   "\t(%s)\n%s", DEV_APERTURE, DEV_MEM, strerror(errno),
                   SYSCTL_MSG);
d263 4
a266 4
           xf86ErrorF("\tlinear framebuffer access unavailable\n");
	}
	useDevMem = FALSE;
	return;
d272 2
a273 2
	checkDevMem(TRUE);
	pVidMem->linearSupported = useDevMem;
d275 9
a283 8
	if (has_bwx()) {
	    xf86Msg(X_PROBED,"Machine type has 8/16 bit access\n");
	    pVidMem->mapMem = mapVidMem;
	    pVidMem->unmapMem = unmapVidMem;
	} else {
	    xf86Msg(X_PROBED,"Machine needs sparse mapping\n");
	    pVidMem->mapMem = mapVidMemSparse;
	    pVidMem->unmapMem = unmapVidMemSparse;
d285 4
a288 5
	    if (axpSystem == -1)
                axpSystem = bsdGetAXP(); 
	    hae_thresh = xf86AXPParams[axpSystem].hae_thresh;
            hae_mask = xf86AXPParams[axpSystem].hae_mask;
            sparse_size = xf86AXPParams[axpSystem].size;
d290 2
a291 2
	}
	pVidMem->initialised = TRUE;
d297 1
a297 1
	pointer base;
d299 2
a300 2
	checkDevMem(FALSE);
	Base = Base & ((1L<<32) - 1);
d302 32
a333 37
	if (useDevMem)
	{
	    if (devMemFd < 0) 
	    {
		FatalError("xf86MapVidMem: failed to open %s (%s)\n",
			   DEV_MEM, strerror(errno));
	    }
	    base = mmap((caddr_t)0, Size,
			(flags & VIDMEM_READONLY) ?
			 PROT_READ : (PROT_READ | PROT_WRITE),
			 MAP_FLAGS, devMemFd, (off_t)Base + BUS_BASE_BWX);
	    if (base == MAP_FAILED)
	    {
		FatalError("%s: could not mmap %s [s=%lx,a=%lx] (%s)\n",
			   "xf86MapVidMem", DEV_MEM, Size, Base, 
			   strerror(errno));
	    }
	    return base;
	}
		
	/* else, mmap /dev/vga */
	if ((unsigned long)Base < 0xA0000 || (unsigned long)Base >= 0xC0000)
	{
		FatalError("%s: Address 0x%lx outside allowable range\n",
			   "xf86MapVidMem", Base);
	}
	base = mmap(0, Size,
		    (flags & VIDMEM_READONLY) ?
		     PROT_READ : (PROT_READ | PROT_WRITE),
		    MAP_FLAGS, xf86Info.screenFd,
		    (unsigned long)Base + BUS_BASE);
	if (base == MAP_FAILED)
	{
	    FatalError("xf86MapVidMem: Could not mmap /dev/vga (%s)\n",
		       strerror(errno));
	}
	return base;
d339 1
a339 1
	munmap((caddr_t)Base, Size);
d348 1
a348 1
	     int Len)
d350 21
a370 22
	unsigned char *ptr;
	int psize;
	int mlen;

	checkDevMem(TRUE);
	if (devMemFd == -1) {
	    return -1;
	}

	psize = getpagesize();
	Offset += Base & (psize - 1);
	Base &= ~(psize - 1);
	mlen = (Offset + Len + psize - 1) & ~(psize - 1);
	ptr = (unsigned char *)mmap((caddr_t)0, mlen, PROT_READ,
					MAP_SHARED, devMemFd, (off_t)Base+BUS_BASE);
	if ((long)ptr == -1)
	{
		xf86Msg(X_WARNING, 
			"xf86ReadBIOS: %s mmap[s=%x,a=%lx,o=%lx] failed (%s)\n",
			DEV_MEM, Len, Base, Offset, strerror(errno));
		return -1;
	}
d372 2
a373 2
	xf86MsgVerb(X_INFO, 3, "xf86ReadBIOS: BIOS at 0x%08x has signature 0x%04x\n",
		Base, ptr[0] | (ptr[1] << 8));
d375 2
a376 2
	(void)memcpy(Buf, (void *)(ptr + Offset), Len);
	(void)munmap((caddr_t)ptr, mlen);
d378 3
a380 3
	xf86MsgVerb(X_INFO, 3, "xf86ReadBIOS(%x, %x, Buf, %x)"
		"-> %02x %02x %02x %02x...\n",
		Base, Offset, Len, Buf[0], Buf[1], Buf[2], Buf[3]);
d382 1
a382 1
	return Len;
d394 1
a394 1
	return TRUE;
d401 1
a401 1
	return;
d411 2
a412 2
	alpha_pci_io_enable(1);
	return TRUE;
d418 1
a418 1
	alpha_pci_io_enable(0);
a424 1
static unsigned long msb_set = 0;
a461 1
#endif
d464 1
a464 1
	u_int64_t hae;
d467 1
a467 2
#ifndef __NetBSD__
static int
a469 1
#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
d473 7
a479 3
	struct parms p;
	p.hae = hae;
	return (sysarch(ALPHA_SETHAE, (char *)&p));
a480 5
#ifdef __OpenBSD__
	return -1;
#endif
}
#endif /* __NetBSD__ */
d488 1
a488 1
      was_here = TRUE;
d490 1
a490 1
      checkDevMem(FALSE);
d492 23
a514 23
      xf86WriteMmio8 = writeSparse8;
      xf86WriteMmio16 = writeSparse16;
      xf86WriteMmio32 = writeSparse32;
      xf86WriteMmioNB8 = writeSparseNB8;
      xf86WriteMmioNB16 = writeSparseNB16;
      xf86WriteMmioNB32 = writeSparseNB32;
      xf86ReadMmio8 = readSparse8;
      xf86ReadMmio16 = readSparse16;
      xf86ReadMmio32 = readSparse32;
	
      memBase = mmap((caddr_t)0, 0x100000000,
		     PROT_READ | PROT_WRITE,
		     MAP_SHARED, devMemFd,
		     (off_t) BUS_BASE);
      memSBase = mmap((caddr_t)0, 0x100000000,
		      PROT_READ | PROT_WRITE,
		      MAP_SHARED, devMemFd,
		      (off_t) BUS_BASE_BWX);
      
      if (memSBase == MAP_FAILED || memBase == MAP_FAILED)	{
	FatalError("xf86MapVidMem: Could not mmap framebuffer (%s)\n",
		   strerror(errno));
      }
d532 1
a532 1
      if (Offset >= (hae_thresh)) {
d535 2
a536 3
	if (msb_set != msb) {
#ifndef __NetBSD__
	sethae(msb);
d538 1
a538 3
	msb_set = msb;
	}
      }
d556 2
a557 3
      if (msb_set != msb) {
#ifndef __NetBSD__
	sethae(msb);
a558 2
	msb_set = msb;
      }
d581 4
a584 5
      msb = Offset & hae_mask;
      Offset -= msb;
      if (msb_set != msb) {
#ifndef __NetBSD__
	sethae(msb);
a585 2
	msb_set = msb;
      }
d599 4
a602 5
      msb = Offset & hae_mask;
      Offset -= msb;
      if (msb_set != msb) {
#ifndef __NetBSD__
	sethae(msb);
a603 2
	msb_set = msb;
      }
d606 1
a606 1
      w * 0x00010001;
d626 4
a629 5
      msb = Offset & hae_mask;
      Offset -= msb;
      if (msb_set != msb) {
#ifndef __NetBSD__
	sethae(msb);
a630 2
	msb_set = msb;
      }
d643 4
a646 5
      msb = Offset & hae_mask ;
      Offset -= msb;
      if (msb_set != msb) {
#ifndef __NetBSD__
	sethae(msb);
a647 2
	msb_set = msb;
      }
d650 1
a650 1
      w * 0x00010001;
d660 1
a660 1
_X_EXPORT void (*xf86WriteMmio8)(int Value, pointer Base, unsigned long Offset) 
d666 1
a666 1
_X_EXPORT void (*xf86WriteMmioNB8)(int Value, pointer Base, unsigned long Offset) 
d672 1
a672 1
_X_EXPORT int  (*xf86ReadMmio8)(pointer Base, unsigned long Offset) 
d680 2
a681 2
 * Do all things that need root privileges early 
 * and revoke those priviledges 
d686 4
a689 4
	xf86EnableIO();
	checkDevMem(TRUE);
	pci_system_init();
	xf86OpenConsole();
@


1.8
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d326 1
a326 1
	    return(base);
d345 1
a345 1
	return(base);
d368 1
a368 1
	    return(-1);
d382 1
a382 1
		return(-1);
d395 1
a395 1
	return(Len);
@


1.7
log
@Initialise the aperture file descriptor in libpciaccess.
@
text
@a297 4
#if HAVE_PCI_SYSTEM_INIT_DEV_MEM
	if (useDevMem)
		pci_system_init_dev_mem(devMemFd);
#endif
a434 18

/***************************************************************************/
/* Interrupt Handling section                                              */
/***************************************************************************/

_X_EXPORT Bool
xf86DisableInterrupts()
{

	return(TRUE);
}

_X_EXPORT void
xf86EnableInterrupts()
{
	return;
}

@


1.6
log
@Update to libpciaccess world.
@
text
@d298 4
@


1.5
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d742 1
a742 1
	pciInit();
@


1.4
log
@merge xserver 1.4, 1st pass
@
text
@d371 1
a371 1
	psize = xf86getpagesize();
@


1.3
log
@Build fixes for OpenBSD/alpha.
@
text
@a25 2
/* $XConsortium: bsd_video.c /main/10 1996/10/25 11:37:57 kaleb $ */

@


1.2
log
@OpenBSD local modifications:
- privilege separation
- some snprintf/strlc{at,py} conversions
- support for more architectures
- signal handler fixes
- default mouse wheel support in config tools
- sunmouse protocol
@
text
@d46 1
a46 1
#include "xf86Axp.h"
@


1.1
log
@Initial revision
@
text
@d735 12
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d26 2
@

