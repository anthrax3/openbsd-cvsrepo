head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.6
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	Te1daavkBLskZ8gc;

1.10
date	2014.09.27.17.53.02;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	cVXoV5PxI8YrEaVA;

1.9
date	2013.06.07.17.28.52;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2010.12.05.15.36.07;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.31.17.47.50;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2009.09.06.19.44.26;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.02.15.26.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.24.19.04.04;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.28.20.29.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.32;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.32;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.57.26;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright 1992 by Rich Murphey <Rich@@Rice.edu>
 * Copyright 1993 by David Wexelblat <dwex@@goblin.org>
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the names of Rich Murphey and David Wexelblat
 * not be used in advertising or publicity pertaining to distribution of
 * the software without specific, written prior permission.  Rich Murphey and
 * David Wexelblat make no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without express or
 * implied warranty.
 *
 * RICH MURPHEY AND DAVID WEXELBLAT DISCLAIM ALL WARRANTIES WITH REGARD TO
 * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS, IN NO EVENT SHALL RICH MURPHEY OR DAVID WEXELBLAT BE LIABLE FOR
 * ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
 * CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/X.h>
#include "xf86.h"
#include "xf86Priv.h"

#include "xf86_OSlib.h"
#include "xf86OSpriv.h"

/***************************************************************************/
/* Video Memory Mapping section                                            */
/***************************************************************************/

static void *sparc64MapVidMem(int, unsigned long, unsigned long, int);
static void sparc64UnmapVidMem(int, void *, unsigned long);

void
xf86OSInitVidMem(VidMemInfoPtr pVidMem)
{
    xf86OpenConsole();
    pci_system_init_dev_mem(xf86Info.consoleFd);
    pVidMem->initialised = TRUE;
}

#ifdef X_PRIVSEP
/*
 * Do all things that need root privileges early 
 * and revoke those privileges 
 */
_X_EXPORT void
xf86PrivilegedInit(void)
{
	pci_system_init();
	xf86OpenConsole();
}
#endif
@


1.10
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d9 2
a10 2
 * documentation, and that the names of Rich Murphey and David Wexelblat 
 * not be used in advertising or publicity pertaining to distribution of 
d12 2
a13 2
 * David Wexelblat make no representations about the suitability of this 
 * software for any purpose.  It is provided "as is" without express or 
d16 6
a21 6
 * RICH MURPHEY AND DAVID WEXELBLAT DISCLAIM ALL WARRANTIES WITH REGARD TO 
 * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND 
 * FITNESS, IN NO EVENT SHALL RICH MURPHEY OR DAVID WEXELBLAT BE LIABLE FOR 
 * ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER 
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF 
 * CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
a47 4

    pVidMem->linearSupported = TRUE;
    pVidMem->mapMem = sparc64MapVidMem;
    pVidMem->unmapMem = sparc64UnmapVidMem;
a49 34
}

static void *
sparc64MapVidMem(int ScreenNum, unsigned long Base, unsigned long Size,
                 int flags)
{
    int fd = xf86Info.consoleFd;
    void *base;

#ifdef DEBUG
    xf86MsgVerb(X_INFO, 3, "mapVidMem %lx, %lx, fd = %d", Base, Size, fd);
#endif

    base = mmap(0, Size,
                (flags & VIDMEM_READONLY) ?
                PROT_READ : (PROT_READ | PROT_WRITE), MAP_SHARED, fd, Base);
    if (base == MAP_FAILED)
        FatalError("%s: could not mmap screen [s=%x,a=%x] (%s)",
                   "xf86MapVidMem", Size, Base, strerror(errno));
    return base;
}

static void
sparc64UnmapVidMem(int ScreenNum, void *Base, unsigned long Size)
{
    munmap(Base, Size);
}

_X_EXPORT int
xf86ReadBIOS(unsigned long Base, unsigned long Offset, unsigned char *Buf,
             int Len)
{

    return 0;
@


1.9
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d41 2
a42 2
static pointer sparc64MapVidMem(int, unsigned long, unsigned long, int);
static void sparc64UnmapVidMem(int, pointer, unsigned long);
d56 1
a56 1
static pointer
d61 1
a61 1
    pointer base;
d77 1
a77 1
sparc64UnmapVidMem(int ScreenNum, pointer Base, unsigned long Size)
@


1.8
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d9 2
a10 2
 * documentation, and that the names of Rich Murphey and David Wexelblat
 * not be used in advertising or publicity pertaining to distribution of
d12 2
a13 2
 * David Wexelblat make no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without express or
d16 6
a21 6
 * RICH MURPHEY AND DAVID WEXELBLAT DISCLAIM ALL WARRANTIES WITH REGARD TO
 * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS, IN NO EVENT SHALL RICH MURPHEY OR DAVID WEXELBLAT BE LIABLE FOR
 * ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
 * CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
d64 1
a64 2
    xf86MsgVerb(X_INFO, 3, "mapVidMem %lx, %lx, fd = %d",
                Base, Size, fd);
d69 1
a69 2
                PROT_READ : (PROT_READ | PROT_WRITE),
                MAP_SHARED, fd, Base);
d92 2
a93 2
 * Do all things that need root privileges early
 * and revoke those privileges
d98 2
a99 2
    pci_system_init();
    xf86OpenConsole();
@


1.7
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d9 2
a10 2
 * documentation, and that the names of Rich Murphey and David Wexelblat 
 * not be used in advertising or publicity pertaining to distribution of 
d12 2
a13 2
 * David Wexelblat make no representations about the suitability of this 
 * software for any purpose.  It is provided "as is" without express or 
d16 6
a21 6
 * RICH MURPHEY AND DAVID WEXELBLAT DISCLAIM ALL WARRANTIES WITH REGARD TO 
 * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND 
 * FITNESS, IN NO EVENT SHALL RICH MURPHEY OR DAVID WEXELBLAT BE LIABLE FOR 
 * ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER 
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF 
 * CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
a36 4
#ifndef MAP_FAILED
#define MAP_FAILED ((caddr_t)-1)
#endif

d47 1
a47 1
	xf86OpenConsole();
d49 5
a53 7
	pVidMem->linearSupported = TRUE;
	pVidMem->mapMem = sparc64MapVidMem;
	pVidMem->unmapMem = sparc64UnmapVidMem;
#if HAVE_PCI_SYSTEM_INIT_DEV_MEM
       pci_system_init_dev_mem(xf86Info.screenFd);
#endif
	pVidMem->initialised = TRUE;
d57 2
a58 2
sparc64MapVidMem(int ScreenNum, unsigned long Base, unsigned long Size, 
		 int flags)
d60 2
a61 2
	int fd = xf86Info.screenFd;
	pointer base;
d64 2
a65 2
	xf86MsgVerb(X_INFO, 3, "mapVidMem %lx, %lx, fd = %d", 
		    Base, Size, fd);
d68 8
a75 8
	base = mmap(0, Size,
		    (flags & VIDMEM_READONLY) ?
		     PROT_READ : (PROT_READ | PROT_WRITE),
		    MAP_SHARED, fd, Base);
	if (base == MAP_FAILED)
		FatalError("%s: could not mmap screen [s=%x,a=%x] (%s)",
			   "xf86MapVidMem", Size, Base, strerror(errno));
	return base;
d81 1
a81 1
	munmap(Base, Size);
d86 1
a86 1
	     int Len)
d89 1
a89 1
	return 0;
d94 2
a95 2
 * Do all things that need root privileges early 
 * and revoke those privileges 
d100 2
a101 2
	pci_system_init();
	xf86OpenConsole();
@


1.6
log
@Fix X -keepPriv by calling xf86OpenConsole() early enough on architectures
that don't have a separate /dev/xf86. Problem noticed by kettenis@@ and krw@@
ok kettenis@@.
@
text
@d95 1
a95 1
	return (0);
@


1.5
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d51 2
@


1.4
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a36 2
#include <pciaccess.h>

a93 18
}

/***************************************************************************/
/* Interrupt Handling section                                              */
/***************************************************************************/

_X_EXPORT Bool
xf86DisableInterrupts()
{

	return(TRUE);
}

_X_EXPORT void
xf86EnableInterrupts()
{

	return;
@


1.3
log
@merge xserver 1.4, 1st pass
@
text
@d37 2
d56 3
d124 1
a124 1
	pciInit();
@


1.2
log
@OpenBSD local modifications:
- privilege separation
- some snprintf/strlc{at,py} conversions
- support for more architectures
- signal handler fixes
- default mouse wheel support in config tools
- sunmouse protocol
@
text
@a25 3

/* $XConsortium: bsd_video.c /main/10 1996/10/25 11:37:57 kaleb $ */

@


1.1
log
@Initial revision
@
text
@d113 13
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d26 3
@

