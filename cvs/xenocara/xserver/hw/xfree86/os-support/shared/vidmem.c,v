head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	Te1daavkBLskZ8gc;

1.7
date	2014.09.27.17.53.02;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	cVXoV5PxI8YrEaVA;

1.6
date	2014.05.02.19.27.49;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2013.06.07.17.28.52;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.26;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.26;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.57.20;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright (c) 1993-2003 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/X.h>
#include "input.h"
#include "scrnintstr.h"

#include "xf86.h"
#include "xf86Priv.h"
#include "xf86_OSlib.h"
#include "xf86OSpriv.h"

/*
 * This file contains the common part of the video memory mapping functions
 */

static VidMemInfo vidMemInfo = { FALSE, };

void
xf86InitVidMem(void)
{
    if (!vidMemInfo.initialised) {
        memset(&vidMemInfo, 0, sizeof(VidMemInfo));
        xf86OSInitVidMem(&vidMemInfo);
    }
}
@


1.7
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@a44 26
/*
 * Get a piece of the ScrnInfoRec.  At the moment, this is only used to hold
 * the MTRR option information, but it is likely to be expanded if we do
 * auto unmapping of memory at VT switch.
 *
 */

typedef struct {
    unsigned long size;
    void *virtBase;
    void *mtrrInfo;
} MappingRec, *MappingPtr;

typedef struct {
    int numMappings;
    MappingPtr *mappings;
    Bool mtrrEnabled;
    MessageType mtrrFrom;
    Bool mtrrOptChecked;
    ScrnInfoPtr pScrn;
} VidMapRec, *VidMapPtr;

static int vidMapIndex = -1;

#define VIDMAPPTR(p) ((VidMapPtr)((p)->privates[vidMapIndex].ptr))

a45 86
static VidMapRec vidMapRec = { 0, NULL, TRUE, X_DEFAULT, FALSE, NULL };

static VidMapPtr
getVidMapRec(int scrnIndex)
{
    VidMapPtr vp;
    ScrnInfoPtr pScrn;

    if ((scrnIndex < 0) || !(pScrn = xf86Screens[scrnIndex]))
        return &vidMapRec;

    if (vidMapIndex < 0)
        vidMapIndex = xf86AllocateScrnInfoPrivateIndex();

    if (VIDMAPPTR(pScrn) != NULL)
        return VIDMAPPTR(pScrn);

    vp = pScrn->privates[vidMapIndex].ptr = xnfcalloc(sizeof(VidMapRec), 1);
    vp->mtrrEnabled = TRUE;     /* default to enabled */
    vp->mtrrFrom = X_DEFAULT;
    vp->mtrrOptChecked = FALSE;
    vp->pScrn = pScrn;
    return vp;
}

static MappingPtr
newMapping(VidMapPtr vp)
{
    vp->mappings = xnfrealloc(vp->mappings, sizeof(MappingPtr) *
                              (vp->numMappings + 1));
    vp->mappings[vp->numMappings] = xnfcalloc(sizeof(MappingRec), 1);
    return vp->mappings[vp->numMappings++];
}

static MappingPtr
findMapping(VidMapPtr vp, void *vbase, unsigned long size)
{
    int i;

    for (i = 0; i < vp->numMappings; i++) {
        if (vp->mappings[i]->virtBase == vbase && vp->mappings[i]->size == size)
            return vp->mappings[i];
    }
    return NULL;
}

static void
removeMapping(VidMapPtr vp, MappingPtr mp)
{
    int i, found = 0;

    for (i = 0; i < vp->numMappings; i++) {
        if (vp->mappings[i] == mp) {
            found = 1;
            free(vp->mappings[i]);
        }
        else if (found) {
            vp->mappings[i - 1] = vp->mappings[i];
        }
    }
    vp->numMappings--;
    vp->mappings[vp->numMappings] = NULL;
}

enum { OPTION_MTRR };

static const OptionInfoRec opts[] = {
    {OPTION_MTRR, "mtrr", OPTV_BOOLEAN, {0}, FALSE},
    {-1, NULL, OPTV_NONE, {0}, FALSE}
};

static void
checkMtrrOption(VidMapPtr vp)
{
    if (!vp->mtrrOptChecked && vp->pScrn && vp->pScrn->options != NULL) {
        OptionInfoPtr options;

        options = xnfalloc(sizeof(opts));
        (void) memcpy(options, opts, sizeof(opts));
        xf86ProcessOptions(vp->pScrn->scrnIndex, vp->pScrn->options, options);
        if (xf86GetOptValBool(options, OPTION_MTRR, &vp->mtrrEnabled))
            vp->mtrrFrom = X_CONFIG;
        free(options);
        vp->mtrrOptChecked = TRUE;
    }
}
a53 93
}

void *
xf86MapVidMem(int ScreenNum, int Flags, unsigned long Base, unsigned long Size)
{
    void *vbase = NULL;
    VidMapPtr vp;
    MappingPtr mp;

    if (((Flags & VIDMEM_FRAMEBUFFER) &&
         (Flags & (VIDMEM_MMIO | VIDMEM_MMIO_32BIT))))
        FatalError("Mapping memory with more than one type\n");

    xf86InitVidMem();
    if (!vidMemInfo.initialised || !vidMemInfo.mapMem)
        return NULL;

    vbase = vidMemInfo.mapMem(ScreenNum, Base, Size, Flags);

    if (!vbase || vbase == (void *) -1)
        return NULL;

    vp = getVidMapRec(ScreenNum);
    mp = newMapping(vp);
    mp->size = Size;
    mp->virtBase = vbase;

    /*
     * Check the "mtrr" option even when MTRR isn't supported to avoid
     * warnings about unrecognised options.
     */
    checkMtrrOption(vp);

    if (vp->mtrrEnabled && vidMemInfo.setWC) {
        if (Flags & (VIDMEM_MMIO | VIDMEM_MMIO_32BIT))
            mp->mtrrInfo =
                vidMemInfo.setWC(ScreenNum, Base, Size, FALSE, vp->mtrrFrom);
        else if (Flags & VIDMEM_FRAMEBUFFER)
            mp->mtrrInfo =
                vidMemInfo.setWC(ScreenNum, Base, Size, TRUE, vp->mtrrFrom);
    }
    return vbase;
}

void
xf86UnMapVidMem(int ScreenNum, void *Base, unsigned long Size)
{
    VidMapPtr vp;
    MappingPtr mp;

    if (!vidMemInfo.initialised || !vidMemInfo.unmapMem) {
        xf86DrvMsg(ScreenNum, X_WARNING,
                   "xf86UnMapVidMem() called before xf86MapVidMem()\n");
        return;
    }

    vp = getVidMapRec(ScreenNum);
    mp = findMapping(vp, Base, Size);
    if (!mp) {
        xf86DrvMsg(ScreenNum, X_WARNING,
                   "xf86UnMapVidMem: cannot find region for [%p,0x%lx]\n",
                   Base, Size);
        return;
    }
    if (vp->mtrrEnabled && vidMemInfo.undoWC && mp)
        vidMemInfo.undoWC(ScreenNum, mp->mtrrInfo);

    vidMemInfo.unmapMem(ScreenNum, Base, Size);
    removeMapping(vp, mp);
}

Bool
xf86CheckMTRR(int ScreenNum)
{
    VidMapPtr vp = getVidMapRec(ScreenNum);

    /*
     * Check the "mtrr" option even when MTRR isn't supported to avoid
     * warnings about unrecognised options.
     */
    checkMtrrOption(vp);

    if (vp->mtrrEnabled && vidMemInfo.setWC)
        return TRUE;

    return FALSE;
}

Bool
xf86LinearVidMem(void)
{
    xf86InitVidMem();
    return vidMemInfo.linearSupported;
@


1.6
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d54 2
a55 2
    pointer virtBase;
    pointer mtrrInfo;
d107 1
a107 1
findMapping(VidMapPtr vp, pointer vbase, unsigned long size)
d168 1
a168 1
pointer
d171 1
a171 1
    pointer vbase = NULL;
d185 1
a185 1
    if (!vbase || vbase == (pointer) -1)
d211 1
a211 1
xf86UnMapVidMem(int ScreenNum, pointer Base, unsigned long Size)
@


1.5
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a259 13

void
xf86MapReadSideEffects(int ScreenNum, int Flags, pointer base,
                       unsigned long Size)
{
    if (!(Flags & VIDMEM_READSIDEEFFECT))
        return;

    if (!vidMemInfo.initialised || !vidMemInfo.readSideEffects)
        return;

    vidMemInfo.readSideEffects(ScreenNum, base, Size);
}
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a159 13
xf86MakeNewMapping(int ScreenNum, int Flags, unsigned long Base,
                   unsigned long Size, pointer Vbase)
{
    VidMapPtr vp;
    MappingPtr mp;

    vp = getVidMapRec(ScreenNum);
    mp = newMapping(vp);
    mp->size = Size;
    mp->virtBase = Vbase;
}

void
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a27 1

d53 3
a55 5
	unsigned long 	physBase;
	unsigned long 	size;
	pointer		virtBase;
	pointer 	mtrrInfo;
	int		flags;
d57 1
a57 1
	
d59 6
a64 6
	int		numMappings;
	MappingPtr *	mappings;
	Bool		mtrrEnabled;
	MessageType	mtrrFrom;
	Bool		mtrrOptChecked;
	ScrnInfoPtr	pScrn;
d71 2
a72 2
static VidMemInfo vidMemInfo = {FALSE, };
static VidMapRec  vidMapRec  = {0, NULL, TRUE, X_DEFAULT, FALSE, NULL};
d77 5
a81 2
	VidMapPtr vp;
	ScrnInfoPtr pScrn;
d83 12
a94 16
	if ((scrnIndex < 0) ||
	    !(pScrn = xf86Screens[scrnIndex]))
		return &vidMapRec;

	if (vidMapIndex < 0)
		vidMapIndex = xf86AllocateScrnInfoPrivateIndex();

	if (VIDMAPPTR(pScrn) != NULL)
		return VIDMAPPTR(pScrn);

	vp = pScrn->privates[vidMapIndex].ptr = xnfcalloc(sizeof(VidMapRec), 1);
	vp->mtrrEnabled = TRUE;	/* default to enabled */
	vp->mtrrFrom = X_DEFAULT;
	vp->mtrrOptChecked = FALSE;
	vp->pScrn = pScrn;
	return vp;
d100 4
a103 4
	vp->mappings = xnfrealloc(vp->mappings, sizeof(MappingPtr) *
				  (vp->numMappings + 1));
	vp->mappings[vp->numMappings] = xnfcalloc(sizeof(MappingRec), 1);
	return vp->mappings[vp->numMappings++];
d109 1
a109 1
	int i;
d111 5
a115 6
	for (i = 0; i < vp->numMappings; i++) {
		if (vp->mappings[i]->virtBase == vbase &&
		    vp->mappings[i]->size == size)
			return vp->mappings[i];
	}
	return NULL;
d121 1
a121 1
	int i, found = 0;
d123 11
a133 10
	for (i = 0; i < vp->numMappings; i++) {
		if (vp->mappings[i] == mp) {
			found = 1;
			free(vp->mappings[i]);
		} else if (found) {
			vp->mappings[i - 1] = vp->mappings[i];
		}
	}
	vp->numMappings--;
	vp->mappings[vp->numMappings] = NULL;
d137 4
a140 4
static const OptionInfoRec opts[] =
{
	{ OPTION_MTRR, "mtrr", OPTV_BOOLEAN, {0}, FALSE },
	{ -1, NULL, OPTV_NONE, {0}, FALSE }
d146 2
a147 2
	if (!vp->mtrrOptChecked && vp->pScrn && vp->pScrn->options != NULL) {
		OptionInfoPtr options;
d149 8
a156 9
		options = xnfalloc(sizeof(opts));
		(void)memcpy(options, opts, sizeof(opts));
		xf86ProcessOptions(vp->pScrn->scrnIndex, vp->pScrn->options,
					options);
		if (xf86GetOptValBool(options, OPTION_MTRR, &vp->mtrrEnabled))
			vp->mtrrFrom = X_CONFIG;
		free(options);
		vp->mtrrOptChecked = TRUE;
	}
d160 2
a161 1
xf86MakeNewMapping(int ScreenNum, int Flags, unsigned long Base, unsigned long Size, pointer Vbase)
d163 2
a164 2
	VidMapPtr vp;
	MappingPtr mp;
d166 4
a169 6
	vp = getVidMapRec(ScreenNum);
	mp = newMapping(vp);
	mp->physBase = Base;
	mp->size = Size;
	mp->virtBase = Vbase;
	mp->flags = Flags;
d175 4
a178 4
	if (!vidMemInfo.initialised) {
		memset(&vidMemInfo, 0, sizeof(VidMemInfo));
		xf86OSInitVidMem(&vidMemInfo);
	}
d184 37
a220 41
	pointer vbase = NULL;
	VidMapPtr vp;
	MappingPtr mp;

	if (((Flags & VIDMEM_FRAMEBUFFER) &&
	     (Flags & (VIDMEM_MMIO | VIDMEM_MMIO_32BIT))))
	    FatalError("Mapping memory with more than one type\n");
	    
	xf86InitVidMem();
	if (!vidMemInfo.initialised || !vidMemInfo.mapMem)
		return NULL;

	vbase = vidMemInfo.mapMem(ScreenNum, Base, Size, Flags);

	if (!vbase || vbase == (pointer)-1)
		return NULL;

	vp = getVidMapRec(ScreenNum);
	mp = newMapping(vp);
	mp->physBase = Base;
	mp->size = Size;
	mp->virtBase = vbase;
	mp->flags = Flags;

	/*
	 * Check the "mtrr" option even when MTRR isn't supported to avoid
	 * warnings about unrecognised options.
	 */
	checkMtrrOption(vp);

	if (vp->mtrrEnabled && vidMemInfo.setWC) {
		if (Flags & (VIDMEM_MMIO | VIDMEM_MMIO_32BIT))
			mp->mtrrInfo =
				vidMemInfo.setWC(ScreenNum, Base, Size, FALSE,
						 vp->mtrrFrom);
		else if (Flags & VIDMEM_FRAMEBUFFER)
			mp->mtrrInfo =
				vidMemInfo.setWC(ScreenNum, Base, Size, TRUE,
						 vp->mtrrFrom);
	}
	return vbase;
d226 2
a227 2
	VidMapPtr vp;
	MappingPtr mp;
d229 16
a244 16
	if (!vidMemInfo.initialised || !vidMemInfo.unmapMem) {
		xf86DrvMsg(ScreenNum, X_WARNING,
		  "xf86UnMapVidMem() called before xf86MapVidMem()\n");
		return;
	}

	vp = getVidMapRec(ScreenNum);
	mp = findMapping(vp, Base, Size);
	if (!mp) {
		xf86DrvMsg(ScreenNum, X_WARNING,
		  "xf86UnMapVidMem: cannot find region for [%p,0x%lx]\n",
		  Base, Size);
		return;
	}
	if (vp->mtrrEnabled && vidMemInfo.undoWC && mp)
		vidMemInfo.undoWC(ScreenNum, mp->mtrrInfo);
d246 2
a247 2
	vidMemInfo.unmapMem(ScreenNum, Base, Size);
	removeMapping(vp, mp);
d253 7
a259 1
	VidMapPtr vp = getVidMapRec(ScreenNum);
d261 4
a264 10
	/*
	 * Check the "mtrr" option even when MTRR isn't supported to avoid
	 * warnings about unrecognised options.
	 */
	checkMtrrOption(vp);

	if (vp->mtrrEnabled && vidMemInfo.setWC)
		return TRUE;
		
	return FALSE;
d270 2
a271 2
	xf86InitVidMem();
	return vidMemInfo.linearSupported;
d276 1
a276 1
			unsigned long Size)
d278 2
a279 2
	if (!(Flags & VIDMEM_READSIDEEFFECT))
		return;
d281 2
a282 2
	if (!vidMemInfo.initialised || !vidMemInfo.readSideEffects)
		return;
d284 1
a284 1
	vidMemInfo.readSideEffects(ScreenNum, base, Size);
a285 1

@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d131 1
a131 1
			xfree(vp->mappings[i]);
d159 1
a159 1
		xfree(options);
@


1.1
log
@Initial revision
@
text
@a32 3
#ifdef __UNIXOS2__
# define I_NEED_OS2_H
#endif
d187 1
a187 1
_X_EXPORT pointer
d233 1
a233 1
_X_EXPORT void
d260 1
a260 1
_X_EXPORT Bool
d277 2
a278 2
_X_EXPORT Bool
xf86LinearVidMem()
d284 1
a284 1
_X_EXPORT void
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d33 3
@

