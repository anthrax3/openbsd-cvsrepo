head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.8
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.6
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.6
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	Te1daavkBLskZ8gc;

1.8
date	2014.09.27.17.53.02;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	cVXoV5PxI8YrEaVA;

1.7
date	2014.05.02.19.27.49;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.21.20.10.47;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.33;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.27;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.27;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.27;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.57.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright 1997, 1998 by UCHIYAMA Yasushi
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of UCHIYAMA Yasushi not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  UCHIYAMA Yasushi makes no representations
 * about the suitability of this software for any purpose.  It is provided
 * "as is" without express or implied warranty.
 *
 * UCHIYAMA YASUSHI DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL UCHIYAMA YASUSHI BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 *
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <mach.h>
#include <device/device.h>
#include <mach/machine/mach_i386.h>
#include <hurd.h>

#include <X11/X.h>
#include "input.h"
#include "scrnintstr.h"

#include "xf86.h"
#include "xf86Priv.h"
#include "xf86_OSlib.h"
#include "xf86OSpriv.h"

/**************************************************************************
 * Video Memory Mapping section
 ***************************************************************************/

/**************************************************************************
 * I/O Permissions section
 ***************************************************************************/

/*
 * Due to conflicts with "compiler.h", don't rely on <sys/io.h> to declare
 * this.
 */
extern int ioperm(unsigned long __from, unsigned long __num, int __turn_on);

Bool
xf86EnableIO()
{
    if (ioperm(0, 0x10000, 1)) {
        FatalError("xf86EnableIO: ioperm() failed (%s)\n", strerror(errno));
        return FALSE;
    }
#if 0
    /*
     * Trapping disabled for now, as some VBIOSes (mga-g450 notably) use these
     * ports, and the int10 wrapper is not emulating them. (Note that it's
     * effectively what happens in the Linux variant too, as iopl() is used
     * there, making the ioperm() meaningless.)
     *
     * Reenable this when int10 gets fixed.  */
    ioperm(0x40, 4, 0);         /* trap access to the timer chip */
    ioperm(0x60, 4, 0);         /* trap access to the keyboard controller */
#endif
    return TRUE;
}

void
xf86DisableIO()
{
    ioperm(0, 0x10000, 0);
    return;
}

void
xf86OSInitVidMem(VidMemInfoPtr pVidMem)
{
    pVidMem->initialised = TRUE;
}
@


1.8
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d43 1
a43 1
 * Video Memory Mapping section                                            
a44 62
static void *
mapVidMem(int ScreenNum, unsigned long Base, unsigned long Size, int Flags)
{
    mach_port_t device, mem_dev;
    memory_object_t mem_obj;
    kern_return_t err;
    vm_address_t addr = (vm_address_t) 0;

    err = get_privileged_ports(NULL, &device);
    if (err) {
        errno = err;
        FatalError("xf86MapVidMem() can't get_privileged_ports. (%s)\n",
                   strerror(errno));
    }
    err = device_open(device, D_READ | D_WRITE, "mem", &mem_dev);
    mach_port_deallocate(mach_task_self(), device);
    if (err) {
        errno = err;
        FatalError("xf86MapVidMem() can't device_open. (%s)\n",
                   strerror(errno));
    }

    err =
        device_map(mem_dev, VM_PROT_READ | VM_PROT_WRITE, Base, Size, &mem_obj,
                   0);
    if (err) {
        errno = err;
        FatalError("xf86MapVidMem() can't device_map. (%s)\n", strerror(errno));
    }
    err = vm_map(mach_task_self(), &addr, Size, 0,      /* mask */
                 TRUE,          /* anywhere */
                 mem_obj, (vm_offset_t) Base, FALSE,    /* copy on write */
                 VM_PROT_READ | VM_PROT_WRITE,
                 VM_PROT_READ | VM_PROT_WRITE, VM_INHERIT_SHARE);
    mach_port_deallocate(mach_task_self(), mem_obj);
    if (err) {
        errno = err;
        FatalError("xf86MapVidMem() can't vm_map.(mem_obj) (%s)\n",
                   strerror(errno));
    }
    mach_port_deallocate(mach_task_self(), mem_dev);
    if (err) {
        errno = err;
        FatalError
            ("xf86MapVidMem() can't mach_port_deallocate.(mem_dev) (%s)\n",
             strerror(errno));
    }
    return (void *) addr;
}

static void
unmapVidMem(int ScreenNum, void *Base, unsigned long Size)
{
    kern_return_t err = vm_deallocate(mach_task_self(), (int) Base, Size);

    if (err) {
        errno = err;
        ErrorF("xf86UnMapVidMem: can't dealloc framebuffer space (%s)\n",
               strerror(errno));
    }
    return;
}
d47 1
a47 1
 * I/O Permissions section                                                 
a86 3
    pVidMem->linearSupported = TRUE;
    pVidMem->mapMem = mapVidMem;
    pVidMem->unmapMem = unmapVidMem;
@


1.7
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d45 1
a45 1
static pointer
d92 1
a92 1
    return (pointer) addr;
d96 1
a96 1
unmapVidMem(int ScreenNum, pointer Base, unsigned long Size)
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d31 1
@


1.5
log
@Update to xorg-server 1.9.3. Tested by japser@@, landry@@ and ajacoutot@@
in various configurations.
@
text
@d47 1
a47 1
    mach_port_t device,mem_dev;
d50 1
a50 1
    vm_address_t addr=(vm_address_t)0;
d52 38
a89 42
    err = get_privileged_ports (NULL, &device);
    if( err )
    {
	errno = err;
	FatalError("xf86MapVidMem() can't get_privileged_ports. (%s)\n",strerror(errno));
    }
    err = device_open(device,D_READ|D_WRITE,"mem",&mem_dev);
    mach_port_deallocate (mach_task_self(), device);
    if( err )
    {
	errno = err;
	FatalError("xf86MapVidMem() can't device_open. (%s)\n",strerror(errno));
    }

    err = device_map(mem_dev,VM_PROT_READ|VM_PROT_WRITE, Base , Size ,&mem_obj,0);
    if( err )
    {
	errno = err;
	FatalError("xf86MapVidMem() can't device_map. (%s)\n",strerror(errno));
    }
    err = vm_map(mach_task_self(),
		 &addr,
		 Size,
		 0,     /* mask */
		 TRUE,  /* anywhere */
		 mem_obj,
		 (vm_offset_t)Base,
		 FALSE, /* copy on write */
		 VM_PROT_READ|VM_PROT_WRITE,
		 VM_PROT_READ|VM_PROT_WRITE,
		 VM_INHERIT_SHARE);
    mach_port_deallocate(mach_task_self(),mem_obj);
    if( err )
    {
	errno = err;
	FatalError("xf86MapVidMem() can't vm_map.(mem_obj) (%s)\n",strerror(errno));
    }
    mach_port_deallocate(mach_task_self(),mem_dev);
    if( err )
    {
	errno = err;
	FatalError("xf86MapVidMem() can't mach_port_deallocate.(mem_dev) (%s)\n",strerror(errno));
d91 1
a91 1
    return (pointer)addr;
d95 1
a95 1
unmapVidMem(int ScreenNum,pointer Base,unsigned long Size)
d97 6
a102 5
    kern_return_t err = vm_deallocate(mach_task_self(), (int)Base, Size);
    if( err )
    {
	errno = err;
	ErrorF("xf86UnMapVidMem: can't dealloc framebuffer space (%s)\n",strerror(errno));
d121 2
a122 2
	FatalError("xf86EnableIO: ioperm() failed (%s)\n", strerror(errno));
	return FALSE;
d132 2
a133 2
    ioperm(0x40,4,0); /* trap access to the timer chip */
    ioperm(0x60,4,0); /* trap access to the keyboard controller */
d137 1
a137 1
	
d141 1
a141 1
    ioperm(0,0x10000,0);
d148 4
a151 4
	pVidMem->linearSupported = TRUE;
	pVidMem->mapMem = mapVidMem;
	pVidMem->unmapMem = unmapVidMem;
	pVidMem->initialised = TRUE;
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d47 2
a48 2
    mach_port_t device,iopl_dev;
    memory_object_t iopl_mem;
d58 1
a58 1
    err = device_open(device,D_READ|D_WRITE,"iopl",&iopl_dev);
d66 1
a66 1
    err = device_map(iopl_dev,VM_PROT_READ|VM_PROT_WRITE, Base , Size ,&iopl_mem,0);
d77 1
a77 1
		 iopl_mem,
d83 1
a83 1
    mach_port_deallocate(mach_task_self(),iopl_mem);
d87 1
a87 1
	FatalError("xf86MapVidMem() can't vm_map.(iopl_mem) (%s)\n",strerror(errno));
d89 1
a89 1
    mach_port_deallocate(mach_task_self(),iopl_dev);
d93 1
a93 1
	FatalError("xf86MapVidMem() can't mach_port_deallocate.(iopl_dev) (%s)\n",strerror(errno));
d127 8
d137 1
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d44 2
a45 2
pointer 
xf86MapVidMem(int ScreenNum,int Flags, unsigned long Base, unsigned long Size)
d98 2
a99 2
void 
xf86UnMapVidMem(int ScreenNum,pointer Base,unsigned long Size)
a109 6
Bool 
xf86LinearVidMem()
{
    return(TRUE);
}

d140 1
a140 2
xf86MapReadSideEffects(int ScreenNum, int Flags, pointer Base,
	unsigned long Size)
d142 4
a146 7

Bool
xf86CheckMTRR(int s)
{
	return FALSE;
}

@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a144 14
/**************************************************************************
 * Interrupt Handling section                                              
 **************************************************************************/
Bool 
xf86DisableInterrupts()
{
    return TRUE;
}
void 
xf86EnableInterrupts()
{
    return;
}

@


1.1
log
@Initial revision
@
text
@a22 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/os-support/hurd/hurd_video.c,v 1.3 1999/04/29 12:24:52 dawes Exp $ */
d119 6
a124 1
mach_port_t io_port;
d129 3
a131 22
    mach_port_t device;
    kern_return_t err;

    err = get_privileged_ports(NULL, &device);
    if( err )
    {
	errno = err;
	FatalError("xf86EnableIO() can't get_privileged_ports. (%s)\n",strerror(errno));
    }
    err = device_open(device,D_READ|D_WRITE,"io",&io_port);
    mach_port_deallocate(mach_task_self(), device);
    if( err )
    {
	errno = err;
	FatalError("xf86EnableIO() can't device_open. (%s)\n",strerror(errno));
    }

    err = i386_io_port_add(mach_thread_self (), io_port);
    if( err )
    {
	errno = err;
	FatalError("xf86EnableIO() can't i386_io_port_add.(io_port) (%s)\n",strerror(errno));
d133 2
d141 1
a141 9
    kern_return_t err;

    err = i386_io_port_remove(mach_thread_self (), io_port);
    if( err )
    {
	errno = err;
	FatalError("xf86DisableIO() can't i386_io_port_remove.(io_port) (%s)\n",strerror(errno));
    }
    mach_port_deallocate(mach_task_self(), io_port);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d23 1
d120 1
a120 6

/*
 * Due to conflicts with "compiler.h", don't rely on <sys/io.h> to declare
 * this.
 */
extern int ioperm(unsigned long __from, unsigned long __num, int __turn_on);
d125 22
a146 3
    if (ioperm(0, 0xffff, 1)) {
	FatalError("xf86EnableIO: ioperm() failed (%s)\n", strerror(errno));
	return FALSE;
a147 2
    ioperm(0x40,4,0); /* trap access to the timer chip */
    ioperm(0x60,4,0); /* trap access to the keyboard controller */
d154 9
a162 1
    ioperm(0,0xffff,0);
@

