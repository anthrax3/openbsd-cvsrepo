head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.14
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	Te1daavkBLskZ8gc;

1.5
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.52;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.07;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.33;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Abstraction of the AGP GART interface.
 *
 * This version is for Linux and Free/Open/NetBSD.
 *
 * Copyright © 2000 VA Linux Systems, Inc.
 * Copyright © 2001 The XFree86 Project, Inc.
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/X.h>
#include "xf86.h"
#include "xf86Priv.h"
#include "xf86_OSlib.h"
#include "xf86OSpriv.h"

#if defined(linux)
#include <asm/ioctl.h>
#include <linux/agpgart.h>
#elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__NetBSD__) || defined(__OpenBSD__) || defined(__DragonFly__)
#include <sys/ioctl.h>
#include <sys/agpio.h>
#endif

#ifndef AGP_DEVICE
#define AGP_DEVICE		"/dev/agpgart"
#endif
/* AGP page size is independent of the host page size. */
#ifndef AGP_PAGE_SIZE
#define AGP_PAGE_SIZE		4096
#endif
#define AGPGART_MAJOR_VERSION	0
#define AGPGART_MINOR_VERSION	99

static int gartFd = -1;
static int acquiredScreen = -1;
static Bool initDone = FALSE;

/*
 * Close /dev/agpgart.  This frees all associated memory allocated during
 * this server generation.
 */
Bool
xf86GARTCloseScreen(int screenNum)
{
    if (gartFd != -1) {
        close(gartFd);
        acquiredScreen = -1;
        gartFd = -1;
        initDone = FALSE;
    }
    return TRUE;
}

/*
 * Open /dev/agpgart.  Keep it open until xf86GARTCloseScreen is called.
 */
static Bool
GARTInit(int screenNum)
{
    struct _agp_info agpinf;

    if (initDone)
        return gartFd != -1;

    initDone = TRUE;

    if (gartFd == -1)
        gartFd = open(AGP_DEVICE, O_RDWR, 0);
    else
        return FALSE;

    if (gartFd == -1) {
        xf86DrvMsg(screenNum, X_ERROR,
                   "GARTInit: Unable to open " AGP_DEVICE " (%s)\n",
                   strerror(errno));
        return FALSE;
    }

    xf86AcquireGART(-1);
    /* Check the kernel driver version. */
    if (ioctl(gartFd, AGPIOC_INFO, &agpinf) != 0) {
        xf86DrvMsg(screenNum, X_ERROR,
                   "GARTInit: AGPIOC_INFO failed (%s)\n", strerror(errno));
        close(gartFd);
        gartFd = -1;
        return FALSE;
    }
    xf86ReleaseGART(-1);

#if defined(linux)
    /* Per Dave Jones, every effort will be made to keep the
     * agpgart interface backwards compatible, so allow all
     * future versions.
     */
    if (
#if (AGPGART_MAJOR_VERSION > 0) /* quiet compiler */
           agpinf.version.major < AGPGART_MAJOR_VERSION ||
#endif
           (agpinf.version.major == AGPGART_MAJOR_VERSION &&
            agpinf.version.minor < AGPGART_MINOR_VERSION)) {
        xf86DrvMsg(screenNum, X_ERROR,
                   "GARTInit: Kernel agpgart driver version is not current"
                   " (%d.%d vs %d.%d)\n",
                   agpinf.version.major, agpinf.version.minor,
                   AGPGART_MAJOR_VERSION, AGPGART_MINOR_VERSION);
        close(gartFd);
        gartFd = -1;
        return FALSE;
    }
#endif

    return TRUE;
}

Bool
xf86AgpGARTSupported(void)
{
    return GARTInit(-1);
}

AgpInfoPtr
xf86GetAGPInfo(int screenNum)
{
    struct _agp_info agpinf;
    AgpInfoPtr info;

    if (!GARTInit(screenNum))
        return NULL;

    if ((info = calloc(sizeof(AgpInfo), 1)) == NULL) {
        xf86DrvMsg(screenNum, X_ERROR,
                   "xf86GetAGPInfo: Failed to allocate AgpInfo\n");
        return NULL;
    }

    memset((char *) &agpinf, 0, sizeof(agpinf));

    if (ioctl(gartFd, AGPIOC_INFO, &agpinf) != 0) {
        xf86DrvMsg(screenNum, X_ERROR,
                   "xf86GetAGPInfo: AGPIOC_INFO failed (%s)\n",
                   strerror(errno));
        return NULL;
    }

    info->bridgeId = agpinf.bridge_id;
    info->agpMode = agpinf.agp_mode;
    info->base = agpinf.aper_base;
    info->size = agpinf.aper_size;
    info->totalPages = agpinf.pg_total;
    info->systemPages = agpinf.pg_system;
    info->usedPages = agpinf.pg_used;

    xf86DrvMsg(screenNum, X_INFO, "Kernel reported %zu total, %zu used\n",
               agpinf.pg_total, agpinf.pg_used);

    return info;
}

/*
 * XXX If multiple screens can acquire the GART, should we have a reference
 * count instead of using acquiredScreen?
 */

Bool
xf86AcquireGART(int screenNum)
{
    if (screenNum != -1 && !GARTInit(screenNum))
        return FALSE;

    if (screenNum == -1 || acquiredScreen != screenNum) {
        if (ioctl(gartFd, AGPIOC_ACQUIRE, 0) != 0) {
            xf86DrvMsg(screenNum, X_WARNING,
                       "xf86AcquireGART: AGPIOC_ACQUIRE failed (%s)\n",
                       strerror(errno));
            return FALSE;
        }
        acquiredScreen = screenNum;
    }
    return TRUE;
}

Bool
xf86ReleaseGART(int screenNum)
{
    if (screenNum != -1 && !GARTInit(screenNum))
        return FALSE;

    if (acquiredScreen == screenNum) {
        /*
         * The FreeBSD agp driver removes allocations on release.
         * The Linux driver doesn't.  xf86ReleaseGART() is expected
         * to give up access to the GART, but not to remove any
         * allocations.
         */
#if !defined(linux)
        if (screenNum == -1)
#endif
        {
            if (ioctl(gartFd, AGPIOC_RELEASE, 0) != 0) {
                xf86DrvMsg(screenNum, X_WARNING,
                           "xf86ReleaseGART: AGPIOC_RELEASE failed (%s)\n",
                           strerror(errno));
                return FALSE;
            }
            acquiredScreen = -1;
        }
        return TRUE;
    }
    return FALSE;
}

int
xf86AllocateGARTMemory(int screenNum, unsigned long size, int type,
                       unsigned long *physical)
{
    struct _agp_allocate alloc;
    int pages;

    /*
     * Allocates "size" bytes of GART memory (rounds up to the next
     * page multiple) or type "type".  A handle (key) for the allocated
     * memory is returned.  On error, the return value is -1.
     */

    if (!GARTInit(screenNum) || acquiredScreen != screenNum)
        return -1;

    pages = (size / AGP_PAGE_SIZE);
    if (size % AGP_PAGE_SIZE != 0)
        pages++;

    /* XXX check for pages == 0? */

    alloc.pg_count = pages;
    alloc.type = type;

    if (ioctl(gartFd, AGPIOC_ALLOCATE, &alloc) != 0) {
        xf86DrvMsg(screenNum, X_WARNING, "xf86AllocateGARTMemory: "
                   "allocation of %d pages failed\n\t(%s)\n", pages,
                   strerror(errno));
        return -1;
    }

    if (physical)
        *physical = alloc.physical;

    return alloc.key;
}

Bool
xf86DeallocateGARTMemory(int screenNum, int key)
{
    if (!GARTInit(screenNum) || acquiredScreen != screenNum)
        return FALSE;

    if (acquiredScreen != screenNum) {
        xf86DrvMsg(screenNum, X_ERROR,
                   "xf86UnbindGARTMemory: AGP not acquired by this screen\n");
        return FALSE;
    }

#ifdef __linux__
    if (ioctl(gartFd, AGPIOC_DEALLOCATE, (int *) (uintptr_t) key) != 0) {
#else
    if (ioctl(gartFd, AGPIOC_DEALLOCATE, &key) != 0) {
#endif
        xf86DrvMsg(screenNum, X_WARNING, "xf86DeAllocateGARTMemory: "
                   "deallocation gart memory with key %d failed\n\t(%s)\n",
                   key, strerror(errno));
        return FALSE;
    }

    return TRUE;
}

/* Bind GART memory with "key" at "offset" */
Bool
xf86BindGARTMemory(int screenNum, int key, unsigned long offset)
{
    struct _agp_bind bind;
    int pageOffset;

    if (!GARTInit(screenNum) || acquiredScreen != screenNum)
        return FALSE;

    if (acquiredScreen != screenNum) {
        xf86DrvMsg(screenNum, X_ERROR,
                   "xf86BindGARTMemory: AGP not acquired by this screen\n");
        return FALSE;
    }

    if (offset % AGP_PAGE_SIZE != 0) {
        xf86DrvMsg(screenNum, X_WARNING, "xf86BindGARTMemory: "
                   "offset (0x%lx) is not page-aligned (%d)\n",
                   offset, AGP_PAGE_SIZE);
        return FALSE;
    }
    pageOffset = offset / AGP_PAGE_SIZE;

    xf86DrvMsgVerb(screenNum, X_INFO, 3,
                   "xf86BindGARTMemory: bind key %d at 0x%08lx "
                   "(pgoffset %d)\n", key, offset, pageOffset);

    bind.pg_start = pageOffset;
    bind.key = key;

    if (ioctl(gartFd, AGPIOC_BIND, &bind) != 0) {
        xf86DrvMsg(screenNum, X_WARNING, "xf86BindGARTMemory: "
                   "binding of gart memory with key %d\n"
                   "\tat offset 0x%lx failed (%s)\n",
                   key, offset, strerror(errno));
        return FALSE;
    }

    return TRUE;
}

/* Unbind GART memory with "key" */
Bool
xf86UnbindGARTMemory(int screenNum, int key)
{
    struct _agp_unbind unbind;

    if (!GARTInit(screenNum) || acquiredScreen != screenNum)
        return FALSE;

    if (acquiredScreen != screenNum) {
        xf86DrvMsg(screenNum, X_ERROR,
                   "xf86UnbindGARTMemory: AGP not acquired by this screen\n");
        return FALSE;
    }

    unbind.priority = 0;
    unbind.key = key;

    if (ioctl(gartFd, AGPIOC_UNBIND, &unbind) != 0) {
        xf86DrvMsg(screenNum, X_WARNING, "xf86UnbindGARTMemory: "
                   "unbinding of gart memory with key %d "
                   "failed (%s)\n", key, strerror(errno));
        return FALSE;
    }

    xf86DrvMsgVerb(screenNum, X_INFO, 3,
                   "xf86UnbindGARTMemory: unbind key %d\n", key);

    return TRUE;
}

/* XXX Interface may change. */
Bool
xf86EnableAGP(int screenNum, CARD32 mode)
{
    agp_setup setup;

    if (!GARTInit(screenNum) || acquiredScreen != screenNum)
        return FALSE;

    setup.agp_mode = mode;
    if (ioctl(gartFd, AGPIOC_SETUP, &setup) != 0) {
        xf86DrvMsg(screenNum, X_WARNING, "xf86EnableAGP: "
                   "AGPIOC_SETUP with mode %ld failed (%s)\n",
                   (unsigned long) mode, strerror(errno));
        return FALSE;
    }

    return TRUE;
}
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d95 2
a96 2
    /* Per Dave Jones, every effort will be made to keep the 
     * agpgart interface backwards compatible, so allow all 
@


1.4
log
@Update to xserver 1.11.2
@
text
@a9 1

d41 1
d49 7
a55 7
	if(gartFd != -1) {
		close(gartFd);
		acquiredScreen = -1;
		gartFd = -1;
		initDone = FALSE;
	}
	return TRUE;
d64 1
a64 1
	struct _agp_info agpinf;
d66 2
a67 2
	if (initDone)
		return gartFd != -1;
d69 1
a69 1
	initDone = TRUE;
d71 22
a92 22
	if (gartFd == -1)
		gartFd = open(AGP_DEVICE, O_RDWR, 0);
	else
		return FALSE;

	if (gartFd == -1) {
	    xf86DrvMsg(screenNum, X_ERROR,
		"GARTInit: Unable to open " AGP_DEVICE " (%s)\n",
		strerror(errno));
	    return FALSE;
	}

	xf86AcquireGART(-1);
	/* Check the kernel driver version. */
	if (ioctl(gartFd, AGPIOC_INFO, &agpinf) != 0) {
		xf86DrvMsg(screenNum, X_ERROR,
			"GARTInit: AGPIOC_INFO failed (%s)\n", strerror(errno));
		close(gartFd);
		gartFd = -1;
		return FALSE;
	}
	xf86ReleaseGART(-1);
d95 5
a99 5
	/* Per Dave Jones, every effort will be made to keep the 
	 * agpgart interface backwards compatible, so allow all 
	 * future versions.
	 */
	if (
d101 1
a101 1
	    agpinf.version.major < AGPGART_MAJOR_VERSION ||
d103 11
a113 11
	    (agpinf.version.major == AGPGART_MAJOR_VERSION &&
	     agpinf.version.minor < AGPGART_MINOR_VERSION)) {
		xf86DrvMsg(screenNum, X_ERROR,
			"GARTInit: Kernel agpgart driver version is not current"
			" (%d.%d vs %d.%d)\n",
			agpinf.version.major, agpinf.version.minor,
			AGPGART_MAJOR_VERSION, AGPGART_MINOR_VERSION);
		close(gartFd);
		gartFd = -1;
		return FALSE;
	}
d115 2
a116 2
	
	return TRUE;
d122 1
a122 1
	return GARTInit(-1);
d128 2
a129 2
	struct _agp_info agpinf;
	AgpInfoPtr info;
d131 2
a132 2
	if (!GARTInit(screenNum))
		return NULL;
d134 22
d157 2
a158 22
	if ((info = calloc(sizeof(AgpInfo), 1)) == NULL) {
		xf86DrvMsg(screenNum, X_ERROR,
			   "xf86GetAGPInfo: Failed to allocate AgpInfo\n");
		return NULL;
	}

	memset((char*)&agpinf, 0, sizeof(agpinf));

	if (ioctl(gartFd, AGPIOC_INFO, &agpinf) != 0) {
		xf86DrvMsg(screenNum, X_ERROR,
			   "xf86GetAGPInfo: AGPIOC_INFO failed (%s)\n",
			   strerror(errno));
		return NULL;
	}

	info->bridgeId = agpinf.bridge_id;
	info->agpMode = agpinf.agp_mode;
	info->base = agpinf.aper_base;
	info->size = agpinf.aper_size;
	info->totalPages = agpinf.pg_total;
	info->systemPages = agpinf.pg_system;
	info->usedPages = agpinf.pg_used;
d160 1
a160 3
	xf86DrvMsg(screenNum, X_INFO, "Kernel reported %zu total, %zu used\n", agpinf.pg_total, agpinf.pg_used);

	return info;
d171 2
a172 2
	if (screenNum != -1 && !GARTInit(screenNum))
		return FALSE;
d174 10
a183 10
	if (screenNum == -1 || acquiredScreen != screenNum) {
		if (ioctl(gartFd, AGPIOC_ACQUIRE, 0) != 0) {
			xf86DrvMsg(screenNum, X_WARNING,
				"xf86AcquireGART: AGPIOC_ACQUIRE failed (%s)\n",
				strerror(errno));
			return FALSE;
		}
		acquiredScreen = screenNum;
	}
	return TRUE;
d189 2
a190 2
	if (screenNum != -1 && !GARTInit(screenNum))
		return FALSE;
d192 7
a198 7
	if (acquiredScreen == screenNum) {
		/*
		 * The FreeBSD agp driver removes allocations on release.
		 * The Linux driver doesn't.  xf86ReleaseGART() is expected
		 * to give up access to the GART, but not to remove any
		 * allocations.
		 */
d200 1
a200 1
	    if (screenNum == -1)
d202 12
a213 12
	    {
		if (ioctl(gartFd, AGPIOC_RELEASE, 0) != 0) {
			xf86DrvMsg(screenNum, X_WARNING,
				"xf86ReleaseGART: AGPIOC_RELEASE failed (%s)\n",
				strerror(errno));
			return FALSE;
		}
		acquiredScreen = -1;
	    }
	    return TRUE;
	}
	return FALSE;
d218 1
a218 1
			unsigned long *physical)
d220 2
a221 2
	struct _agp_allocate alloc;
	int pages;
d223 5
a227 5
	/*
	 * Allocates "size" bytes of GART memory (rounds up to the next
	 * page multiple) or type "type".  A handle (key) for the allocated
	 * memory is returned.  On error, the return value is -1.
	 */
d229 2
a230 2
	if (!GARTInit(screenNum) || acquiredScreen != screenNum)
		return -1;
d232 3
a234 3
	pages = (size / AGP_PAGE_SIZE);
	if (size % AGP_PAGE_SIZE != 0)
		pages++;
d236 1
a236 1
	/* XXX check for pages == 0? */
d238 2
a239 2
	alloc.pg_count = pages;
	alloc.type = type;
d241 6
a246 6
	if (ioctl(gartFd, AGPIOC_ALLOCATE, &alloc) != 0) {
		xf86DrvMsg(screenNum, X_WARNING, "xf86AllocateGARTMemory: "
			   "allocation of %d pages failed\n\t(%s)\n", pages,
			   strerror(errno));
		return -1;
	}
d248 2
a249 2
	if (physical)
		*physical = alloc.physical;
d251 1
a251 1
	return alloc.key;
d257 2
a258 2
	if (!GARTInit(screenNum) || acquiredScreen != screenNum)
		return FALSE;
d260 2
a261 2
	if (acquiredScreen != screenNum) {
		xf86DrvMsg(screenNum, X_ERROR,
d263 2
a264 2
		return FALSE;
	}
d267 1
a267 1
	if (ioctl(gartFd, AGPIOC_DEALLOCATE, (int *)(uintptr_t)key) != 0) {
d269 1
a269 1
	if (ioctl(gartFd, AGPIOC_DEALLOCATE, &key) != 0) {
d271 1
a271 1
		xf86DrvMsg(screenNum, X_WARNING,"xf86DeAllocateGARTMemory: "
d274 2
a275 2
		return FALSE;
	}
d277 1
a277 1
	return TRUE;
d284 2
a285 2
	struct _agp_bind bind;
	int pageOffset;
d287 2
a288 2
	if (!GARTInit(screenNum) || acquiredScreen != screenNum)
		return FALSE;
d290 28
a317 28
	if (acquiredScreen != screenNum) {
		xf86DrvMsg(screenNum, X_ERROR,
		      "xf86BindGARTMemory: AGP not acquired by this screen\n");
		return FALSE;
	}

	if (offset % AGP_PAGE_SIZE != 0) {
		xf86DrvMsg(screenNum, X_WARNING, "xf86BindGARTMemory: "
			   "offset (0x%lx) is not page-aligned (%d)\n",
			   offset, AGP_PAGE_SIZE);
		return FALSE;
	}
	pageOffset = offset / AGP_PAGE_SIZE;

	xf86DrvMsgVerb(screenNum, X_INFO, 3,
		       "xf86BindGARTMemory: bind key %d at 0x%08lx "
		       "(pgoffset %d)\n", key, offset, pageOffset);

	bind.pg_start = pageOffset;
	bind.key = key;

	if (ioctl(gartFd, AGPIOC_BIND, &bind) != 0) {
		xf86DrvMsg(screenNum, X_WARNING, "xf86BindGARTMemory: "
			   "binding of gart memory with key %d\n"
			   "\tat offset 0x%lx failed (%s)\n",
			   key, offset, strerror(errno));
		return FALSE;
	}
d319 1
a319 1
	return TRUE;
a321 1

d326 1
a326 1
	struct _agp_unbind unbind;
d328 2
a329 2
	if (!GARTInit(screenNum) || acquiredScreen != screenNum)
		return FALSE;
d331 15
a345 15
	if (acquiredScreen != screenNum) {
		xf86DrvMsg(screenNum, X_ERROR,
		    "xf86UnbindGARTMemory: AGP not acquired by this screen\n");
		return FALSE;
	}

	unbind.priority = 0;
	unbind.key = key;

	if (ioctl(gartFd, AGPIOC_UNBIND, &unbind) != 0) {
		xf86DrvMsg(screenNum, X_WARNING, "xf86UnbindGARTMemory: "
			   "unbinding of gart memory with key %d "
			   "failed (%s)\n", key, strerror(errno));
		return FALSE;
	}
d347 2
a348 2
	xf86DrvMsgVerb(screenNum, X_INFO, 3,
		       "xf86UnbindGARTMemory: unbind key %d\n", key);
d350 1
a350 1
	return TRUE;
a352 1

d357 1
a357 1
	agp_setup setup;
d359 2
a360 2
	if (!GARTInit(screenNum) || acquiredScreen != screenNum)
		return FALSE;
d362 7
a368 7
	setup.agp_mode = mode;
	if (ioctl(gartFd, AGPIOC_SETUP, &setup) != 0) {
		xf86DrvMsg(screenNum, X_WARNING, "xf86EnableAGP: "
			   "AGPIOC_SETUP with mode %ld failed (%s)\n",
			   (unsigned long)mode, strerror(errno));
		return FALSE;
	}
d370 1
a370 1
	return TRUE;
a371 1

@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d267 1
a267 1
	if (ioctl(gartFd, AGPIOC_DEALLOCATE, (int *)key) != 0) {
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d67 1
a67 1
		return (gartFd != -1);
d135 1
a135 1
	if ((info = xcalloc(sizeof(AgpInfo), 1)) == NULL) {
@


1.1
log
@Initial revision
@
text
@d46 1
a46 1
_X_EXPORT Bool
d119 2
a120 2
_X_EXPORT Bool
xf86AgpGARTSupported()
d125 1
a125 1
_X_EXPORT AgpInfoPtr
d158 1
a158 1
	xf86DrvMsg(screenNum, X_INFO, "Kernel reported %d total, %d used\n", agpinf.pg_total, agpinf.pg_used);
d168 1
a168 1
_X_EXPORT Bool
d186 1
a186 1
_X_EXPORT Bool
d216 1
a216 1
_X_EXPORT int
d254 1
a254 1
_X_EXPORT Bool
d281 1
a281 1
_X_EXPORT Bool
d324 1
a324 1
_X_EXPORT Bool
d356 1
a356 1
_X_EXPORT Bool
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
