head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.10
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.09.27.17.53.02;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	cVXoV5PxI8YrEaVA;

1.4
date	2013.06.07.17.28.52;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.35;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.35;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@
#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/X.h>
#include "os.h"
#include "xf86.h"
#include "xf86Priv.h"
#define XF86_OS_PRIVS
#include "xf86_OSproc.h"

#ifdef HAVE_ACPI
extern PMClose lnxACPIOpen(void);
#endif

#ifdef HAVE_APM

#include <linux/apm_bios.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>

#define APM_PROC   "/proc/apm"
#define APM_DEVICE "/dev/apm_bios"

#ifndef APM_STANDBY_FAILED
#define APM_STANDBY_FAILED 0xf000
#endif
#ifndef APM_SUSPEND_FAILED
#define APM_SUSPEND_FAILED 0xf001
#endif

static PMClose lnxAPMOpen(void);
static void lnxCloseAPM(void);
static void *APMihPtr = NULL;

static struct {
    apm_event_t apmLinux;
    pmEvent xf86;
} LinuxToXF86[] = {
    {APM_SYS_STANDBY, XF86_APM_SYS_STANDBY},
    {APM_SYS_SUSPEND, XF86_APM_SYS_SUSPEND},
    {APM_NORMAL_RESUME, XF86_APM_NORMAL_RESUME},
    {APM_CRITICAL_RESUME, XF86_APM_CRITICAL_RESUME},
    {APM_LOW_BATTERY, XF86_APM_LOW_BATTERY},
    {APM_POWER_STATUS_CHANGE, XF86_APM_POWER_STATUS_CHANGE},
    {APM_UPDATE_TIME, XF86_APM_UPDATE_TIME},
    {APM_CRITICAL_SUSPEND, XF86_APM_CRITICAL_SUSPEND},
    {APM_USER_STANDBY, XF86_APM_USER_STANDBY},
    {APM_USER_SUSPEND, XF86_APM_USER_SUSPEND},
    {APM_STANDBY_RESUME, XF86_APM_STANDBY_RESUME},
#if defined(APM_CAPABILITY_CHANGED)
    {APM_CAPABILITY_CHANGED, XF86_CAPABILITY_CHANGED},
#endif
#if 0
    {APM_STANDBY_FAILED, XF86_APM_STANDBY_FAILED},
    {APM_SUSPEND_FAILED, XF86_APM_SUSPEND_FAILED}
#endif
};

#define numApmEvents (sizeof(LinuxToXF86) / sizeof(LinuxToXF86[0]))

/*
 * APM is still under construction.
 * I'm not sure if the places where I initialize/deinitialize
 * apm is correct. Also I don't know what to do in SETUP state.
 * This depends if wakeup gets called in this situation, too.
 * Also we need to check if the action that is taken on an
 * event is reasonable.
 */
static int
lnxPMGetEventFromOs(int fd, pmEvent * events, int num)
{
    int i, j, n;
    apm_event_t linuxEvents[8];

    if ((n = read(fd, linuxEvents, num * sizeof(apm_event_t))) == -1)
        return 0;
    n /= sizeof(apm_event_t);
    if (n > num)
        n = num;
    for (i = 0; i < n; i++) {
        for (j = 0; j < numApmEvents; j++)
            if (LinuxToXF86[j].apmLinux == linuxEvents[i]) {
                events[i] = LinuxToXF86[j].xf86;
                break;
            }
        if (j == numApmEvents)
            events[i] = XF86_APM_UNKNOWN;
    }
    return n;
}

static pmWait
lnxPMConfirmEventToOs(int fd, pmEvent event)
{
    switch (event) {
    case XF86_APM_SYS_STANDBY:
    case XF86_APM_USER_STANDBY:
        if (ioctl(fd, APM_IOC_STANDBY, NULL))
            return PM_FAILED;
        return PM_CONTINUE;
    case XF86_APM_SYS_SUSPEND:
    case XF86_APM_CRITICAL_SUSPEND:
    case XF86_APM_USER_SUSPEND:
        if (ioctl(fd, APM_IOC_SUSPEND, NULL)) {
            /* I believe this is wrong (EE)
               EBUSY is sent when a device refuses to be suspended.
               In this case we still need to undo everything we have
               done to suspend ourselves or we will stay in suspended
               state forever. */
            if (errno == EBUSY)
                return PM_CONTINUE;
            else
                return PM_FAILED;
        }
        return PM_CONTINUE;
    case XF86_APM_STANDBY_RESUME:
    case XF86_APM_NORMAL_RESUME:
    case XF86_APM_CRITICAL_RESUME:
    case XF86_APM_STANDBY_FAILED:
    case XF86_APM_SUSPEND_FAILED:
        return PM_CONTINUE;
    default:
        return PM_NONE;
    }
}

#endif                          // HAVE_APM

PMClose
xf86OSPMOpen(void)
{
    PMClose ret = NULL;

#ifdef HAVE_ACPI
    /* Favour ACPI over APM, but only when enabled */

    if (!xf86acpiDisableFlag)
        ret = lnxACPIOpen();

    if (!ret)
#endif
#ifdef HAVE_APM
        ret = lnxAPMOpen();
#endif

    return ret;
}

#ifdef HAVE_APM

static PMClose
lnxAPMOpen(void)
{
    int fd, pfd;

    DebugF("APM: OSPMOpen called\n");
    if (APMihPtr || !xf86Info.pmFlag)
        return NULL;

    DebugF("APM: Opening device\n");
    if ((fd = open(APM_DEVICE, O_RDWR)) > -1) {
        if (access(APM_PROC, R_OK) || ((pfd = open(APM_PROC, O_RDONLY)) == -1)) {
            xf86MsgVerb(X_WARNING, 3, "Cannot open APM (%s) (%s)\n",
                        APM_PROC, strerror(errno));
            close(fd);
            return NULL;
        }
        else
            close(pfd);
        xf86PMGetEventFromOs = lnxPMGetEventFromOs;
        xf86PMConfirmEventToOs = lnxPMConfirmEventToOs;
        APMihPtr = xf86AddGeneralHandler(fd, xf86HandlePMEvents, NULL);
        xf86MsgVerb(X_INFO, 3, "Open APM successful\n");
        return lnxCloseAPM;
    }
    return NULL;
}

static void
lnxCloseAPM(void)
{
    int fd;

    DebugF("APM: Closing device\n");
    if (APMihPtr) {
        fd = xf86RemoveGeneralHandler(APMihPtr);
        close(fd);
        APMihPtr = NULL;
    }
}

#endif                          // HAVE_APM
@


1.4
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d39 1
a39 1
static pointer APMihPtr = NULL;
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d45 11
a55 12
    {
    APM_SYS_STANDBY, XF86_APM_SYS_STANDBY}, {
    APM_SYS_SUSPEND, XF86_APM_SYS_SUSPEND}, {
    APM_NORMAL_RESUME, XF86_APM_NORMAL_RESUME}, {
    APM_CRITICAL_RESUME, XF86_APM_CRITICAL_RESUME}, {
    APM_LOW_BATTERY, XF86_APM_LOW_BATTERY}, {
    APM_POWER_STATUS_CHANGE, XF86_APM_POWER_STATUS_CHANGE}, {
    APM_UPDATE_TIME, XF86_APM_UPDATE_TIME}, {
    APM_CRITICAL_SUSPEND, XF86_APM_CRITICAL_SUSPEND}, {
    APM_USER_STANDBY, XF86_APM_USER_STANDBY}, {
    APM_USER_SUSPEND, XF86_APM_USER_SUSPEND}, {
    APM_STANDBY_RESUME, XF86_APM_STANDBY_RESUME},
d57 1
a57 2
    {
    APM_CAPABILITY_CHANGED, XF86_CAPABILITY_CHANGED},
d60 2
a61 3
    {
    APM_STANDBY_FAILED, XF86_APM_STANDBY_FAILED}, {
    APM_SUSPEND_FAILED, XF86_APM_SUSPEND_FAILED}
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d26 1
a26 1
 
d31 1
a31 1
# define APM_STANDBY_FAILED 0xf000
d34 1
a34 1
# define APM_SUSPEND_FAILED 0xf001
d45 12
a56 11
    { APM_SYS_STANDBY, XF86_APM_SYS_STANDBY },
    { APM_SYS_SUSPEND, XF86_APM_SYS_SUSPEND },
    { APM_NORMAL_RESUME, XF86_APM_NORMAL_RESUME },
    { APM_CRITICAL_RESUME, XF86_APM_CRITICAL_RESUME },
    { APM_LOW_BATTERY, XF86_APM_LOW_BATTERY },
    { APM_POWER_STATUS_CHANGE, XF86_APM_POWER_STATUS_CHANGE },
    { APM_UPDATE_TIME, XF86_APM_UPDATE_TIME },
    { APM_CRITICAL_SUSPEND, XF86_APM_CRITICAL_SUSPEND },
    { APM_USER_STANDBY, XF86_APM_USER_STANDBY },
    { APM_USER_SUSPEND, XF86_APM_USER_SUSPEND },
    { APM_STANDBY_RESUME, XF86_APM_STANDBY_RESUME },
d58 2
a59 1
    { APM_CAPABILITY_CHANGED, XF86_CAPABILITY_CHANGED },
d62 3
a64 2
    { APM_STANDBY_FAILED, XF86_APM_STANDBY_FAILED },
    { APM_SUSPEND_FAILED, XF86_APM_SUSPEND_FAILED }
d79 1
a79 1
lnxPMGetEventFromOs(int fd, pmEvent *events, int num)
d81 1
a81 1
    int i,j,n;
d84 2
a85 2
    if ((n = read( fd, linuxEvents, num * sizeof(apm_event_t) )) == -1)
	return 0;
d88 1
a88 1
	n = num;
d90 7
a96 7
	for (j = 0; j < numApmEvents; j++)
	    if (LinuxToXF86[j].apmLinux == linuxEvents[i]) {
		events[i] = LinuxToXF86[j].xf86;
		break;
	    }
	if (j == numApmEvents)
	    events[i] = XF86_APM_UNKNOWN;
d107 3
a109 3
        if (ioctl( fd, APM_IOC_STANDBY, NULL ))
	    return PM_FAILED;
	return PM_CONTINUE;
d113 12
a124 12
	if (ioctl( fd, APM_IOC_SUSPEND, NULL )) {
	    /* I believe this is wrong (EE)
	       EBUSY is sent when a device refuses to be suspended.
	       In this case we still need to undo everything we have
	       done to suspend ourselves or we will stay in suspended
	       state forever. */
	    if (errno == EBUSY)
		return PM_CONTINUE;
	    else
		return PM_FAILED;
	}
	return PM_CONTINUE;
d130 1
a130 1
	return PM_CONTINUE;
d132 1
a132 1
	return PM_NONE;
d136 1
a136 1
#endif // HAVE_APM
d141 1
a141 1
	PMClose ret = NULL;
d144 1
a144 1
	/* Favour ACPI over APM, but only when enabled */
d146 2
a147 2
	if (!xf86acpiDisableFlag)
		ret = lnxACPIOpen();
d149 1
a149 1
	if (!ret)
d152 1
a152 1
		ret = lnxAPMOpen();
d155 1
a155 1
	return ret;
d163 1
a163 1
    int fd, pfd;    
d167 2
a168 2
	return NULL;
   
d170 14
a183 14
    if ((fd = open( APM_DEVICE, O_RDWR )) > -1) {
	if (access( APM_PROC, R_OK ) ||
	    ((pfd = open( APM_PROC, O_RDONLY)) == -1)) {
	    xf86MsgVerb(X_WARNING,3,"Cannot open APM (%s) (%s)\n",
			APM_PROC, strerror(errno));
	    close(fd);
	    return NULL;
	} else
	    close(pfd);
	xf86PMGetEventFromOs = lnxPMGetEventFromOs;
	xf86PMConfirmEventToOs = lnxPMConfirmEventToOs;
	APMihPtr = xf86AddGeneralHandler(fd, xf86HandlePMEvents, NULL);
	xf86MsgVerb(X_INFO,3,"Open APM successful\n");
	return lnxCloseAPM;
d195 3
a197 3
	fd = xf86RemoveGeneralHandler(APMihPtr);
	close(fd);
	APMihPtr = NULL;
d201 1
a201 1
#endif // HAVE_APM
@


1.1
log
@Initial revision
@
text
@a18 1
#include "lnx.h"
d162 1
a162 3
#ifdef DEBUG
    ErrorF("APM: OSPMOpen called\n");
#endif
d166 1
a166 3
#ifdef DEBUG
    ErrorF("APM: Opening device\n");
#endif
d178 1
a178 1
	APMihPtr = xf86AddInputHandler(fd,xf86HandlePMEvents,NULL);
a181 1
    xf86MsgVerb(X_INFO,3,"No APM support in BIOS or kernel\n");
d189 2
a190 4
    
#ifdef DEBUG
   ErrorF("APM: Closing device\n");
#endif
d192 1
a192 1
	fd = xf86RemoveInputHandler(APMihPtr);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
