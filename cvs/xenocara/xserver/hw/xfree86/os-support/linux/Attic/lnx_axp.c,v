head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.14
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.09.16.19.10.23;	author matthieu;	state dead;
branches;
next	1.5;
commitid	Te1daavkBLskZ8gc;

1.5
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.27;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.33;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.57.23;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@
#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <stdio.h>
#include "xf86.h"
#include "shared/xf86Axp.h"

axpDevice lnxGetAXP(void);

typedef struct {
    char *sysName;
    char *sysVari;
    char *cpu;
    axpDevice sys;
} AXP;

static AXP axpList[] = {
    {"Tsunami", NULL, NULL, TSUNAMI},
    {"Eiger", NULL, NULL, TSUNAMI},
    {"Noname", NULL, NULL, LCA},
    {"AlphaBook1", NULL, NULL, LCA},
    {"EB66", NULL, NULL, LCA},
    {"EB64+", NULL, NULL, APECS},
    {"Noritake", NULL, "EV5", CIA},
    {"Noritake", NULL, "EV56", CIA},
    {"Noritake", NULL, NULL, APECS},
    {"XL", NULL, NULL, APECS},
    {"Avanti", NULL, NULL, APECS},
    {"Mikasa", NULL, "EV5", CIA},
    {"Mikasa", NULL, "EV56", CIA},
    {"Mikasa", NULL, NULL, APECS},
    {"EB164", "EB164", NULL, CIA},
    {"EB164", "PC164", NULL, CIA},
    {"EB164", "LX164", NULL, PYXIS},
    {"EB164", "SX164", NULL, PYXIS},
    {"EB164", "RX164", NULL, POLARIS},
    {"Alcor", NULL, NULL, CIA},
    {"Takara", NULL, NULL, CIA},
    {"Sable", NULL, "EV5", T2_GAMMA},
    {"Sable", NULL, "EV56", T2_GAMMA},
    {"Sable", NULL, NULL, T2},
    {"Rawhide", NULL, NULL, MCPCIA},
    {"Jensen", NULL, NULL, JENSEN},
    {"Miata", NULL, NULL, PYXIS_CIA},
    {"Ruffian", NULL, NULL, PYXIS_CIA},
    {"Nautilus", NULL, NULL, IRONGATE},
    {NULL, NULL, NULL, SYS_NONE}
};

axpDevice
lnxGetAXP(void)
{
    FILE *file;
    int count = 0;
    char res[256];
    char cpu[255];
    char systype[255];
    char sysvari[255];

    if (!(file = fopen("/proc/cpuinfo", "r")))
        return SYS_NONE;
    do {
        if (!fgets(res, 0xff, file))
            return SYS_NONE;
        switch (count) {
        case 1:
            sscanf(res, "cpu model : %s", cpu);
            DebugF("CPU %s\n", cpu);
            break;
        case 5:
            sscanf(res, "system type : %s", systype);
            DebugF("system type : %s\n", systype);
            break;
        case 6:
            sscanf(res, "system variation : %s", sysvari);
            DebugF("system variation: %s\n", sysvari);
            break;
        }
        count++;
    } while (count < 8);

    fclose(file);

    count = 0;

    do {
        if (!axpList[count].sysName || !strcmp(axpList[count].sysName, systype)) {
            if (axpList[count].sysVari &&
                strcmp(axpList[count].sysVari, sysvari)) {
                count++;
                continue;
            };
            if (axpList[count].cpu && strcmp(axpList[count].cpu, cpu)) {
                count++;
                continue;
            }
            return axpList[count].sys;
        }
        count++;
    } while (1);
}
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d12 6
a17 6
typedef struct 
 { char* sysName; 
   char* sysVari; 
   char* cpu; 
   axpDevice sys; }
AXP;
d20 30
a49 30
  { "Tsunami", NULL, NULL, TSUNAMI },
  { "Eiger", NULL, NULL, TSUNAMI }, 
  {"Noname", NULL, NULL, LCA },
  { "AlphaBook1", NULL, NULL, LCA }, 
  {"EB66", NULL, NULL, LCA}, 
  {"EB64+",NULL,NULL, APECS}, 
  {"Noritake",NULL,"EV5",CIA},
  {"Noritake",NULL,"EV56",CIA},
  {"Noritake",NULL,NULL,APECS},
  {"XL",NULL,NULL,APECS},              
  {"Avanti",NULL,NULL,APECS},
  {"Mikasa",NULL,"EV5",CIA},
  {"Mikasa",NULL,"EV56",CIA},
  {"Mikasa",NULL,NULL,APECS},
  {"EB164","EB164",NULL,CIA},
  {"EB164","PC164", NULL,CIA},
  {"EB164","LX164",NULL, PYXIS},
  {"EB164","SX164",NULL, PYXIS},
  {"EB164","RX164",NULL, POLARIS},
  {"Alcor",NULL,NULL,CIA},
  {"Takara",NULL,NULL,CIA},
  {"Sable",NULL, "EV5",T2_GAMMA},
  {"Sable",NULL,"EV56",T2_GAMMA},
  {"Sable",NULL,NULL,T2},
  {"Rawhide",NULL,NULL,MCPCIA},
  {"Jensen",NULL,NULL,JENSEN},
  {"Miata",NULL,NULL,PYXIS_CIA},
  {"Ruffian",NULL,NULL,PYXIS_CIA},
  {"Nautilus",NULL,NULL,IRONGATE},
  {NULL,NULL,NULL,SYS_NONE}
a51 1

d55 48
a102 45
  FILE *file;
  int count = 0;
  char res[256];
  char cpu[255];
  char systype[255];
  char sysvari[255];
  if (!(file = fopen("/proc/cpuinfo","r")))
    return SYS_NONE;
  do {
    if (!fgets(res,0xff,file)) return SYS_NONE;
    switch (count) {
    case 1:
      sscanf(res, "cpu model : %s",cpu);
      DebugF("CPU %s\n",cpu);
      break;
    case 5:
      sscanf(res, "system type : %s",systype);
      DebugF("system type : %s\n",systype);
      break;
    case 6:
      sscanf(res, "system variation : %s",sysvari);
      DebugF("system variation: %s\n",sysvari);
      break;
    }
    count++;
  } while (count < 8);
  
  fclose(file);
  
  count = 0;
  
  do {
    if (!axpList[count].sysName || !strcmp(axpList[count].sysName,systype)) {
      if (axpList[count].sysVari && strcmp(axpList[count].sysVari,sysvari)) {
	count++;
	continue;
      };
      if (axpList[count].cpu && strcmp(axpList[count].cpu,cpu)) {
	count++;
	continue;
      }
      return axpList[count].sys;
    } 
	count++;
  } while (1);
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a6 2
#include <X11/X.h>
#include "os.h"
a7 1
#include "xf86Priv.h"
d49 1
a49 1
  {NULL,NULL,NULL,NONE}
d69 1
a69 3
#ifdef DEBUG
      ErrorF("CPU %s\n",cpu);
#endif
d73 1
a73 3
#ifdef DEBUG
      ErrorF("system type : %s\n",systype);
#endif
d77 1
a77 3
#ifdef DEBUG
      ErrorF("system variation: %s\n",sysvari);
#endif
a101 87

/*
 * pciconfig_iobase wrappers and dynamic i/o selection
 */
#include "lnx.h"
#include <unistd.h>
#include <errno.h>

/* glibc versions (single hose only) */
extern void _outb(char val, unsigned long port);
extern void _outw(short val, unsigned long port);
extern void _outl(int val, unsigned long port);
extern unsigned int _inb(unsigned long port);
extern unsigned int _inw(unsigned long port);
extern unsigned int _inl(unsigned long port);

extern void _dense_outb(char, unsigned long);
extern void _dense_outw(short, unsigned long);
extern void _dense_outl(int, unsigned long);
extern unsigned int _dense_inb(unsigned long);
extern unsigned int _dense_inw(unsigned long);
extern unsigned int _dense_inl(unsigned long);

_X_EXPORT void (*_alpha_outb)(char, unsigned long) = _outb;
_X_EXPORT void (*_alpha_outw)(short, unsigned long) = _outw;
_X_EXPORT void (*_alpha_outl)(int, unsigned long) = _outl;
_X_EXPORT unsigned int (*_alpha_inb)(unsigned long) = _inb;
_X_EXPORT unsigned int (*_alpha_inw)(unsigned long) = _inw;
_X_EXPORT unsigned int (*_alpha_inl)(unsigned long) = _inl;

static long _alpha_iobase_query(unsigned, int, int, int);
long (*_iobase)(unsigned, int, int, int) = _alpha_iobase_query;

static long
_alpha_iobase(unsigned flags, int hose, int bus, int devfn)
{
#ifdef __NR_pciconfig_iobase
  if (bus < 0) {
    bus = hose;
    flags |= IOBASE_FROM_HOSE;
  }

  return syscall(__NR_pciconfig_iobase, flags, bus, devfn);
#else
  return -ENOSYS
#endif
}

static long
_alpha_iobase_legacy(unsigned flags, int hose, int bus, int devfn)
{
  if (hose > 0) return -ENODEV;
  if (flags & IOBASE_DENSE_MEM) return _bus_base();
  if (flags & IOBASE_SPARSE_MEM) return _bus_base_sparse();
  return 0;
}

static long 
_alpha_iobase_query(unsigned flags, int hose, int bus, int devfn)
{
  /*
   * Only use iobase if the syscall is supported *and* it's
   * a dense io system
   */
  if (_alpha_iobase(IOBASE_DENSE_IO, 0, 0, 0) > 0) {
    /*
     * The syscall worked and it's a dense io system - take over the
     * io subsystem
     */
    _iobase = _alpha_iobase;

    /* 
     * Only take over the inx/outx functions if this is a dense I/O
     * system *and* addressing domains are being used. The dense I/O
     * routines expect I/O to be mapped (as done in xf86MapLegacyIO)
     */
    _alpha_outb = _dense_outb;
    _alpha_outw = _dense_outw;
    _alpha_outl = _dense_outl;
    _alpha_inb = _dense_inb;
    _alpha_inw = _dense_inw;
    _alpha_inl = _dense_inl;
  } else _iobase = _alpha_iobase_legacy;

  return _iobase(flags, hose, bus, devfn);
}

@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a181 1
#ifndef INCLUDE_XF86_NO_DOMAIN
a192 1
#endif /* !INCLUDE_XF86_NO_DOMAIN */
@


1.1
log
@Initial revision
@
text
@d115 2
a116 2
#include <linux/unistd.h>
#include <asm/pci.h>
d186 1
a186 1
     * routines expect I/O to be mapped (as done in xf86MapDomainIO)
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d115 2
a116 2
#include "lnx.h"
#include <unistd.h>
@

