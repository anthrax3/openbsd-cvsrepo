head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.09.16.19.10.24;	author matthieu;	state dead;
branches;
next	1.7;
commitid	Te1daavkBLskZ8gc;

1.7
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	cVXoV5PxI8YrEaVA;

1.6
date	2013.06.07.17.28.53;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.27;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.25;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.18.25;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.18.25;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.58.22;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright 1990,91 by Thomas Roell, Dinkelscherben, Germany.
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Thomas Roell not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Thomas Roell makes no representations
 * about the suitability of this software for any purpose.  It is provided
 * "as is" without express or implied warranty.
 *
 * THOMAS ROELL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL THOMAS ROELL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 *
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/X.h>
#include <X11/Xproto.h>
#include "windowstr.h"
#include "compiler.h"
#include "mipointer.h"
#include "micmap.h"

#include "xf86.h"
#include "vgaHW.h"

#include <X11/extensions/xf86dgaproto.h>
#include "dgaproc.h"

#define NOMAPYET        (ColormapPtr) 0

int
vgaListInstalledColormaps(pScreen, pmaps)
ScreenPtr pScreen;
Colormap *pmaps;
{
    /* By the time we are processing requests, we can guarantee that there
     * is always a colormap installed */

    *pmaps = GetInstalledmiColormap(pScreen)->mid;
    return 1;
}

int
vgaGetInstalledColormaps(pScreen, pmaps)
ScreenPtr pScreen;
ColormapPtr *pmaps;
{
    /* By the time we are processing requests, we can guarantee that there
     * is always a colormap installed */

    *pmaps = GetInstalledmiColormap(pScreen);
    return 1;
}

int
vgaCheckColorMap(ColormapPtr pmap)
{
    return (pmap != GetInstalledmiColormap(pmap->pScreen));
}

void
vgaStoreColors(pmap, ndef, pdefs)
ColormapPtr pmap;
int ndef;
xColorItem *pdefs;
{
    int i;
    unsigned char *cmap, *tmp = NULL;
    xColorItem directDefs[256];
    Bool new_overscan = FALSE;
    Bool writeColormap;
    int scrnIndex = pmap->pScreen->myNum;
    ScrnInfoPtr scrninfp = xf86ScreenToScrn(pmap->pScreen);
    vgaHWPtr hwp = VGAHWPTR(scrninfp);

    unsigned char overscan = hwp->ModeReg.Attribute[OVERSCAN];
    unsigned char tmp_overscan = 0;

    if (vgaCheckColorMap(pmap))
        return;

    if ((pmap->pVisual->class | DynamicClass) == DirectColor) {
        ndef = miExpandDirectColors(pmap, ndef, pdefs, directDefs);
        pdefs = directDefs;
    }

    writeColormap = scrninfp->vtSema;
    if (DGAScreenAvailable(pmap->pScreen)) {
        writeColormap = writeColormap ||
            (DGAGetDirectMode(scrnIndex) &&
             !(DGAGetFlags(scrnIndex) & XF86DGADirectColormap)) ||
            (DGAGetFlags(scrnIndex) & XF86DGAHasColormap);
    }

    if (writeColormap)
        hwp->enablePalette(hwp);

    for (i = 0; i < ndef; i++) {
        if (pdefs[i].pixel == overscan) {
            new_overscan = TRUE;
        }
        cmap = &(hwp->ModeReg.DAC[pdefs[i].pixel * 3]);
        if (scrninfp->rgbBits == 8) {
            cmap[0] = pdefs[i].red >> 8;
            cmap[1] = pdefs[i].green >> 8;
            cmap[2] = pdefs[i].blue >> 8;
        }
        else {
            cmap[0] = pdefs[i].red >> 10;
            cmap[1] = pdefs[i].green >> 10;
            cmap[2] = pdefs[i].blue >> 10;
        }
#if 0
        if (clgd6225Lcd) {
            /* The LCD doesn't like white */
            if (cmap[0] == 63)
                cmap[0] = 62;
            if (cmap[1] == 63)
                cmap[1] = 62;
            if (cmap[2] == 63)
                cmap[2] = 62;
        }
#endif

        if (writeColormap) {
            if (hwp->ShowOverscan && i == 255)
                continue;
            hwp->writeDacWriteAddr(hwp, pdefs[i].pixel);
            DACDelay(hwp);
            hwp->writeDacData(hwp, cmap[0]);
            DACDelay(hwp);
            hwp->writeDacData(hwp, cmap[1]);
            DACDelay(hwp);
            hwp->writeDacData(hwp, cmap[2]);
            DACDelay(hwp);
        }
    }
    if (new_overscan && !hwp->ShowOverscan) {
        new_overscan = FALSE;
        for (i = 0; i < ndef; i++) {
            if (pdefs[i].pixel == overscan) {
                if ((pdefs[i].red != 0) ||
                    (pdefs[i].green != 0) || (pdefs[i].blue != 0)) {
                    new_overscan = TRUE;
                    tmp_overscan = overscan;
                    tmp = &(hwp->ModeReg.DAC[pdefs[i].pixel * 3]);
                }
                break;
            }
        }
        if (new_overscan) {
            /*
             * Find a black pixel, or the nearest match.
             */
            for (i = 255; i >= 0; i--) {
                cmap = &(hwp->ModeReg.DAC[i * 3]);
                if ((cmap[0] == 0) && (cmap[1] == 0) && (cmap[2] == 0)) {
                    overscan = i;
                    break;
                }
                else {
                    if ((cmap[0] < tmp[0]) &&
                        (cmap[1] < tmp[1]) && (cmap[2] < tmp[2])) {
                        tmp = cmap;
                        tmp_overscan = i;
                    }
                }
            }
            if (i < 0) {
                overscan = tmp_overscan;
            }
            hwp->ModeReg.Attribute[OVERSCAN] = overscan;
            if (writeColormap) {
                hwp->writeAttr(hwp, OVERSCAN, overscan);
            }
        }
    }

    if (writeColormap)
        hwp->disablePalette(hwp);
}

void
vgaInstallColormap(pmap)
ColormapPtr pmap;
{
    ColormapPtr oldmap = GetInstalledmiColormap(pmap->pScreen);
    int entries;
    Pixel *ppix;
    xrgb *prgb;
    xColorItem *defs;
    int i;

    if (pmap == oldmap)
        return;

    if ((pmap->pVisual->class | DynamicClass) == DirectColor)
        entries = (pmap->pVisual->redMask |
                   pmap->pVisual->greenMask | pmap->pVisual->blueMask) + 1;
    else
        entries = pmap->pVisual->ColormapEntries;

    ppix = (Pixel *) malloc(entries * sizeof(Pixel));
    prgb = (xrgb *) malloc(entries * sizeof(xrgb));
    defs = (xColorItem *) malloc(entries * sizeof(xColorItem));

    if (oldmap != NOMAPYET)
        WalkTree(pmap->pScreen, TellLostMap, &oldmap->mid);

    SetInstalledmiColormap(pmap->pScreen, pmap);

    for (i = 0; i < entries; i++)
        ppix[i] = i;

    QueryColors(pmap, entries, ppix, prgb, serverClient);

    for (i = 0; i < entries; i++) {     /* convert xrgbs to xColorItems */
        defs[i].pixel = ppix[i];
        defs[i].red = prgb[i].red;
        defs[i].green = prgb[i].green;
        defs[i].blue = prgb[i].blue;
        defs[i].flags = DoRed | DoGreen | DoBlue;
    }
    pmap->pScreen->StoreColors(pmap, entries, defs);

    WalkTree(pmap->pScreen, TellGainedMap, &pmap->mid);

    free(ppix);
    free(prgb);
    free(defs);
}

void
vgaUninstallColormap(pmap)
ColormapPtr pmap;
{

    ColormapPtr defColormap;

    if (pmap != GetInstalledmiColormap(pmap->pScreen))
        return;

    dixLookupResourceByType((void **) &defColormap,
                            pmap->pScreen->defColormap, RT_COLORMAP,
                            serverClient, DixInstallAccess);

    if (defColormap == GetInstalledmiColormap(pmap->pScreen))
        return;

    (*pmap->pScreen->InstallColormap) (defColormap);
}

void
vgaHandleColormaps(ScreenPtr pScreen, ScrnInfoPtr scrnp)
{
    if (scrnp->bitsPerPixel > 1) {
        if (scrnp->bitsPerPixel <= 8) { /* For 8bpp SVGA and VGA16 */
            pScreen->InstallColormap = vgaInstallColormap;
            pScreen->UninstallColormap = vgaUninstallColormap;
            pScreen->ListInstalledColormaps = vgaListInstalledColormaps;
            pScreen->StoreColors = vgaStoreColors;
        }
    }
}
@


1.7
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d255 1
a255 1
    dixLookupResourceByType((pointer *) &defColormap,
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a83 3

    /* This can get called before the ScrnInfoRec is installed so we
       can't rely on getting it with XF86SCRNINFO() */
d85 1
a85 1
    ScrnInfoPtr scrninfp = xf86Screens[scrnIndex];
d100 1
a100 1
    if (DGAAvailable(scrnIndex)) {
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a23 1

a40 1

d45 2
a46 2
     ScreenPtr	pScreen;
     Colormap	*pmaps;
d48 5
a52 5
  /* By the time we are processing requests, we can guarantee that there
   * is always a colormap installed */
  
  *pmaps = GetInstalledmiColormap(pScreen)->mid;
  return 1;
d57 2
a58 2
     ScreenPtr		pScreen;
     ColormapPtr	*pmaps;
d60 5
a64 5
  /* By the time we are processing requests, we can guarantee that there
   * is always a colormap installed */
  
  *pmaps = GetInstalledmiColormap(pScreen);
  return 1;
d67 2
a68 1
int vgaCheckColorMap(ColormapPtr pmap)
d70 1
a70 1
  return (pmap != GetInstalledmiColormap(pmap->pScreen));
a72 1

d75 3
a77 3
     ColormapPtr	pmap;
     int		ndef;
     xColorItem	        *pdefs;
d79 1
a79 1
    int		i;
d81 3
a83 3
    xColorItem	directDefs[256];
    Bool          new_overscan = FALSE;
    Bool	writeColormap;
d90 1
a90 1
    
d97 2
a98 3
    if ((pmap->pVisual->class | DynamicClass) == DirectColor)
    {
        ndef = miExpandDirectColors (pmap, ndef, pdefs, directDefs);
d101 1
a101 1
    
d103 5
a107 6
    if (DGAAvailable(scrnIndex))
    {
	writeColormap = writeColormap ||
			(DGAGetDirectMode(scrnIndex) &&
			 !(DGAGetFlags(scrnIndex) & XF86DGADirectColormap)) ||
			(DGAGetFlags(scrnIndex) & XF86DGAHasColormap);
d111 1
a111 1
	hwp->enablePalette(hwp);
d113 7
a119 9
    for(i = 0; i < ndef; i++)
    {
        if (pdefs[i].pixel == overscan)
	{
	    new_overscan = TRUE;
	}
        cmap = &(hwp->ModeReg.DAC[pdefs[i].pixel*3]);
	if (scrninfp->rgbBits == 8) {
            cmap[0] = pdefs[i].red   >> 8;
d121 1
a121 1
            cmap[2] = pdefs[i].blue  >> 8;
d124 1
a124 1
            cmap[0] = pdefs[i].red   >> 10;
d126 1
a126 1
            cmap[2] = pdefs[i].blue  >> 10;
d129 9
a137 7
	if (clgd6225Lcd)
	{
		/* The LCD doesn't like white */
		if (cmap[0] == 63) cmap[0]= 62;
		if (cmap[1] == 63) cmap[1]= 62;
		if (cmap[2] == 63) cmap[2]= 62;
	}
d140 12
a151 13
        if (writeColormap)
	{
	    if (hwp->ShowOverscan && i == 255)
		continue;
	    hwp->writeDacWriteAddr(hwp, pdefs[i].pixel);
	    DACDelay(hwp);
	    hwp->writeDacData(hwp, cmap[0]);
	    DACDelay(hwp);
	    hwp->writeDacData(hwp, cmap[1]);
	    DACDelay(hwp);
	    hwp->writeDacData(hwp, cmap[2]);
	    DACDelay(hwp);
	}
d153 12
a164 17
    if (new_overscan && !hwp->ShowOverscan)
    {
	new_overscan = FALSE;
        for(i = 0; i < ndef; i++)
        {
            if (pdefs[i].pixel == overscan)
	    {
	        if ((pdefs[i].red != 0) || 
	            (pdefs[i].green != 0) || 
	            (pdefs[i].blue != 0))
	        {
	            new_overscan = TRUE;
		    tmp_overscan = overscan;
        	    tmp = &(hwp->ModeReg.DAC[pdefs[i].pixel*3]);
	        }
	        break;
	    }
d166 1
a166 2
        if (new_overscan)
        {
d170 21
a190 27
            for (i=255; i >= 0; i--)
	    {
                cmap = &(hwp->ModeReg.DAC[i*3]);
	        if ((cmap[0] == 0) && (cmap[1] == 0) && (cmap[2] == 0))
	        {
	            overscan = i;
	            break;
	        }
	        else
	        {
	            if ((cmap[0] < tmp[0]) && 
		        (cmap[1] < tmp[1]) && (cmap[2] < tmp[2]))
	            {
		        tmp = cmap;
		        tmp_overscan = i;
	            }
	        }
	    }
	    if (i < 0)
	    {
	        overscan = tmp_overscan;
	    }
	    hwp->ModeReg.Attribute[OVERSCAN] = overscan;
            if (writeColormap)
	    {
	      hwp->writeAttr(hwp, OVERSCAN, overscan);
	    }
d195 1
a195 1
	hwp->disablePalette(hwp);
a197 1

d200 1
a200 1
     ColormapPtr	pmap;
d202 36
a237 38
  ColormapPtr oldmap = GetInstalledmiColormap(pmap->pScreen);
  int         entries;
  Pixel *     ppix;
  xrgb *      prgb;
  xColorItem *defs;
  int         i;


  if (pmap == oldmap)
    return;

  if ((pmap->pVisual->class | DynamicClass) == DirectColor)
    entries = (pmap->pVisual->redMask |
	       pmap->pVisual->greenMask |
	       pmap->pVisual->blueMask) + 1;
  else
    entries = pmap->pVisual->ColormapEntries;

  ppix = (Pixel *)malloc( entries * sizeof(Pixel));
  prgb = (xrgb *)malloc( entries * sizeof(xrgb));
  defs = (xColorItem *)malloc(entries * sizeof(xColorItem));

  if ( oldmap != NOMAPYET)
    WalkTree( pmap->pScreen, TellLostMap, &oldmap->mid);

  SetInstalledmiColormap(pmap->pScreen, pmap);

  for ( i=0; i<entries; i++) ppix[i] = i;

  QueryColors(pmap, entries, ppix, prgb, serverClient);

  for ( i=0; i<entries; i++) /* convert xrgbs to xColorItems */
    {
      defs[i].pixel = ppix[i];
      defs[i].red = prgb[i].red;
      defs[i].green = prgb[i].green;
      defs[i].blue = prgb[i].blue;
      defs[i].flags =  DoRed|DoGreen|DoBlue;
d239 3
a241 1
  pmap->pScreen->StoreColors(pmap, entries, defs);
d243 3
a245 5
  WalkTree(pmap->pScreen, TellGainedMap, &pmap->mid);
  
  free(ppix);
  free(prgb);
  free(defs);
a247 1

d250 1
a250 1
     ColormapPtr pmap;
d253 1
a253 4
  ColormapPtr defColormap;
  
  if ( pmap != GetInstalledmiColormap(pmap->pScreen))
    return;
d255 6
a260 2
  dixLookupResourceByType((pointer *)&defColormap, pmap->pScreen->defColormap,
			  RT_COLORMAP, serverClient, DixInstallAccess);
d262 2
a263 2
  if (defColormap == GetInstalledmiColormap(pmap->pScreen))
    return;
d265 1
a265 1
  (*pmap->pScreen->InstallColormap) (defColormap);
a267 1

d271 7
a277 6
  if (scrnp->bitsPerPixel > 1) {
     if (scrnp->bitsPerPixel <= 8) { /* For 8bpp SVGA and VGA16 */
        pScreen->InstallColormap = vgaInstallColormap;
        pScreen->UninstallColormap = vgaUninstallColormap;
        pScreen->ListInstalledColormaps = vgaListInstalledColormaps;
        pScreen->StoreColors = vgaStoreColors;
a278 1
  }
a279 1

@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d53 2
a54 2
  *pmaps = miInstalledMaps[pScreen->myNum]->mid;
  return(1);
d65 2
a66 2
  *pmaps = miInstalledMaps[pScreen->myNum];
  return(1);
d71 1
a71 1
  return (pmap != miInstalledMaps[pmap->pScreen->myNum]);
d220 1
a220 1
  ColormapPtr oldmap = miInstalledMaps[pmap->pScreen->myNum];
d238 3
a240 3
  ppix = (Pixel *)xalloc( entries * sizeof(Pixel));
  prgb = (xrgb *)xalloc( entries * sizeof(xrgb));
  defs = (xColorItem *)xalloc(entries * sizeof(xColorItem));
d245 1
a245 1
  miInstalledMaps[pmap->pScreen->myNum] = pmap;
d249 1
a249 1
  QueryColors( pmap, entries, ppix, prgb);
d263 3
a265 3
  xfree(ppix);
  xfree(prgb);
  xfree(defs);
d276 1
a276 1
  if ( pmap != miInstalledMaps[pmap->pScreen->myNum] )
d282 1
a282 1
  if (defColormap == miInstalledMaps[pmap->pScreen->myNum])
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d39 1
a39 2
#define _XF86DGA_SERVER_
#include <X11/extensions/xf86dgastr.h>
d279 2
a280 2
  defColormap = (ColormapPtr) LookupIDByType( pmap->pScreen->defColormap,
					      RT_COLORMAP);
@


1.1
log
@Initial revision
@
text
@a22 1
/* $XConsortium: vgaCmap.c /main/15 1996/10/28 05:13:44 kaleb $ */
d239 3
a241 3
  ppix = (Pixel *)ALLOCATE_LOCAL( entries * sizeof(Pixel));
  prgb = (xrgb *)ALLOCATE_LOCAL( entries * sizeof(xrgb));
  defs = (xColorItem *)ALLOCATE_LOCAL(entries * sizeof(xColorItem));
d264 3
a266 3
  DEALLOCATE_LOCAL(ppix);
  DEALLOCATE_LOCAL(prgb);
  DEALLOCATE_LOCAL(defs);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d23 1
@

