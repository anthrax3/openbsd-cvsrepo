head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	Te1daavkBLskZ8gc;

1.6
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	cVXoV5PxI8YrEaVA;

1.5
date	2013.06.07.17.28.52;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.20.54;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.20.54;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.58.13;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 *
 * Copyright (c) 1997  Metro Link Incorporated
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Metro Link shall not be
 * used in advertising or otherwise to promote the sale, use or other dealings
 * in this Software without prior written authorization from Metro Link.
 *
 */
/*
 * Copyright (c) 1997-2003 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "os.h"
#include "xf86Parser.h"
#include "xf86tokens.h"
#include "Configint.h"


static
xf86ConfigSymTabRec InputTab[] = {
    {ENDSECTION, "endsection"},
    {IDENTIFIER, "identifier"},
    {OPTION, "option"},
    {DRIVER, "driver"},
    {-1, ""},
};

#define CLEANUP xf86freeInputList

XF86ConfInputPtr
xf86parseInputSection(void)
{
    int has_ident = FALSE;
    int token;

    parsePrologue(XF86ConfInputPtr, XF86ConfInputRec)

        while ((token = xf86getToken(InputTab)) != ENDSECTION) {
        switch (token) {
        case COMMENT:
            ptr->inp_comment = xf86addComment(ptr->inp_comment, xf86_lex_val.str);
            break;
        case IDENTIFIER:
            if (xf86getSubToken(&(ptr->inp_comment)) != STRING)
                Error(QUOTE_MSG, "Identifier");
            if (has_ident == TRUE)
                Error(MULTIPLE_MSG, "Identifier");
            ptr->inp_identifier = xf86_lex_val.str;
            has_ident = TRUE;
            break;
        case DRIVER:
            if (xf86getSubToken(&(ptr->inp_comment)) != STRING)
                Error(QUOTE_MSG, "Driver");
            if (strcmp(xf86_lex_val.str, "keyboard") == 0) {
                ptr->inp_driver = strdup("kbd");
                free(xf86_lex_val.str);
            }
            else
                ptr->inp_driver = xf86_lex_val.str;
            break;
        case OPTION:
            ptr->inp_option_lst = xf86parseOption(ptr->inp_option_lst);
            break;
        case EOF_TOKEN:
            Error(UNEXPECTED_EOF_MSG);
            break;
        default:
            Error(INVALID_KEYWORD_MSG, xf86tokenString());
            break;
        }
    }

    if (!has_ident)
        Error(NO_IDENT_MSG);

#ifdef DEBUG
    printf("InputDevice section parsed\n");
#endif

    return ptr;
}

#undef CLEANUP

void
xf86printInputSection(FILE * cf, XF86ConfInputPtr ptr)
{
    while (ptr) {
        fprintf(cf, "Section \"InputDevice\"\n");
        if (ptr->inp_comment)
            fprintf(cf, "%s", ptr->inp_comment);
        if (ptr->inp_identifier)
            fprintf(cf, "\tIdentifier  \"%s\"\n", ptr->inp_identifier);
        if (ptr->inp_driver)
            fprintf(cf, "\tDriver      \"%s\"\n", ptr->inp_driver);
        xf86printOptionList(cf, ptr->inp_option_lst, 1);
        fprintf(cf, "EndSection\n\n");
        ptr = ptr->list.next;
    }
}

void
xf86freeInputList(XF86ConfInputPtr ptr)
{
    XF86ConfInputPtr prev;

    while (ptr) {
        TestFree(ptr->inp_identifier);
        TestFree(ptr->inp_driver);
        TestFree(ptr->inp_comment);
        xf86optionListFree(ptr->inp_option_lst);

        prev = ptr;
        ptr = ptr->list.next;
        free(prev);
    }
}

int
xf86validateInput(XF86ConfigPtr p)
{
    XF86ConfInputPtr input = p->conf_input_lst;

    while (input) {
        if (!input->inp_driver) {
            xf86validationError(UNDEFINED_INPUTDRIVER_MSG,
                                input->inp_identifier);
            return FALSE;
        }
        input = input->list.next;
    }
    return TRUE;
}

XF86ConfInputPtr
xf86findInput(const char *ident, XF86ConfInputPtr p)
{
    while (p) {
        if (xf86nameCompare(ident, p->inp_identifier) == 0)
            return p;

        p = p->list.next;
    }
    return NULL;
}

XF86ConfInputPtr
xf86findInputByDriver(const char *driver, XF86ConfInputPtr p)
{
    while (p) {
        if (xf86nameCompare(driver, p->inp_driver) == 0)
            return p;

        p = p->list.next;
    }
    return NULL;
}
@


1.6
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d1 2
a2 2
/* 
 * 
d4 1
a4 1
 * 
d6 1
a6 1
 * copy of this software and associated documentation files (the "Software"), 
d11 1
a11 1
 * 
d14 1
a14 1
 * 
d22 1
a22 1
 * 
d26 1
a26 1
 * 
@


1.5
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a63 1
extern LexRec val;
d87 1
a87 1
            ptr->inp_comment = xf86addComment(ptr->inp_comment, val.str);
d94 1
a94 1
            ptr->inp_identifier = val.str;
d100 1
a100 1
            if (strcmp(val.str, "keyboard") == 0) {
d102 1
a102 1
                free(val.str);
d105 1
a105 1
                ptr->inp_driver = val.str;
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a54 2
/* View/edit this file with tab stops set to 4 */

@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a54 1

d69 6
a74 7
xf86ConfigSymTabRec InputTab[] =
{
	{ENDSECTION, "endsection"},
	{IDENTIFIER, "identifier"},
	{OPTION, "option"},
	{DRIVER, "driver"},
	{-1, ""},
d80 1
a80 1
xf86parseInputSection (void)
d82 4
a85 40
	int has_ident = FALSE;
	int token;
	parsePrologue (XF86ConfInputPtr, XF86ConfInputRec)

	while ((token = xf86getToken (InputTab)) != ENDSECTION)
	{
		switch (token)
		{
		case COMMENT:
			ptr->inp_comment = xf86addComment(ptr->inp_comment, val.str);
			break;
		case IDENTIFIER:
			if (xf86getSubToken (&(ptr->inp_comment)) != STRING)
				Error (QUOTE_MSG, "Identifier");
			if (has_ident == TRUE)
				Error (MULTIPLE_MSG, "Identifier");
			ptr->inp_identifier = val.str;
			has_ident = TRUE;
			break;
		case DRIVER:
			if (xf86getSubToken (&(ptr->inp_comment)) != STRING)
				Error (QUOTE_MSG, "Driver");
                        if (strcmp(val.str, "keyboard") == 0) {
                            ptr->inp_driver = strdup("kbd");
                            free(val.str);
                        }
                        else
			    ptr->inp_driver = val.str;
			break;
		case OPTION:
			ptr->inp_option_lst = xf86parseOption(ptr->inp_option_lst);
			break;
		case EOF_TOKEN:
			Error (UNEXPECTED_EOF_MSG, NULL);
			break;
		default:
			Error (INVALID_KEYWORD_MSG, xf86tokenString ());
			break;
		}
	}
d87 37
a123 2
	if (!has_ident)
		Error (NO_IDENT_MSG, NULL);
d126 1
a126 1
	printf ("InputDevice section parsed\n");
d129 1
a129 1
	return ptr;
d135 1
a135 1
xf86printInputSection (FILE * cf, XF86ConfInputPtr ptr)
d137 12
a148 13
	while (ptr)
	{
		fprintf (cf, "Section \"InputDevice\"\n");
		if (ptr->inp_comment)
			fprintf (cf, "%s", ptr->inp_comment);
		if (ptr->inp_identifier)
			fprintf (cf, "\tIdentifier  \"%s\"\n", ptr->inp_identifier);
		if (ptr->inp_driver)
			fprintf (cf, "\tDriver      \"%s\"\n", ptr->inp_driver);
		xf86printOptionList(cf, ptr->inp_option_lst, 1);
		fprintf (cf, "EndSection\n\n");
		ptr = ptr->list.next;
	}
d152 1
a152 1
xf86freeInputList (XF86ConfInputPtr ptr)
d154 1
a154 1
	XF86ConfInputPtr prev;
d156 10
a165 11
	while (ptr)
	{
		TestFree (ptr->inp_identifier);
		TestFree (ptr->inp_driver);
		TestFree (ptr->inp_comment);
		xf86optionListFree (ptr->inp_option_lst);

		prev = ptr;
		ptr = ptr->list.next;
		free (prev);
	}
d169 1
a169 1
xf86validateInput (XF86ConfigPtr p)
d171 1
a171 1
	XF86ConfInputPtr input = p->conf_input_lst;
d173 9
a181 8
	while (input) {
		if (!input->inp_driver) {
			xf86validationError (UNDEFINED_INPUTDRIVER_MSG, input->inp_identifier);
			return FALSE;
		}
		input = input->list.next;
	}
	return TRUE;
d185 1
a185 1
xf86findInput (const char *ident, XF86ConfInputPtr p)
d187 7
a193 8
	while (p)
	{
		if (xf86nameCompare (ident, p->inp_identifier) == 0)
			return p;

		p = p->list.next;
	}
	return NULL;
d197 1
a197 1
xf86findInputByDriver (const char *driver, XF86ConfInputPtr p)
d199 7
a205 8
	while (p)
	{
		if (xf86nameCompare (driver, p->inp_driver) == 0)
			return p;

		p = p->list.next;
	}
	return NULL;
a206 1

@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d62 1
d106 4
a109 2
                        if (strcmp(val.str, "keyboard") == 0)
                            ptr->inp_driver = "kbd";
d181 1
a181 1
			return (FALSE);
d185 1
a185 1
	return (TRUE);
d194 1
a194 1
			return (p);
d198 1
a198 1
	return (NULL);
d207 1
a207 1
			return (p);
d211 1
a211 1
	return (NULL);
@


1.1
log
@Initial revision
@
text
@d105 4
a108 1
			ptr->inp_driver = val.str;
d166 1
a166 1
		xf86conffree (prev);
a173 7

#if 0 /* Enable this later */
	if (!input) {
		xf86validationError ("At least one InputDevice section is required.");
		return (FALSE);
	}
#endif
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d105 1
a105 4
                        if (strcmp(val.str, "keyboard") == 0)
                            ptr->inp_driver = "kbd";
                        else
			    ptr->inp_driver = val.str;
@

