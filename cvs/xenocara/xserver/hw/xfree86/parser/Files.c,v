head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	Te1daavkBLskZ8gc;

1.7
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	cVXoV5PxI8YrEaVA;

1.6
date	2013.06.07.17.28.52;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.27;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.20.56;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.20.56;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.58.12;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright (c) 1997  Metro Link Incorporated
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Metro Link shall not be
 * used in advertising or otherwise to promote the sale, use or other dealings
 * in this Software without prior written authorization from Metro Link.
 *
 */
/*
 * Copyright (c) 1997-2003 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/Xos.h>
#include "xf86Parser.h"
#include "xf86tokens.h"
#include "Configint.h"


static xf86ConfigSymTabRec FilesTab[] = {
    {ENDSECTION, "endsection"},
    {FONTPATH, "fontpath"},
    {MODULEPATH, "modulepath"},
    {LOGFILEPATH, "logfile"},
    {XKBDIR, "xkbdir"},
    /* Obsolete keywords that aren't used but shouldn't cause errors: */
    {OBSOLETE_TOKEN, "rgbpath"},
    {OBSOLETE_TOKEN, "inputdevices"},
    {-1, ""},
};

#define CLEANUP xf86freeFiles

XF86ConfFilesPtr
xf86parseFilesSection(void)
{
    int i, j;
    int k, l;
    char *str;
    int token;

    parsePrologue(XF86ConfFilesPtr, XF86ConfFilesRec)

        while ((token = xf86getToken(FilesTab)) != ENDSECTION) {
        switch (token) {
        case COMMENT:
            ptr->file_comment = xf86addComment(ptr->file_comment, xf86_lex_val.str);
            break;
        case FONTPATH:
            if (xf86getSubToken(&(ptr->file_comment)) != STRING)
                Error(QUOTE_MSG, "FontPath");
            j = FALSE;
            str = xf86_lex_val.str;
            if (ptr->file_fontpath == NULL) {
                ptr->file_fontpath = calloc(1, 1);
                i = strlen(str) + 1;
            }
            else {
                i = strlen(ptr->file_fontpath) + strlen(str) + 1;
                if (ptr->file_fontpath[strlen(ptr->file_fontpath) - 1] != ',') {
                    i++;
                    j = TRUE;
                }
            }
            ptr->file_fontpath = realloc(ptr->file_fontpath, i);
            if (j)
                strcat(ptr->file_fontpath, ",");

            strcat(ptr->file_fontpath, str);
            free(xf86_lex_val.str);
            break;
        case MODULEPATH:
            if (xf86getSubToken(&(ptr->file_comment)) != STRING)
                Error(QUOTE_MSG, "ModulePath");
            l = FALSE;
            str = xf86_lex_val.str;
            if (ptr->file_modulepath == NULL) {
                ptr->file_modulepath = malloc(1);
                ptr->file_modulepath[0] = '\0';
                k = strlen(str) + 1;
            }
            else {
                k = strlen(ptr->file_modulepath) + strlen(str) + 1;
                if (ptr->file_modulepath[strlen(ptr->file_modulepath) - 1] !=
                    ',') {
                    k++;
                    l = TRUE;
                }
            }
            ptr->file_modulepath = realloc(ptr->file_modulepath, k);
            if (l)
                strcat(ptr->file_modulepath, ",");

            strcat(ptr->file_modulepath, str);
            free(xf86_lex_val.str);
            break;
        case LOGFILEPATH:
            if (xf86getSubToken(&(ptr->file_comment)) != STRING)
                Error(QUOTE_MSG, "LogFile");
            ptr->file_logfile = xf86_lex_val.str;
            break;
        case XKBDIR:
            if (xf86getSubToken(&(ptr->file_xkbdir)) != STRING)
                Error(QUOTE_MSG, "XkbDir");
            ptr->file_xkbdir = xf86_lex_val.str;
            break;
        case EOF_TOKEN:
            Error(UNEXPECTED_EOF_MSG);
            break;
        case OBSOLETE_TOKEN:
            xf86parseError(OBSOLETE_MSG, xf86tokenString());
            xf86getSubToken(&(ptr->file_comment));
            break;
        default:
            Error(INVALID_KEYWORD_MSG, xf86tokenString());
            break;
        }
    }

#ifdef DEBUG
    printf("File section parsed\n");
#endif

    return ptr;
}

#undef CLEANUP

void
xf86printFileSection(FILE * cf, XF86ConfFilesPtr ptr)
{
    char *p, *s;

    if (ptr == NULL)
        return;

    if (ptr->file_comment)
        fprintf(cf, "%s", ptr->file_comment);
    if (ptr->file_logfile)
        fprintf(cf, "\tLogFile      \"%s\"\n", ptr->file_logfile);
    if (ptr->file_modulepath) {
        s = ptr->file_modulepath;
        p = index(s, ',');
        while (p) {
            *p = '\000';
            fprintf(cf, "\tModulePath   \"%s\"\n", s);
            *p = ',';
            s = p;
            s++;
            p = index(s, ',');
        }
        fprintf(cf, "\tModulePath   \"%s\"\n", s);
    }
    if (ptr->file_fontpath) {
        s = ptr->file_fontpath;
        p = index(s, ',');
        while (p) {
            *p = '\000';
            fprintf(cf, "\tFontPath     \"%s\"\n", s);
            *p = ',';
            s = p;
            s++;
            p = index(s, ',');
        }
        fprintf(cf, "\tFontPath     \"%s\"\n", s);
    }
    if (ptr->file_xkbdir)
        fprintf(cf, "\tXkbDir		\"%s\"\n", ptr->file_xkbdir);
}

void
xf86freeFiles(XF86ConfFilesPtr p)
{
    if (p == NULL)
        return;

    TestFree(p->file_logfile);
    TestFree(p->file_modulepath);
    TestFree(p->file_fontpath);
    TestFree(p->file_comment);
    TestFree(p->file_xkbdir);

    free(p);
}
@


1.7
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d1 1
a1 1
/* 
d3 1
a3 1
 * 
d5 1
a5 1
 * copy of this software and associated documentation files (the "Software"), 
d10 1
a10 1
 * 
d13 1
a13 1
 * 
d21 1
a21 1
 * 
d25 1
a25 1
 * 
@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a62 1
extern LexRec val;
d91 1
a91 1
            ptr->file_comment = xf86addComment(ptr->file_comment, val.str);
d97 1
a97 1
            str = val.str;
d99 1
a99 2
                ptr->file_fontpath = malloc(1);
                ptr->file_fontpath[0] = '\0';
d114 1
a114 1
            free(val.str);
d120 1
a120 1
            str = val.str;
d139 1
a139 1
            free(val.str);
d144 1
a144 1
            ptr->file_logfile = val.str;
d149 1
a149 1
            ptr->file_xkbdir = val.str;
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a53 2
/* View/edit this file with tab stops set to 4 */

@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a53 1

d67 10
a76 11
static xf86ConfigSymTabRec FilesTab[] =
{
	{ENDSECTION, "endsection"},
	{FONTPATH, "fontpath"},
	{MODULEPATH, "modulepath"},
	{LOGFILEPATH, "logfile"},
	{XKBDIR, "xkbdir"},
	/* Obsolete keywords that aren't used but shouldn't cause errors: */
	{OBSOLETE_TOKEN, "rgbpath"},
	{OBSOLETE_TOKEN, "inputdevices"},
	{-1, ""},
d82 1
a82 1
xf86parseFilesSection (void)
d84 83
a166 90
	int i, j;
	int k, l;
	char *str;
	int token;
	parsePrologue (XF86ConfFilesPtr, XF86ConfFilesRec)

	while ((token = xf86getToken (FilesTab)) != ENDSECTION)
	{
		switch (token)
		{
		case COMMENT:
			ptr->file_comment = xf86addComment(ptr->file_comment, val.str);
			break;
		case FONTPATH:
			if (xf86getSubToken (&(ptr->file_comment)) != STRING)
				Error (QUOTE_MSG, "FontPath");
			j = FALSE;
			str = val.str;
			if (ptr->file_fontpath == NULL)
			{
				ptr->file_fontpath = malloc (1);
				ptr->file_fontpath[0] = '\0';
				i = strlen (str) + 1;
			}
			else
			{
				i = strlen (ptr->file_fontpath) + strlen (str) + 1;
				if (ptr->file_fontpath[strlen (ptr->file_fontpath) - 1] != ',')
				{
					i++;
					j = TRUE;
				}
			}
			ptr->file_fontpath =
				realloc (ptr->file_fontpath, i);
			if (j)
				strcat (ptr->file_fontpath, ",");

			strcat (ptr->file_fontpath, str);
			free (val.str);
			break;
		case MODULEPATH:
			if (xf86getSubToken (&(ptr->file_comment)) != STRING)
				Error (QUOTE_MSG, "ModulePath");
			l = FALSE;
			str = val.str;
			if (ptr->file_modulepath == NULL)
			{
				ptr->file_modulepath = malloc (1);
				ptr->file_modulepath[0] = '\0';
				k = strlen (str) + 1;
			}
			else
			{
				k = strlen (ptr->file_modulepath) + strlen (str) + 1;
				if (ptr->file_modulepath[strlen (ptr->file_modulepath) - 1] != ',')
				{
					k++;
					l = TRUE;
				}
			}
			ptr->file_modulepath = realloc (ptr->file_modulepath, k);
			if (l)
				strcat (ptr->file_modulepath, ",");

			strcat (ptr->file_modulepath, str);
			free (val.str);
			break;
		case LOGFILEPATH:
			if (xf86getSubToken (&(ptr->file_comment)) != STRING)
				Error (QUOTE_MSG, "LogFile");
			ptr->file_logfile = val.str;
			break;
		case XKBDIR:
			if (xf86getSubToken (&(ptr->file_xkbdir)) != STRING)
				Error (QUOTE_MSG, "XkbDir");
			ptr->file_xkbdir = val.str;
			break;
		case EOF_TOKEN:
			Error (UNEXPECTED_EOF_MSG, NULL);
			break;
		case OBSOLETE_TOKEN:
			xf86parseError (OBSOLETE_MSG, xf86tokenString ());
			xf86getSubToken (&(ptr->file_comment));
			break;
		default:
			Error (INVALID_KEYWORD_MSG, xf86tokenString ());
			break;
		}
	}
d169 1
a169 1
	printf ("File section parsed\n");
d172 1
a172 1
	return ptr;
d178 1
a178 1
xf86printFileSection (FILE * cf, XF86ConfFilesPtr ptr)
d180 1
a180 1
	char *p, *s;
d182 2
a183 2
	if (ptr == NULL)
		return;
d185 32
a216 36
	if (ptr->file_comment)
		fprintf (cf, "%s", ptr->file_comment);
	if (ptr->file_logfile)
		fprintf (cf, "\tLogFile      \"%s\"\n", ptr->file_logfile);
	if (ptr->file_modulepath)
	{
		s = ptr->file_modulepath;
		p = index (s, ',');
		while (p)
		{
			*p = '\000';
			fprintf (cf, "\tModulePath   \"%s\"\n", s);
			*p = ',';
			s = p;
			s++;
			p = index (s, ',');
		}
		fprintf (cf, "\tModulePath   \"%s\"\n", s);
	}
	if (ptr->file_fontpath)
	{
		s = ptr->file_fontpath;
		p = index (s, ',');
		while (p)
		{
			*p = '\000';
			fprintf (cf, "\tFontPath     \"%s\"\n", s);
			*p = ',';
			s = p;
			s++;
			p = index (s, ',');
		}
		fprintf (cf, "\tFontPath     \"%s\"\n", s);
	}
	if (ptr->file_xkbdir)
		fprintf (cf, "\tXkbDir		\"%s\"\n", ptr->file_xkbdir);
d220 1
a220 1
xf86freeFiles (XF86ConfFilesPtr p)
d222 2
a223 2
	if (p == NULL)
		return;
d225 5
a229 5
	TestFree (p->file_logfile);
	TestFree (p->file_modulepath);
	TestFree (p->file_fontpath);
	TestFree (p->file_comment);
	TestFree (p->file_xkbdir);
d231 1
a231 1
	free (p);
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a72 1
	{INPUTDEVICES, "inputdevices"},
d77 1
d106 1
a106 1
				ptr->file_fontpath = xf86confmalloc (1);
d120 1
a120 1
				xf86confrealloc (ptr->file_fontpath, i);
d125 1
a125 1
			xf86conffree (val.str);
d134 1
a134 1
				ptr->file_modulepath = xf86confmalloc (1);
d147 1
a147 1
			ptr->file_modulepath = xf86confrealloc (ptr->file_modulepath, k);
d152 1
a152 28
			xf86conffree (val.str);
			break;
		case INPUTDEVICES:
			if (xf86getSubToken (&(ptr->file_comment)) != STRING)
				Error (QUOTE_MSG, "InputDevices");
			l = FALSE;
			str = val.str;
			if (ptr->file_inputdevs == NULL)
			{
				ptr->file_inputdevs = xf86confmalloc (1);
				ptr->file_inputdevs[0] = '\0';
				k = strlen (str) + 1;
			}
			else
			{
				k = strlen (ptr->file_inputdevs) + strlen (str) + 1;
				if (ptr->file_inputdevs[strlen (ptr->file_inputdevs) - 1] != ',')
				{
					k++;
					l = TRUE;
				}
			}
			ptr->file_inputdevs = xf86confrealloc (ptr->file_inputdevs, k);
			if (l)
				strcat (ptr->file_inputdevs, ",");

			strcat (ptr->file_inputdevs, str);
			xf86conffree (val.str);
a212 15
	if (ptr->file_inputdevs)
	{
		s = ptr->file_inputdevs;
		p = index (s, ',');
		while (p)
		{
			*p = '\000';
			fprintf (cf, "\tInputDevices   \"%s\"\n", s);
			*p = ',';
			s = p;
			s++;
			p = index (s, ',');
		}
		fprintf (cf, "\tInputDevices   \"%s\"\n", s);
	}
a239 1
	TestFree (p->file_inputdevs);
d244 1
a244 1
	xf86conffree (p);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d75 3
d186 5
d194 4
d270 2
d285 1
@


1.1
log
@Initial revision
@
text
@a1 1
 * 
a71 1
	{RGBPATH, "rgbpath"},
a77 11
static char *
prependRoot (char *pathname)
{
#ifndef __EMX__
	return pathname;
#else
	/* XXXX caveat: multiple path components in line */
	return (char *) __XOS2RedirRoot (pathname);
#endif
}

d100 1
a100 1
			str = prependRoot (val.str);
a123 5
		case RGBPATH:
			if (xf86getSubToken (&(ptr->file_comment)) != STRING)
				Error (QUOTE_MSG, "RGBPath");
			ptr->file_rgbpath = val.str;
			break;
d128 1
a128 1
			str = prependRoot (val.str);
d155 1
a155 1
			str = prependRoot (val.str);
a212 2
	if (ptr->file_rgbpath)
		fprintf (cf, "\tRgbPath      \"%s\"\n", ptr->file_rgbpath);
d241 1
a241 1
		fprintf (cf, "\tInputdevs   \"%s\"\n", s);
a266 1
	TestFree (p->file_rgbpath);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 1
d80 11
d113 1
a113 1
			str = val.str;
d146 1
a146 1
			str = val.str;
d173 1
a173 1
			str = val.str;
d261 1
a261 1
		fprintf (cf, "\tInputDevices   \"%s\"\n", s);
@

