head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	Te1daavkBLskZ8gc;

1.7
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	cVXoV5PxI8YrEaVA;

1.6
date	2013.06.07.17.28.52;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.20.56;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.20.56;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 *
 * Copyright (c) 1997  Metro Link Incorporated
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Metro Link shall not be
 * used in advertising or otherwise to promote the sale, use or other dealings
 * in this Software without prior written authorization from Metro Link.
 *
 */
/*
 * Copyright (c) 1997-2003 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "xf86Parser.h"
#include "xf86tokens.h"
#include "Configint.h"


static
xf86ConfigSymTabRec DeviceTab[] = {
    {ENDSECTION, "endsection"},
    {IDENTIFIER, "identifier"},
    {VENDOR, "vendorname"},
    {BOARD, "boardname"},
    {CHIPSET, "chipset"},
    {RAMDAC, "ramdac"},
    {DACSPEED, "dacspeed"},
    {CLOCKS, "clocks"},
    {MATCHSEAT, "matchseat"},
    {OPTION, "option"},
    {VIDEORAM, "videoram"},
    {BIOSBASE, "biosbase"},
    {MEMBASE, "membase"},
    {IOBASE, "iobase"},
    {CLOCKCHIP, "clockchip"},
    {CHIPID, "chipid"},
    {CHIPREV, "chiprev"},
    {CARD, "card"},
    {DRIVER, "driver"},
    {BUSID, "busid"},
    {IRQ, "irq"},
    {SCREEN, "screen"},
    {-1, ""},
};

#define CLEANUP xf86freeDeviceList

XF86ConfDevicePtr
xf86parseDeviceSection(void)
{
    int i;
    int has_ident = FALSE;
    int token;

    parsePrologue(XF86ConfDevicePtr, XF86ConfDeviceRec)

        /* Zero is a valid value for these */
        ptr->dev_chipid = -1;
    ptr->dev_chiprev = -1;
    ptr->dev_irq = -1;
    while ((token = xf86getToken(DeviceTab)) != ENDSECTION) {
        switch (token) {
        case COMMENT:
            ptr->dev_comment = xf86addComment(ptr->dev_comment, xf86_lex_val.str);
            break;
        case IDENTIFIER:
            if (xf86getSubToken(&(ptr->dev_comment)) != STRING)
                Error(QUOTE_MSG, "Identifier");
            if (has_ident == TRUE)
                Error(MULTIPLE_MSG, "Identifier");
            ptr->dev_identifier = xf86_lex_val.str;
            has_ident = TRUE;
            break;
        case VENDOR:
            if (xf86getSubToken(&(ptr->dev_comment)) != STRING)
                Error(QUOTE_MSG, "Vendor");
            ptr->dev_vendor = xf86_lex_val.str;
            break;
        case BOARD:
            if (xf86getSubToken(&(ptr->dev_comment)) != STRING)
                Error(QUOTE_MSG, "Board");
            ptr->dev_board = xf86_lex_val.str;
            break;
        case CHIPSET:
            if (xf86getSubToken(&(ptr->dev_comment)) != STRING)
                Error(QUOTE_MSG, "Chipset");
            ptr->dev_chipset = xf86_lex_val.str;
            break;
        case CARD:
            if (xf86getSubToken(&(ptr->dev_comment)) != STRING)
                Error(QUOTE_MSG, "Card");
            ptr->dev_card = xf86_lex_val.str;
            break;
        case DRIVER:
            if (xf86getSubToken(&(ptr->dev_comment)) != STRING)
                Error(QUOTE_MSG, "Driver");
            ptr->dev_driver = xf86_lex_val.str;
            break;
        case RAMDAC:
            if (xf86getSubToken(&(ptr->dev_comment)) != STRING)
                Error(QUOTE_MSG, "Ramdac");
            ptr->dev_ramdac = xf86_lex_val.str;
            break;
        case DACSPEED:
            for (i = 0; i < CONF_MAXDACSPEEDS; i++)
                ptr->dev_dacSpeeds[i] = 0;
            if (xf86getSubToken(&(ptr->dev_comment)) != NUMBER) {
                Error(DACSPEED_MSG, CONF_MAXDACSPEEDS);
            }
            else {
                ptr->dev_dacSpeeds[0] = (int) (xf86_lex_val.realnum * 1000.0 + 0.5);
                for (i = 1; i < CONF_MAXDACSPEEDS; i++) {
                    if (xf86getSubToken(&(ptr->dev_comment)) == NUMBER)
                        ptr->dev_dacSpeeds[i] = (int)
                            (xf86_lex_val.realnum * 1000.0 + 0.5);
                    else {
                        xf86unGetToken(token);
                        break;
                    }
                }
            }
            break;
        case VIDEORAM:
            if (xf86getSubToken(&(ptr->dev_comment)) != NUMBER)
                Error(NUMBER_MSG, "VideoRam");
            ptr->dev_videoram = xf86_lex_val.num;
            break;
        case BIOSBASE:
            if (xf86getSubToken(&(ptr->dev_comment)) != NUMBER)
                Error(NUMBER_MSG, "BIOSBase");
            ptr->dev_bios_base = xf86_lex_val.num;
            break;
        case MEMBASE:
            if (xf86getSubToken(&(ptr->dev_comment)) != NUMBER)
                Error(NUMBER_MSG, "MemBase");
            ptr->dev_mem_base = xf86_lex_val.num;
            break;
        case IOBASE:
            if (xf86getSubToken(&(ptr->dev_comment)) != NUMBER)
                Error(NUMBER_MSG, "IOBase");
            ptr->dev_io_base = xf86_lex_val.num;
            break;
        case CLOCKCHIP:
            if (xf86getSubToken(&(ptr->dev_comment)) != STRING)
                Error(QUOTE_MSG, "ClockChip");
            ptr->dev_clockchip = xf86_lex_val.str;
            break;
        case CHIPID:
            if (xf86getSubToken(&(ptr->dev_comment)) != NUMBER)
                Error(NUMBER_MSG, "ChipID");
            ptr->dev_chipid = xf86_lex_val.num;
            break;
        case CHIPREV:
            if (xf86getSubToken(&(ptr->dev_comment)) != NUMBER)
                Error(NUMBER_MSG, "ChipRev");
            ptr->dev_chiprev = xf86_lex_val.num;
            break;

        case CLOCKS:
            token = xf86getSubToken(&(ptr->dev_comment));
            for (i = ptr->dev_clocks;
                 token == NUMBER && i < CONF_MAXCLOCKS; i++) {
                ptr->dev_clock[i] = (int) (xf86_lex_val.realnum * 1000.0 + 0.5);
                token = xf86getSubToken(&(ptr->dev_comment));
            }
            ptr->dev_clocks = i;
            xf86unGetToken(token);
            break;
        case MATCHSEAT:
            if (xf86getSubToken(&(ptr->dev_comment)) != STRING)
                Error(QUOTE_MSG, "MatchSeat");
            ptr->match_seat = xf86_lex_val.str;
            break;
        case OPTION:
            ptr->dev_option_lst = xf86parseOption(ptr->dev_option_lst);
            break;
        case BUSID:
            if (xf86getSubToken(&(ptr->dev_comment)) != STRING)
                Error(QUOTE_MSG, "BusID");
            ptr->dev_busid = xf86_lex_val.str;
            break;
        case IRQ:
            if (xf86getSubToken(&(ptr->dev_comment)) != NUMBER)
                Error(QUOTE_MSG, "IRQ");
            ptr->dev_irq = xf86_lex_val.num;
            break;
        case SCREEN:
            if (xf86getSubToken(&(ptr->dev_comment)) != NUMBER)
                Error(NUMBER_MSG, "Screen");
            ptr->dev_screen = xf86_lex_val.num;
            break;
        case EOF_TOKEN:
            Error(UNEXPECTED_EOF_MSG);
            break;
        default:
            Error(INVALID_KEYWORD_MSG, xf86tokenString());
            break;
        }
    }

    if (!has_ident)
        Error(NO_IDENT_MSG);

#ifdef DEBUG
    printf("Device section parsed\n");
#endif

    return ptr;
}

#undef CLEANUP

void
xf86printDeviceSection(FILE * cf, XF86ConfDevicePtr ptr)
{
    int i;

    while (ptr) {
        fprintf(cf, "Section \"Device\"\n");
        if (ptr->dev_comment)
            fprintf(cf, "%s", ptr->dev_comment);
        if (ptr->dev_identifier)
            fprintf(cf, "\tIdentifier  \"%s\"\n", ptr->dev_identifier);
        if (ptr->dev_driver)
            fprintf(cf, "\tDriver      \"%s\"\n", ptr->dev_driver);
        if (ptr->dev_vendor)
            fprintf(cf, "\tVendorName  \"%s\"\n", ptr->dev_vendor);
        if (ptr->dev_board)
            fprintf(cf, "\tBoardName   \"%s\"\n", ptr->dev_board);
        if (ptr->dev_chipset)
            fprintf(cf, "\tChipSet     \"%s\"\n", ptr->dev_chipset);
        if (ptr->dev_card)
            fprintf(cf, "\tCard        \"%s\"\n", ptr->dev_card);
        if (ptr->dev_ramdac)
            fprintf(cf, "\tRamDac      \"%s\"\n", ptr->dev_ramdac);
        if (ptr->dev_dacSpeeds[0] > 0) {
            fprintf(cf, "\tDacSpeed    ");
            for (i = 0; i < CONF_MAXDACSPEEDS && ptr->dev_dacSpeeds[i] > 0; i++)
                fprintf(cf, "%g ", (double) (ptr->dev_dacSpeeds[i]) / 1000.0);
            fprintf(cf, "\n");
        }
        if (ptr->dev_videoram)
            fprintf(cf, "\tVideoRam    %d\n", ptr->dev_videoram);
        if (ptr->dev_bios_base)
            fprintf(cf, "\tBiosBase    0x%lx\n", ptr->dev_bios_base);
        if (ptr->dev_mem_base)
            fprintf(cf, "\tMemBase     0x%lx\n", ptr->dev_mem_base);
        if (ptr->dev_io_base)
            fprintf(cf, "\tIOBase      0x%lx\n", ptr->dev_io_base);
        if (ptr->dev_clockchip)
            fprintf(cf, "\tClockChip   \"%s\"\n", ptr->dev_clockchip);
        if (ptr->dev_chipid != -1)
            fprintf(cf, "\tChipId      0x%x\n", ptr->dev_chipid);
        if (ptr->dev_chiprev != -1)
            fprintf(cf, "\tChipRev     0x%x\n", ptr->dev_chiprev);

        xf86printOptionList(cf, ptr->dev_option_lst, 1);
        if (ptr->dev_clocks > 0) {
            fprintf(cf, "\tClocks      ");
            for (i = 0; i < ptr->dev_clocks; i++)
                fprintf(cf, "%.1f ", (double) ptr->dev_clock[i] / 1000.0);
            fprintf(cf, "\n");
        }
        if (ptr->dev_busid)
            fprintf(cf, "\tBusID       \"%s\"\n", ptr->dev_busid);
        if (ptr->dev_screen > 0)
            fprintf(cf, "\tScreen      %d\n", ptr->dev_screen);
        if (ptr->dev_irq >= 0)
            fprintf(cf, "\tIRQ         %d\n", ptr->dev_irq);
        fprintf(cf, "EndSection\n\n");
        ptr = ptr->list.next;
    }
}

void
xf86freeDeviceList(XF86ConfDevicePtr ptr)
{
    XF86ConfDevicePtr prev;

    while (ptr) {
        TestFree(ptr->dev_identifier);
        TestFree(ptr->dev_vendor);
        TestFree(ptr->dev_board);
        TestFree(ptr->dev_chipset);
        TestFree(ptr->dev_card);
        TestFree(ptr->dev_driver);
        TestFree(ptr->dev_ramdac);
        TestFree(ptr->dev_clockchip);
        TestFree(ptr->dev_comment);
        xf86optionListFree(ptr->dev_option_lst);

        prev = ptr;
        ptr = ptr->list.next;
        free(prev);
    }
}

XF86ConfDevicePtr
xf86findDevice(const char *ident, XF86ConfDevicePtr p)
{
    while (p) {
        if (xf86nameCompare(ident, p->dev_identifier) == 0)
            return p;

        p = p->list.next;
    }
    return NULL;
}
@


1.7
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d1 2
a2 2
/* 
 * 
d4 1
a4 1
 * 
d6 1
a6 1
 * copy of this software and associated documentation files (the "Software"), 
d11 1
a11 1
 * 
d14 1
a14 1
 * 
d22 1
a22 1
 * 
d26 1
a26 1
 * 
a85 1
    {TEXTCLOCKFRQ, "textclockfreq"},
a213 5
        case TEXTCLOCKFRQ:
            if ((token = xf86getSubToken(&(ptr->dev_comment))) != NUMBER)
                Error(NUMBER_MSG, "TextClockFreq");
            ptr->dev_textclockfreq = (int) (xf86_lex_val.realnum * 1000.0 + 0.5);
            break;
a307 4
        }
        if (ptr->dev_textclockfreq) {
            fprintf(cf, "\tTextClockFreq %.1f\n",
                    (double) ptr->dev_textclockfreq / 1000.0);
@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a62 1
extern LexRec val;
d74 1
d110 1
a110 1
            ptr->dev_comment = xf86addComment(ptr->dev_comment, val.str);
d117 1
a117 1
            ptr->dev_identifier = val.str;
d123 1
a123 1
            ptr->dev_vendor = val.str;
d128 1
a128 1
            ptr->dev_board = val.str;
d133 1
a133 1
            ptr->dev_chipset = val.str;
d138 1
a138 1
            ptr->dev_card = val.str;
d143 1
a143 1
            ptr->dev_driver = val.str;
d148 1
a148 1
            ptr->dev_ramdac = val.str;
d157 1
a157 1
                ptr->dev_dacSpeeds[0] = (int) (val.realnum * 1000.0 + 0.5);
d161 1
a161 1
                            (val.realnum * 1000.0 + 0.5);
d172 1
a172 1
            ptr->dev_videoram = val.num;
d177 1
a177 1
            ptr->dev_bios_base = val.num;
d182 1
a182 1
            ptr->dev_mem_base = val.num;
d187 1
a187 1
            ptr->dev_io_base = val.num;
d192 1
a192 1
            ptr->dev_clockchip = val.str;
d197 1
a197 1
            ptr->dev_chipid = val.num;
d202 1
a202 1
            ptr->dev_chiprev = val.num;
d209 1
a209 1
                ptr->dev_clock[i] = (int) (val.realnum * 1000.0 + 0.5);
d218 6
a223 1
            ptr->dev_textclockfreq = (int) (val.realnum * 1000.0 + 0.5);
d231 1
a231 1
            ptr->dev_busid = val.str;
d236 1
a236 1
            ptr->dev_irq = val.num;
d241 1
a241 1
            ptr->dev_screen = val.num;
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a54 2
/* View/edit this file with tab stops set to 4 */

@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a54 1

d68 24
a91 25
xf86ConfigSymTabRec DeviceTab[] =
{
	{ENDSECTION, "endsection"},
	{IDENTIFIER, "identifier"},
	{VENDOR, "vendorname"},
	{BOARD, "boardname"},
	{CHIPSET, "chipset"},
	{RAMDAC, "ramdac"},
	{DACSPEED, "dacspeed"},
	{CLOCKS, "clocks"},
	{OPTION, "option"},
	{VIDEORAM, "videoram"},
	{BIOSBASE, "biosbase"},
	{MEMBASE, "membase"},
	{IOBASE, "iobase"},
	{CLOCKCHIP, "clockchip"},
	{CHIPID, "chipid"},
	{CHIPREV, "chiprev"},
	{CARD, "card"},
	{DRIVER, "driver"},
	{BUSID, "busid"},
	{TEXTCLOCKFRQ, "textclockfreq"},
	{IRQ, "irq"},
	{SCREEN, "screen"},
	{-1, ""},
d97 1
a97 1
xf86parseDeviceSection (void)
d99 149
a247 154
	int i;
	int has_ident = FALSE;
	int token;
	parsePrologue (XF86ConfDevicePtr, XF86ConfDeviceRec)

	/* Zero is a valid value for these */
	ptr->dev_chipid = -1;
	ptr->dev_chiprev = -1;
	ptr->dev_irq = -1;
	while ((token = xf86getToken (DeviceTab)) != ENDSECTION)
	{
		switch (token)
		{
		case COMMENT:
			ptr->dev_comment = xf86addComment(ptr->dev_comment, val.str);
			break;
		case IDENTIFIER:
			if (xf86getSubToken (&(ptr->dev_comment)) != STRING)
				Error (QUOTE_MSG, "Identifier");
			if (has_ident == TRUE)
				Error (MULTIPLE_MSG, "Identifier");
			ptr->dev_identifier = val.str;
			has_ident = TRUE;
			break;
		case VENDOR:
			if (xf86getSubToken (&(ptr->dev_comment)) != STRING)
				Error (QUOTE_MSG, "Vendor");
			ptr->dev_vendor = val.str;
			break;
		case BOARD:
			if (xf86getSubToken (&(ptr->dev_comment)) != STRING)
				Error (QUOTE_MSG, "Board");
			ptr->dev_board = val.str;
			break;
		case CHIPSET:
			if (xf86getSubToken (&(ptr->dev_comment)) != STRING)
				Error (QUOTE_MSG, "Chipset");
			ptr->dev_chipset = val.str;
			break;
		case CARD:
			if (xf86getSubToken (&(ptr->dev_comment)) != STRING)
				Error (QUOTE_MSG, "Card");
			ptr->dev_card = val.str;
			break;
		case DRIVER:
			if (xf86getSubToken (&(ptr->dev_comment)) != STRING)
				Error (QUOTE_MSG, "Driver");
			ptr->dev_driver = val.str;
			break;
		case RAMDAC:
			if (xf86getSubToken (&(ptr->dev_comment)) != STRING)
				Error (QUOTE_MSG, "Ramdac");
			ptr->dev_ramdac = val.str;
			break;
		case DACSPEED:
			for (i = 0; i < CONF_MAXDACSPEEDS; i++)
				ptr->dev_dacSpeeds[i] = 0;
			if (xf86getSubToken (&(ptr->dev_comment)) != NUMBER)
			{
				Error (DACSPEED_MSG, CONF_MAXDACSPEEDS);
			}
			else
			{
				ptr->dev_dacSpeeds[0] = (int) (val.realnum * 1000.0 + 0.5);
				for (i = 1; i < CONF_MAXDACSPEEDS; i++)
				{
					if (xf86getSubToken (&(ptr->dev_comment)) == NUMBER)
						ptr->dev_dacSpeeds[i] = (int)
							(val.realnum * 1000.0 + 0.5);
					else
					{
						xf86unGetToken (token);
						break;
					}
				}
			}
			break;
		case VIDEORAM:
			if (xf86getSubToken (&(ptr->dev_comment)) != NUMBER)
				Error (NUMBER_MSG, "VideoRam");
			ptr->dev_videoram = val.num;
			break;
		case BIOSBASE:
			if (xf86getSubToken (&(ptr->dev_comment)) != NUMBER)
				Error (NUMBER_MSG, "BIOSBase");
			ptr->dev_bios_base = val.num;
			break;
		case MEMBASE:
			if (xf86getSubToken (&(ptr->dev_comment)) != NUMBER)
				Error (NUMBER_MSG, "MemBase");
			ptr->dev_mem_base = val.num;
			break;
		case IOBASE:
			if (xf86getSubToken (&(ptr->dev_comment)) != NUMBER)
				Error (NUMBER_MSG, "IOBase");
			ptr->dev_io_base = val.num;
			break;
		case CLOCKCHIP:
			if (xf86getSubToken (&(ptr->dev_comment)) != STRING)
				Error (QUOTE_MSG, "ClockChip");
			ptr->dev_clockchip = val.str;
			break;
		case CHIPID:
			if (xf86getSubToken (&(ptr->dev_comment)) != NUMBER)
				Error (NUMBER_MSG, "ChipID");
			ptr->dev_chipid = val.num;
			break;
		case CHIPREV:
			if (xf86getSubToken (&(ptr->dev_comment)) != NUMBER)
				Error (NUMBER_MSG, "ChipRev");
			ptr->dev_chiprev = val.num;
			break;

		case CLOCKS:
			token = xf86getSubToken(&(ptr->dev_comment));
			for( i = ptr->dev_clocks;
				token == NUMBER && i < CONF_MAXCLOCKS; i++ ) {
				ptr->dev_clock[i] = (int)(val.realnum * 1000.0 + 0.5);
				token = xf86getSubToken(&(ptr->dev_comment));
			}
			ptr->dev_clocks = i;
			xf86unGetToken (token);
			break;
		case TEXTCLOCKFRQ:
			if ((token = xf86getSubToken(&(ptr->dev_comment))) != NUMBER)
				Error (NUMBER_MSG, "TextClockFreq");
			ptr->dev_textclockfreq = (int)(val.realnum * 1000.0 + 0.5);
			break;
		case OPTION:
			ptr->dev_option_lst = xf86parseOption(ptr->dev_option_lst);
			break;
		case BUSID:
			if (xf86getSubToken (&(ptr->dev_comment)) != STRING)
				Error (QUOTE_MSG, "BusID");
			ptr->dev_busid = val.str;
			break;
		case IRQ:
			if (xf86getSubToken (&(ptr->dev_comment)) != NUMBER)
				Error (QUOTE_MSG, "IRQ");
			ptr->dev_irq = val.num;
			break;
		case SCREEN:
			if (xf86getSubToken (&(ptr->dev_comment)) != NUMBER)
				Error (NUMBER_MSG, "Screen");
			ptr->dev_screen = val.num;
			break;
		case EOF_TOKEN:
			Error (UNEXPECTED_EOF_MSG, NULL);
			break;
		default:
			Error (INVALID_KEYWORD_MSG, xf86tokenString ());
			break;
		}
	}
d249 2
a250 2
	if (!has_ident)
		Error (NO_IDENT_MSG, NULL);
d253 1
a253 1
	printf ("Device section parsed\n");
d256 1
a256 1
	return ptr;
d262 1
a262 1
xf86printDeviceSection (FILE * cf, XF86ConfDevicePtr ptr)
d264 1
a264 1
	int i;
d266 59
a324 61
	while (ptr)
	{
		fprintf (cf, "Section \"Device\"\n");
		if (ptr->dev_comment)
			fprintf (cf, "%s", ptr->dev_comment);
		if (ptr->dev_identifier)
			fprintf (cf, "\tIdentifier  \"%s\"\n", ptr->dev_identifier);
		if (ptr->dev_driver)
			fprintf (cf, "\tDriver      \"%s\"\n", ptr->dev_driver);
		if (ptr->dev_vendor)
			fprintf (cf, "\tVendorName  \"%s\"\n", ptr->dev_vendor);
		if (ptr->dev_board)
			fprintf (cf, "\tBoardName   \"%s\"\n", ptr->dev_board);
		if (ptr->dev_chipset)
			fprintf (cf, "\tChipSet     \"%s\"\n", ptr->dev_chipset);
		if (ptr->dev_card)
			fprintf (cf, "\tCard        \"%s\"\n", ptr->dev_card);
		if (ptr->dev_ramdac)
			fprintf (cf, "\tRamDac      \"%s\"\n", ptr->dev_ramdac);
		if (ptr->dev_dacSpeeds[0] > 0 ) {
			fprintf (cf, "\tDacSpeed    ");
			for (i = 0; i < CONF_MAXDACSPEEDS
					&& ptr->dev_dacSpeeds[i] > 0; i++ )
				fprintf (cf, "%g ", (double) (ptr->dev_dacSpeeds[i])/ 1000.0 );
			fprintf (cf, "\n");
		}
		if (ptr->dev_videoram)
			fprintf (cf, "\tVideoRam    %d\n", ptr->dev_videoram);
		if (ptr->dev_bios_base)
			fprintf (cf, "\tBiosBase    0x%lx\n", ptr->dev_bios_base);
		if (ptr->dev_mem_base)
			fprintf (cf, "\tMemBase     0x%lx\n", ptr->dev_mem_base);
		if (ptr->dev_io_base)
			fprintf (cf, "\tIOBase      0x%lx\n", ptr->dev_io_base);
		if (ptr->dev_clockchip)
			fprintf (cf, "\tClockChip   \"%s\"\n", ptr->dev_clockchip);
		if (ptr->dev_chipid != -1)
			fprintf (cf, "\tChipId      0x%x\n", ptr->dev_chipid);
		if (ptr->dev_chiprev != -1)
			fprintf (cf, "\tChipRev     0x%x\n", ptr->dev_chiprev);

		xf86printOptionList(cf, ptr->dev_option_lst, 1);
		if (ptr->dev_clocks > 0 ) {
			fprintf (cf, "\tClocks      ");
			for (i = 0; i < ptr->dev_clocks; i++ )
				fprintf (cf, "%.1f ", (double)ptr->dev_clock[i] / 1000.0 );
			fprintf (cf, "\n");
		}
		if (ptr->dev_textclockfreq) {
			fprintf (cf, "\tTextClockFreq %.1f\n",
					 (double)ptr->dev_textclockfreq / 1000.0);
		}
		if (ptr->dev_busid)
			fprintf (cf, "\tBusID       \"%s\"\n", ptr->dev_busid);
		if (ptr->dev_screen > 0)
			fprintf (cf, "\tScreen      %d\n", ptr->dev_screen);
		if (ptr->dev_irq >= 0)
			fprintf (cf, "\tIRQ         %d\n", ptr->dev_irq);
		fprintf (cf, "EndSection\n\n");
		ptr = ptr->list.next;
	}
d328 1
a328 1
xf86freeDeviceList (XF86ConfDevicePtr ptr)
d330 1
a330 1
	XF86ConfDevicePtr prev;
d332 16
a347 17
	while (ptr)
	{
		TestFree (ptr->dev_identifier);
		TestFree (ptr->dev_vendor);
		TestFree (ptr->dev_board);
		TestFree (ptr->dev_chipset);
		TestFree (ptr->dev_card);
		TestFree (ptr->dev_driver);
		TestFree (ptr->dev_ramdac);
		TestFree (ptr->dev_clockchip);
		TestFree (ptr->dev_comment);
		xf86optionListFree (ptr->dev_option_lst);

		prev = ptr;
		ptr = ptr->list.next;
		free (prev);
	}
d351 1
a351 1
xf86findDevice (const char *ident, XF86ConfDevicePtr p)
d353 7
a359 8
	while (p)
	{
		if (xf86nameCompare (ident, p->dev_identifier) == 0)
			return p;

		p = p->list.next;
	}
	return NULL;
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d366 1
a366 1
			return (p);
d370 1
a370 1
	return (NULL);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d356 1
a356 1
		xf86conffree (prev);
a370 11
}

char *
xf86configStrdup (const char *s)
{
	char *tmp;
	if (!s) return NULL;
	tmp = xf86confmalloc (sizeof (char) * (strlen (s) + 1));
	if (tmp)
		strcpy (tmp, s);
	return (tmp);
@


1.1
log
@Initial revision
@
text
@a359 20
int
xf86validateDevice (XF86ConfigPtr p)
{
	XF86ConfDevicePtr device = p->conf_device_lst;

	if (!device) {
		xf86validationError ("At least one Device section is required.");
		return (FALSE);
	}

	while (device) {
		if (!device->dev_driver) {
			xf86validationError (UNDEFINED_DRIVER_MSG, device->dev_identifier);
			return (FALSE);
		}
	device = device->list.next;
	}
	return (TRUE);
}

@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
