head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.05.29.12.02.38;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	s0SI41sEunLdyFfd;

1.4
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	cVXoV5PxI8YrEaVA;

1.3
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.20.54;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.20.54;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.58.15;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 * Copyright (c) 1997-2001 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

/* Private procs.  Public procs are in xf86Parser.h and xf86Optrec.h */

/* exported functions are/were used by the X Server */

/* Device.c */
XF86ConfDevicePtr xf86parseDeviceSection(void);
void xf86printDeviceSection(FILE * cf, XF86ConfDevicePtr ptr);
void xf86freeDeviceList(XF86ConfDevicePtr ptr);
int xf86validateDevice(XF86ConfigPtr p);

/* Files.c */
XF86ConfFilesPtr xf86parseFilesSection(void);
void xf86printFileSection(FILE * cf, XF86ConfFilesPtr ptr);
void xf86freeFiles(XF86ConfFilesPtr p);

/* Flags.c */
XF86ConfFlagsPtr xf86parseFlagsSection(void);
void xf86printServerFlagsSection(FILE * f, XF86ConfFlagsPtr flags);
void xf86freeFlags(XF86ConfFlagsPtr flags);

/* Input.c */
XF86ConfInputPtr xf86parseInputSection(void);
void xf86printInputSection(FILE * f, XF86ConfInputPtr ptr);
void xf86freeInputList(XF86ConfInputPtr ptr);
int xf86validateInput(XF86ConfigPtr p);

/* InputClass.c */
XF86ConfInputClassPtr xf86parseInputClassSection(void);
void xf86printInputClassSection(FILE * f, XF86ConfInputClassPtr ptr);

/* OutputClass.c */
XF86ConfOutputClassPtr xf86parseOutputClassSection(void);
void xf86printOutputClassSection(FILE * f, XF86ConfOutputClassPtr ptr);

/* Layout.c */
XF86ConfLayoutPtr xf86parseLayoutSection(void);
void xf86printLayoutSection(FILE * cf, XF86ConfLayoutPtr ptr);
void xf86freeLayoutList(XF86ConfLayoutPtr ptr);
int xf86validateLayout(XF86ConfigPtr p);

/* Module.c */
XF86ConfModulePtr xf86parseModuleSection(void);
void xf86printModuleSection(FILE * cf, XF86ConfModulePtr ptr);
extern _X_EXPORT XF86LoadPtr xf86addNewLoadDirective(XF86LoadPtr head,
                                                     const char *name, int type,
                                                     XF86OptionPtr opts);
void xf86freeModules(XF86ConfModulePtr ptr);

/* Monitor.c */
XF86ConfMonitorPtr xf86parseMonitorSection(void);
XF86ConfModesPtr xf86parseModesSection(void);
void xf86printMonitorSection(FILE * cf, XF86ConfMonitorPtr ptr);
void xf86printModesSection(FILE * cf, XF86ConfModesPtr ptr);
extern _X_EXPORT void xf86freeMonitorList(XF86ConfMonitorPtr ptr);
void xf86freeModesList(XF86ConfModesPtr ptr);
int xf86validateMonitor(XF86ConfigPtr p, XF86ConfScreenPtr screen);

/* Pointer.c */
XF86ConfInputPtr xf86parsePointerSection(void);

/* Screen.c */
XF86ConfScreenPtr xf86parseScreenSection(void);
void xf86printScreenSection(FILE * cf, XF86ConfScreenPtr ptr);
extern _X_EXPORT void xf86freeScreenList(XF86ConfScreenPtr ptr);
int xf86validateScreen(XF86ConfigPtr p);

/* Vendor.c */
XF86ConfVendorPtr xf86parseVendorSection(void);
void xf86freeVendorList(XF86ConfVendorPtr p);
void xf86printVendorSection(FILE * cf, XF86ConfVendorPtr ptr);

/* Video.c */
XF86ConfVideoAdaptorPtr xf86parseVideoAdaptorSection(void);
void xf86printVideoAdaptorSection(FILE * cf, XF86ConfVideoAdaptorPtr ptr);
void xf86freeVideoAdaptorList(XF86ConfVideoAdaptorPtr ptr);

/* scan.c */
int xf86getToken(xf86ConfigSymTabRec * tab);
int xf86getSubToken(char **comment);
int xf86getSubTokenWithTab(char **comment, xf86ConfigSymTabRec * tab);
void xf86unGetToken(int token);
char *xf86tokenString(void);
void
xf86parseError(const char *format, ...)
_X_ATTRIBUTE_PRINTF(1, 2);
void
xf86validationError(const char *format, ...)
_X_ATTRIBUTE_PRINTF(1, 2);
void
xf86setSection(const char *section);
int
xf86getStringToken(xf86ConfigSymTabRec * tab);

/* write.c */
/* DRI.c */
XF86ConfDRIPtr
xf86parseDRISection(void);
void
xf86printDRISection(FILE * cf, XF86ConfDRIPtr ptr);
void
xf86freeDRI(XF86ConfDRIPtr ptr);

/* Extensions.c */
XF86ConfExtensionsPtr
xf86parseExtensionsSection(void);
void
xf86printExtensionsSection(FILE * cf, XF86ConfExtensionsPtr ptr);
void
xf86freeExtensions(XF86ConfExtensionsPtr ptr);

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#ifndef HAVE_XORG_CONFIG_H
/* Externally provided functions */
void
ErrorF(const char *f, ...);
void
VErrorF(const char *f, va_list args);
#endif
@


1.4
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d30 1
a30 2
/* exported functions are/were used by the X Server, and need to be
 * made public when installing libxf86config */
a56 1
void xf86freeInputClassList(XF86ConfInputClassPtr ptr);
a60 1
void xf86freeOutputClassList(XF86ConfOutputClassPtr ptr);
a91 3
void xf86freeAdaptorLinkList(XF86ConfAdaptorLinkPtr ptr);
void xf86freeDisplayList(XF86ConfDisplayPtr ptr);
void xf86freeModeList(XF86ModePtr ptr);
a97 1
void xf86freeVendorSubList(XF86ConfVendSubPtr ptr);
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d60 5
d75 1
a75 1
                                                     char *name, int type,
d149 1
a149 1
#ifndef IN_XSERVER
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d35 1
a35 1
void xf86printDeviceSection(FILE *cf, XF86ConfDevicePtr ptr);
d38 1
d41 1
a41 1
void xf86printFileSection(FILE *cf, XF86ConfFilesPtr ptr);
d43 1
d46 1
a46 1
void xf86printServerFlagsSection(FILE *f, XF86ConfFlagsPtr flags);
d48 1
d51 1
a51 1
void xf86printInputSection(FILE *f, XF86ConfInputPtr ptr);
d53 2
a54 1
int xf86validateInput (XF86ConfigPtr p);
d57 1
a57 1
void xf86printInputClassSection(FILE *f, XF86ConfInputClassPtr ptr);
d59 1
d62 1
a62 1
void xf86printLayoutSection(FILE *cf, XF86ConfLayoutPtr ptr);
d65 1
d68 4
a71 2
void xf86printModuleSection(FILE *cf, XF86ConfModulePtr ptr);
extern _X_EXPORT XF86LoadPtr xf86addNewLoadDirective(XF86LoadPtr head, char *name, int type, XF86OptionPtr opts);
d73 1
d77 2
a78 2
void xf86printMonitorSection(FILE *cf, XF86ConfMonitorPtr ptr);
void xf86printModesSection(FILE *cf, XF86ConfModesPtr ptr);
d82 1
d85 1
d88 1
a88 1
void xf86printScreenSection(FILE *cf, XF86ConfScreenPtr ptr);
d94 1
d99 2
a100 1
void xf86freeVendorSubList (XF86ConfVendSubPtr ptr);
d103 1
a103 1
void xf86printVideoAdaptorSection(FILE *cf, XF86ConfVideoAdaptorPtr ptr);
d105 1
d107 1
a107 1
int xf86getToken(xf86ConfigSymTabRec *tab);
d109 1
a109 1
int xf86getSubTokenWithTab(char **comment, xf86ConfigSymTabRec *tab);
d112 11
a122 4
void xf86parseError(char *format, ...);
void xf86validationError(char *format, ...);
void xf86setSection(char *section);
int xf86getStringToken(xf86ConfigSymTabRec *tab);
d125 7
a131 3
XF86ConfDRIPtr xf86parseDRISection (void);
void xf86printDRISection (FILE * cf, XF86ConfDRIPtr ptr);
void xf86freeDRI (XF86ConfDRIPtr ptr);
d133 6
a138 3
XF86ConfExtensionsPtr xf86parseExtensionsSection (void);
void xf86printExtensionsSection (FILE * cf, XF86ConfExtensionsPtr ptr);
void xf86freeExtensions (XF86ConfExtensionsPtr ptr);
d146 4
a149 2
void ErrorF(const char *f, ...);
void VErrorF(const char *f, va_list args);
@


1.1
log
@Initial revision
@
text
@d30 3
d51 4
a54 2
/* Keyboard.c */
XF86ConfInputPtr xf86parseKeyboardSection(void);
a58 2
void xf86freeAdjacencyList(XF86ConfAdjacencyPtr ptr);
void xf86freeInputrefList(XF86ConfInputrefPtr ptr);
a60 1
XF86LoadPtr xf86parseModuleSubSection(XF86LoadPtr head, char *name);
d63 1
a63 1
XF86LoadPtr xf86addNewLoadDirective(XF86LoadPtr head, char *name, int type, XF86OptionPtr opts);
a65 2
XF86ConfModeLinePtr xf86parseModeLine(void);
XF86ConfModeLinePtr xf86parseVerboseMode(void);
d70 1
a70 1
void xf86freeMonitorList(XF86ConfMonitorPtr ptr);
a71 1
void xf86freeModeLineList(XF86ConfModeLinePtr ptr);
a75 1
XF86ConfDisplayPtr xf86parseDisplaySubSection(void);
d78 1
a78 1
void xf86freeScreenList(XF86ConfScreenPtr ptr);
a84 1
XF86ConfVendSubPtr xf86parseVendorSubSection (void);
a88 1
XF86ConfVideoPortPtr xf86parseVideoPortSubSection(void);
a91 3
void xf86freeVideoPortList(XF86ConfVideoPortPtr ptr);
/* read.c */
int xf86validateConfig(XF86ConfigPtr p);
a92 1
unsigned int xf86strToUL(char *str);
a98 1
void xf86parseWarning(char *format, ...);
a103 2
XF86ConfBuffersPtr xf86parseBuffers (void);
void xf86freeBuffersList (XF86ConfBuffersPtr ptr);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d48 2
d54 2
d58 1
d64 2
d72 1
d77 1
d87 1
d92 1
d96 3
d100 1
d107 1
d113 2
@

