head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	Te1daavkBLskZ8gc;

1.5
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	cVXoV5PxI8YrEaVA;

1.4
date	2013.06.07.17.28.52;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.20.57;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.20.57;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.58.13;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 *
 * Copyright (c) 1997  Metro Link Incorporated
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Metro Link shall not be
 * used in advertising or otherwise to promote the sale, use or other dealings
 * in this Software without prior written authorization from Metro Link.
 *
 */
/*
 * Copyright (c) 1997-2003 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "xf86Parser.h"
#include "xf86tokens.h"
#include "Configint.h"


static xf86ConfigSymTabRec SubModuleTab[] = {
    {ENDSUBSECTION, "endsubsection"},
    {OPTION, "option"},
    {-1, ""},
};

static xf86ConfigSymTabRec ModuleTab[] = {
    {ENDSECTION, "endsection"},
    {LOAD, "load"},
    {DISABLE, "disable"},
    {LOAD_DRIVER, "loaddriver"},
    {SUBSECTION, "subsection"},
    {-1, ""},
};

#define CLEANUP xf86freeModules

static XF86LoadPtr
xf86parseModuleSubSection(XF86LoadPtr head, char *name)
{
    int token;

    parsePrologue(XF86LoadPtr, XF86LoadRec)

        ptr->load_name = name;
    ptr->load_type = XF86_LOAD_MODULE;
    ptr->ignore = 0;
    ptr->load_opt = NULL;
    ptr->list.next = NULL;

    while ((token = xf86getToken(SubModuleTab)) != ENDSUBSECTION) {
        switch (token) {
        case COMMENT:
            ptr->load_comment = xf86addComment(ptr->load_comment, xf86_lex_val.str);
            break;
        case OPTION:
            ptr->load_opt = xf86parseOption(ptr->load_opt);
            break;
        case EOF_TOKEN:
            xf86parseError(UNEXPECTED_EOF_MSG);
            free(ptr);
            return NULL;
        default:
            xf86parseError(INVALID_KEYWORD_MSG, xf86tokenString());
            free(ptr);
            return NULL;
            break;
        }

    }

    return ((XF86LoadPtr) xf86addListItem((glp) head, (glp) ptr));
}

XF86ConfModulePtr
xf86parseModuleSection(void)
{
    int token;

    parsePrologue(XF86ConfModulePtr, XF86ConfModuleRec)

        while ((token = xf86getToken(ModuleTab)) != ENDSECTION) {
        switch (token) {
        case COMMENT:
            ptr->mod_comment = xf86addComment(ptr->mod_comment, xf86_lex_val.str);
            break;
        case LOAD:
            if (xf86getSubToken(&(ptr->mod_comment)) != STRING)
                Error(QUOTE_MSG, "Load");
            ptr->mod_load_lst =
                xf86addNewLoadDirective(ptr->mod_load_lst, xf86_lex_val.str,
                                        XF86_LOAD_MODULE, NULL);
            break;
        case DISABLE:
            if (xf86getSubToken(&(ptr->mod_comment)) != STRING)
                Error(QUOTE_MSG, "Disable");
            ptr->mod_disable_lst =
                xf86addNewLoadDirective(ptr->mod_disable_lst, xf86_lex_val.str,
                                        XF86_DISABLE_MODULE, NULL);
            break;
        case LOAD_DRIVER:
            if (xf86getSubToken(&(ptr->mod_comment)) != STRING)
                Error(QUOTE_MSG, "LoadDriver");
            ptr->mod_load_lst =
                xf86addNewLoadDirective(ptr->mod_load_lst, xf86_lex_val.str,
                                        XF86_LOAD_DRIVER, NULL);
            break;
        case SUBSECTION:
            if (xf86getSubToken(&(ptr->mod_comment)) != STRING)
                Error(QUOTE_MSG, "SubSection");
            ptr->mod_load_lst =
                xf86parseModuleSubSection(ptr->mod_load_lst, xf86_lex_val.str);
            break;
        case EOF_TOKEN:
            Error(UNEXPECTED_EOF_MSG);
            break;
        default:
            Error(INVALID_KEYWORD_MSG, xf86tokenString());
            break;
        }
    }

#ifdef DEBUG
    printf("Module section parsed\n");
#endif

    return ptr;
}

#undef CLEANUP

void
xf86printModuleSection(FILE * cf, XF86ConfModulePtr ptr)
{
    XF86LoadPtr lptr;

    if (ptr == NULL)
        return;

    if (ptr->mod_comment)
        fprintf(cf, "%s", ptr->mod_comment);
    for (lptr = ptr->mod_load_lst; lptr; lptr = lptr->list.next) {
        switch (lptr->load_type) {
        case XF86_LOAD_MODULE:
            if (lptr->load_opt == NULL) {
                fprintf(cf, "\tLoad  \"%s\"", lptr->load_name);
                if (lptr->load_comment)
                    fprintf(cf, "%s", lptr->load_comment);
                else
                    fputc('\n', cf);
            }
            else {
                fprintf(cf, "\tSubSection \"%s\"\n", lptr->load_name);
                if (lptr->load_comment)
                    fprintf(cf, "%s", lptr->load_comment);
                xf86printOptionList(cf, lptr->load_opt, 2);
                fprintf(cf, "\tEndSubSection\n");
            }
            break;
        case XF86_LOAD_DRIVER:
            fprintf(cf, "\tLoadDriver  \"%s\"", lptr->load_name);
            if (lptr->load_comment)
                fprintf(cf, "%s", lptr->load_comment);
            else
                fputc('\n', cf);
            break;
#if 0
        default:
            fprintf(cf, "#\tUnknown type  \"%s\"\n", lptr->load_name);
            break;
#endif
        }
    }
}

XF86LoadPtr
xf86addNewLoadDirective(XF86LoadPtr head, const char *name, int type,
                        XF86OptionPtr opts)
{
    XF86LoadPtr new;
    int token;

    new = calloc(1, sizeof(XF86LoadRec));
    new->load_name = name;
    new->load_type = type;
    new->load_opt = opts;
    new->ignore = 0;
    new->list.next = NULL;

    if ((token = xf86getToken(NULL)) == COMMENT)
        new->load_comment = xf86addComment(new->load_comment, xf86_lex_val.str);
    else
        xf86unGetToken(token);

    return ((XF86LoadPtr) xf86addListItem((glp) head, (glp) new));
}

void
xf86freeModules(XF86ConfModulePtr ptr)
{
    XF86LoadPtr lptr;
    XF86LoadPtr prev;

    if (ptr == NULL)
        return;
    lptr = ptr->mod_load_lst;
    while (lptr) {
        TestFree(lptr->load_name);
        TestFree(lptr->load_comment);
        prev = lptr;
        lptr = lptr->list.next;
        free(prev);
    }
    lptr = ptr->mod_disable_lst;
    while (lptr) {
        TestFree(lptr->load_name);
        TestFree(lptr->load_comment);
        prev = lptr;
        lptr = lptr->list.next;
        free(prev);
    }
    TestFree(ptr->mod_comment);
    free(ptr);
}
@


1.5
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d1 2
a2 2
/* 
 * 
d4 1
a4 1
 * 
d6 1
a6 1
 * copy of this software and associated documentation files (the "Software"), 
d11 1
a11 1
 * 
d14 1
a14 1
 * 
d22 1
a22 1
 * 
d26 1
a26 1
 * 
@


1.4
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a62 1
extern LexRec val;
d97 1
a97 1
            ptr->load_comment = xf86addComment(ptr->load_comment, val.str);
d128 1
a128 1
            ptr->mod_comment = xf86addComment(ptr->mod_comment, val.str);
d134 1
a134 1
                xf86addNewLoadDirective(ptr->mod_load_lst, val.str,
d141 1
a141 1
                xf86addNewLoadDirective(ptr->mod_disable_lst, val.str,
d148 1
a148 1
                xf86addNewLoadDirective(ptr->mod_load_lst, val.str,
d155 1
a155 1
                xf86parseModuleSubSection(ptr->mod_load_lst, val.str);
d220 1
a220 1
xf86addNewLoadDirective(XF86LoadPtr head, char *name, int type,
d234 1
a234 1
        new->load_comment = xf86addComment(new->load_comment, val.str);
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a54 2
/* View/edit this file with tab stops set to 4 */

@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a54 1

d67 4
a70 5
static xf86ConfigSymTabRec SubModuleTab[] =
{
	{ENDSUBSECTION, "endsubsection"},
	{OPTION, "option"},
	{-1, ""},
d73 7
a79 8
static xf86ConfigSymTabRec ModuleTab[] =
{
	{ENDSECTION, "endsection"},
	{LOAD, "load"},
    {DISABLE, "disable"}, 
	{LOAD_DRIVER, "loaddriver"},
	{SUBSECTION, "subsection"},
	{-1, ""},
d85 1
a85 1
xf86parseModuleSubSection (XF86LoadPtr head, char *name)
d87 1
a87 2
	int token;
	parsePrologue (XF86LoadPtr, XF86LoadRec)
d89 1
a89 26
	ptr->load_name = name;
	ptr->load_type = XF86_LOAD_MODULE;
        ptr->ignore    = 0;
	ptr->load_opt  = NULL;
	ptr->list.next = NULL;

	while ((token = xf86getToken (SubModuleTab)) != ENDSUBSECTION)
	{
		switch (token)
		{
		case COMMENT:
			ptr->load_comment = xf86addComment(ptr->load_comment, val.str);
			break;
		case OPTION:
			ptr->load_opt = xf86parseOption(ptr->load_opt);
			break;
		case EOF_TOKEN:
			xf86parseError (UNEXPECTED_EOF_MSG, NULL);
			free(ptr);
			return NULL;
		default:
			xf86parseError (INVALID_KEYWORD_MSG, xf86tokenString ());
			free(ptr);
			return NULL;
			break;
		}
d91 24
a114 1
	}
d116 3
a118 1
	return ((XF86LoadPtr) xf86addListItem ((glp) head, (glp) ptr));
d122 1
a122 1
xf86parseModuleSection (void)
d124 3
a126 2
	int token;
	parsePrologue (XF86ConfModulePtr, XF86ConfModuleRec)
d128 40
a167 42
	while ((token = xf86getToken (ModuleTab)) != ENDSECTION)
	{
		switch (token)
		{
		case COMMENT:
			ptr->mod_comment = xf86addComment(ptr->mod_comment, val.str);
			break;
		case LOAD:
			if (xf86getSubToken (&(ptr->mod_comment)) != STRING)
				Error (QUOTE_MSG, "Load");
			ptr->mod_load_lst =
				xf86addNewLoadDirective (ptr->mod_load_lst, val.str,
									 XF86_LOAD_MODULE, NULL);
			break;
		case DISABLE:
			if (xf86getSubToken (&(ptr->mod_comment)) != STRING)
				Error (QUOTE_MSG, "Disable");
			ptr->mod_disable_lst =
				xf86addNewLoadDirective (ptr->mod_disable_lst, val.str,
									 XF86_DISABLE_MODULE, NULL);
			break;
		case LOAD_DRIVER:
			if (xf86getSubToken (&(ptr->mod_comment)) != STRING)
				Error (QUOTE_MSG, "LoadDriver");
			ptr->mod_load_lst =
				xf86addNewLoadDirective (ptr->mod_load_lst, val.str,
									 XF86_LOAD_DRIVER, NULL);
			break;
		case SUBSECTION:
			if (xf86getSubToken (&(ptr->mod_comment)) != STRING)
						Error (QUOTE_MSG, "SubSection");
			ptr->mod_load_lst =
				xf86parseModuleSubSection (ptr->mod_load_lst, val.str);
			break;
		case EOF_TOKEN:
			Error (UNEXPECTED_EOF_MSG, NULL);
			break;
		default:
			Error (INVALID_KEYWORD_MSG, xf86tokenString ());
			break;
		}
	}
d170 1
a170 1
	printf ("Module section parsed\n");
d173 1
a173 1
	return ptr;
d179 1
a179 1
xf86printModuleSection (FILE * cf, XF86ConfModulePtr ptr)
d181 1
a181 1
	XF86LoadPtr lptr;
d183 2
a184 2
	if (ptr == NULL)
		return;
d186 27
a212 30
	if (ptr->mod_comment)
		fprintf(cf, "%s", ptr->mod_comment);
	for (lptr = ptr->mod_load_lst; lptr; lptr = lptr->list.next)
	{
		switch (lptr->load_type)
		{
		case XF86_LOAD_MODULE:
			if( lptr->load_opt == NULL ) {
				fprintf (cf, "\tLoad  \"%s\"", lptr->load_name);
				if (lptr->load_comment)
					fprintf(cf, "%s", lptr->load_comment);
				else
					fputc('\n', cf);
			}
			else
			{
				fprintf (cf, "\tSubSection \"%s\"\n", lptr->load_name);
				if (lptr->load_comment)
					fprintf(cf, "%s", lptr->load_comment);
				xf86printOptionList(cf, lptr->load_opt, 2);
				fprintf (cf, "\tEndSubSection\n");
			}
			break;
		case XF86_LOAD_DRIVER:
			fprintf (cf, "\tLoadDriver  \"%s\"", lptr->load_name);
				if (lptr->load_comment)
					fprintf(cf, "%s", lptr->load_comment);
				else
					fputc('\n', cf);
			break;
d214 3
a216 3
		default:
			fprintf (cf, "#\tUnknown type  \"%s\"\n", lptr->load_name);
			break;
d218 2
a219 2
		}
	}
d223 2
a224 1
xf86addNewLoadDirective (XF86LoadPtr head, char *name, int type, XF86OptionPtr opts)
d226 2
a227 2
	XF86LoadPtr new;
	int token;
d229 11
a239 11
	new = calloc (1, sizeof (XF86LoadRec));
	new->load_name = name;
	new->load_type = type;
	new->load_opt  = opts;
        new->ignore    = 0;
	new->list.next = NULL;

	if ((token = xf86getToken(NULL)) == COMMENT)
		new->load_comment = xf86addComment(new->load_comment, val.str);
	else
		xf86unGetToken(token);
d241 1
a241 1
	return ((XF86LoadPtr) xf86addListItem ((glp) head, (glp) new));
d245 1
a245 1
xf86freeModules (XF86ConfModulePtr ptr)
d247 2
a248 2
	XF86LoadPtr lptr;
	XF86LoadPtr prev;
d250 20
a269 22
	if (ptr == NULL)
		return;
	lptr = ptr->mod_load_lst;
	while (lptr)
	{
		TestFree (lptr->load_name);
		TestFree (lptr->load_comment);
		prev = lptr;
		lptr = lptr->list.next;
		free (prev);
	}
	lptr = ptr->mod_disable_lst;
	while (lptr)
	{
		TestFree (lptr->load_name);
		TestFree (lptr->load_comment);
		prev = lptr;
		lptr = lptr->list.next;
		free (prev);
	}
	TestFree (ptr->mod_comment);
	free (ptr);
@


1.1
log
@Initial revision
@
text
@d79 1
d87 1
a87 1
XF86LoadPtr
d111 1
a111 1
			xf86conffree(ptr);
d115 1
a115 1
			xf86conffree(ptr);
d145 7
d236 1
a236 1
	new = xf86confcalloc (1, sizeof (XF86LoadRec));
d266 10
a275 1
		xf86conffree (prev);
d278 1
a278 1
	xf86conffree (ptr);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@a78 1
    {DISABLE, "disable"}, 
d86 1
a86 1
static XF86LoadPtr
a143 7
		case DISABLE:
			if (xf86getSubToken (&(ptr->mod_comment)) != STRING)
				Error (QUOTE_MSG, "Disable");
			ptr->mod_disable_lst =
				xf86addNewLoadDirective (ptr->mod_disable_lst, val.str,
									 XF86_DISABLE_MODULE, NULL);
			break;
a251 9
	while (lptr)
	{
		TestFree (lptr->load_name);
		TestFree (lptr->load_comment);
		prev = lptr;
		lptr = lptr->list.next;
		xf86conffree (prev);
	}
	lptr = ptr->mod_disable_lst;
@

