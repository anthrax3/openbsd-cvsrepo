head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.8
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.6
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	Te1daavkBLskZ8gc;

1.8
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	cVXoV5PxI8YrEaVA;

1.7
date	2013.12.08.10.53.01;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2013.06.07.17.28.52;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.52;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.20.54;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.20.54;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.58.14;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright (c) 1997  Metro Link Incorporated
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Metro Link shall not be
 * used in advertising or otherwise to promote the sale, use or other dealings
 * in this Software without prior written authorization from Metro Link.
 *
 */
/*
 * Copyright (c) 1997-2003 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "os.h"
#include "xf86Parser.h"
#include "xf86tokens.h"
#include "Configint.h"

#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>
#include <errno.h>

#if defined(HAVE_SETEUID) && defined(_POSIX_SAVED_IDS) && _POSIX_SAVED_IDS > 0
#define HAS_SAVED_IDS_AND_SETEUID
#endif
#if defined(WIN32)
#define HAS_NO_UIDS
#endif

#ifdef HAS_NO_UIDS
#define doWriteConfigFile xf86writeConfigFile
#define Local /**/
#else
#define Local static
#endif

Local int
doWriteConfigFile(const char *filename, XF86ConfigPtr cptr)
{
    FILE *cf;

    if ((cf = fopen(filename, "w")) == NULL) {
        return 0;
    }

    if (cptr->conf_comment)
        fprintf(cf, "%s\n", cptr->conf_comment);

    xf86printLayoutSection(cf, cptr->conf_layout_lst);

    if (cptr->conf_files != NULL) {
        fprintf(cf, "Section \"Files\"\n");
        xf86printFileSection(cf, cptr->conf_files);
        fprintf(cf, "EndSection\n\n");
    }

    if (cptr->conf_modules != NULL) {
        fprintf(cf, "Section \"Module\"\n");
        xf86printModuleSection(cf, cptr->conf_modules);
        fprintf(cf, "EndSection\n\n");
    }

    xf86printVendorSection(cf, cptr->conf_vendor_lst);

    xf86printServerFlagsSection(cf, cptr->conf_flags);

    xf86printInputSection(cf, cptr->conf_input_lst);

    xf86printInputClassSection(cf, cptr->conf_inputclass_lst);

    xf86printOutputClassSection(cf, cptr->conf_outputclass_lst);

    xf86printVideoAdaptorSection(cf, cptr->conf_videoadaptor_lst);

    xf86printModesSection(cf, cptr->conf_modes_lst);

    xf86printMonitorSection(cf, cptr->conf_monitor_lst);

    xf86printDeviceSection(cf, cptr->conf_device_lst);

    xf86printScreenSection(cf, cptr->conf_screen_lst);

    xf86printDRISection(cf, cptr->conf_dri);

    xf86printExtensionsSection(cf, cptr->conf_extensions);

    fclose(cf);
    return 1;
}

#ifndef HAS_NO_UIDS

int
xf86writeConfigFile(const char *filename, XF86ConfigPtr cptr)
{
    int ret;

#if !defined(HAS_SAVED_IDS_AND_SETEUID)
    int pid, p;
    int status;
    void (*csig) (int);
#else
    int ruid, euid;
#endif

    if (getuid() != geteuid()) {

#if !defined(HAS_SAVED_IDS_AND_SETEUID)
        /* Need to fork to change ruid without loosing euid */
        csig = signal(SIGCHLD, SIG_DFL);
        switch ((pid = fork())) {
        case -1:
            ErrorF("xf86writeConfigFile(): fork failed (%s)\n",
                   strerror(errno));
            return 0;
        case 0:                /* child */
            if (setuid(getuid()) == -1)
                FatalError("xf86writeConfigFile(): "
                           "setuid failed(%s)\n", strerror(errno));
            ret = doWriteConfigFile(filename, cptr);
            exit(ret);
            break;
        default:               /* parent */
            do {
                p = waitpid(pid, &status, 0);
            } while (p == -1 && errno == EINTR);
        }
        signal(SIGCHLD, csig);
        if (p != -1 && WIFEXITED(status) && WEXITSTATUS(status) == 0)
            return 1;           /* success */
        else
            return 0;

#else                           /* HAS_SAVED_IDS_AND_SETEUID */

        ruid = getuid();
        euid = geteuid();

        if (seteuid(ruid) == -1) {
            ErrorF("xf86writeConfigFile(): seteuid(%d) failed (%s)\n",
                   ruid, strerror(errno));
            return 0;
        }
        ret = doWriteConfigFile(filename, cptr);

        if (seteuid(euid) == -1) {
            ErrorF("xf86writeConfigFile(): seteuid(%d) failed (%s)\n",
                   euid, strerror(errno));
        }
        return ret;

#endif                          /* HAS_SAVED_IDS_AND_SETEUID */

    }
    else {
        return doWriteConfigFile(filename, cptr);
    }
}

#endif                          /* !HAS_NO_UIDS */
@


1.8
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d1 1
a1 1
/* 
d3 1
a3 1
 * 
d5 1
a5 1
 * copy of this software and associated documentation files (the "Software"), 
d10 1
a10 1
 * 
d13 1
a13 1
 * 
d21 1
a21 1
 * 
d25 1
a25 1
 * 
@


1.7
log
@Update to xserver 1.14.4
@
text
@d117 2
@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d58 1
d69 1
a69 1
#if defined(SVR4) || defined(__linux__) || defined(CSRG_BASED)
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a53 2
/* View/edit this file with tab stops set to 4 */

@


1.4
log
@Update to xserver 1.11.2
@
text
@a53 1

d85 1
a85 1
doWriteConfigFile (const char *filename, XF86ConfigPtr cptr)
d87 1
a87 1
	FILE *cf;
d89 3
a91 4
	if ((cf = fopen (filename, "w")) == NULL)
	{
		return 0;
	}
d93 2
a94 2
	if (cptr->conf_comment)
		fprintf (cf, "%s\n", cptr->conf_comment);
d96 1
a96 1
	xf86printLayoutSection (cf, cptr->conf_layout_lst);
d98 5
a102 6
	if (cptr->conf_files != NULL)
	{
		fprintf (cf, "Section \"Files\"\n");
		xf86printFileSection (cf, cptr->conf_files);
		fprintf (cf, "EndSection\n\n");
	}
d104 5
a108 6
	if (cptr->conf_modules != NULL)
	{
		fprintf (cf, "Section \"Module\"\n");
		xf86printModuleSection (cf, cptr->conf_modules);
		fprintf (cf, "EndSection\n\n");
	}
d110 1
a110 1
	xf86printVendorSection (cf, cptr->conf_vendor_lst);
d112 1
a112 1
	xf86printServerFlagsSection (cf, cptr->conf_flags);
d114 1
a114 1
	xf86printInputSection (cf, cptr->conf_input_lst);
d116 1
a116 1
	xf86printInputClassSection (cf, cptr->conf_inputclass_lst);
d118 1
a118 1
	xf86printVideoAdaptorSection (cf, cptr->conf_videoadaptor_lst);
d120 1
a120 1
	xf86printModesSection (cf, cptr->conf_modes_lst);
d122 1
a122 1
	xf86printMonitorSection (cf, cptr->conf_monitor_lst);
d124 1
a124 1
	xf86printDeviceSection (cf, cptr->conf_device_lst);
d126 1
a126 1
	xf86printScreenSection (cf, cptr->conf_screen_lst);
d128 1
a128 1
	xf86printDRISection (cf, cptr->conf_dri);
d130 1
a130 1
	xf86printExtensionsSection (cf, cptr->conf_extensions);
d132 2
a133 2
	fclose(cf);
	return 1;
d139 1
a139 1
xf86writeConfigFile (const char *filename, XF86ConfigPtr cptr)
d141 1
a141 1
	int ret;
d144 3
a146 3
	int pid, p;
	int status;
	void (*csig)(int);
d148 1
a148 1
	int ruid, euid;
d151 1
a151 2
	if (getuid() != geteuid())
	{
d154 49
a202 55
		/* Need to fork to change ruid without loosing euid */
		csig = signal(SIGCHLD, SIG_DFL);
		switch ((pid = fork()))
		{
		case -1:
			ErrorF("xf86writeConfigFile(): fork failed (%s)\n",
					strerror(errno));
			return 0;
		case 0: /* child */
			if (setuid(getuid()) == -1) 
			    FatalError("xf86writeConfigFile(): "
				"setuid failed(%s)\n", 
				strerror(errno));
			ret = doWriteConfigFile(filename, cptr);
			exit(ret);
			break;
		default: /* parent */
			do
			{
				p = waitpid(pid, &status, 0);
			} while (p == -1 && errno == EINTR);
		}
		signal(SIGCHLD, csig);
		if (p != -1 && WIFEXITED(status) && WEXITSTATUS(status) == 0)
			return 1;	/* success */
		else
			return 0;

#else /* HAS_SAVED_IDS_AND_SETEUID */

		ruid = getuid();
		euid = geteuid();

		if (seteuid(ruid) == -1)
		{
			ErrorF("xf86writeConfigFile(): seteuid(%d) failed (%s)\n",
					ruid, strerror(errno));
			return 0;
		}
		ret = doWriteConfigFile(filename, cptr);

		if (seteuid(euid) == -1)
		{
			ErrorF("xf86writeConfigFile(): seteuid(%d) failed (%s)\n",
					euid, strerror(errno));
		}
		return ret;

#endif /* HAS_SAVED_IDS_AND_SETEUID */

	}
	else
	{
		return doWriteConfigFile(filename, cptr);
	}
d205 1
a205 1
#endif /* !HAS_NO_UIDS */
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a159 1
#ifdef SIGCHLD
a160 1
#endif
a180 1
#ifdef SIGCHLD
a181 1
#endif
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d120 2
@


1.1
log
@Initial revision
@
text
@a1 1
 * 
a70 9
#if ((defined(sun) && !defined(SVR4)) || defined(macII)) && !defined(__GLIBC__)
#ifndef strerror
extern char *sys_errlist[];
extern int sys_nerr;
#define strerror(n) \
	(((n) >= 0 && (n) < sys_nerr) ? sys_errlist[n] : "unknown error")
#endif
#endif

d74 1
a74 1
#if defined(__UNIXOS2__) || defined(WIN32)
d100 13
a112 7
	fprintf (cf, "Section \"Files\"\n");
	xf86printFileSection (cf, cptr->conf_files);
	fprintf (cf, "EndSection\n\n");

	fprintf (cf, "Section \"Module\"\n");
	xf86printModuleSection (cf, cptr->conf_modules);
	fprintf (cf, "EndSection\n\n");
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 1
d84 1
a84 1
#if defined(WIN32)
d110 7
a116 13
	if (cptr->conf_files != NULL)
	{
		fprintf (cf, "Section \"Files\"\n");
		xf86printFileSection (cf, cptr->conf_files);
		fprintf (cf, "EndSection\n\n");
	}

	if (cptr->conf_modules != NULL)
	{
		fprintf (cf, "Section \"Module\"\n");
		xf86printModuleSection (cf, cptr->conf_modules);
		fprintf (cf, "EndSection\n\n");
	}
@

