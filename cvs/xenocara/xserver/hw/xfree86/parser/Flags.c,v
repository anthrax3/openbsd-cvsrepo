head	1.9;
access;
symbols
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	Te1daavkBLskZ8gc;

1.8
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	cVXoV5PxI8YrEaVA;

1.7
date	2013.06.07.17.28.52;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.05.13.32.52;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.20.57;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.20.57;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.58.12;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright (c) 1997  Metro Link Incorporated
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Metro Link shall not be
 * used in advertising or otherwise to promote the sale, use or other dealings
 * in this Software without prior written authorization from Metro Link.
 *
 */
/*
 * Copyright (c) 1997-2003 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "xf86Parser.h"
#include "xf86tokens.h"
#include "Configint.h"
#include <X11/Xfuncproto.h>
#include "Xprintf.h"
#include "optionstr.h"


static xf86ConfigSymTabRec ServerFlagsTab[] = {
    {ENDSECTION, "endsection"},
    {NOTRAPSIGNALS, "notrapsignals"},
    {DONTZAP, "dontzap"},
    {DONTZOOM, "dontzoom"},
    {DISABLEVIDMODE, "disablevidmodeextension"},
    {ALLOWNONLOCAL, "allownonlocalxvidtune"},
    {DISABLEMODINDEV, "disablemodindev"},
    {MODINDEVALLOWNONLOCAL, "allownonlocalmodindev"},
    {ALLOWMOUSEOPENFAIL, "allowmouseopenfail"},
    {OPTION, "option"},
    {BLANKTIME, "blanktime"},
    {STANDBYTIME, "standbytime"},
    {SUSPENDTIME, "suspendtime"},
    {OFFTIME, "offtime"},
    {DEFAULTLAYOUT, "defaultserverlayout"},
    {-1, ""},
};

#define CLEANUP xf86freeFlags

XF86ConfFlagsPtr
xf86parseFlagsSection(void)
{
    int token;

    parsePrologue(XF86ConfFlagsPtr, XF86ConfFlagsRec)

        while ((token = xf86getToken(ServerFlagsTab)) != ENDSECTION) {
        int hasvalue = FALSE;
        int strvalue = FALSE;
        int tokentype;

        switch (token) {
        case COMMENT:
            ptr->flg_comment = xf86addComment(ptr->flg_comment, xf86_lex_val.str);
            break;
            /*
             * these old keywords are turned into standard generic options.
             * we fall through here on purpose
             */
        case DEFAULTLAYOUT:
            strvalue = TRUE;
        case BLANKTIME:
        case STANDBYTIME:
        case SUSPENDTIME:
        case OFFTIME:
            hasvalue = TRUE;
        case NOTRAPSIGNALS:
        case DONTZAP:
        case DONTZOOM:
        case DISABLEVIDMODE:
        case ALLOWNONLOCAL:
        case DISABLEMODINDEV:
        case MODINDEVALLOWNONLOCAL:
        case ALLOWMOUSEOPENFAIL:
        {
            int i = 0;

            while (ServerFlagsTab[i].token != -1) {
                char *tmp;

                if (ServerFlagsTab[i].token == token) {
                    char *valstr = NULL;

                    tmp = strdup(ServerFlagsTab[i].name);
                    if (hasvalue) {
                        tokentype = xf86getSubToken(&(ptr->flg_comment));
                        if (strvalue) {
                            if (tokentype != STRING)
                                Error(QUOTE_MSG, tmp);
                            valstr = xf86_lex_val.str;
                        }
                        else {
                            if (tokentype != NUMBER)
                                Error(NUMBER_MSG, tmp);
                            if (asprintf(&valstr, "%d", xf86_lex_val.num) == -1)
                                valstr = NULL;
                        }
                    }
                    ptr->flg_option_lst = xf86addNewOption
                        (ptr->flg_option_lst, tmp, valstr);
                }
                i++;
            }
        }
            break;
        case OPTION:
            ptr->flg_option_lst = xf86parseOption(ptr->flg_option_lst);
            break;

        case EOF_TOKEN:
            Error(UNEXPECTED_EOF_MSG);
            break;
        default:
            Error(INVALID_KEYWORD_MSG, xf86tokenString());
            break;
        }
    }

#ifdef DEBUG
    printf("Flags section parsed\n");
#endif

    return ptr;
}

#undef CLEANUP

void
xf86printServerFlagsSection(FILE * f, XF86ConfFlagsPtr flags)
{
    XF86OptionPtr p;

    if ((!flags) || (!flags->flg_option_lst))
        return;
    p = flags->flg_option_lst;
    fprintf(f, "Section \"ServerFlags\"\n");
    if (flags->flg_comment)
        fprintf(f, "%s", flags->flg_comment);
    xf86printOptionList(f, p, 1);
    fprintf(f, "EndSection\n\n");
}

static XF86OptionPtr
addNewOption2(XF86OptionPtr head, char *name, char *_val, int used)
{
    XF86OptionPtr new, old = NULL;

    /* Don't allow duplicates, free old strings */
    if (head != NULL && (old = xf86findOption(head, name)) != NULL) {
        new = old;
        free(new->opt_name);
        free(new->opt_val);
    }
    else
        new = calloc(1, sizeof(*new));
    new->opt_name = name;
    new->opt_val = _val;
    new->opt_used = used;

    if (old)
        return head;
    return ((XF86OptionPtr) xf86addListItem((glp) head, (glp) new));
}

XF86OptionPtr
xf86addNewOption(XF86OptionPtr head, char *name, char *_val)
{
    return addNewOption2(head, name, _val, 0);
}

void
xf86freeFlags(XF86ConfFlagsPtr flags)
{
    if (flags == NULL)
        return;
    xf86optionListFree(flags->flg_option_lst);
    TestFree(flags->flg_comment);
    free(flags);
}

XF86OptionPtr
xf86optionListDup(XF86OptionPtr opt)
{
    XF86OptionPtr newopt = NULL;
    char *_val;

    while (opt) {
        _val = opt->opt_val ? strdup(opt->opt_val) : NULL;
        newopt = xf86addNewOption(newopt, strdup(opt->opt_name), _val);
        newopt->opt_used = opt->opt_used;
        if (opt->opt_comment)
            newopt->opt_comment = strdup(opt->opt_comment);
        opt = opt->list.next;
    }
    return newopt;
}

void
xf86optionListFree(XF86OptionPtr opt)
{
    XF86OptionPtr prev;

    while (opt) {
        TestFree(opt->opt_name);
        TestFree(opt->opt_val);
        TestFree(opt->opt_comment);
        prev = opt;
        opt = opt->list.next;
        free(prev);
    }
}

char *
xf86optionName(XF86OptionPtr opt)
{
    if (opt)
        return opt->opt_name;
    return 0;
}

char *
xf86optionValue(XF86OptionPtr opt)
{
    if (opt)
        return opt->opt_val;
    return 0;
}

XF86OptionPtr
xf86newOption(char *name, char *value)
{
    XF86OptionPtr opt;

    opt = calloc(1, sizeof(*opt));
    if (!opt)
        return NULL;

    opt->opt_used = 0;
    opt->list.next = 0;
    opt->opt_name = name;
    opt->opt_val = value;

    return opt;
}

XF86OptionPtr
xf86nextOption(XF86OptionPtr list)
{
    if (!list)
        return NULL;
    return list->list.next;
}

/*
 * this function searches the given option list for the named option and
 * returns a pointer to the option rec if found. If not found, it returns
 * NULL
 */

XF86OptionPtr
xf86findOption(XF86OptionPtr list, const char *name)
{
    while (list) {
        if (xf86nameCompare(list->opt_name, name) == 0)
            return list;
        list = list->list.next;
    }
    return NULL;
}

/*
 * this function searches the given option list for the named option. If
 * found and the option has a parameter, a pointer to the parameter is
 * returned.  If the option does not have a parameter an empty string is
 * returned.  If the option is not found, a NULL is returned.
 */

const char *
xf86findOptionValue(XF86OptionPtr list, const char *name)
{
    XF86OptionPtr p = xf86findOption(list, name);

    if (p) {
        if (p->opt_val)
            return p->opt_val;
        else
            return "";
    }
    return NULL;
}

XF86OptionPtr
xf86optionListCreate(const char **options, int count, int used)
{
    XF86OptionPtr p = NULL;
    char *t1, *t2;
    int i;

    if (count == -1) {
        for (count = 0; options[count]; count++);
    }
    if ((count % 2) != 0) {
        fprintf(stderr,
                "xf86optionListCreate: count must be an even number.\n");
        return NULL;
    }
    for (i = 0; i < count; i += 2) {
        t1 = strdup(options[i]);
        t2 = strdup(options[i + 1]);
        p = addNewOption2(p, t1, t2, used);
    }

    return p;
}

/* the 2 given lists are merged. If an option with the same name is present in
 * both, the option from the user list - specified in the second argument -
 * is used. The end result is a single valid list of options. Duplicates
 * are freed, and the original lists are no longer guaranteed to be complete.
 */
XF86OptionPtr
xf86optionListMerge(XF86OptionPtr head, XF86OptionPtr tail)
{
    XF86OptionPtr a, b, ap = NULL, bp = NULL;

    a = tail;
    b = head;
    while (tail && b) {
        if (xf86nameCompare(a->opt_name, b->opt_name) == 0) {
            if (b == head)
                head = a;
            else
                bp->list.next = a;
            if (a == tail)
                tail = a->list.next;
            else
                ap->list.next = a->list.next;
            a->list.next = b->list.next;
            b->list.next = NULL;
            xf86optionListFree(b);
            b = a->list.next;
            bp = a;
            a = tail;
            ap = NULL;
        }
        else {
            ap = a;
            if (!(a = a->list.next)) {
                a = tail;
                bp = b;
                b = b->list.next;
                ap = NULL;
            }
        }
    }

    if (head) {
        for (a = head; a->list.next; a = a->list.next);
        a->list.next = tail;
    }
    else
        head = tail;

    return head;
}

char *
xf86uLongToString(unsigned long i)
{
    char *s;

    if (asprintf(&s, "%lu", i) == -1)
        return NULL;
    return s;
}

XF86OptionPtr
xf86parseOption(XF86OptionPtr head)
{
    XF86OptionPtr option, cnew, old;
    char *name, *comment = NULL;
    int token;

    if ((token = xf86getSubToken(&comment)) != STRING) {
        xf86parseError(BAD_OPTION_MSG);
        free(comment);
        return head;
    }

    name = xf86_lex_val.str;
    if ((token = xf86getSubToken(&comment)) == STRING) {
        option = xf86newOption(name, xf86_lex_val.str);
        option->opt_comment = comment;
        if ((token = xf86getToken(NULL)) == COMMENT)
            option->opt_comment = xf86addComment(option->opt_comment, xf86_lex_val.str);
        else
            xf86unGetToken(token);
    }
    else {
        option = xf86newOption(name, NULL);
        option->opt_comment = comment;
        if (token == COMMENT)
            option->opt_comment = xf86addComment(option->opt_comment, xf86_lex_val.str);
        else
            xf86unGetToken(token);
    }

    old = NULL;

    /* Don't allow duplicates */
    if (head != NULL && (old = xf86findOption(head, name)) != NULL) {
        cnew = old;
        free(option->opt_name);
        TestFree(option->opt_val);
        TestFree(option->opt_comment);
        free(option);
    }
    else
        cnew = option;

    if (old == NULL)
        return ((XF86OptionPtr) xf86addListItem((glp) head, (glp) cnew));

    return head;
}

void
xf86printOptionList(FILE * fp, XF86OptionPtr list, int tabs)
{
    int i;

    if (!list)
        return;
    while (list) {
        for (i = 0; i < tabs; i++)
            fputc('\t', fp);
        if (list->opt_val)
            fprintf(fp, "Option	    \"%s\" \"%s\"", list->opt_name,
                    list->opt_val);
        else
            fprintf(fp, "Option	    \"%s\"", list->opt_name);
        if (list->opt_comment)
            fprintf(fp, "%s", list->opt_comment);
        else
            fputc('\n', fp);
        list = list->list.next;
    }
}
@


1.8
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d1 1
a1 1
/* 
d3 1
a3 1
 * 
d5 1
a5 1
 * copy of this software and associated documentation files (the "Software"), 
d10 1
a10 1
 * 
d13 1
a13 1
 * 
d21 1
a21 1
 * 
d25 1
a25 1
 * 
d103 1
a103 1
            /* 
@


1.7
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a64 1
extern LexRec val;
d101 1
a101 1
            ptr->flg_comment = xf86addComment(ptr->flg_comment, val.str);
d137 1
a137 1
                            valstr = val.str;
d142 1
a142 1
                            if (asprintf(&valstr, "%d", val.num) == -1)
d191 1
a191 1
addNewOption2(XF86OptionPtr head, char *name, char *val, int used)
d204 1
a204 1
    new->opt_val = val;
d213 1
a213 1
xf86addNewOption(XF86OptionPtr head, char *name, char *val)
d215 1
a215 1
    return addNewOption2(head, name, val, 0);
d232 1
a232 1
    char *val;
d235 2
a236 2
        val = opt->opt_val ? strdup(opt->opt_val) : NULL;
        newopt = xf86addNewOption(newopt, strdup(opt->opt_name), val);
d437 1
a437 1
    name = val.str;
d439 1
a439 1
        option = xf86newOption(name, val.str);
d442 1
a442 1
            option->opt_comment = xf86addComment(option->opt_comment, val.str);
d450 1
a450 1
            option->opt_comment = xf86addComment(option->opt_comment, val.str);
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a53 2
/* View/edit this file with tab stops set to 4 */

@


1.5
log
@Update to xserver 1.11.2
@
text
@a53 1

d65 1
d69 17
a85 18
static xf86ConfigSymTabRec ServerFlagsTab[] =
{
	{ENDSECTION, "endsection"},
	{NOTRAPSIGNALS, "notrapsignals"},
	{DONTZAP, "dontzap"},
	{DONTZOOM, "dontzoom"},
	{DISABLEVIDMODE, "disablevidmodeextension"},
	{ALLOWNONLOCAL, "allownonlocalxvidtune"},
	{DISABLEMODINDEV, "disablemodindev"},
	{MODINDEVALLOWNONLOCAL, "allownonlocalmodindev"},
	{ALLOWMOUSEOPENFAIL, "allowmouseopenfail"},
	{OPTION, "option"},
	{BLANKTIME, "blanktime"},
	{STANDBYTIME, "standbytime"},
	{SUSPENDTIME, "suspendtime"},
	{OFFTIME, "offtime"},
	{DEFAULTLAYOUT, "defaultserverlayout"},
	{-1, ""},
d91 1
a91 1
xf86parseFlagsSection (void)
d93 3
a95 2
	int token;
	parsePrologue (XF86ConfFlagsPtr, XF86ConfFlagsRec)
d97 71
a167 72
	while ((token = xf86getToken (ServerFlagsTab)) != ENDSECTION)
	{
		int hasvalue = FALSE;
		int strvalue = FALSE;
		int tokentype;
		switch (token)
		{
		case COMMENT:
			ptr->flg_comment = xf86addComment(ptr->flg_comment, val.str);
			break;
			/* 
			 * these old keywords are turned into standard generic options.
			 * we fall through here on purpose
			 */
		case DEFAULTLAYOUT:
			strvalue = TRUE;
		case BLANKTIME:
		case STANDBYTIME:
		case SUSPENDTIME:
		case OFFTIME:
			hasvalue = TRUE;
		case NOTRAPSIGNALS:
		case DONTZAP:
		case DONTZOOM:
		case DISABLEVIDMODE:
		case ALLOWNONLOCAL:
		case DISABLEMODINDEV:
		case MODINDEVALLOWNONLOCAL:
		case ALLOWMOUSEOPENFAIL:
			{
				int i = 0;
				while (ServerFlagsTab[i].token != -1)
				{
					char *tmp;

					if (ServerFlagsTab[i].token == token)
					{
						char *valstr = NULL;
						tmp = strdup (ServerFlagsTab[i].name);
						if (hasvalue)
						{
							tokentype = xf86getSubToken(&(ptr->flg_comment));
							if (strvalue) {
								if (tokentype != STRING)
									Error (QUOTE_MSG, tmp);
								valstr = val.str;
							} else {
								if (tokentype != NUMBER)
									Error (NUMBER_MSG, tmp);
								if (asprintf(&valstr, "%d", val.num) == -1)
									valstr = NULL;
							}
						}
						ptr->flg_option_lst = xf86addNewOption
							(ptr->flg_option_lst, tmp, valstr);
					}
					i++;
				}
			}
			break;
		case OPTION:
			ptr->flg_option_lst = xf86parseOption(ptr->flg_option_lst);
			break;

		case EOF_TOKEN:
			Error (UNEXPECTED_EOF_MSG, NULL);
			break;
		default:
			Error (INVALID_KEYWORD_MSG, xf86tokenString ());
			break;
		}
	}
d170 1
a170 1
	printf ("Flags section parsed\n");
d173 1
a173 1
	return ptr;
d179 1
a179 1
xf86printServerFlagsSection (FILE * f, XF86ConfFlagsPtr flags)
d181 1
a181 1
	XF86OptionPtr p;
d183 8
a190 8
	if ((!flags) || (!flags->flg_option_lst))
		return;
	p = flags->flg_option_lst;
	fprintf (f, "Section \"ServerFlags\"\n");
	if (flags->flg_comment)
		fprintf (f, "%s", flags->flg_comment);
	xf86printOptionList(f, p, 1);
	fprintf (f, "EndSection\n\n");
d194 1
a194 1
addNewOption2 (XF86OptionPtr head, char *name, char *val, int used)
d196 1
a196 1
	XF86OptionPtr new, old = NULL;
d198 15
a212 15
	/* Don't allow duplicates, free old strings */
	if (head != NULL && (old = xf86findOption(head, name)) != NULL) {
		new = old;
		free(new->opt_name);
		free(new->opt_val);
	}
	else
		new = calloc (1, sizeof (XF86OptionRec));
	new->opt_name = name;
	new->opt_val = val;
	new->opt_used = used;

	if (old)
		return head;
	return ((XF86OptionPtr) xf86addListItem ((glp) head, (glp) new));
d216 1
a216 1
xf86addNewOption (XF86OptionPtr head, char *name, char *val)
d218 1
a218 1
	return addNewOption2(head, name, val, 0);
d222 1
a222 1
xf86freeFlags (XF86ConfFlagsPtr flags)
d224 5
a228 5
	if (flags == NULL)
		return;
	xf86optionListFree (flags->flg_option_lst);
	TestFree(flags->flg_comment);
	free (flags);
d232 1
a232 1
xf86optionListDup (XF86OptionPtr opt)
d234 2
a235 2
	XF86OptionPtr newopt = NULL;
	char *val;
d237 9
a245 10
	while (opt)
	{
		val = opt->opt_val ? strdup(opt->opt_val) : NULL;
		newopt = xf86addNewOption(newopt, strdup(opt->opt_name), val);
		newopt->opt_used = opt->opt_used;
		if (opt->opt_comment)
			newopt->opt_comment = strdup(opt->opt_comment);
		opt = opt->list.next;
	}
	return newopt;
d249 1
a249 1
xf86optionListFree (XF86OptionPtr opt)
d251 1
a251 1
	XF86OptionPtr prev;
d253 8
a260 9
	while (opt)
	{
		TestFree (opt->opt_name);
		TestFree (opt->opt_val);
		TestFree (opt->opt_comment);
		prev = opt;
		opt = opt->list.next;
		free (prev);
	}
d266 3
a268 3
	if (opt)
		return opt->opt_name;
	return 0;
d274 3
a276 3
	if (opt)
		return opt->opt_val;
	return 0;
d282 1
a282 1
	XF86OptionPtr opt;
d284 8
a291 8
	opt = calloc(1, sizeof (XF86OptionRec));
	if (!opt)
		return NULL;

	opt->opt_used = 0;
	opt->list.next = 0;
	opt->opt_name = name;
	opt->opt_val = value;
d293 1
a293 1
	return opt;
d299 3
a301 3
	if (!list)
		return NULL;
	return list->list.next;
d311 1
a311 1
xf86findOption (XF86OptionPtr list, const char *name)
d313 6
a318 7
	while (list)
	{
		if (xf86nameCompare (list->opt_name, name) == 0)
			return list;
		list = list->list.next;
	}
	return NULL;
d328 2
a329 2
char *
xf86findOptionValue (XF86OptionPtr list, const char *name)
d331 1
a331 1
	XF86OptionPtr p = xf86findOption (list, name);
d333 7
a339 8
	if (p)
	{
		if (p->opt_val)
			return p->opt_val;
		else
			return "";
	}
	return NULL;
d343 1
a343 1
xf86optionListCreate( const char **options, int count, int used )
d345 17
a361 20
	XF86OptionPtr p = NULL;
	char *t1, *t2;
	int i;

	if (count == -1)
	{
		for (count = 0; options[count]; count++)
			;
	}
	if( (count % 2) != 0 )
	{
		fprintf( stderr, "xf86optionListCreate: count must be an even number.\n" );
		return NULL;
	}
	for (i = 0; i < count; i += 2)
	{
		t1 = strdup(options[i]);
		t2 = strdup(options[i + 1]);
		p = addNewOption2 (p, t1, t2, used);
	}
d363 1
a363 1
	return p;
d372 1
a372 1
xf86optionListMerge (XF86OptionPtr head, XF86OptionPtr tail)
d374 1
a374 1
	XF86OptionPtr a, b, ap = NULL, bp = NULL;
d376 37
a412 36
	a = tail;
	b = head;
	while (tail && b) {
		if (xf86nameCompare (a->opt_name, b->opt_name) == 0) {
			if (b == head)
				head = a;
			else
				bp->list.next = a;
			if (a == tail)
				tail = a->list.next;
			else
				ap->list.next = a->list.next;
			a->list.next = b->list.next;
			b->list.next = NULL;
			xf86optionListFree (b);
			b = a->list.next;
			bp = a;
			a = tail;
			ap = NULL;
		} else {
			ap = a;
			if (!(a = a->list.next)) {
				a = tail;
				bp = b;
				b = b->list.next;
				ap = NULL;
			}
		}
	}

	if (head) {
		for (a = head; a->list.next; a = a->list.next)
			;
		a->list.next = tail;
	} else 
		head = tail;
d414 1
a414 1
	return head;
d420 1
a420 1
	char *s;
d422 3
a424 3
	if (asprintf(&s, "%lu", i) == -1)
		return NULL;
	return s;
d430 43
a472 43
	XF86OptionPtr option, cnew, old;
	char *name, *comment = NULL;
	int token;

	if ((token = xf86getSubToken(&comment)) != STRING) {
		xf86parseError(BAD_OPTION_MSG, NULL);
		free(comment);
		return head;
	}

	name = val.str;
	if ((token = xf86getSubToken(&comment)) == STRING) {
		option = xf86newOption(name, val.str);
		option->opt_comment = comment;
		if ((token = xf86getToken(NULL)) == COMMENT)
			option->opt_comment = xf86addComment(option->opt_comment, val.str);
		else
			xf86unGetToken(token);
	}
	else {
		option = xf86newOption(name, NULL);
		option->opt_comment = comment;
		if (token == COMMENT)
			option->opt_comment = xf86addComment(option->opt_comment, val.str);
		else
			xf86unGetToken(token);
	}

	old = NULL;

	/* Don't allow duplicates */
	if (head != NULL && (old = xf86findOption(head, name)) != NULL) {
		cnew = old;
		free(option->opt_name);
		TestFree(option->opt_val);
		TestFree(option->opt_comment);
		free(option);
	}
	else
		cnew = option;
	
	if (old == NULL)
		return ((XF86OptionPtr)xf86addListItem((glp)head, (glp)cnew));
d474 1
a474 1
	return head;
d478 1
a478 1
xf86printOptionList(FILE *fp, XF86OptionPtr list, int tabs)
d480 1
a480 1
	int i;
d482 16
a497 15
	if (!list)
		return;
	while (list) {
		for (i = 0; i < tabs; i++)
			fputc('\t', fp);
		if (list->opt_val)
			fprintf(fp, "Option	    \"%s\" \"%s\"", list->opt_name, list->opt_val);
		else
			fprintf(fp, "Option	    \"%s\"", list->opt_name);
		if (list->opt_comment)
			fprintf(fp, "%s", list->opt_comment);
		else
			fputc('\n', fp);
		list = list->list.next;
	}
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a63 1
#include <math.h>
d65 1
a134 1
						/* can't use strdup because it calls malloc */
d146 2
a147 3
								valstr = malloc(16);
								if (valstr)
									sprintf(valstr, "%d", val.num);
d366 2
a367 7
		/* can't use strdup because it calls malloc */
		t1 = malloc (sizeof (char) *
				(strlen (options[i]) + 1));
		strcpy (t1, options[i]);
		t2 = malloc (sizeof (char) *
				(strlen (options[i + 1]) + 1));
		strcpy (t2, options[i + 1]);
a427 1
	int l;
d429 1
a429 3
	l = ceil(log10((double)i) + 2.5);
	s = malloc(l);
	if (!s)
a430 1
	sprintf(s, "%lu", i);
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d321 1
a321 1
			return (list);
d324 1
a324 1
	return (NULL);
d342 1
a342 1
			return (p->opt_val);
d346 1
a346 1
	return (NULL);
d364 1
a364 1
		return (NULL);
d378 1
a378 1
	return (p);
d428 1
a428 1
	return (head);
d454 2
a455 3
		if (comment)
			free(comment);
		return (head);
d492 1
a492 1
	return (head);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a1 1
 * 
d136 1
a136 1
						tmp = xf86configStrdup (ServerFlagsTab[i].name);
d147 1
a147 1
								valstr = xf86confmalloc(16);
d204 2
a205 2
		xf86conffree(new->opt_name);
		xf86conffree(new->opt_val);
d208 1
a208 1
		new = xf86confcalloc (1, sizeof (XF86OptionRec));
d231 1
a231 1
	xf86conffree (flags);
d238 1
d242 2
a243 2
		newopt = xf86addNewOption(newopt, xf86configStrdup(opt->opt_name), 
					  xf86configStrdup(opt->opt_val));
d246 1
a246 1
			newopt->opt_comment = xf86configStrdup(opt->opt_comment);
d264 1
a264 1
		xf86conffree (prev);
d289 1
a289 1
	opt = xf86confcalloc(1, sizeof (XF86OptionRec));
d334 1
a334 1
_X_EXPORT char *
d369 1
a369 1
		t1 = xf86confmalloc (sizeof (char) *
d372 1
a372 1
		t2 = xf86confmalloc (sizeof (char) *
d437 2
a438 2
	l = (int)(ceil(log10((double)i) + 2.5));
	s = xf86confmalloc(l);
d455 1
a455 1
			xf86conffree(comment);
d482 1
a482 1
		xf86conffree(option->opt_name);
d485 1
a485 1
		xf86conffree(option);
@


1.1
log
@Initial revision
@
text
@d66 1
d202 7
a208 4
	/* Don't allow duplicates */
 	if (head != NULL && (old = xf86findOption(head, name)) != NULL)
 		new = old;
 	else {
d210 7
a216 10
 		new->list.next = NULL;
 	}
 	new->opt_name = name;
 	new->opt_val = val;
 	new->opt_used = used;
	
  	if (old == NULL)
		return ((XF86OptionPtr) xf86addListItem ((glp) head, (glp) new));
 	else 
 		return head;
d334 1
a334 1
char *
a442 9
}

void
xf86debugListOptions(XF86OptionPtr Options)
{
	while (Options) {
		ErrorF("Option: %s Value: %s\n",Options->opt_name,Options->opt_val);
		Options = Options->list.next;
	}
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d201 4
a204 7
	/* Don't allow duplicates, free old strings */
	if (head != NULL && (old = xf86findOption(head, name)) != NULL) {
		new = old;
		xf86conffree(new->opt_name);
		xf86conffree(new->opt_val);
	}
	else
d206 10
a215 7
	new->opt_name = name;
	new->opt_val = val;
	new->opt_used = used;

	if (old)
		return head;
	return ((XF86OptionPtr) xf86addListItem ((glp) head, (glp) new));
d442 9
@

