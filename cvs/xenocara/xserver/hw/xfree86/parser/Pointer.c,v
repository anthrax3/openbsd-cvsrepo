head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.6
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	Te1daavkBLskZ8gc;

1.6
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	cVXoV5PxI8YrEaVA;

1.5
date	2013.06.07.17.28.52;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.52;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.20.57;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.20.57;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 *
 * Copyright (c) 1997  Metro Link Incorporated
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Metro Link shall not be
 * used in advertising or otherwise to promote the sale, use or other dealings
 * in this Software without prior written authorization from Metro Link.
 *
 */
/*
 * Copyright (c) 1997-2003 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "xf86Parser.h"
#include "xf86tokens.h"
#include "Configint.h"
#include "Xprintf.h"


static xf86ConfigSymTabRec PointerTab[] = {
    {PROTOCOL, "protocol"},
    {EMULATE3, "emulate3buttons"},
    {EM3TIMEOUT, "emulate3timeout"},
    {ENDSUBSECTION, "endsubsection"},
    {ENDSECTION, "endsection"},
    {PDEVICE, "device"},
    {PDEVICE, "port"},
    {BAUDRATE, "baudrate"},
    {SAMPLERATE, "samplerate"},
    {CLEARDTR, "cleardtr"},
    {CLEARRTS, "clearrts"},
    {CHORDMIDDLE, "chordmiddle"},
    {PRESOLUTION, "resolution"},
    {DEVICE_NAME, "devicename"},
    {ALWAYSCORE, "alwayscore"},
    {PBUTTONS, "buttons"},
    {ZAXISMAPPING, "zaxismapping"},
    {-1, ""},
};

static xf86ConfigSymTabRec ZMapTab[] = {
    {XAXIS, "x"},
    {YAXIS, "y"},
    {-1, ""},
};

#define CLEANUP xf86freeInputList

XF86ConfInputPtr
xf86parsePointerSection(void)
{
    char *s;
    unsigned long val1;
    int token;

    parsePrologue(XF86ConfInputPtr, XF86ConfInputRec)

        while ((token = xf86getToken(PointerTab)) != ENDSECTION) {
        switch (token) {
        case COMMENT:
            ptr->inp_comment = xf86addComment(ptr->inp_comment, xf86_lex_val.str);
            break;
        case PROTOCOL:
            if (xf86getSubToken(&(ptr->inp_comment)) != STRING)
                Error(QUOTE_MSG, "Protocol");
            ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
                                                   strdup("Protocol"), xf86_lex_val.str);
            break;
        case PDEVICE:
            if (xf86getSubToken(&(ptr->inp_comment)) != STRING)
                Error(QUOTE_MSG, "Device");
            ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
                                                   strdup("Device"), xf86_lex_val.str);
            break;
        case EMULATE3:
            ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
                                                   strdup("Emulate3Buttons"),
                                                   NULL);
            break;
        case EM3TIMEOUT:
            if (xf86getSubToken(&(ptr->inp_comment)) != NUMBER || xf86_lex_val.num < 0)
                Error(POSITIVE_INT_MSG, "Emulate3Timeout");
            s = xf86uLongToString(xf86_lex_val.num);
            ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
                                                   strdup("Emulate3Timeout"),
                                                   s);
            break;
        case CHORDMIDDLE:
            ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
                                                   strdup("ChordMiddle"), NULL);
            break;
        case PBUTTONS:
            if (xf86getSubToken(&(ptr->inp_comment)) != NUMBER || xf86_lex_val.num < 0)
                Error(POSITIVE_INT_MSG, "Buttons");
            s = xf86uLongToString(xf86_lex_val.num);
            ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
                                                   strdup("Buttons"), s);
            break;
        case BAUDRATE:
            if (xf86getSubToken(&(ptr->inp_comment)) != NUMBER || xf86_lex_val.num < 0)
                Error(POSITIVE_INT_MSG, "BaudRate");
            s = xf86uLongToString(xf86_lex_val.num);
            ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
                                                   strdup("BaudRate"), s);
            break;
        case SAMPLERATE:
            if (xf86getSubToken(&(ptr->inp_comment)) != NUMBER || xf86_lex_val.num < 0)
                Error(POSITIVE_INT_MSG, "SampleRate");
            s = xf86uLongToString(xf86_lex_val.num);
            ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
                                                   strdup("SampleRate"), s);
            break;
        case PRESOLUTION:
            if (xf86getSubToken(&(ptr->inp_comment)) != NUMBER || xf86_lex_val.num < 0)
                Error(POSITIVE_INT_MSG, "Resolution");
            s = xf86uLongToString(xf86_lex_val.num);
            ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
                                                   strdup("Resolution"), s);
            break;
        case CLEARDTR:
            ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
                                                   strdup("ClearDTR"), NULL);
            break;
        case CLEARRTS:
            ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
                                                   strdup("ClearRTS"), NULL);
            break;
        case ZAXISMAPPING:
            switch (xf86getToken(ZMapTab)) {
            case NUMBER:
                if (xf86_lex_val.num < 0)
                    Error(ZAXISMAPPING_MSG);
                val1 = xf86_lex_val.num;
                if (xf86getSubToken(&(ptr->inp_comment)) != NUMBER ||
                    xf86_lex_val.num < 0) {
                    Error(ZAXISMAPPING_MSG);
                }
                if (asprintf(&s, "%lu %u", val1, xf86_lex_val.num) == -1)
                    s = NULL;
                break;
            case XAXIS:
                s = strdup("x");
                break;
            case YAXIS:
                s = strdup("y");
                break;
            default:
                Error(ZAXISMAPPING_MSG);
                break;
            }
            ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
                                                   strdup("ZAxisMapping"), s);
            break;
        case ALWAYSCORE:
            break;
        case EOF_TOKEN:
            Error(UNEXPECTED_EOF_MSG);
            break;
        default:
            Error(INVALID_KEYWORD_MSG, xf86tokenString());
            break;
        }
    }

    ptr->inp_identifier = strdup(CONF_IMPLICIT_POINTER);
    ptr->inp_driver = strdup("mouse");
    ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
                                           strdup("CorePointer"), NULL);

#ifdef DEBUG
    printf("Pointer section parsed\n");
#endif

    return ptr;
}

#undef CLEANUP
@


1.6
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d1 2
a2 2
/* 
 * 
d4 1
a4 1
 * 
d6 1
a6 1
 * copy of this software and associated documentation files (the "Software"), 
d11 1
a11 1
 * 
d14 1
a14 1
 * 
d22 1
a22 1
 * 
d26 1
a26 1
 * 
@


1.5
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a63 1
extern LexRec val;
d106 1
a106 1
            ptr->inp_comment = xf86addComment(ptr->inp_comment, val.str);
d112 1
a112 1
                                                   strdup("Protocol"), val.str);
d118 1
a118 1
                                                   strdup("Device"), val.str);
d126 1
a126 1
            if (xf86getSubToken(&(ptr->inp_comment)) != NUMBER || val.num < 0)
d128 1
a128 1
            s = xf86uLongToString(val.num);
d138 1
a138 1
            if (xf86getSubToken(&(ptr->inp_comment)) != NUMBER || val.num < 0)
d140 1
a140 1
            s = xf86uLongToString(val.num);
d145 1
a145 1
            if (xf86getSubToken(&(ptr->inp_comment)) != NUMBER || val.num < 0)
d147 1
a147 1
            s = xf86uLongToString(val.num);
d152 1
a152 1
            if (xf86getSubToken(&(ptr->inp_comment)) != NUMBER || val.num < 0)
d154 1
a154 1
            s = xf86uLongToString(val.num);
d159 1
a159 1
            if (xf86getSubToken(&(ptr->inp_comment)) != NUMBER || val.num < 0)
d161 1
a161 1
            s = xf86uLongToString(val.num);
d176 1
a176 1
                if (val.num < 0)
d178 1
a178 1
                val1 = val.num;
d180 1
a180 1
                    val.num < 0) {
d183 1
a183 1
                if (asprintf(&s, "%lu %u", val1, val.num) == -1)
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a54 2
/* View/edit this file with tab stops set to 4 */

@


1.3
log
@Update to xserver 1.11.2
@
text
@a54 1

d68 19
a86 20
static xf86ConfigSymTabRec PointerTab[] =
{
	{PROTOCOL, "protocol"},
	{EMULATE3, "emulate3buttons"},
	{EM3TIMEOUT, "emulate3timeout"},
	{ENDSUBSECTION, "endsubsection"},
	{ENDSECTION, "endsection"},
	{PDEVICE, "device"},
	{PDEVICE, "port"},
	{BAUDRATE, "baudrate"},
	{SAMPLERATE, "samplerate"},
	{CLEARDTR, "cleardtr"},
	{CLEARRTS, "clearrts"},
	{CHORDMIDDLE, "chordmiddle"},
	{PRESOLUTION, "resolution"},
	{DEVICE_NAME, "devicename"},
	{ALWAYSCORE, "alwayscore"},
	{PBUTTONS, "buttons"},
	{ZAXISMAPPING, "zaxismapping"},
	{-1, ""},
d89 4
a92 5
static xf86ConfigSymTabRec ZMapTab[] =
{
	{XAXIS, "x"},
	{YAXIS, "y"},
	{-1, ""},
d98 1
a98 1
xf86parsePointerSection (void)
d100 117
a216 121
	char *s;
	unsigned long val1;
	int token;
	parsePrologue (XF86ConfInputPtr, XF86ConfInputRec)

	while ((token = xf86getToken (PointerTab)) != ENDSECTION)
	{
		switch (token)
		{
		case COMMENT:
			ptr->inp_comment = xf86addComment(ptr->inp_comment, val.str);
			break;
		case PROTOCOL:
			if (xf86getSubToken (&(ptr->inp_comment)) != STRING)
				Error (QUOTE_MSG, "Protocol");
			ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
												strdup("Protocol"),
												val.str);
			break;
		case PDEVICE:
			if (xf86getSubToken (&(ptr->inp_comment)) != STRING)
				Error (QUOTE_MSG, "Device");
			ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
												strdup("Device"),
												val.str);
			break;
		case EMULATE3:
			ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
												strdup("Emulate3Buttons"),
												NULL);
			break;
		case EM3TIMEOUT:
			if (xf86getSubToken (&(ptr->inp_comment)) != NUMBER || val.num < 0)
				Error (POSITIVE_INT_MSG, "Emulate3Timeout");
			s = xf86uLongToString(val.num);
			ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
												strdup("Emulate3Timeout"),
												s);
			break;
		case CHORDMIDDLE:
			ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
												strdup("ChordMiddle"),
												NULL);
			break;
		case PBUTTONS:
			if (xf86getSubToken (&(ptr->inp_comment)) != NUMBER || val.num < 0)
				Error (POSITIVE_INT_MSG, "Buttons");
			s = xf86uLongToString(val.num);
			ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
												strdup("Buttons"), s);
			break;
		case BAUDRATE:
			if (xf86getSubToken (&(ptr->inp_comment)) != NUMBER || val.num < 0)
				Error (POSITIVE_INT_MSG, "BaudRate");
			s = xf86uLongToString(val.num);
			ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
												strdup("BaudRate"), s);
			break;
		case SAMPLERATE:
			if (xf86getSubToken (&(ptr->inp_comment)) != NUMBER || val.num < 0)
				Error (POSITIVE_INT_MSG, "SampleRate");
			s = xf86uLongToString(val.num);
			ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
												strdup("SampleRate"), s);
			break;
		case PRESOLUTION:
			if (xf86getSubToken (&(ptr->inp_comment)) != NUMBER || val.num < 0)
				Error (POSITIVE_INT_MSG, "Resolution");
			s = xf86uLongToString(val.num);
			ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
												strdup("Resolution"), s);
			break;
		case CLEARDTR:
			ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
												strdup("ClearDTR"), NULL);
			break;
		case CLEARRTS:
			ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
												strdup("ClearRTS"), NULL);
			break;
		case ZAXISMAPPING:
			switch (xf86getToken(ZMapTab)) {
			case NUMBER:
				if (val.num < 0)
					Error (ZAXISMAPPING_MSG, NULL);
				val1 = val.num;
				if (xf86getSubToken (&(ptr->inp_comment)) != NUMBER || val.num < 0) {
					Error (ZAXISMAPPING_MSG, NULL);
				}
				if (asprintf(&s, "%lu %u", val1, val.num) == -1)
				    s = NULL;
				break;
			case XAXIS:
				s = strdup("x");
				break;
			case YAXIS:
				s = strdup("y");
				break;
			default:
				Error (ZAXISMAPPING_MSG, NULL);
				break;
			}
			ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
												strdup("ZAxisMapping"),
												s);
			break;
		case ALWAYSCORE:
			break;
		case EOF_TOKEN:
			Error (UNEXPECTED_EOF_MSG, NULL);
			break;
		default:
			Error (INVALID_KEYWORD_MSG, xf86tokenString ());
			break;
		}
	}

	ptr->inp_identifier = strdup(CONF_IMPLICIT_POINTER);
	ptr->inp_driver = strdup("mouse");
	ptr->inp_option_lst = xf86addNewOption(ptr->inp_option_lst,
										strdup("CorePointer"), NULL);
d219 1
a219 1
	printf ("Pointer section parsed\n");
d222 1
a222 1
	return ptr;
a225 1

@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d65 1
d103 2
a104 2
	char *s, *s1, *s2;
	int l;
d188 1
a188 1
				s1 = xf86uLongToString(val.num);
a189 1
					free(s1);
d192 2
a193 6
				s2 = xf86uLongToString(val.num);
				l = strlen(s1) + 1 + strlen(s2) + 1;
				s = malloc(l);
				sprintf(s, "%s %s", s1, s2);
				free(s1);
				free(s2);
@


1.1
log
@Initial revision
@
text
@d118 1
a118 1
												xf86configStrdup("Protocol"),
d125 1
a125 1
												xf86configStrdup("Device"),
d130 1
a130 1
												xf86configStrdup("Emulate3Buttons"),
d138 1
a138 1
												xf86configStrdup("Emulate3Timeout"),
d143 1
a143 1
												xf86configStrdup("ChordMiddle"),
d151 1
a151 1
												xf86configStrdup("Buttons"), s);
d158 1
a158 1
												xf86configStrdup("BaudRate"), s);
d165 1
a165 1
												xf86configStrdup("SampleRate"), s);
d172 1
a172 1
												xf86configStrdup("Resolution"), s);
d176 1
a176 1
												xf86configStrdup("ClearDTR"), NULL);
d180 1
a180 1
												xf86configStrdup("ClearRTS"), NULL);
d189 1
a189 1
					xf86conffree(s1);
d194 1
a194 1
				s = xf86confmalloc(l);
d196 2
a197 2
				xf86conffree(s1);
				xf86conffree(s2);
d200 1
a200 1
				s = xf86configStrdup("x");
d203 1
a203 1
				s = xf86configStrdup("y");
d210 1
a210 1
												xf86configStrdup("ZAxisMapping"),
d224 2
a225 2
	ptr->inp_identifier = xf86configStrdup(CONF_IMPLICIT_POINTER);
	ptr->inp_driver = xf86configStrdup("mouse");
d227 1
a227 1
										xf86configStrdup("CorePointer"), NULL);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
