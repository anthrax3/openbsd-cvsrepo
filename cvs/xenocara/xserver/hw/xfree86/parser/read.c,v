head	1.9;
access;
symbols
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.6
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	Te1daavkBLskZ8gc;

1.8
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	cVXoV5PxI8YrEaVA;

1.7
date	2013.06.07.17.28.52;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.27;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.20.57;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.20.57;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.58.14;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 *
 * Copyright (c) 1997  Metro Link Incorporated
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Metro Link shall not be
 * used in advertising or otherwise to promote the sale, use or other dealings
 * in this Software without prior written authorization from Metro Link.
 *
 */
/*
 * Copyright (c) 1997-2003 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "xf86Parser.h"
#include "xf86tokens.h"
#include "Configint.h"


static xf86ConfigSymTabRec TopLevelTab[] = {
    {SECTION, "section"},
    {-1, ""},
};

#define CLEANUP xf86freeConfig

/*
 * This function resolves name references and reports errors if the named
 * objects cannot be found.
 */
static int
xf86validateConfig(XF86ConfigPtr p)
{
    if (!xf86validateScreen(p))
        return FALSE;
    if (!xf86validateInput(p))
        return FALSE;
    if (!xf86validateLayout(p))
        return FALSE;

    return TRUE;
}

XF86ConfigPtr
xf86readConfigFile(void)
{
    int token;
    XF86ConfigPtr ptr = NULL;

    if ((ptr = calloc(1, sizeof(XF86ConfigRec))) == NULL) {
        return NULL;
    }

    while ((token = xf86getToken(TopLevelTab)) != EOF_TOKEN) {
        switch (token) {
        case COMMENT:
            ptr->conf_comment = xf86addComment(ptr->conf_comment, xf86_lex_val.str);
            break;
        case SECTION:
            if (xf86getSubToken(&(ptr->conf_comment)) != STRING) {
                xf86parseError(QUOTE_MSG, "Section");
                CLEANUP(ptr);
                return NULL;
            }
            xf86setSection(xf86_lex_val.str);
            if (xf86nameCompare(xf86_lex_val.str, "files") == 0) {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                HANDLE_RETURN(conf_files, xf86parseFilesSection());
            }
            else if (xf86nameCompare(xf86_lex_val.str, "serverflags") == 0) {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                HANDLE_RETURN(conf_flags, xf86parseFlagsSection());
            }
            else if (xf86nameCompare(xf86_lex_val.str, "pointer") == 0) {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                HANDLE_LIST(conf_input_lst, xf86parsePointerSection,
                            XF86ConfInputPtr);
            }
            else if (xf86nameCompare(xf86_lex_val.str, "videoadaptor") == 0) {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                HANDLE_LIST(conf_videoadaptor_lst, xf86parseVideoAdaptorSection,
                            XF86ConfVideoAdaptorPtr);
            }
            else if (xf86nameCompare(xf86_lex_val.str, "device") == 0) {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                HANDLE_LIST(conf_device_lst, xf86parseDeviceSection,
                            XF86ConfDevicePtr);
            }
            else if (xf86nameCompare(xf86_lex_val.str, "monitor") == 0) {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                HANDLE_LIST(conf_monitor_lst, xf86parseMonitorSection,
                            XF86ConfMonitorPtr);
            }
            else if (xf86nameCompare(xf86_lex_val.str, "modes") == 0) {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                HANDLE_LIST(conf_modes_lst, xf86parseModesSection,
                            XF86ConfModesPtr);
            }
            else if (xf86nameCompare(xf86_lex_val.str, "screen") == 0) {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                HANDLE_LIST(conf_screen_lst, xf86parseScreenSection,
                            XF86ConfScreenPtr);
            }
            else if (xf86nameCompare(xf86_lex_val.str, "inputdevice") == 0) {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                HANDLE_LIST(conf_input_lst, xf86parseInputSection,
                            XF86ConfInputPtr);
            }
            else if (xf86nameCompare(xf86_lex_val.str, "inputclass") == 0) {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                HANDLE_LIST(conf_inputclass_lst,
                            xf86parseInputClassSection, XF86ConfInputClassPtr);
            }
            else if (xf86nameCompare(xf86_lex_val.str, "outputclass") == 0) {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                HANDLE_LIST(conf_outputclass_lst, xf86parseOutputClassSection,
                            XF86ConfOutputClassPtr);
            }
            else if (xf86nameCompare(xf86_lex_val.str, "module") == 0) {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                HANDLE_RETURN(conf_modules, xf86parseModuleSection());
            }
            else if (xf86nameCompare(xf86_lex_val.str, "serverlayout") == 0) {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                HANDLE_LIST(conf_layout_lst, xf86parseLayoutSection,
                            XF86ConfLayoutPtr);
            }
            else if (xf86nameCompare(xf86_lex_val.str, "vendor") == 0) {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                HANDLE_LIST(conf_vendor_lst, xf86parseVendorSection,
                            XF86ConfVendorPtr);
            }
            else if (xf86nameCompare(xf86_lex_val.str, "dri") == 0) {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                HANDLE_RETURN(conf_dri, xf86parseDRISection());
            }
            else if (xf86nameCompare(xf86_lex_val.str, "extensions") == 0) {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                HANDLE_RETURN(conf_extensions, xf86parseExtensionsSection());
            }
            else {
                free(xf86_lex_val.str);
                xf86_lex_val.str = NULL;
                Error(INVALID_SECTION_MSG, xf86tokenString());
            }
            break;
        default:
            free(xf86_lex_val.str);
            xf86_lex_val.str = NULL;
            Error(INVALID_KEYWORD_MSG, xf86tokenString());
        }
    }

    if (xf86validateConfig(ptr))
        return ptr;
    else {
        CLEANUP(ptr);
        return NULL;
    }
}

#undef CLEANUP

/*
 * adds an item to the end of the linked list. Any record whose first field
 * is a GenericListRec can be cast to this type and used with this function.
 * A pointer to the head of the list is returned to handle the addition of
 * the first item.
 */
GenericListPtr
xf86addListItem(GenericListPtr head, GenericListPtr new)
{
    GenericListPtr p = head;
    GenericListPtr last = NULL;

    while (p) {
        last = p;
        p = p->next;
    }

    if (last) {
        last->next = new;
        return head;
    }
    else
        return new;
}

/*
 * Test if one chained list contains the other.
 * In this case both list have the same endpoint (provided they don't loop)
 */
int
xf86itemNotSublist(GenericListPtr list_1, GenericListPtr list_2)
{
    GenericListPtr p = list_1;
    GenericListPtr last_1 = NULL, last_2 = NULL;

    while (p) {
        last_1 = p;
        p = p->next;
    }

    p = list_2;
    while (p) {
        last_2 = p;
        p = p->next;
    }

    return (!(last_1 == last_2));
}

void
xf86freeConfig(XF86ConfigPtr p)
{
    if (p == NULL)
        return;

    xf86freeFiles(p->conf_files);
    xf86freeModules(p->conf_modules);
    xf86freeFlags(p->conf_flags);
    xf86freeMonitorList(p->conf_monitor_lst);
    xf86freeModesList(p->conf_modes_lst);
    xf86freeVideoAdaptorList(p->conf_videoadaptor_lst);
    xf86freeDeviceList(p->conf_device_lst);
    xf86freeScreenList(p->conf_screen_lst);
    xf86freeLayoutList(p->conf_layout_lst);
    xf86freeInputList(p->conf_input_lst);
    xf86freeVendorList(p->conf_vendor_lst);
    xf86freeDRI(p->conf_dri);
    xf86freeExtensions(p->conf_extensions);
    TestFree(p->conf_comment);

    free(p);
}
@


1.8
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d1 2
a2 2
/* 
 * 
d4 1
a4 1
 * 
d6 1
a6 1
 * copy of this software and associated documentation files (the "Software"), 
d11 1
a11 1
 * 
d14 1
a14 1
 * 
d22 1
a22 1
 * 
d26 1
a26 1
 * 
d71 1
a71 1
/* 
d224 1
a224 1
/* 
d249 1
a249 1
/* 
@


1.7
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a62 1
extern LexRec val;
d101 1
a101 1
            ptr->conf_comment = xf86addComment(ptr->conf_comment, val.str);
d109 4
a112 4
            xf86setSection(val.str);
            if (xf86nameCompare(val.str, "files") == 0) {
                free(val.str);
                val.str = NULL;
d115 3
a117 3
            else if (xf86nameCompare(val.str, "serverflags") == 0) {
                free(val.str);
                val.str = NULL;
d120 3
a122 3
            else if (xf86nameCompare(val.str, "pointer") == 0) {
                free(val.str);
                val.str = NULL;
d126 3
a128 3
            else if (xf86nameCompare(val.str, "videoadaptor") == 0) {
                free(val.str);
                val.str = NULL;
d132 3
a134 3
            else if (xf86nameCompare(val.str, "device") == 0) {
                free(val.str);
                val.str = NULL;
d138 3
a140 3
            else if (xf86nameCompare(val.str, "monitor") == 0) {
                free(val.str);
                val.str = NULL;
d144 3
a146 3
            else if (xf86nameCompare(val.str, "modes") == 0) {
                free(val.str);
                val.str = NULL;
d150 3
a152 3
            else if (xf86nameCompare(val.str, "screen") == 0) {
                free(val.str);
                val.str = NULL;
d156 3
a158 3
            else if (xf86nameCompare(val.str, "inputdevice") == 0) {
                free(val.str);
                val.str = NULL;
d162 3
a164 3
            else if (xf86nameCompare(val.str, "inputclass") == 0) {
                free(val.str);
                val.str = NULL;
d168 9
a176 3
            else if (xf86nameCompare(val.str, "module") == 0) {
                free(val.str);
                val.str = NULL;
d179 3
a181 3
            else if (xf86nameCompare(val.str, "serverlayout") == 0) {
                free(val.str);
                val.str = NULL;
d185 3
a187 3
            else if (xf86nameCompare(val.str, "vendor") == 0) {
                free(val.str);
                val.str = NULL;
d191 3
a193 3
            else if (xf86nameCompare(val.str, "dri") == 0) {
                free(val.str);
                val.str = NULL;
d196 3
a198 3
            else if (xf86nameCompare(val.str, "extensions") == 0) {
                free(val.str);
                val.str = NULL;
d202 2
a203 2
                free(val.str);
                val.str = NULL;
d208 2
a209 2
            free(val.str);
            val.str = NULL;
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a54 2
/* View/edit this file with tab stops set to 4 */

@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a54 1

d67 3
a69 4
static xf86ConfigSymTabRec TopLevelTab[] =
{
	{SECTION, "section"},
	{-1, ""},
d79 1
a79 1
xf86validateConfig (XF86ConfigPtr p)
d81 6
a86 6
	if (!xf86validateScreen (p))
		return FALSE;
	if (!xf86validateInput (p))
		return FALSE;
	if (!xf86validateLayout (p))
		return FALSE;
d88 1
a88 1
	return TRUE;
d92 1
a92 1
xf86readConfigFile (void)
d94 2
a95 2
	int token;
	XF86ConfigPtr ptr = NULL;
d97 120
a216 142
	if ((ptr = calloc (1, sizeof (XF86ConfigRec))) == NULL)
	{
		return NULL;
	}

	while ((token = xf86getToken (TopLevelTab)) != EOF_TOKEN)
	{
		switch (token)
		{
		case COMMENT:
			ptr->conf_comment = xf86addComment(ptr->conf_comment, val.str);
			break;
		case SECTION:
			if (xf86getSubToken (&(ptr->conf_comment)) != STRING)
			{
				xf86parseError (QUOTE_MSG, "Section");
				CLEANUP (ptr);
				return NULL;
			}
			xf86setSection (val.str);
			if (xf86nameCompare (val.str, "files") == 0)
			{
				free(val.str);
				val.str = NULL;
				HANDLE_RETURN (conf_files, xf86parseFilesSection ());
			}
			else if (xf86nameCompare (val.str, "serverflags") == 0)
			{
				free(val.str);
				val.str = NULL;
				HANDLE_RETURN (conf_flags, xf86parseFlagsSection ());
			}
			else if (xf86nameCompare (val.str, "pointer") == 0)
			{
				free(val.str);
				val.str = NULL;
				HANDLE_LIST (conf_input_lst, xf86parsePointerSection,
							 XF86ConfInputPtr);
			}
			else if (xf86nameCompare (val.str, "videoadaptor") == 0)
			{
				free(val.str);
				val.str = NULL;
				HANDLE_LIST (conf_videoadaptor_lst, xf86parseVideoAdaptorSection,
							 XF86ConfVideoAdaptorPtr);
			}
			else if (xf86nameCompare (val.str, "device") == 0)
			{
				free(val.str);
				val.str = NULL;
				HANDLE_LIST (conf_device_lst, xf86parseDeviceSection,
							 XF86ConfDevicePtr);
			}
			else if (xf86nameCompare (val.str, "monitor") == 0)
			{
				free(val.str);
				val.str = NULL;
				HANDLE_LIST (conf_monitor_lst, xf86parseMonitorSection,
							 XF86ConfMonitorPtr);
			}
			else if (xf86nameCompare (val.str, "modes") == 0)
			{
				free(val.str);
				val.str = NULL;
				HANDLE_LIST (conf_modes_lst, xf86parseModesSection,
							 XF86ConfModesPtr);
			}
			else if (xf86nameCompare (val.str, "screen") == 0)
			{
				free(val.str);
				val.str = NULL;
				HANDLE_LIST (conf_screen_lst, xf86parseScreenSection,
							 XF86ConfScreenPtr);
			}
			else if (xf86nameCompare(val.str, "inputdevice") == 0)
			{
				free(val.str);
				val.str = NULL;
				HANDLE_LIST (conf_input_lst, xf86parseInputSection,
							 XF86ConfInputPtr);
			}
			else if (xf86nameCompare(val.str, "inputclass") == 0)
			{
				free(val.str);
				val.str = NULL;
				HANDLE_LIST (conf_inputclass_lst,
						xf86parseInputClassSection,
						XF86ConfInputClassPtr);
			}
			else if (xf86nameCompare (val.str, "module") == 0)
			{
				free(val.str);
				val.str = NULL;
				HANDLE_RETURN (conf_modules, xf86parseModuleSection ());
			}
			else if (xf86nameCompare (val.str, "serverlayout") == 0)
			{
				free(val.str);
				val.str = NULL;
				HANDLE_LIST (conf_layout_lst, xf86parseLayoutSection,
							 XF86ConfLayoutPtr);
			}
			else if (xf86nameCompare (val.str, "vendor") == 0)
			{
				free(val.str);
				val.str = NULL;
				HANDLE_LIST (conf_vendor_lst, xf86parseVendorSection,
							 XF86ConfVendorPtr);
			}
			else if (xf86nameCompare (val.str, "dri") == 0)
			{
				free(val.str);
				val.str = NULL;
				HANDLE_RETURN (conf_dri, xf86parseDRISection ());
			}
			else if (xf86nameCompare (val.str, "extensions") == 0)
			{
				free(val.str);
				val.str = NULL;
				HANDLE_RETURN (conf_extensions, xf86parseExtensionsSection ());
			}
			else
			{
				free(val.str);
				val.str = NULL;
				Error (INVALID_SECTION_MSG, xf86tokenString ());
			}
			break;
		default:
			free(val.str);
			val.str = NULL;
			Error (INVALID_KEYWORD_MSG, xf86tokenString ());
		}
	}

	if (xf86validateConfig (ptr))
		return ptr;
	else
	{
		CLEANUP (ptr);
		return NULL;
	}
d228 1
a228 1
xf86addListItem (GenericListPtr head, GenericListPtr new)
d230 2
a231 2
	GenericListPtr p = head;
	GenericListPtr last = NULL;
d233 11
a243 13
	while (p)
	{
		last = p;
		p = p->next;
	}

	if (last)
	{
		last->next = new;
		return head;
	}
	else
		return new;
d253 2
a254 2
	GenericListPtr p = list_1;
	GenericListPtr last_1 = NULL, last_2 = NULL;
d256 10
a265 10
	while (p) {
		last_1 = p;
		p = p->next;
	}

	p = list_2;
	while (p) {
		last_2 = p;
		p = p->next;
	}
d267 1
a267 1
	return (!(last_1 == last_2));
d271 1
a271 1
xf86freeConfig (XF86ConfigPtr p)
d273 2
a274 2
	if (p == NULL)
		return;
d276 14
a289 14
	xf86freeFiles (p->conf_files);
	xf86freeModules (p->conf_modules);
	xf86freeFlags (p->conf_flags);
	xf86freeMonitorList (p->conf_monitor_lst);
	xf86freeModesList (p->conf_modes_lst);
	xf86freeVideoAdaptorList (p->conf_videoadaptor_lst);
	xf86freeDeviceList (p->conf_device_lst);
	xf86freeScreenList (p->conf_screen_lst);
	xf86freeLayoutList (p->conf_layout_lst);
	xf86freeInputList (p->conf_input_lst);
	xf86freeVendorList (p->conf_vendor_lst);
	xf86freeDRI (p->conf_dri);
	xf86freeExtensions (p->conf_extensions);
	TestFree(p->conf_comment);
d291 1
a291 1
	free (p);
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d90 1
a90 1
	return (TRUE);
d116 1
a116 1
				return (NULL);
a221 1
				Error (INVALID_SECTION_MSG, xf86tokenString ());
d224 1
a227 1
			Error (INVALID_KEYWORD_MSG, xf86tokenString ());
d230 1
d235 1
a235 1
		return (ptr);
d239 1
a239 1
		return (NULL);
d266 1
a266 1
		return (head);
d269 1
a269 1
		return (new);
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d99 1
a99 1
	if ((ptr = xf86confcalloc (1, sizeof (XF86ConfigRec))) == NULL)
d121 1
a121 1
				xf86conffree(val.str);
d127 1
a127 1
				xf86conffree(val.str);
d133 1
a133 1
				xf86conffree(val.str);
d140 1
a140 1
				xf86conffree(val.str);
d147 1
a147 1
				xf86conffree(val.str);
d154 1
a154 1
				xf86conffree(val.str);
d161 1
a161 1
				xf86conffree(val.str);
d168 1
a168 1
				xf86conffree(val.str);
d175 1
a175 1
				xf86conffree(val.str);
d180 8
d190 1
a190 1
				xf86conffree(val.str);
d196 1
a196 1
				xf86conffree(val.str);
d203 1
a203 1
				xf86conffree(val.str);
d210 1
a210 1
				xf86conffree(val.str);
d216 1
a216 1
				xf86conffree(val.str);
d223 1
a223 1
				xf86conffree(val.str);
d229 1
a229 1
			xf86conffree(val.str);
d317 1
a317 1
	xf86conffree (p);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a102 1
	memset (ptr, 0, sizeof (XF86ConfigRec));
@


1.1
log
@Initial revision
@
text
@d76 17
a131 7
			else if (xf86nameCompare (val.str, "keyboard") == 0)
			{
				xf86conffree(val.str);
				val.str = NULL;
				HANDLE_LIST (conf_input_lst, xf86parseKeyboardSection,
							 XF86ConfInputPtr);
			}
a236 19

/* 
 * This function resolves name references and reports errors if the named
 * objects cannot be found.
 */
int
xf86validateConfig (XF86ConfigPtr p)
{
	if (!xf86validateDevice (p))
		return FALSE;
	if (!xf86validateScreen (p))
		return FALSE;
	if (!xf86validateInput (p))
		return FALSE;
	if (!xf86validateLayout (p))
		return FALSE;

	return (TRUE);
}
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@a75 19
/* 
 * This function resolves name references and reports errors if the named
 * objects cannot be found.
 */
static int
xf86validateConfig (XF86ConfigPtr p)
{
	if (!xf86validateDevice (p))
		return FALSE;
	if (!xf86validateScreen (p))
		return FALSE;
	if (!xf86validateInput (p))
		return FALSE;
	if (!xf86validateLayout (p))
		return FALSE;

	return (TRUE);
}

d115 7
d227 19
@

