head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.05.29.12.02.38;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	s0SI41sEunLdyFfd;

1.6
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	Te1daavkBLskZ8gc;

1.5
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	cVXoV5PxI8YrEaVA;

1.4
date	2013.06.07.17.28.52;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.20.56;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.20.56;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.58.14;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 *
 * Copyright (c) 1997  Metro Link Incorporated
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Metro Link shall not be
 * used in advertising or otherwise to promote the sale, use or other dealings
 * in this Software without prior written authorization from Metro Link.
 *
 */
/*
 * Copyright (c) 1997-2003 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "xf86Parser.h"
#include "xf86tokens.h"
#include "Configint.h"


static xf86ConfigSymTabRec VendorSubTab[] = {
    {ENDSUBSECTION, "endsubsection"},
    {IDENTIFIER, "identifier"},
    {OPTION, "option"},
    {-1, ""},
};

static void
xf86freeVendorSubList(XF86ConfVendSubPtr ptr)
{
    XF86ConfVendSubPtr prev;

    while (ptr) {
        TestFree(ptr->vs_identifier);
        TestFree(ptr->vs_name);
        TestFree(ptr->vs_comment);
        xf86optionListFree(ptr->vs_option_lst);
        prev = ptr;
        ptr = ptr->list.next;
        free(prev);
    }
}

#define CLEANUP xf86freeVendorSubList

static XF86ConfVendSubPtr
xf86parseVendorSubSection(void)
{
    int has_ident = FALSE;
    int token;

    parsePrologue(XF86ConfVendSubPtr, XF86ConfVendSubRec)

        while ((token = xf86getToken(VendorSubTab)) != ENDSUBSECTION) {
        switch (token) {
        case COMMENT:
            ptr->vs_comment = xf86addComment(ptr->vs_comment, xf86_lex_val.str);
            break;
        case IDENTIFIER:
            if (xf86getSubToken(&(ptr->vs_comment)))
                Error(QUOTE_MSG, "Identifier");
            if (has_ident == TRUE)
                Error(MULTIPLE_MSG, "Identifier");
            ptr->vs_identifier = xf86_lex_val.str;
            has_ident = TRUE;
            break;
        case OPTION:
            ptr->vs_option_lst = xf86parseOption(ptr->vs_option_lst);
            break;

        case EOF_TOKEN:
            Error(UNEXPECTED_EOF_MSG);
            break;
        default:
            Error(INVALID_KEYWORD_MSG, xf86tokenString());
            break;
        }
    }

#ifdef DEBUG
    printf("Vendor subsection parsed\n");
#endif

    return ptr;
}

#undef CLEANUP

static xf86ConfigSymTabRec VendorTab[] = {
    {ENDSECTION, "endsection"},
    {IDENTIFIER, "identifier"},
    {OPTION, "option"},
    {SUBSECTION, "subsection"},
    {-1, ""},
};

#define CLEANUP xf86freeVendorList

XF86ConfVendorPtr
xf86parseVendorSection(void)
{
    int has_ident = FALSE;
    int token;

    parsePrologue(XF86ConfVendorPtr, XF86ConfVendorRec)

        while ((token = xf86getToken(VendorTab)) != ENDSECTION) {
        switch (token) {
        case COMMENT:
            ptr->vnd_comment = xf86addComment(ptr->vnd_comment, xf86_lex_val.str);
            break;
        case IDENTIFIER:
            if (xf86getSubToken(&(ptr->vnd_comment)) != STRING)
                Error(QUOTE_MSG, "Identifier");
            if (has_ident == TRUE)
                Error(MULTIPLE_MSG, "Identifier");
            ptr->vnd_identifier = xf86_lex_val.str;
            has_ident = TRUE;
            break;
        case OPTION:
            ptr->vnd_option_lst = xf86parseOption(ptr->vnd_option_lst);
            break;
        case SUBSECTION:
            if (xf86getSubToken(&(ptr->vnd_comment)) != STRING)
                Error(QUOTE_MSG, "SubSection");
            {
                HANDLE_LIST(vnd_sub_lst, xf86parseVendorSubSection,
                            XF86ConfVendSubPtr);
            }
            break;
        case EOF_TOKEN:
            Error(UNEXPECTED_EOF_MSG);
            break;
        default:
            Error(INVALID_KEYWORD_MSG, xf86tokenString());
            break;
        }

    }

    if (!has_ident)
        Error(NO_IDENT_MSG);

#ifdef DEBUG
    printf("Vendor section parsed\n");
#endif

    return ptr;
}

#undef CLEANUP

void
xf86printVendorSection(FILE * cf, XF86ConfVendorPtr ptr)
{
    XF86ConfVendSubPtr pptr;

    while (ptr) {
        fprintf(cf, "Section \"Vendor\"\n");
        if (ptr->vnd_comment)
            fprintf(cf, "%s", ptr->vnd_comment);
        if (ptr->vnd_identifier)
            fprintf(cf, "\tIdentifier     \"%s\"\n", ptr->vnd_identifier);

        xf86printOptionList(cf, ptr->vnd_option_lst, 1);
        for (pptr = ptr->vnd_sub_lst; pptr; pptr = pptr->list.next) {
            fprintf(cf, "\tSubSection \"Vendor\"\n");
            if (pptr->vs_comment)
                fprintf(cf, "%s", pptr->vs_comment);
            if (pptr->vs_identifier)
                fprintf(cf, "\t\tIdentifier \"%s\"\n", pptr->vs_identifier);
            xf86printOptionList(cf, pptr->vs_option_lst, 2);
            fprintf(cf, "\tEndSubSection\n");
        }
        fprintf(cf, "EndSection\n\n");
        ptr = ptr->list.next;
    }
}

void
xf86freeVendorList(XF86ConfVendorPtr p)
{
    if (p == NULL)
        return;
    xf86freeVendorSubList(p->vnd_sub_lst);
    TestFree(p->vnd_identifier);
    TestFree(p->vnd_comment);
    xf86optionListFree(p->vnd_option_lst);
    free(p);
}
@


1.6
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d71 16
a232 16
}

void
xf86freeVendorSubList(XF86ConfVendSubPtr ptr)
{
    XF86ConfVendSubPtr prev;

    while (ptr) {
        TestFree(ptr->vs_identifier);
        TestFree(ptr->vs_name);
        TestFree(ptr->vs_comment);
        xf86optionListFree(ptr->vs_option_lst);
        prev = ptr;
        ptr = ptr->list.next;
        free(prev);
    }
@


1.5
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d1 2
a2 2
/* 
 * 
d4 1
a4 1
 * 
d6 1
a6 1
 * copy of this software and associated documentation files (the "Software"), 
d11 1
a11 1
 * 
d14 1
a14 1
 * 
d22 1
a22 1
 * 
d26 1
a26 1
 * 
@


1.4
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a62 1
extern LexRec val;
d84 1
a84 1
            ptr->vs_comment = xf86addComment(ptr->vs_comment, val.str);
d91 1
a91 1
            ptr->vs_identifier = val.str;
d137 1
a137 1
            ptr->vnd_comment = xf86addComment(ptr->vnd_comment, val.str);
d144 1
a144 1
            ptr->vnd_identifier = val.str;
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a54 2
/* View/edit this file with tab stops set to 4 */

@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a54 1

d67 5
a71 6
static xf86ConfigSymTabRec VendorSubTab[] =
{
	{ENDSUBSECTION, "endsubsection"},
	{IDENTIFIER, "identifier"},
	{OPTION, "option"},
	{-1, ""},
d77 1
a77 1
xf86parseVendorSubSection (void)
d79 30
a108 31
	int has_ident = FALSE;
	int token;
	parsePrologue (XF86ConfVendSubPtr, XF86ConfVendSubRec)

	while ((token = xf86getToken (VendorSubTab)) != ENDSUBSECTION)
	{
		switch (token)
		{
		case COMMENT:
			ptr->vs_comment = xf86addComment(ptr->vs_comment, val.str);
			break;
		case IDENTIFIER:
			if (xf86getSubToken (&(ptr->vs_comment)))
				Error (QUOTE_MSG, "Identifier");
			if (has_ident == TRUE)
				Error (MULTIPLE_MSG, "Identifier");
			ptr->vs_identifier = val.str;
			has_ident = TRUE;
			break;
		case OPTION:
			ptr->vs_option_lst = xf86parseOption(ptr->vs_option_lst);
			break;

		case EOF_TOKEN:
			Error (UNEXPECTED_EOF_MSG, NULL);
			break;
		default:
			Error (INVALID_KEYWORD_MSG, xf86tokenString ());
			break;
		}
	}
d111 1
a111 1
	printf ("Vendor subsection parsed\n");
d114 1
a114 1
	return ptr;
d119 6
a124 7
static xf86ConfigSymTabRec VendorTab[] =
{
	{ENDSECTION, "endsection"},
	{IDENTIFIER, "identifier"},
	{OPTION, "option"},
	{SUBSECTION, "subsection"},
	{-1, ""},
d130 1
a130 1
xf86parseVendorSection (void)
d132 36
a167 37
	int has_ident = FALSE;
	int token;
	parsePrologue (XF86ConfVendorPtr, XF86ConfVendorRec)

	while ((token = xf86getToken (VendorTab)) != ENDSECTION)
	{
		switch (token)
		{
		case COMMENT:
			ptr->vnd_comment = xf86addComment(ptr->vnd_comment, val.str);
			break;
		case IDENTIFIER:
			if (xf86getSubToken (&(ptr->vnd_comment)) != STRING)
				Error (QUOTE_MSG, "Identifier");
			if (has_ident == TRUE)
				Error (MULTIPLE_MSG, "Identifier");
			ptr->vnd_identifier = val.str;
			has_ident = TRUE;
			break;
		case OPTION:
			ptr->vnd_option_lst = xf86parseOption(ptr->vnd_option_lst);
			break;
		case SUBSECTION:
			if (xf86getSubToken (&(ptr->vnd_comment)) != STRING)
				Error (QUOTE_MSG, "SubSection");
			{
				HANDLE_LIST (vnd_sub_lst, xf86parseVendorSubSection,
							XF86ConfVendSubPtr);
			}
			break;
		case EOF_TOKEN:
			Error (UNEXPECTED_EOF_MSG, NULL);
			break;
		default:
			Error (INVALID_KEYWORD_MSG, xf86tokenString ());
			break;
		}
d169 1
a169 1
	}
d171 2
a172 2
	if (!has_ident)
		Error (NO_IDENT_MSG, NULL);
d175 1
a175 1
	printf ("Vendor section parsed\n");
d178 1
a178 1
	return ptr;
d184 1
a184 1
xf86printVendorSection (FILE * cf, XF86ConfVendorPtr ptr)
d186 1
a186 1
	XF86ConfVendSubPtr pptr;
d188 20
a207 22
	while (ptr)
	{
		fprintf (cf, "Section \"Vendor\"\n");
		if (ptr->vnd_comment)
			fprintf (cf, "%s", ptr->vnd_comment);
		if (ptr->vnd_identifier)
			fprintf (cf, "\tIdentifier     \"%s\"\n", ptr->vnd_identifier);

		xf86printOptionList(cf, ptr->vnd_option_lst, 1);
		for (pptr = ptr->vnd_sub_lst; pptr; pptr = pptr->list.next)
		{
			fprintf (cf, "\tSubSection \"Vendor\"\n");
			if (pptr->vs_comment)
				fprintf (cf, "%s", pptr->vs_comment);
			if (pptr->vs_identifier)
				fprintf (cf, "\t\tIdentifier \"%s\"\n", pptr->vs_identifier);
			xf86printOptionList(cf, pptr->vs_option_lst, 2);
			fprintf (cf, "\tEndSubSection\n");
		}
		fprintf (cf, "EndSection\n\n");
		ptr = ptr->list.next;
	}
d211 1
a211 1
xf86freeVendorList (XF86ConfVendorPtr p)
d213 7
a219 7
	if (p == NULL)
		return;
	xf86freeVendorSubList (p->vnd_sub_lst);
	TestFree (p->vnd_identifier);
	TestFree (p->vnd_comment);
	xf86optionListFree (p->vnd_option_lst);
	free (p);
d223 1
a223 1
xf86freeVendorSubList (XF86ConfVendSubPtr ptr)
d225 1
a225 1
	XF86ConfVendSubPtr prev;
d227 9
a235 10
	while (ptr)
	{
		TestFree (ptr->vs_identifier);
		TestFree (ptr->vs_name);
		TestFree (ptr->vs_comment);
		xf86optionListFree (ptr->vs_option_lst);
		prev = ptr;
		ptr = ptr->list.next;
		free (prev);
	}
@


1.1
log
@Initial revision
@
text
@d78 1
a78 1
XF86ConfVendSubPtr
d226 1
a226 1
	xf86conffree (p);
d242 1
a242 1
		xf86conffree (prev);
a244 13

XF86ConfVendorPtr
xf86findVendor (const char *name, XF86ConfVendorPtr list)
{
	while (list)
	{
		if (xf86nameCompare (list->vnd_identifier, name) == 0)
			return (list);
		list = list->list.next;
	}
	return (NULL);
}

@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d78 1
a78 1
static XF86ConfVendSubPtr
d245 13
@

