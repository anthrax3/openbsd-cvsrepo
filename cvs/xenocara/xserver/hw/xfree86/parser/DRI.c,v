head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.09.16.19.10.23;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	Te1daavkBLskZ8gc;

1.6
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	cVXoV5PxI8YrEaVA;

1.5
date	2012.06.10.13.21.25;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.52;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.34;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.20.54;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.20.54;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.58.15;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/* DRI.c -- DRI Section in XF86Config file
 * Created: Fri Mar 19 08:40:22 1999 by faith@@precisioninsight.com
 * Revised: Thu Jun 17 16:08:05 1999 by faith@@precisioninsight.com
 *
 * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "os.h"
#include "xf86Parser.h"
#include "xf86tokens.h"
#include "Configint.h"


static xf86ConfigSymTabRec DRITab[] = {
    {ENDSECTION, "endsection"},
    {GROUP, "group"},
    {MODE, "mode"},
    {-1, ""},
};

#define CLEANUP xf86freeDRI

XF86ConfDRIPtr
xf86parseDRISection(void)
{
    int token;

    parsePrologue(XF86ConfDRIPtr, XF86ConfDRIRec);

    /* Zero is a valid value for this. */
    ptr->dri_group = -1;
    while ((token = xf86getToken(DRITab)) != ENDSECTION) {
        switch (token) {
        case GROUP:
            if ((token = xf86getSubToken(&(ptr->dri_comment))) == STRING)
                ptr->dri_group_name = xf86_lex_val.str;
            else if (token == NUMBER)
                ptr->dri_group = xf86_lex_val.num;
            else
                Error(GROUP_MSG);
            break;
        case MODE:
            if (xf86getSubToken(&(ptr->dri_comment)) != NUMBER)
                Error(NUMBER_MSG, "Mode");
            if (xf86_lex_val.numType != PARSE_OCTAL)
                Error(MUST_BE_OCTAL_MSG, xf86_lex_val.num);
            ptr->dri_mode = xf86_lex_val.num;
            break;
        case EOF_TOKEN:
            Error(UNEXPECTED_EOF_MSG);
            break;
        case COMMENT:
            ptr->dri_comment = xf86addComment(ptr->dri_comment, xf86_lex_val.str);
            break;
        default:
            Error(INVALID_KEYWORD_MSG, xf86tokenString());
            break;
        }
    }

#ifdef DEBUG
    ErrorF("DRI section parsed\n");
#endif

    return ptr;
}

#undef CLEANUP

void
xf86printDRISection(FILE * cf, XF86ConfDRIPtr ptr)
{
    if (ptr == NULL)
        return;

    fprintf(cf, "Section \"DRI\"\n");
    if (ptr->dri_comment)
        fprintf(cf, "%s", ptr->dri_comment);
    if (ptr->dri_group_name)
        fprintf(cf, "\tGroup        \"%s\"\n", ptr->dri_group_name);
    else if (ptr->dri_group >= 0)
        fprintf(cf, "\tGroup        %d\n", ptr->dri_group);
    if (ptr->dri_mode)
        fprintf(cf, "\tMode         0%o\n", ptr->dri_mode);
    fprintf(cf, "EndSection\n\n");
}

void
xf86freeDRI(XF86ConfDRIPtr ptr)
{
    if (ptr == NULL)
        return;

    TestFree(ptr->dri_comment);
    free(ptr);
}
@


1.6
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d14 1
a14 1
 * 
d18 1
a18 1
 * 
d26 2
a27 2
 * 
 * 
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d34 1
a38 1
extern LexRec val;
d62 1
a62 1
                ptr->dri_group_name = val.str;
d64 1
a64 1
                ptr->dri_group = val.num;
d71 3
a73 3
            if (val.numType != PARSE_OCTAL)
                Error(MUST_BE_OCTAL_MSG, val.num);
            ptr->dri_mode = val.num;
d79 1
a79 1
            ptr->dri_comment = xf86addComment(ptr->dri_comment, val.str);
@


1.4
log
@Update to xserver 1.11.2
@
text
@d40 1
a40 2
static xf86ConfigSymTabRec DRITab[] =
{
d42 3
a44 3
    {GROUP,      "group"},
    {MODE,       "mode"},
    {-1,         ""},
d50 1
a50 1
xf86parseDRISection (void)
d53 2
a54 1
    parsePrologue (XF86ConfDRIPtr, XF86ConfDRIRec);
d58 27
a84 28
    while ((token = xf86getToken (DRITab)) != ENDSECTION) {
	switch (token)
	    {
	    case GROUP:
		if ((token = xf86getSubToken (&(ptr->dri_comment))) == STRING)
		    ptr->dri_group_name = val.str;
		else if (token == NUMBER)
		    ptr->dri_group = val.num;
		else
		    Error (GROUP_MSG, NULL);
		break;
	    case MODE:
		if (xf86getSubToken (&(ptr->dri_comment)) != NUMBER)
		    Error (NUMBER_MSG, "Mode");
                if (val.numType != PARSE_OCTAL)
                    Error (MUST_BE_OCTAL_MSG, val.num);
		ptr->dri_mode = val.num;
		break;
	    case EOF_TOKEN:
		Error (UNEXPECTED_EOF_MSG, NULL);
		break;
	    case COMMENT:
		ptr->dri_comment = xf86addComment(ptr->dri_comment, val.str);
		break;
	    default:
		Error (INVALID_KEYWORD_MSG, xf86tokenString ());
		break;
	    }
d86 1
a86 1
    
d90 1
a90 1
    
d97 1
a97 1
xf86printDRISection (FILE * cf, XF86ConfDRIPtr ptr)
d100 3
a102 3
	return;
    
    fprintf (cf, "Section \"DRI\"\n");
d104 1
a104 1
	fprintf (cf, "%s", ptr->dri_comment);
d106 1
a106 1
	fprintf (cf, "\tGroup        \"%s\"\n", ptr->dri_group_name);
d108 1
a108 1
	fprintf (cf, "\tGroup        %d\n", ptr->dri_group);
d110 2
a111 2
	fprintf (cf, "\tMode         0%o\n", ptr->dri_mode);
    fprintf (cf, "EndSection\n\n");
d115 1
a115 1
xf86freeDRI (XF86ConfDRIPtr ptr)
d118 4
a121 4
	return;
    
    TestFree (ptr->dri_comment);
    free (ptr);
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a43 1
    {BUFFERS,    "buffers"},
a47 47
#define CLEANUP xf86freeBuffersList

static void
xf86freeBuffersList (XF86ConfBuffersPtr ptr)
{
    XF86ConfBuffersPtr prev;

    while (ptr) {
	TestFree (ptr->buf_flags);
	TestFree (ptr->buf_comment);
	prev = ptr;
	ptr  = ptr->list.next;
	free (prev);
    }
}

static XF86ConfBuffersPtr
xf86parseBuffers (void)
{
    int token;
    parsePrologue (XF86ConfBuffersPtr, XF86ConfBuffersRec)

    if (xf86getSubToken (&(ptr->buf_comment)) != NUMBER)
	Error ("Buffers count expected", NULL);
    ptr->buf_count = val.num;

    if (xf86getSubToken (&(ptr->buf_comment)) != NUMBER)
	Error ("Buffers size expected", NULL);
    ptr->buf_size = val.num;

    if ((token = xf86getSubToken (&(ptr->buf_comment))) == STRING) {
	ptr->buf_flags = val.str;
	if ((token = xf86getToken (NULL)) == COMMENT)
	    ptr->buf_comment = xf86addComment(ptr->buf_comment, val.str);
	else
	    xf86unGetToken(token);
    }

#ifdef DEBUG
    printf ("Buffers parsed\n");
#endif

    return ptr;
}

#undef CLEANUP
	
a75 4
	    case BUFFERS:
		HANDLE_LIST (dri_buffers_lst, xf86parseBuffers,
			     XF86ConfBuffersPtr);
		break;
a99 2
    XF86ConfBuffersPtr bufs;
    
a111 9
    for (bufs = ptr->dri_buffers_lst; bufs; bufs = bufs->list.next) {
	fprintf (cf, "\tBuffers      %d %d",
		 bufs->buf_count, bufs->buf_size);
	if (bufs->buf_flags) fprintf (cf, " \"%s\"", bufs->buf_flags);
	if (bufs->buf_comment)
	    fprintf(cf, "%s", bufs->buf_comment);
	else
	    fprintf (cf, "\n");
    }
a120 1
    xf86freeBuffersList (ptr->dri_buffers_lst);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d61 1
a61 1
	xf86conffree (prev);
d186 1
a186 1
    xf86conffree (ptr);
@


1.1
log
@Initial revision
@
text
@d51 15
a65 1
XF86ConfBuffersPtr
d120 2
a187 15

void
xf86freeBuffersList (XF86ConfBuffersPtr ptr)
{
    XF86ConfBuffersPtr prev;

    while (ptr) {
	TestFree (ptr->buf_flags);
	TestFree (ptr->buf_comment);
	prev = ptr;
	ptr  = ptr->list.next;
	xf86conffree (prev);
    }
}

@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d51 1
a51 15
static void
xf86freeBuffersList (XF86ConfBuffersPtr ptr)
{
    XF86ConfBuffersPtr prev;

    while (ptr) {
	TestFree (ptr->buf_flags);
	TestFree (ptr->buf_comment);
	prev = ptr;
	ptr  = ptr->list.next;
	xf86conffree (prev);
    }
}

static XF86ConfBuffersPtr
d172 15
@

