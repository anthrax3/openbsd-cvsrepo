head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.12
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.10
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.8
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.6
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.6
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.09.27.17.53.01;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	cVXoV5PxI8YrEaVA;

1.9
date	2014.05.02.19.27.48;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2013.06.07.17.28.49;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.10.13.21.23;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.12.05.15.36.06;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.27.19.02.30;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.13.19.54.46;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.25;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.20;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.17;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.17;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@/*
 * Copyright (c) 1997-2003 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

/*
 * This file contains the DPMS functions required by the extension.
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/X.h>
#include "os.h"
#include "globals.h"
#include "windowstr.h"
#include "xf86.h"
#include "xf86Priv.h"
#ifdef DPMSExtension
#include <X11/extensions/dpmsconst.h>
#include "dpmsproc.h"
#endif
#ifdef XSERVER_LIBPCIACCESS
#include "xf86VGAarbiter.h"
#endif

#ifdef DPMSExtension
static DevPrivateKeyRec DPMSKeyRec;
static DevPrivateKey DPMSKey;
static Bool DPMSClose(ScreenPtr pScreen);
static int DPMSCount = 0;
#endif

Bool
xf86DPMSInit(ScreenPtr pScreen, DPMSSetProcPtr set, int flags)
{
#ifdef DPMSExtension
    ScrnInfoPtr pScrn = xf86ScreenToScrn(pScreen);
    DPMSPtr pDPMS;
    void *DPMSOpt;
    MessageType enabled_from;

    DPMSKey = &DPMSKeyRec;

    if (!dixRegisterPrivateKey(&DPMSKeyRec, PRIVATE_SCREEN, sizeof(DPMSRec)))
        return FALSE;

    pDPMS = dixLookupPrivate(&pScreen->devPrivates, DPMSKey);
    pScrn->DPMSSet = set;
    pDPMS->Flags = flags;
    DPMSOpt = xf86FindOption(pScrn->options, "dpms");
    if (DPMSDisabledSwitch) {
        enabled_from = X_CMDLINE;
        DPMSEnabled = FALSE;
    }
    else if (DPMSOpt) {
        enabled_from = X_CONFIG;
        DPMSEnabled = xf86CheckBoolOption(pScrn->options, "dpms", FALSE);
        xf86MarkOptionUsed(DPMSOpt);
    }
    else {
        enabled_from = X_DEFAULT;
        DPMSEnabled = TRUE;
    }
    if (DPMSEnabled)
        xf86DrvMsg(pScreen->myNum, enabled_from, "DPMS enabled\n");
    pDPMS->Enabled = DPMSEnabled;
    pDPMS->CloseScreen = pScreen->CloseScreen;
    pScreen->CloseScreen = DPMSClose;
    DPMSCount++;
    return TRUE;
#else
    return FALSE;
#endif
}

#ifdef DPMSExtension

static Bool
DPMSClose(ScreenPtr pScreen)
{
    DPMSPtr pDPMS;
    ScrnInfoPtr pScrn;
    /* This shouldn't happen */
    if (DPMSKey == NULL)
        return FALSE;

    pDPMS = dixLookupPrivate(&pScreen->devPrivates, DPMSKey);

    /* This shouldn't happen */
    if (!pDPMS)
        return FALSE;

    pScreen->CloseScreen = pDPMS->CloseScreen;
    pScrn = xf86ScreenToScrn(pScreen);
    /*
     * Turn on DPMS when shutting down. If this function can be used
     * depends on the order the driver wraps things. If this is called
     * after the driver has shut down everything the driver will have
     * to deal with this internally.
     */
    if (pScrn->vtSema && pScrn->DPMSSet) {
        pScrn->DPMSSet(pScrn, DPMSModeOn, 0);
    }

    if (--DPMSCount == 0)
        DPMSKey = NULL;
    return pScreen->CloseScreen(pScreen);
}

static void
DPMSSetScreen(ScrnInfoPtr pScrn, int level)
{
    ScreenPtr pScreen = xf86ScrnToScreen(pScrn);
    DPMSPtr pDPMS = dixLookupPrivate(&pScreen->devPrivates, DPMSKey);

    if (pDPMS && pScrn->DPMSSet && pDPMS->Enabled && pScrn->vtSema) {
        xf86VGAarbiterLock(pScrn);
        pScrn->DPMSSet(pScrn, level, 0);
        xf86VGAarbiterUnlock(pScrn);
    }
}

/*
 * DPMSSet --
 *	Device dependent DPMS mode setting hook.  This is called whenever
 *	the DPMS mode is to be changed.
 */
int
DPMSSet(ClientPtr client, int level)
{
    int rc, i;

    DPMSPowerLevel = level;

    if (DPMSKey == NULL)
        return Success;

    if (level != DPMSModeOn) {
        if (xf86IsUnblank(screenIsSaved)) {
            rc = dixSaveScreens(client, SCREEN_SAVER_FORCER, ScreenSaverActive);
            if (rc != Success)
                return rc;
        }
    } else if (!xf86IsUnblank(screenIsSaved)) {
        rc = dixSaveScreens(client, SCREEN_SAVER_OFF, ScreenSaverReset);
        if (rc != Success)
            return rc;
    }

    /* For each screen, set the DPMS level */
    for (i = 0; i < xf86NumScreens; i++) {
        DPMSSetScreen(xf86Screens[i], level);
    }
    for (i = 0; i < xf86NumGPUScreens; i++) {
        DPMSSetScreen(xf86GPUScreens[i], level);
    }
    return Success;
}

static Bool
DPMSSupportedOnScreen(ScrnInfoPtr pScrn)
{
    ScreenPtr pScreen = xf86ScrnToScreen(pScrn);
    DPMSPtr pDPMS = dixLookupPrivate(&pScreen->devPrivates, DPMSKey);

    return pDPMS && pScrn->DPMSSet;
}

/*
 * DPMSSupported --
 *	Return TRUE if any screen supports DPMS.
 */
Bool
DPMSSupported(void)
{
    int i;

    if (DPMSKey == NULL) {
        return FALSE;
    }

    /* For each screen, check if DPMS is supported */
    for (i = 0; i < xf86NumScreens; i++) {
        if (DPMSSupportedOnScreen(xf86Screens[i]))
            return TRUE;
    }
    for (i = 0; i < xf86NumGPUScreens; i++) {
        if (DPMSSupportedOnScreen(xf86GPUScreens[i]))
            return TRUE;
    }
    return FALSE;
}

#endif                          /* DPMSExtension */
@


1.9
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d63 1
a63 1
    pointer DPMSOpt;
d169 1
a169 1
        rc = dixSaveScreens(client, SCREEN_SAVER_FORCER, ScreenSaverReset);
@


1.8
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d39 1
d163 7
a169 1
        rc = dixSaveScreens(client, SCREEN_SAVER_FORCER, ScreenSaverActive);
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d52 1
a52 1
static Bool DPMSClose(int i, ScreenPtr pScreen);
d60 1
a60 1
    ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
d102 1
a102 1
DPMSClose(int i, ScreenPtr pScreen)
d105 1
a105 1

d117 1
a117 1

d124 2
a125 2
    if (xf86Screens[i]->vtSema && xf86Screens[i]->DPMSSet) {
        xf86Screens[i]->DPMSSet(xf86Screens[i], DPMSModeOn, 0);
d130 14
a143 1
    return pScreen->CloseScreen(i, pScreen);
a154 2
    DPMSPtr pDPMS;
    ScrnInfoPtr pScrn;
d169 4
a172 7
        pScrn = xf86Screens[i];
        pDPMS = dixLookupPrivate(&screenInfo.screens[i]->devPrivates, DPMSKey);
        if (pDPMS && pScrn->DPMSSet && pDPMS->Enabled && pScrn->vtSema) {
            xf86VGAarbiterLock(pScrn);
            pScrn->DPMSSet(pScrn, level, 0);
            xf86VGAarbiterUnlock(pScrn);
        }
d177 9
a193 2
    DPMSPtr pDPMS;
    ScrnInfoPtr pScrn;
d201 5
a205 3
        pScrn = xf86Screens[i];
        pDPMS = dixLookupPrivate(&screenInfo.screens[i]->devPrivates, DPMSKey);
        if (pDPMS && pScrn->DPMSSet)
@


1.6
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d45 1
d47 1
a47 1

a55 1

d67 2
a68 2
    if (!dixRegisterPrivateKey(&DPMSKeyRec, PRIVATE_SCREEN, sizeof (DPMSRec)))
	return FALSE;
d75 2
a76 2
	enabled_from = X_CMDLINE;
	DPMSEnabled = FALSE;
d79 3
a81 3
	enabled_from = X_CONFIG;
	DPMSEnabled = xf86CheckBoolOption(pScrn->options, "dpms", FALSE);
	xf86MarkOptionUsed(DPMSOpt);
d84 2
a85 2
	enabled_from = X_DEFAULT;
	DPMSEnabled = TRUE;
d88 1
a88 1
	xf86DrvMsg(pScreen->myNum, enabled_from, "DPMS enabled\n");
a98 1

d108 1
a108 1
	return FALSE;
d114 1
a114 1
	return FALSE;
d125 1
a125 1
 	xf86Screens[i]->DPMSSet(xf86Screens[i],DPMSModeOn,0);
d127 1
a127 1
    
d129 1
a129 1
	DPMSKey = NULL;
a132 1

d148 1
a148 1
	return Success;
d151 3
a153 3
	rc = dixSaveScreens(client, SCREEN_SAVER_FORCER, ScreenSaverActive);
	if (rc != Success)
	    return rc;
d158 7
a164 7
    	pScrn = xf86Screens[i];
	pDPMS = dixLookupPrivate(&screenInfo.screens[i]->devPrivates, DPMSKey);
	if (pDPMS && pScrn->DPMSSet && pDPMS->Enabled && pScrn->vtSema) { 
	    xf86VGAarbiterLock(pScrn);
	    pScrn->DPMSSet(pScrn, level, 0);
	    xf86VGAarbiterUnlock(pScrn);
	}
a168 1

d181 1
a181 1
	return FALSE;
d186 4
a189 4
    	pScrn = xf86Screens[i];
	pDPMS = dixLookupPrivate(&screenInfo.screens[i]->devPrivates, DPMSKey);
	if (pDPMS && pScrn->DPMSSet)
	    return TRUE;
d194 1
a194 1
#endif /* DPMSExtension */
@


1.5
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d49 1
a49 1
static int DPMSKeyIndex;
d65 1
a65 1
    DPMSKey = &DPMSKeyIndex;
d67 1
a67 2
    if (!dixSetPrivate(&pScreen->devPrivates, DPMSKey,
		       xcalloc(sizeof(DPMSRec), 1)))
a128 2
    xfree(pDPMS);
    dixSetPrivate(&pScreen->devPrivates, DPMSKey, NULL);
@


1.4
log
@Add a configure test for newer proto headers and use it to enable
building xserver 1.6 with those headers. ok oga@@.
@
text
@a0 1

a41 1
#ifdef HAVE_X11_EXTENSIONS_DPMSCONST_H
a42 4
#else
#define DPMS_SERVER
#include <X11/extensions/dpms.h>
#endif
d45 1
d56 1
a56 1
_X_EXPORT Bool
d63 1
a63 1
    MessageType enabled_from = X_INFO;
a66 2
    if (DPMSDisabledSwitch)
	DPMSEnabled = FALSE;
d71 1
a71 1
    pDPMS = (DPMSPtr)dixLookupPrivate(&pScreen->devPrivates, DPMSKey);
d75 7
a81 6
    if (DPMSOpt) {
	if ((pDPMS->Enabled
	    = xf86SetBoolOption(pScrn->options, "dpms", FALSE))
	    && !DPMSDisabledSwitch)
	    DPMSEnabled = TRUE;
            enabled_from = X_CONFIG;
d83 1
a83 5
    } else if (DPMSEnabledSwitch) {
	if (!DPMSDisabledSwitch)
	    DPMSEnabled = TRUE;
	pDPMS->Enabled = TRUE;
    }  
d85 2
a86 1
	pDPMS->Enabled = defaultDPMSEnabled;
d88 1
a88 1
    if (pDPMS->Enabled)
d90 1
d112 1
a112 1
    pDPMS = (DPMSPtr)dixLookupPrivate(&pScreen->devPrivates, DPMSKey);
d130 1
a130 1
    xfree((pointer)pDPMS);
d143 1
a143 1
_X_EXPORT int
d164 1
a164 2
	pDPMS = (DPMSPtr)dixLookupPrivate(&screenInfo.screens[i]->devPrivates,
					  DPMSKey);
d166 1
a166 1
	    xf86EnableAccess(pScrn);
d168 1
d179 1
a179 1
_X_EXPORT Bool
d193 1
a193 2
	pDPMS = (DPMSPtr)dixLookupPrivate(&screenInfo.screens[i]->devPrivates,
					  DPMSKey);
a197 21
}


/*
 * DPMSGet --
 *	Device dependent DPMS mode getting hook.  This returns the current
 *	DPMS mode, or -1 if DPMS is not supported.
 *
 *	This should hook in to the appropriate driver-level function, which
 *	will be added to the ScrnInfoRec.
 *
 *	NOTES:
 *	 1. the calling interface should be changed to specify which
 *	    screen to check.
 *	 2. It isn't clear that this function is ever used or what it should
 *	    return.
 */
_X_EXPORT int
DPMSGet(int *level)
{
    return DPMSPowerLevel;
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d43 3
d48 1
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d50 2
a51 1
static DevPrivateKey DPMSKey = NULL;
d66 1
a66 1
    DPMSKey = &DPMSKey;
@


1.1
log
@Initial revision
@
text
@d50 1
a50 2
static int DPMSGeneration = 0;
static int DPMSIndex = -1;
d63 1
d65 1
a65 5
    if (serverGeneration != DPMSGeneration) {
	if ((DPMSIndex = AllocateScreenPrivateIndex()) < 0)
	    return FALSE;
	DPMSGeneration = serverGeneration;
    }
d69 2
a70 1
    if (!(pScreen->devPrivates[DPMSIndex].ptr = xcalloc(sizeof(DPMSRec), 1)))
d73 1
a73 1
    pDPMS = (DPMSPtr)pScreen->devPrivates[DPMSIndex].ptr;
d82 1
a83 1
	xf86DrvMsg(pScreen->myNum, X_CONFIG, "DPMS enabled\n");
d92 2
d112 1
a112 1
    if (DPMSIndex < 0)
d115 1
a115 1
    pDPMS = (DPMSPtr)pScreen->devPrivates[DPMSIndex].ptr;
d134 1
a134 1
    pScreen->devPrivates[DPMSIndex].ptr = NULL;
d136 1
a136 1
	DPMSIndex = -1;
d146 2
a147 2
_X_EXPORT void
DPMSSet(int level)
d149 1
a149 1
    int i;
d155 2
a156 2
    if (DPMSIndex < 0)
	return;
d158 5
a162 2
    if (level != DPMSModeOn)
	SaveScreens(SCREEN_SAVER_FORCER, ScreenSaverActive);
d167 2
a168 1
	pDPMS = (DPMSPtr)screenInfo.screens[i]->devPrivates[DPMSIndex].ptr;
d174 1
d189 1
a189 1
    if (DPMSIndex < 0) {
d196 2
a197 1
	pDPMS = (DPMSPtr)screenInfo.screens[i]->devPrivates[DPMSIndex].ptr;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
