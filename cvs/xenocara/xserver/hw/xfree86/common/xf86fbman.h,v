head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.10
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.09.27.17.53.01;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	cVXoV5PxI8YrEaVA;

1.3
date	2012.06.10.13.21.24;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.30;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.13;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.13;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@
/*
 * Copyright (c) 1998-2001 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

#ifndef _XF86FBMAN_H
#define _XF86FBMAN_H

#include "scrnintstr.h"
#include "regionstr.h"

#define FAVOR_AREA_THEN_WIDTH		0
#define FAVOR_AREA_THEN_HEIGHT		1
#define FAVOR_WIDTH_THEN_AREA		2
#define FAVOR_HEIGHT_THEN_AREA		3

#define PRIORITY_LOW			0
#define PRIORITY_NORMAL			1
#define PRIORITY_EXTREME		2

typedef struct _FBArea {
    ScreenPtr pScreen;
    BoxRec box;
    int granularity;
    void (*MoveAreaCallback) (struct _FBArea *, struct _FBArea *);
    void (*RemoveAreaCallback) (struct _FBArea *);
    DevUnion devPrivate;
} FBArea, *FBAreaPtr;

typedef struct _FBLinear {
    ScreenPtr pScreen;
    int size;
    int offset;
    int granularity;
    void (*MoveLinearCallback) (struct _FBLinear *, struct _FBLinear *);
    void (*RemoveLinearCallback) (struct _FBLinear *);
    DevUnion devPrivate;
} FBLinear, *FBLinearPtr;

typedef void (*FreeBoxCallbackProcPtr) (ScreenPtr, RegionPtr, void *);
typedef void (*MoveAreaCallbackProcPtr) (FBAreaPtr, FBAreaPtr);
typedef void (*RemoveAreaCallbackProcPtr) (FBAreaPtr);

typedef void (*MoveLinearCallbackProcPtr) (FBLinearPtr, FBLinearPtr);
typedef void (*RemoveLinearCallbackProcPtr) (FBLinearPtr);

typedef struct {
    FBAreaPtr(*AllocateOffscreenArea) (ScreenPtr pScreen,
                                       int w, int h,
                                       int granularity,
                                       MoveAreaCallbackProcPtr moveCB,
                                       RemoveAreaCallbackProcPtr removeCB,
                                       void *privData);
    void (*FreeOffscreenArea) (FBAreaPtr area);
    Bool (*ResizeOffscreenArea) (FBAreaPtr area, int w, int h);
    Bool (*QueryLargestOffscreenArea) (ScreenPtr pScreen,
                                       int *width, int *height,
                                       int granularity,
                                       int preferences, int priority);
    Bool (*RegisterFreeBoxCallback) (ScreenPtr pScreen,
                                     FreeBoxCallbackProcPtr FreeBoxCallback,
                                     void *devPriv);
/* linear functions */
     FBLinearPtr(*AllocateOffscreenLinear) (ScreenPtr pScreen,
                                            int size,
                                            int granularity,
                                            MoveLinearCallbackProcPtr moveCB,
                                            RemoveLinearCallbackProcPtr
                                            removeCB, void *privData);
    void (*FreeOffscreenLinear) (FBLinearPtr area);
    Bool (*ResizeOffscreenLinear) (FBLinearPtr area, int size);
    Bool (*QueryLargestOffscreenLinear) (ScreenPtr pScreen,
                                         int *size,
                                         int granularity, int priority);
    Bool (*PurgeOffscreenAreas) (ScreenPtr);
} FBManagerFuncs, *FBManagerFuncsPtr;

extern _X_EXPORT Bool xf86RegisterOffscreenManager(ScreenPtr pScreen,
                                                   FBManagerFuncsPtr funcs);

extern _X_EXPORT Bool
 xf86InitFBManagerRegion(ScreenPtr pScreen, RegionPtr ScreenRegion);

extern _X_EXPORT Bool
 xf86InitFBManagerArea(ScreenPtr pScreen, int PixalArea, int Verbosity);

extern _X_EXPORT Bool
 xf86InitFBManager(ScreenPtr pScreen, BoxPtr FullBox);

extern _X_EXPORT Bool
 xf86InitFBManagerLinear(ScreenPtr pScreen, int offset, int size);

extern _X_EXPORT Bool
 xf86FBManagerRunning(ScreenPtr pScreen);

extern _X_EXPORT FBAreaPtr
xf86AllocateOffscreenArea(ScreenPtr pScreen,
                          int w, int h,
                          int granularity,
                          MoveAreaCallbackProcPtr moveCB,
                          RemoveAreaCallbackProcPtr removeCB, void *privData);

extern _X_EXPORT FBAreaPtr
xf86AllocateLinearOffscreenArea(ScreenPtr pScreen,
                                int length,
                                int granularity,
                                MoveAreaCallbackProcPtr moveCB,
                                RemoveAreaCallbackProcPtr removeCB,
                                void *privData);

extern _X_EXPORT FBLinearPtr
xf86AllocateOffscreenLinear(ScreenPtr pScreen,
                            int length,
                            int granularity,
                            MoveLinearCallbackProcPtr moveCB,
                            RemoveLinearCallbackProcPtr removeCB,
                            void *privData);

extern _X_EXPORT void xf86FreeOffscreenArea(FBAreaPtr area);
extern _X_EXPORT void xf86FreeOffscreenLinear(FBLinearPtr area);

extern _X_EXPORT Bool
 xf86ResizeOffscreenArea(FBAreaPtr resize, int w, int h);

extern _X_EXPORT Bool
 xf86ResizeOffscreenLinear(FBLinearPtr resize, int size);

extern _X_EXPORT Bool

xf86RegisterFreeBoxCallback(ScreenPtr pScreen,
                            FreeBoxCallbackProcPtr FreeBoxCallback,
                            void *devPriv);

extern _X_EXPORT Bool
 xf86PurgeUnlockedOffscreenAreas(ScreenPtr pScreen);

extern _X_EXPORT Bool

xf86QueryLargestOffscreenArea(ScreenPtr pScreen,
                              int *width, int *height,
                              int granularity, int preferences, int priority);

extern _X_EXPORT Bool

xf86QueryLargestOffscreenLinear(ScreenPtr pScreen,
                                int *size, int granularity, int priority);

#endif                          /* _XF86FBMAN_H */
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d63 1
a63 1
typedef void (*FreeBoxCallbackProcPtr) (ScreenPtr, RegionPtr, pointer);
d76 1
a76 1
                                       pointer privData);
d85 1
a85 1
                                     pointer devPriv);
d92 1
a92 1
                                            removeCB, pointer privData);
d124 1
a124 1
                          RemoveAreaCallbackProcPtr removeCB, pointer privData);
d132 1
a132 1
                                pointer privData);
d140 1
a140 1
                            pointer privData);
d155 1
a155 1
                            pointer devPriv);
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a31 1

a34 1

a43 1

d45 6
a50 6
   ScreenPtr    pScreen;
   BoxRec   	box;
   int 		granularity;
   void 	(*MoveAreaCallback)(struct _FBArea*, struct _FBArea*);
   void 	(*RemoveAreaCallback)(struct _FBArea*);
   DevUnion 	devPrivate;
d54 7
a60 7
   ScreenPtr    pScreen;
   int		size;
   int 		offset;
   int 		granularity;
   void 	(*MoveLinearCallback)(struct _FBLinear*, struct _FBLinear*);
   void 	(*RemoveLinearCallback)(struct _FBLinear*);
   DevUnion 	devPrivate;
d63 3
a65 6
typedef void (*FreeBoxCallbackProcPtr)(ScreenPtr, RegionPtr, pointer);
typedef void (*MoveAreaCallbackProcPtr)(FBAreaPtr, FBAreaPtr);
typedef void (*RemoveAreaCallbackProcPtr)(FBAreaPtr);

typedef void (*MoveLinearCallbackProcPtr)(FBLinearPtr, FBLinearPtr);
typedef void (*RemoveLinearCallbackProcPtr)(FBLinearPtr);
d67 2
d71 15
a85 19
    FBAreaPtr (*AllocateOffscreenArea)(
		ScreenPtr pScreen, 
		int w, int h,
		int granularity,
		MoveAreaCallbackProcPtr moveCB,
		RemoveAreaCallbackProcPtr removeCB,
		pointer privData);
    void      (*FreeOffscreenArea)(FBAreaPtr area);
    Bool      (*ResizeOffscreenArea)(FBAreaPtr area, int w, int h);
    Bool      (*QueryLargestOffscreenArea)(
		ScreenPtr pScreen,
		int *width, int *height,
		int granularity,
		int preferences,
		int priority);
    Bool      (*RegisterFreeBoxCallback)( 
		ScreenPtr pScreen,  
		FreeBoxCallbackProcPtr FreeBoxCallback,
		pointer devPriv);
d87 12
a98 15
    FBLinearPtr (*AllocateOffscreenLinear)(
		ScreenPtr pScreen, 
		int size,
		int granularity,
		MoveLinearCallbackProcPtr moveCB,
		RemoveLinearCallbackProcPtr removeCB,
		pointer privData);
    void      (*FreeOffscreenLinear)(FBLinearPtr area);
    Bool      (*ResizeOffscreenLinear)(FBLinearPtr area, int size);
    Bool      (*QueryLargestOffscreenLinear)(
		ScreenPtr pScreen,
		int *size,
		int granularity,
		int priority);
    Bool      (*PurgeOffscreenAreas) (ScreenPtr);
d101 2
a102 5

extern _X_EXPORT Bool xf86RegisterOffscreenManager(
    ScreenPtr pScreen, 
    FBManagerFuncsPtr funcs
);
d105 1
a105 4
xf86InitFBManagerRegion(
    ScreenPtr pScreen, 
    RegionPtr ScreenRegion
);
d108 1
a108 5
xf86InitFBManagerArea(
    ScreenPtr pScreen,
    int PixalArea,
    int Verbosity
);
d111 1
a111 4
xf86InitFBManager(
    ScreenPtr pScreen, 
    BoxPtr FullBox
);
d114 1
a114 5
xf86InitFBManagerLinear(
    ScreenPtr pScreen, 
    int offset,
    int size
);
d117 1
a117 3
xf86FBManagerRunning(
    ScreenPtr pScreen
);
d120 5
a124 8
xf86AllocateOffscreenArea (
   ScreenPtr pScreen, 
   int w, int h,
   int granularity,
   MoveAreaCallbackProcPtr moveCB,
   RemoveAreaCallbackProcPtr removeCB,
   pointer privData
);
d127 6
a132 8
xf86AllocateLinearOffscreenArea (
   ScreenPtr pScreen, 
   int length,
   int granularity,
   MoveAreaCallbackProcPtr moveCB,
   RemoveAreaCallbackProcPtr removeCB,
   pointer privData
);
d135 6
a140 8
xf86AllocateOffscreenLinear (
   ScreenPtr pScreen, 
   int length,
   int granularity,
   MoveLinearCallbackProcPtr moveCB,
   RemoveLinearCallbackProcPtr removeCB,
   pointer privData
);
d146 1
a146 4
xf86ResizeOffscreenArea(
   FBAreaPtr resize,
   int w, int h
);
d149 1
a149 4
xf86ResizeOffscreenLinear(
   FBLinearPtr resize,
   int size
);
d151 5
d158 1
a158 5
xf86RegisterFreeBoxCallback(
    ScreenPtr pScreen,  
    FreeBoxCallbackProcPtr FreeBoxCallback,
    pointer devPriv
);
a160 3
xf86PurgeUnlockedOffscreenAreas(
    ScreenPtr pScreen
);
d162 3
a166 15
xf86QueryLargestOffscreenArea(
    ScreenPtr pScreen,
    int *width, int *height,
    int granularity,
    int preferences,
    int priority
);

extern _X_EXPORT Bool
xf86QueryLargestOffscreenLinear(
    ScreenPtr pScreen,
    int *size,
    int granularity,
    int priority
);
d168 2
d171 1
a171 1
#endif /* _XF86FBMAN_H */
@


1.1
log
@Initial revision
@
text
@d113 1
a113 1
Bool xf86RegisterOffscreenManager(
d118 1
a118 1
Bool
d124 1
a124 1
Bool
d131 1
a131 1
Bool
d137 1
a137 1
Bool
d144 1
a144 1
Bool 
d149 1
a149 1
FBAreaPtr 
d159 1
a159 1
FBAreaPtr 
d169 1
a169 1
FBLinearPtr 
d179 2
a180 2
void xf86FreeOffscreenArea(FBAreaPtr area);
void xf86FreeOffscreenLinear(FBLinearPtr area);
d182 1
a182 1
Bool 
d188 1
a188 1
Bool 
d195 1
a195 1
Bool
d202 1
a202 1
Bool
d208 1
a208 1
Bool
d217 1
a217 1
Bool
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
