head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.6
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v1_4_0_90:1.1.1.3
	v1_4:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v1_2_0:1.1.1.2
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.05.29.12.02.37;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	s0SI41sEunLdyFfd;

1.11
date	2015.09.16.19.10.22;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	Te1daavkBLskZ8gc;

1.10
date	2014.09.27.17.53.01;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	cVXoV5PxI8YrEaVA;

1.9
date	2014.05.02.19.27.48;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2013.06.07.17.28.49;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.10.13.21.24;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.51;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.06;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.30;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.25;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.20;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.03;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.03;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.09.52;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.57.38;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 * Copyright (c) 1997-2003 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

/*
 * This file contains the parts of the loader interface that are visible
 * to modules.  This is the only loader-related header that modules should
 * include.
 *
 * It should include a bare minimum of other headers.
 *
 * Longer term, the module/loader code should probably live directly under
 * Xserver/.
 *
 * XXX This file arguably belongs in xfree86/loader/.
 */

#ifndef _XF86MODULE_H
#define _XF86MODULE_H

#include "misc.h"
#include "extension.h"
#ifndef NULL
#define NULL ((void *)0)
#endif

typedef enum {
    LD_RESOLV_IFDONE = 0,       /* only check if no more
                                   delays pending */
    LD_RESOLV_NOW = 1,          /* finish one delay step */
    LD_RESOLV_FORCE = 2         /* force checking... */
} LoaderResolveOptions;

#define DEFAULT_LIST ((char *)-1)

/* Built-in ABI classes.  These definitions must not be changed. */
#define ABI_CLASS_NONE		NULL
#define ABI_CLASS_ANSIC		"X.Org ANSI C Emulation"
#define ABI_CLASS_VIDEODRV	"X.Org Video Driver"
#define ABI_CLASS_XINPUT	"X.Org XInput driver"
#define ABI_CLASS_EXTENSION	"X.Org Server Extension"
#define ABI_CLASS_FONT		"X.Org Font Renderer"

#define ABI_MINOR_MASK		0x0000FFFF
#define ABI_MAJOR_MASK		0xFFFF0000
#define GET_ABI_MINOR(v)	((v) & ABI_MINOR_MASK)
#define GET_ABI_MAJOR(v)	(((v) & ABI_MAJOR_MASK) >> 16)
#define SET_ABI_VERSION(maj, min) \
		((((maj) << 16) & ABI_MAJOR_MASK) | ((min) & ABI_MINOR_MASK))

/*
 * ABI versions.  Each version has a major and minor revision.  Modules
 * using lower minor revisions must work with servers of a higher minor
 * revision.  There is no compatibility between different major revisions.
 * Whenever the ABI_ANSIC_VERSION is changed, the others must also be
 * changed.  The minor revision mask is 0x0000FFFF and the major revision
 * mask is 0xFFFF0000.
 */
#define ABI_ANSIC_VERSION	SET_ABI_VERSION(0, 4)
#define ABI_VIDEODRV_VERSION	SET_ABI_VERSION(20, 0)
#define ABI_XINPUT_VERSION	SET_ABI_VERSION(22, 1)
#define ABI_EXTENSION_VERSION	SET_ABI_VERSION(9, 0)
#define ABI_FONT_VERSION	SET_ABI_VERSION(0, 6)

#define MODINFOSTRING1	0xef23fdc5
#define MODINFOSTRING2	0x10dc023a

#ifndef MODULEVENDORSTRING
#define MODULEVENDORSTRING	"X.Org Foundation"
#endif

/* Error return codes for errmaj.  New codes must only be added at the end. */
typedef enum {
    LDR_NOERROR = 0,
    LDR_NOMEM,                  /* memory allocation failed */
    LDR_NOENT,                  /* Module file does not exist */
    LDR_NOSUBENT,               /* pre-requsite file to be sub-loaded does not exist */
    LDR_NOSPACE,                /* internal module array full */
    LDR_NOMODOPEN,              /* module file could not be opened (check errmin) */
    LDR_UNKTYPE,                /* file is not a recognized module type */
    LDR_NOLOAD,                 /* type specific loader failed */
    LDR_ONCEONLY,               /* Module should only be loaded once (not an error) */
    LDR_NOPORTOPEN,             /* could not open port (check errmin) */
    LDR_NOHARDWARE,             /* could not query/initialize the hardware device */
    LDR_MISMATCH,               /* the module didn't match the spec'd requirments */
    LDR_BADUSAGE,               /* LoadModule is called with bad arguments */
    LDR_INVALID,                /* The module doesn't have a valid ModuleData object */
    LDR_BADOS,                  /* The module doesn't support the OS */
    LDR_MODSPECIFIC             /* A module-specific error in the SetupProc */
} LoaderErrorCode;

/*
 * Some common module classes.  The moduleclass can be used to identify
 * that modules loaded are of the correct type.  This is a finer
 * classification than the ABI classes even though the default set of
 * classes have the same names.  For example, not all modules that require
 * the video driver ABI are themselves video drivers.
 */
#define MOD_CLASS_NONE		NULL
#define MOD_CLASS_VIDEODRV	"X.Org Video Driver"
#define MOD_CLASS_XINPUT	"X.Org XInput Driver"
#define MOD_CLASS_FONT		"X.Org Font Renderer"
#define MOD_CLASS_EXTENSION	"X.Org Server Extension"

/* This structure is expected to be returned by the initfunc */
typedef struct {
    const char *modname;        /* name of module, e.g. "foo" */
    const char *vendor;         /* vendor specific string */
    CARD32 _modinfo1_;          /* constant MODINFOSTRING1/2 to find */
    CARD32 _modinfo2_;          /* infoarea with a binary editor or sign tool */
    CARD32 xf86version;         /* contains XF86_VERSION_CURRENT */
    CARD8 majorversion;         /* module-specific major version */
    CARD8 minorversion;         /* module-specific minor version */
    CARD16 patchlevel;          /* module-specific patch level */
    const char *abiclass;       /* ABI class that the module uses */
    CARD32 abiversion;          /* ABI version */
    const char *moduleclass;    /* module class description */
    CARD32 checksum[4];         /* contains a digital signature of the */
    /* version info structure */
} XF86ModuleVersionInfo;

/*
 * This structure can be used to callers of LoadModule and LoadSubModule to
 * specify version and/or ABI requirements.
 */
typedef struct {
    CARD8 majorversion;         /* module-specific major version */
    CARD8 minorversion;         /* moudle-specific minor version */
    CARD16 patchlevel;          /* module-specific patch level */
    const char *abiclass;       /* ABI class that the module uses */
    CARD32 abiversion;          /* ABI version */
    const char *moduleclass;    /* module class */
} XF86ModReqInfo;

/* values to indicate unspecified fields in XF86ModReqInfo. */
#define MAJOR_UNSPEC		0xFF
#define MINOR_UNSPEC		0xFF
#define PATCH_UNSPEC		0xFFFF
#define ABI_VERS_UNSPEC		0xFFFFFFFF

#define MODULE_VERSION_NUMERIC(maj, min, patch) \
	((((maj) & 0xFF) << 24) | (((min) & 0xFF) << 16) | (patch & 0xFFFF))
#define GET_MODULE_MAJOR_VERSION(vers)	(((vers) >> 24) & 0xFF)
#define GET_MODULE_MINOR_VERSION(vers)	(((vers) >> 16) & 0xFF)
#define GET_MODULE_PATCHLEVEL(vers)	((vers) & 0xFFFF)

#define INITARGS void

/* Prototypes for Loader functions that are exported to modules */
extern _X_EXPORT void *LoadSubModule(void *, const char *, const char **,
                                       const char **, void *,
                                       const XF86ModReqInfo *, int *, int *);
extern _X_EXPORT void UnloadSubModule(void *);
extern _X_EXPORT void UnloadModule(void *);
extern _X_EXPORT void *LoaderSymbol(const char *);
extern _X_EXPORT const char **LoaderListDirs(const char **, const char **);
extern _X_EXPORT void LoaderFreeDirList(char **);
extern _X_EXPORT void LoaderErrorMsg(const char *, const char *, int, int);
extern _X_EXPORT void LoaderGetOS(const char **name, int *major, int *minor,
                                  int *teeny);
extern _X_EXPORT Bool LoaderShouldIgnoreABI(void);
extern _X_EXPORT int LoaderGetABIVersion(const char *abiclass);

typedef void *(*ModuleSetupProc) (void *, void *, int *, int *);
typedef void (*ModuleTearDownProc) (void *);

#define MODULESETUPPROTO(func) void *func(void *, void *, int*, int*)
#define MODULETEARDOWNPROTO(func) void func(void *)

typedef struct {
    XF86ModuleVersionInfo *vers;
    ModuleSetupProc setup;
    ModuleTearDownProc teardown;
} XF86ModuleData;

#endif                          /* _XF86STR_H */
@


1.11
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d83 2
a84 2
#define ABI_VIDEODRV_VERSION	SET_ABI_VERSION(19, 0)
#define ABI_XINPUT_VERSION	SET_ABI_VERSION(21, 0)
@


1.10
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d83 1
a83 1
#define ABI_VIDEODRV_VERSION	SET_ABI_VERSION(18, 0)
d85 1
a85 1
#define ABI_EXTENSION_VERSION	SET_ABI_VERSION(8, 0)
@


1.9
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d83 2
a84 2
#define ABI_VIDEODRV_VERSION	SET_ABI_VERSION(15, 0)
#define ABI_XINPUT_VERSION	SET_ABI_VERSION(20, 0)
d173 2
a174 2
extern _X_EXPORT pointer LoadSubModule(pointer, const char *, const char **,
                                       const char **, pointer,
d176 4
a179 4
extern _X_EXPORT void UnloadSubModule(pointer);
extern _X_EXPORT void UnloadModule(pointer);
extern _X_EXPORT pointer LoaderSymbol(const char *);
extern _X_EXPORT char **LoaderListDirs(const char **, const char **);
d187 2
a188 2
typedef pointer (*ModuleSetupProc) (pointer, pointer, int *, int *);
typedef void (*ModuleTearDownProc) (pointer);
d190 2
a191 2
#define MODULESETUPPROTO(func) pointer func(pointer, pointer, int*, int*)
#define MODULETEARDOWNPROTO(func) void func(pointer)
@


1.8
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d83 3
a85 3
#define ABI_VIDEODRV_VERSION	SET_ABI_VERSION(14, 1)
#define ABI_XINPUT_VERSION	SET_ABI_VERSION(19, 1)
#define ABI_EXTENSION_VERSION	SET_ABI_VERSION(7, 0)
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d45 1
a58 3
/* This indicates a special module that doesn't have the usual entry point */
#define EXTERN_MODULE ((pointer)-1)

d83 3
a85 3
#define ABI_VIDEODRV_VERSION	SET_ABI_VERSION(12, 0)
#define ABI_XINPUT_VERSION	SET_ABI_VERSION(16, 0)
#define ABI_EXTENSION_VERSION	SET_ABI_VERSION(6, 0)
a171 12
typedef void (*InitExtension) (INITARGS);

typedef struct {
    InitExtension initFunc;
    const char *name;
    Bool *disablePtr;
    InitExtension setupFunc;
    const char **initDependencies;
} ExtensionModule;

extern _X_EXPORT ExtensionModule *ExtensionModuleList;

a181 1
extern _X_EXPORT void LoadExtension(ExtensionModule *, Bool);
@


1.6
log
@Update to xserver 1.11.2
@
text
@d50 4
a53 4
    LD_RESOLV_IFDONE		= 0,	/* only check if no more
					   delays pending */
    LD_RESOLV_NOW		= 1,	/* finish one delay step */
    LD_RESOLV_FORCE		= 2	/* force checking... */
d85 2
a86 2
#define ABI_VIDEODRV_VERSION	SET_ABI_VERSION(11, 0)
#define ABI_XINPUT_VERSION	SET_ABI_VERSION(13, 0)
d100 15
a114 15
    LDR_NOMEM,		/* memory allocation failed */
    LDR_NOENT,		/* Module file does not exist */
    LDR_NOSUBENT,	/* pre-requsite file to be sub-loaded does not exist */
    LDR_NOSPACE,	/* internal module array full */
    LDR_NOMODOPEN,	/* module file could not be opened (check errmin) */
    LDR_UNKTYPE,	/* file is not a recognized module type */
    LDR_NOLOAD,		/* type specific loader failed */
    LDR_ONCEONLY,	/* Module should only be loaded once (not an error) */
    LDR_NOPORTOPEN,	/* could not open port (check errmin) */
    LDR_NOHARDWARE,	/* could not query/initialize the hardware device */
    LDR_MISMATCH,	/* the module didn't match the spec'd requirments */
    LDR_BADUSAGE,	/* LoadModule is called with bad arguments */
    LDR_INVALID,	/* The module doesn't have a valid ModuleData object */
    LDR_BADOS,		/* The module doesn't support the OS */
    LDR_MODSPECIFIC	/* A module-specific error in the SetupProc */
d132 13
a144 13
    const char * modname;	/* name of module, e.g. "foo" */
    const char * vendor;	/* vendor specific string */
    CARD32	 _modinfo1_;	/* constant MODINFOSTRING1/2 to find */
    CARD32	 _modinfo2_;	/* infoarea with a binary editor or sign tool */
    CARD32	 xf86version;	/* contains XF86_VERSION_CURRENT */
    CARD8	 majorversion;	/* module-specific major version */
    CARD8	 minorversion;	/* module-specific minor version */
    CARD16	 patchlevel;	/* module-specific patch level */
    const char * abiclass;	/* ABI class that the module uses */
    CARD32	 abiversion;	/* ABI version */
    const char * moduleclass;	/* module class description */
    CARD32	 checksum[4];	/* contains a digital signature of the */
				/* version info structure */
d152 6
a157 6
    CARD8	 majorversion;	/* module-specific major version */
    CARD8	 minorversion;	/* moudle-specific minor version */
    CARD16	 patchlevel;	/* module-specific patch level */
    const char * abiclass;	/* ABI class that the module uses */
    CARD32	 abiversion;	/* ABI version */
    const char * moduleclass;	/* module class */
d174 1
a174 1
typedef void (*InitExtension)(INITARGS);
d177 5
a181 5
    InitExtension	initFunc;
    const char *	name;
    Bool		*disablePtr;
    InitExtension	setupFunc;	
    const char **	initDependencies;
d188 2
a189 2
		      const char **, pointer, const XF86ModReqInfo *,
		      int *, int *);
d191 1
a191 1
extern _X_EXPORT void UnloadModule (pointer);
d197 2
a198 1
extern _X_EXPORT void LoaderGetOS(const char **name, int *major, int *minor, int *teeny);
d202 3
a204 2
typedef pointer (*ModuleSetupProc)(pointer, pointer, int *, int *);
typedef void (*ModuleTearDownProc)(pointer);
d209 3
a211 3
    XF86ModuleVersionInfo *	vers;
    ModuleSetupProc		setup;
    ModuleTearDownProc		teardown;
d214 1
a214 1
#endif /* _XF86STR_H */
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d85 3
a87 3
#define ABI_VIDEODRV_VERSION	SET_ABI_VERSION(8, 0)
#define ABI_XINPUT_VERSION	SET_ABI_VERSION(11, 0)
#define ABI_EXTENSION_VERSION	SET_ABI_VERSION(4, 0)
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d85 3
a87 3
#define ABI_VIDEODRV_VERSION	SET_ABI_VERSION(7, 0)
#define ABI_XINPUT_VERSION	SET_ABI_VERSION(9, 0)
#define ABI_EXTENSION_VERSION	SET_ABI_VERSION(3, 0)
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d85 3
a87 3
#define ABI_VIDEODRV_VERSION	SET_ABI_VERSION(5, 0)
#define ABI_XINPUT_VERSION	SET_ABI_VERSION(4, 0)
#define ABI_EXTENSION_VERSION	SET_ABI_VERSION(2, 0)
d184 1
a184 1
extern ExtensionModule *ExtensionModuleList;
d187 1
a187 3
#ifndef IN_LOADER
/* Prototypes with opaque pointers for use by modules */
pointer LoadSubModule(pointer, const char *, const char **,
d190 10
a199 20
pointer LoadSubModuleLocal(pointer, const char *, const char **,
			   const char **, pointer, const XF86ModReqInfo *,
			   int *, int *);
void UnloadSubModule(pointer);
void UnloadModule (pointer);
#endif
pointer LoaderSymbol(const char *);
pointer LoaderSymbolLocal(pointer module, const char *);
char **LoaderListDirs(const char **, const char **);
void LoaderFreeDirList(char **);
void LoaderErrorMsg(const char *, const char *, int, int);
void LoadExtension(ExtensionModule *, Bool);
void LoaderRefSymLists(const char **, ...);
void LoaderRefSymbols(const char *, ...);
void LoaderReqSymLists(const char **, ...);
void LoaderReqSymbols(const char *, ...);
int LoaderCheckUnresolved(int);
void LoaderGetOS(const char **name, int *major, int *minor, int *teeny);
Bool LoaderShouldIgnoreABI(void);
int LoaderGetABIVersion(const char *abiclass);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a44 1
#include "xf86Version.h"
d85 3
a87 3
#define ABI_VIDEODRV_VERSION	SET_ABI_VERSION(4, 1)
#define ABI_XINPUT_VERSION	SET_ABI_VERSION(2, 1)
#define ABI_EXTENSION_VERSION	SET_ABI_VERSION(1, 1)
a195 1
void LoadFont(pointer);
d210 1
@


1.1
log
@Initial revision
@
text
@a0 1

d85 5
a89 5
#define ABI_ANSIC_VERSION	SET_ABI_VERSION(0, 3)
#define ABI_VIDEODRV_VERSION	SET_ABI_VERSION(1, 0)
#define ABI_XINPUT_VERSION	SET_ABI_VERSION(0, 6)
#define ABI_EXTENSION_VERSION	SET_ABI_VERSION(0, 3)
#define ABI_FONT_VERSION	SET_ABI_VERSION(0, 5)
a94 1
#ifndef __OS2ELF__
a95 3
#else
#define MODULEVENDORSTRING	"X.Org Foundation - OS2"
#endif
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@Import xserver version 1.2.0 (X.Org 7.2 final).
@
text
@d87 2
a88 2
#define ABI_VIDEODRV_VERSION	SET_ABI_VERSION(1, 1)
#define ABI_XINPUT_VERSION	SET_ABI_VERSION(0, 7)
@


1.1.1.3
log
@xserver 1.4
@
text
@d1 1
d87 2
a88 2
#define ABI_VIDEODRV_VERSION	SET_ABI_VERSION(2, 0)
#define ABI_XINPUT_VERSION	SET_ABI_VERSION(2, 0)
d96 1
d98 3
@


