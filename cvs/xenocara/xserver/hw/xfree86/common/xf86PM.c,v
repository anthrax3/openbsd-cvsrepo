head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.10
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.6
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.09.27.17.53.01;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	cVXoV5PxI8YrEaVA;

1.6
date	2013.06.07.17.28.49;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.24;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.51;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.30;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.20;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.06;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.57.49;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@/*
 * Copyright (c) 2000-2002 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/X.h>
#include "xf86.h"
#include "xf86Priv.h"
#include "xf86Xinput.h"
#include "xf86_OSproc.h"

int (*xf86PMGetEventFromOs) (int fd, pmEvent * events, int num) = NULL;
pmWait (*xf86PMConfirmEventToOs) (int fd, pmEvent event) = NULL;

static Bool suspended = FALSE;

static int
eventName(pmEvent event, const char **str)
{
    switch (event) {
    case XF86_APM_SYS_STANDBY:
        *str = "System Standby Request";
        return 0;
    case XF86_APM_SYS_SUSPEND:
        *str = "System Suspend Request";
        return 0;
    case XF86_APM_CRITICAL_SUSPEND:
        *str = "Critical Suspend";
        return 0;
    case XF86_APM_USER_STANDBY:
        *str = "User System Standby Request";
        return 0;
    case XF86_APM_USER_SUSPEND:
        *str = "User System Suspend Request";
        return 0;
    case XF86_APM_STANDBY_RESUME:
        *str = "System Standby Resume";
        return 0;
    case XF86_APM_NORMAL_RESUME:
        *str = "Normal Resume System";
        return 0;
    case XF86_APM_CRITICAL_RESUME:
        *str = "Critical Resume System";
        return 0;
    case XF86_APM_LOW_BATTERY:
        *str = "Battery Low";
        return 3;
    case XF86_APM_POWER_STATUS_CHANGE:
        *str = "Power Status Change";
        return 3;
    case XF86_APM_UPDATE_TIME:
        *str = "Update Time";
        return 3;
    case XF86_APM_CAPABILITY_CHANGED:
        *str = "Capability Changed";
        return 3;
    case XF86_APM_STANDBY_FAILED:
        *str = "Standby Request Failed";
        return 0;
    case XF86_APM_SUSPEND_FAILED:
        *str = "Suspend Request Failed";
        return 0;
    default:
        *str = "Unknown Event";
        return 0;
    }
}

static void
suspend(pmEvent event, Bool undo)
{
    int i;
    InputInfoPtr pInfo;

    for (i = 0; i < xf86NumScreens; i++) {
        if (xf86Screens[i]->EnableDisableFBAccess)
            (*xf86Screens[i]->EnableDisableFBAccess) (xf86Screens[i], FALSE);
    }
    pInfo = xf86InputDevs;
    while (pInfo) {
        DisableDevice(pInfo->dev, TRUE);
        pInfo = pInfo->next;
    }
    OsBlockSIGIO();
    for (i = 0; i < xf86NumScreens; i++) {
        if (xf86Screens[i]->PMEvent)
            xf86Screens[i]->PMEvent(xf86Screens[i], event, undo);
        else {
            xf86Screens[i]->LeaveVT(xf86Screens[i]);
            xf86Screens[i]->vtSema = FALSE;
        }
    }
    xf86AccessLeave();

}

static void
resume(pmEvent event, Bool undo)
{
    int i;
    InputInfoPtr pInfo;

    xf86AccessEnter();
    for (i = 0; i < xf86NumScreens; i++) {
        if (xf86Screens[i]->PMEvent)
            xf86Screens[i]->PMEvent(xf86Screens[i], event, undo);
        else {
            xf86Screens[i]->vtSema = TRUE;
            xf86Screens[i]->EnterVT(xf86Screens[i]);
        }
    }
    OsReleaseSIGIO();
    for (i = 0; i < xf86NumScreens; i++) {
        if (xf86Screens[i]->EnableDisableFBAccess)
            (*xf86Screens[i]->EnableDisableFBAccess) (xf86Screens[i], TRUE);
    }
    dixSaveScreens(serverClient, SCREEN_SAVER_FORCER, ScreenSaverReset);
    pInfo = xf86InputDevs;
    while (pInfo) {
        EnableDevice(pInfo->dev, TRUE);
        pInfo = pInfo->next;
    }
}

static void
DoApmEvent(pmEvent event, Bool undo)
{
    int i;

    switch (event) {
#if 0
    case XF86_APM_SYS_STANDBY:
    case XF86_APM_USER_STANDBY:
#endif
    case XF86_APM_SYS_SUSPEND:
    case XF86_APM_CRITICAL_SUSPEND:    /*do we want to delay a critical suspend? */
    case XF86_APM_USER_SUSPEND:
        /* should we do this ? */
        if (!undo && !suspended) {
            suspend(event, undo);
            suspended = TRUE;
        }
        else if (undo && suspended) {
            resume(event, undo);
            suspended = FALSE;
        }
        break;
#if 0
    case XF86_APM_STANDBY_RESUME:
#endif
    case XF86_APM_NORMAL_RESUME:
    case XF86_APM_CRITICAL_RESUME:
        if (suspended) {
            resume(event, undo);
            suspended = FALSE;
        }
        break;
    default:
        OsBlockSIGIO();
        for (i = 0; i < xf86NumScreens; i++) {
            if (xf86Screens[i]->PMEvent) {
                xf86Screens[i]->PMEvent(xf86Screens[i], event, undo);
            }
        }
        OsReleaseSIGIO();
        break;
    }
}

#define MAX_NO_EVENTS 8

void
xf86HandlePMEvents(int fd, void *data)
{
    pmEvent events[MAX_NO_EVENTS];
    int i, n;
    Bool wait = FALSE;

    if (!xf86PMGetEventFromOs)
        return;

    if ((n = xf86PMGetEventFromOs(fd, events, MAX_NO_EVENTS))) {
        do {
            for (i = 0; i < n; i++) {
                const char *str = NULL;
                int verb = eventName(events[i], &str);

                xf86MsgVerb(X_INFO, verb, "PM Event received: %s\n", str);
                DoApmEvent(events[i], FALSE);
                switch (xf86PMConfirmEventToOs(fd, events[i])) {
                case PM_WAIT:
                    wait = TRUE;
                    break;
                case PM_CONTINUE:
                    wait = FALSE;
                    break;
                case PM_FAILED:
                    DoApmEvent(events[i], TRUE);
                    wait = FALSE;
                    break;
                default:
                    break;
                }
            }
            if (wait)
                n = xf86PMGetEventFromOs(fd, events, MAX_NO_EVENTS);
            else
                break;
        } while (1);
    }
}
@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d199 1
a199 1
xf86HandlePMEvents(int fd, pointer data)
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a94 2
static int sigio_blocked_for_suspend;

d103 1
a103 1
            (*xf86Screens[i]->EnableDisableFBAccess) (i, FALSE);
d110 1
a110 1
    sigio_blocked_for_suspend = xf86BlockSIGIO();
d113 1
a113 1
            xf86Screens[i]->PMEvent(i, event, undo);
d115 1
a115 1
            xf86Screens[i]->LeaveVT(i, 0);
d132 1
a132 1
            xf86Screens[i]->PMEvent(i, event, undo);
d135 1
a135 1
            xf86Screens[i]->EnterVT(i, 0);
d138 1
a138 1
    xf86UnblockSIGIO(sigio_blocked_for_suspend);
d141 1
a141 1
            (*xf86Screens[i]->EnableDisableFBAccess) (i, TRUE);
d154 1
a154 1
    int i, was_blocked;
d185 1
a185 1
        was_blocked = xf86BlockSIGIO();
d188 1
a188 1
                xf86Screens[i]->PMEvent(i, event, undo);
d191 1
a191 1
        xf86UnblockSIGIO(was_blocked);
@


1.4
log
@Update to xserver 1.11.2
@
text
@d38 2
a39 2
int (*xf86PMGetEventFromOs)(int fd,pmEvent *events,int num) = NULL;
pmWait (*xf86PMConfirmEventToOs)(int fd,pmEvent event) = NULL;
d44 1
a44 1
eventName(pmEvent event, char **str)
d46 46
a91 16
    switch(event) {
    case XF86_APM_SYS_STANDBY: *str="System Standby Request"; return 0;
    case XF86_APM_SYS_SUSPEND: *str="System Suspend Request"; return 0;
    case XF86_APM_CRITICAL_SUSPEND: *str="Critical Suspend"; return 0;
    case XF86_APM_USER_STANDBY: *str="User System Standby Request"; return 0;
    case XF86_APM_USER_SUSPEND: *str="User System Suspend Request"; return 0;
    case XF86_APM_STANDBY_RESUME: *str="System Standby Resume"; return 0;
    case XF86_APM_NORMAL_RESUME: *str="Normal Resume System"; return 0;
    case XF86_APM_CRITICAL_RESUME: *str="Critical Resume System"; return 0;
    case XF86_APM_LOW_BATTERY: *str="Battery Low"; return 3;
    case XF86_APM_POWER_STATUS_CHANGE: *str="Power Status Change";return 3;
    case XF86_APM_UPDATE_TIME: *str="Update Time";return 3;
    case XF86_APM_CAPABILITY_CHANGED: *str="Capability Changed"; return 3;
    case XF86_APM_STANDBY_FAILED: *str="Standby Request Failed"; return 0;
    case XF86_APM_SUSPEND_FAILED: *str="Suspend Request Failed"; return 0;
    default: *str="Unknown Event"; return 0;
d98 1
a98 1
suspend (pmEvent event, Bool undo)
d104 2
a105 2
	if (xf86Screens[i]->EnableDisableFBAccess)
	    (*xf86Screens[i]->EnableDisableFBAccess) (i, FALSE);
d109 2
a110 2
	DisableDevice(pInfo->dev, TRUE);
	pInfo = pInfo->next;
d114 6
a119 6
	if (xf86Screens[i]->PMEvent)
	    xf86Screens[i]->PMEvent(i,event,undo);
	else {
	    xf86Screens[i]->LeaveVT(i, 0);
	    xf86Screens[i]->vtSema = FALSE;
	}
d121 1
a121 1
    xf86AccessLeave();      
d133 6
a138 6
	if (xf86Screens[i]->PMEvent)
	    xf86Screens[i]->PMEvent(i,event,undo);
	else {
	    xf86Screens[i]->vtSema = TRUE;
	    xf86Screens[i]->EnterVT(i, 0);
	}
d142 2
a143 2
	if (xf86Screens[i]->EnableDisableFBAccess)
	    (*xf86Screens[i]->EnableDisableFBAccess) (i, TRUE);
d148 2
a149 2
	EnableDevice(pInfo->dev, TRUE);
	pInfo = pInfo->next;
d157 2
a158 2
    
    switch(event) {
d164 1
a164 1
    case XF86_APM_CRITICAL_SUSPEND: /*do we want to delay a critical suspend?*/
d166 10
a175 9
	/* should we do this ? */
	if (!undo && !suspended) {
	    suspend(event,undo);
	    suspended = TRUE;
	} else if (undo && suspended) {
	    resume(event,undo);
	    suspended = FALSE;
	}
	break;
d181 5
a185 5
	if (suspended) {
	    resume(event,undo);
	    suspended = FALSE;
	}
	break;
d187 8
a194 8
	was_blocked = xf86BlockSIGIO();
	for (i = 0; i < xf86NumScreens; i++) {
	    if (xf86Screens[i]->PMEvent) {
		xf86Screens[i]->PMEvent(i,event,undo);
	    }
	}
	xf86UnblockSIGIO(was_blocked);
	break;
d204 1
a204 1
    int i,n;
d208 1
a208 1
	return;
d210 28
a237 28
    if ((n = xf86PMGetEventFromOs(fd,events,MAX_NO_EVENTS))) {
	do {
	    for (i = 0; i < n; i++) {
		char *str = NULL;
		int verb = eventName(events[i],&str);

		xf86MsgVerb(X_INFO,verb,"PM Event received: %s\n",str);
		DoApmEvent(events[i],FALSE);
		switch (xf86PMConfirmEventToOs(fd,events[i])) {
		case PM_WAIT:
		    wait = TRUE;
		    break;
		case PM_CONTINUE:
		    wait = FALSE;
		    break;
		case PM_FAILED:
		    DoApmEvent(events[i],TRUE);
		    wait = FALSE;
		    break;
		default:
		    break;
		}
	    }
	    if (wait)
		n = xf86PMGetEventFromOs(fd,events,MAX_NO_EVENTS);
	    else
		break;
	} while (1);
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d36 1
d65 2
a72 2
   xf86inSuspend = TRUE;
    
d82 1
a82 1
    xf86EnterServerState(SETUP);
a101 1
    xf86EnterServerState(SETUP);
d110 1
a110 1
    xf86EnterServerState(OPERATING);
a120 1
    xf86inSuspend = FALSE;
d126 1
a126 6
    /* 
     * we leave that as a global function for now. I don't know if 
     * this might cause problems in the future. It is a global server 
     * variable therefore it needs to be in a server info structure
     */
    int i, setup = 0;
d156 1
a158 2
		if (!setup) xf86EnterServerState(SETUP);
		setup = 1;
d162 1
a162 1
	if (setup) xf86EnterServerState(OPERATING);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a72 1
        xf86EnableAccess(xf86Screens[i]);
d78 1
a78 1
	DisableDevice(pInfo->dev);
a82 1
        xf86EnableAccess(xf86Screens[i]);
d91 1
a91 1
    xf86AccessLeaveState(); 
a102 1
        xf86EnableAccess(xf86Screens[i]);
a111 1
        xf86EnableAccess(xf86Screens[i]);
d118 1
a118 1
	EnableDevice(pInfo->dev);
a165 1
		xf86EnableAccess(xf86Screens[i]);
@


1.1
log
@Initial revision
@
text
@a76 1
#if !defined(__EMX__)
a81 1
#endif
d119 1
a119 2
    SaveScreens(SCREEN_SAVER_FORCER, ScreenSaverReset);
#if !defined(__EMX__)
a124 1
#endif
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d77 1
d83 1
d122 1
d128 1
@

