head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.8
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.6
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.09.27.17.53.01;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	cVXoV5PxI8YrEaVA;

1.9
date	2013.06.07.17.28.49;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.10.13.21.24;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.05.13.32.51;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.12.05.15.36.07;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.27.19.02.30;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.06.19.44.25;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.15.26.20;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.15.00.17.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.15;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.15;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.57.38;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@/*
 * Copyright (c) 1997-2002 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

/*
 * This file contains declarations for private XFree86 functions and variables,
 * and definitions of private macros.
 *
 * "private" means not available to video drivers.
 */

#ifndef _XF86PRIV_H
#define _XF86PRIV_H

#include "xf86Privstr.h"
#include "propertyst.h"
#include "input.h"

/*
 * Parameters set ONLY from the command line options
 * The global state of these things is held in xf86InfoRec (when appropriate).
 */
extern _X_EXPORT const char *xf86ConfigFile;
extern _X_EXPORT const char *xf86ConfigDir;
extern _X_EXPORT Bool xf86AllowMouseOpenFail;

#ifdef XF86VIDMODE
extern _X_EXPORT Bool xf86VidModeDisabled;
extern _X_EXPORT Bool xf86VidModeAllowNonLocal;
#endif
extern _X_EXPORT Bool xf86fpFlag;
extern _X_EXPORT Bool xf86sFlag;
extern _X_EXPORT Bool xf86bsEnableFlag;
extern _X_EXPORT Bool xf86bsDisableFlag;
extern _X_EXPORT Bool xf86silkenMouseDisableFlag;
extern _X_EXPORT Bool xf86xkbdirFlag;

#ifdef HAVE_ACPI
extern _X_EXPORT Bool xf86acpiDisableFlag;
#endif
extern _X_EXPORT char *xf86LayoutName;
extern _X_EXPORT char *xf86ScreenName;
extern _X_EXPORT char *xf86PointerName;
extern _X_EXPORT char *xf86KeyboardName;
extern _X_EXPORT int xf86FbBpp;
extern _X_EXPORT int xf86Depth;
extern _X_EXPORT Pix24Flags xf86Pix24;
extern _X_EXPORT rgb xf86Weight;
extern _X_EXPORT Bool xf86FlipPixels;
extern _X_EXPORT Gamma xf86Gamma;
extern _X_EXPORT const char *xf86ServerName;

/* Other parameters */

extern _X_EXPORT xf86InfoRec xf86Info;
extern _X_EXPORT const char *xf86ModulePath;
extern _X_EXPORT MessageType xf86ModPathFrom;
extern _X_EXPORT const char *xf86LogFile;
extern _X_EXPORT MessageType xf86LogFileFrom;
extern _X_EXPORT Bool xf86LogFileWasOpened;
extern _X_EXPORT serverLayoutRec xf86ConfigLayout;

extern _X_EXPORT DriverPtr *xf86DriverList;
extern _X_EXPORT int xf86NumDrivers;
extern _X_EXPORT Bool xf86Resetting;
extern _X_EXPORT Bool xf86Initialising;
extern _X_EXPORT int xf86NumScreens;
extern _X_EXPORT const char *xf86VisualNames[];
extern _X_EXPORT int xf86Verbose;       /* verbosity level */
extern _X_EXPORT int xf86LogVerbose;    /* log file verbosity level */

extern _X_EXPORT RootWinPropPtr *xf86RegisteredPropertiesTable;

extern ScrnInfoPtr *xf86GPUScreens;      /* List of pointers to ScrnInfoRecs */
extern int xf86NumGPUScreens;
#ifndef DEFAULT_VERBOSE
#define DEFAULT_VERBOSE		0
#endif
#ifndef DEFAULT_LOG_VERBOSE
#define DEFAULT_LOG_VERBOSE	3
#endif
#ifndef DEFAULT_DPI
#define DEFAULT_DPI		96
#endif

/* Function Prototypes */
#ifndef _NO_XF86_PROTOTYPES

/* xf86Bus.c */
extern _X_EXPORT Bool xf86BusConfig(void);
extern _X_EXPORT void xf86BusProbe(void);
extern _X_EXPORT void xf86AccessEnter(void);
extern _X_EXPORT void xf86AccessLeave(void);
extern _X_EXPORT void xf86PostProbe(void);
extern _X_EXPORT void xf86ClearEntityListForScreen(ScrnInfoPtr pScrn);
extern _X_EXPORT void xf86AddDevToEntity(int entityIndex, GDevPtr dev);
extern _X_EXPORT void xf86RemoveDevFromEntity(int entityIndex, GDevPtr dev);

/* xf86Config.c */

extern _X_EXPORT Bool xf86PathIsSafe(const char *path);

/* xf86DefaultModes */

extern _X_EXPORT const DisplayModeRec xf86DefaultModes[];
extern _X_EXPORT const int xf86NumDefaultModes;

/* xf86Configure.c */
extern _X_EXPORT void
DoConfigure(void)
    _X_NORETURN;
extern _X_EXPORT void
DoShowOptions(void)
    _X_NORETURN;

/* xf86Events.c */

extern _X_EXPORT void
xf86Wakeup(void *blockData, int err, void *pReadmask);
extern _X_HIDDEN int
xf86SigWrapper(int signo);
extern _X_EXPORT void
xf86HandlePMEvents(int fd, void *data);
extern _X_EXPORT int (*xf86PMGetEventFromOs) (int fd, pmEvent * events,
                                              int num);
extern _X_EXPORT pmWait (*xf86PMConfirmEventToOs) (int fd, pmEvent event);

/* xf86Helper.c */
extern _X_EXPORT void
xf86LogInit(void);
extern _X_EXPORT void
xf86CloseLog(enum ExitCode error);

/* xf86Init.c */
extern _X_EXPORT Bool
xf86LoadModules(const char **list, void **optlist);
extern _X_EXPORT int
xf86SetVerbosity(int verb);
extern _X_EXPORT int
xf86SetLogVerbosity(int verb);
extern _X_EXPORT Bool
xf86CallDriverProbe(struct _DriverRec *drv, Bool detect_only);
extern _X_EXPORT Bool
xf86PrivsElevated(void);

#endif                          /* _NO_XF86_PROTOTYPES */

#endif                          /* _XF86PRIV_H */
@


1.9
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d142 1
a142 1
xf86Wakeup(pointer blockData, int err, pointer pReadmask);
d146 1
a146 1
xf86HandlePMEvents(int fd, pointer data);
d159 1
a159 1
xf86LoadModules(char **list, pointer *optlist);
@


1.8
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a93 1
extern _X_EXPORT Bool xorgHWAccess;
d97 2
d118 1
a118 1
extern _X_EXPORT void xf86ClearEntityListForScreen(int scrnIndex);
d120 1
@


1.7
log
@Update to xserver 1.11.2
@
text
@d48 2
a49 1
extern _X_EXPORT  Bool xf86AllowMouseOpenFail;
d51 10
a60 9
extern _X_EXPORT  Bool xf86VidModeDisabled;
extern _X_EXPORT  Bool xf86VidModeAllowNonLocal;
#endif 
extern _X_EXPORT  Bool xf86fpFlag;
extern _X_EXPORT  Bool xf86sFlag;
extern _X_EXPORT  Bool xf86bsEnableFlag;
extern _X_EXPORT  Bool xf86bsDisableFlag;
extern _X_EXPORT  Bool xf86silkenMouseDisableFlag;
extern _X_EXPORT  Bool xf86xkbdirFlag;
d62 1
a62 1
extern _X_EXPORT  Bool xf86acpiDisableFlag;
d64 11
a74 11
extern _X_EXPORT  char *xf86LayoutName;
extern _X_EXPORT  char *xf86ScreenName;
extern _X_EXPORT  char *xf86PointerName;
extern _X_EXPORT  char *xf86KeyboardName;
extern _X_EXPORT  int xf86FbBpp;
extern _X_EXPORT  int xf86Depth;
extern _X_EXPORT  Pix24Flags xf86Pix24;
extern _X_EXPORT  rgb xf86Weight;
extern _X_EXPORT  Bool xf86FlipPixels;
extern _X_EXPORT  Gamma xf86Gamma;
extern _X_EXPORT  char *xf86ServerName;
d78 17
a94 17
extern _X_EXPORT  xf86InfoRec xf86Info;
extern _X_EXPORT  const char *xf86ModulePath;
extern _X_EXPORT  MessageType xf86ModPathFrom;
extern _X_EXPORT  const char *xf86LogFile;
extern _X_EXPORT  MessageType xf86LogFileFrom;
extern _X_EXPORT  Bool xf86LogFileWasOpened;
extern _X_EXPORT  serverLayoutRec xf86ConfigLayout;

extern _X_EXPORT  DriverPtr *xf86DriverList;
extern _X_EXPORT  int xf86NumDrivers;
extern _X_EXPORT  Bool xf86Resetting;
extern _X_EXPORT  Bool xf86Initialising;
extern _X_EXPORT  int xf86NumScreens;
extern _X_EXPORT  const char *xf86VisualNames[];
extern _X_EXPORT  int xf86Verbose;                 /* verbosity level */
extern _X_EXPORT  int xf86LogVerbose;		/* log file verbosity level */
extern _X_EXPORT  Bool xorgHWAccess;
d96 1
a96 1
extern _X_EXPORT  RootWinPropPtr *xf86RegisteredPropertiesTable;
d130 6
a135 4
extern _X_EXPORT void DoConfigure(void);

/* xf86ShowOpts.c */
extern _X_EXPORT void DoShowOptions(void);
d139 9
a147 5
extern _X_EXPORT void xf86Wakeup(pointer blockData, int err, pointer pReadmask);
extern _X_HIDDEN int xf86SigWrapper(int signo);
extern _X_EXPORT void xf86HandlePMEvents(int fd, pointer data);
extern _X_EXPORT int (*xf86PMGetEventFromOs)(int fd,pmEvent *events,int num);
extern _X_EXPORT pmWait (*xf86PMConfirmEventToOs)(int fd,pmEvent event);
d150 4
a153 2
extern _X_EXPORT void xf86LogInit(void);
extern _X_EXPORT void xf86CloseLog(enum ExitCode error);
d156 10
a165 6
extern _X_EXPORT Bool xf86LoadModules(char **list, pointer *optlist);
extern _X_EXPORT int xf86SetVerbosity(int verb);
extern _X_EXPORT int xf86SetLogVerbosity(int verb);
extern _X_EXPORT Bool xf86CallDriverProbe( struct _DriverRec * drv, Bool detect_only );

#endif /* _NO_XF86_PROTOTYPES */
d167 1
d169 1
a169 1
#endif /* _XF86PRIV_H */
@


1.6
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a37 2
#include <pciaccess.h>

a72 1
extern _X_EXPORT  struct pci_slot_match xf86IsolateDevice;
a116 1
extern _X_EXPORT void xf86PostScreenInit(void);
d143 1
a143 1
extern _X_EXPORT void xf86CloseLog(void);
a149 3

/* xf86Xinput.c */
extern _X_EXPORT EventList *xf86Events;
@


1.5
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d113 1
a113 1

a114 1
extern _X_EXPORT void xf86AccessInit(void);
a116 4
extern _X_EXPORT void xf86EntityInit(void);

extern _X_EXPORT void xf86FindPrimaryDevice(void);
/* new RAC */
@


1.4
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d48 3
a50 2
extern const char *xf86ConfigFile;
extern Bool xf86AllowMouseOpenFail;
d52 2
a53 2
extern Bool xf86VidModeDisabled;
extern Bool xf86VidModeAllowNonLocal; 
d55 8
a62 13
extern Bool xf86fpFlag;
extern Bool xf86sFlag;
extern Bool xf86bsEnableFlag;
extern Bool xf86bsDisableFlag;
extern Bool xf86silkenMouseDisableFlag;
extern Bool xf86xkbdirFlag;
extern Bool xf86acpiDisableFlag;
extern char *xf86LayoutName;
extern char *xf86ScreenName;
extern char *xf86PointerName;
extern char *xf86KeyboardName;
#ifdef KEEPBPP
extern int xf86Bpp;
d64 12
a75 8
extern int xf86FbBpp;
extern int xf86Depth;
extern Pix24Flags xf86Pix24;
extern rgb xf86Weight;
extern Bool xf86FlipPixels;
extern Gamma xf86Gamma;
extern char *xf86ServerName;
extern struct pci_slot_match xf86IsolateDevice;
d79 17
a95 26
extern xf86InfoRec xf86Info;
extern const char *xf86InputDeviceList;
extern const char *xf86ModulePath;
extern MessageType xf86ModPathFrom;
extern const char *xf86LogFile;
extern MessageType xf86LogFileFrom;
extern Bool xf86LogFileWasOpened;
extern serverLayoutRec xf86ConfigLayout;
extern Pix24Flags xf86ConfigPix24;

extern unsigned short xf86MouseCflags[];
extern Bool xf86SupportedMouseTypes[];
extern int xf86NumMouseTypes;

extern DriverPtr *xf86DriverList;
extern int xf86NumDrivers;
extern Bool xf86Resetting;
extern Bool xf86Initialising;
extern int xf86NumScreens;
extern xf86CurrentAccessRec xf86CurrentAccess;
extern const char *xf86VisualNames[];
extern int xf86Verbose;                 /* verbosity level */
extern int xf86LogVerbose;		/* log file verbosity level */
extern Bool xf86ProbeOnly;
extern Bool xf86DoProbe;
extern Bool xorgHWAccess;
d97 1
a97 1
extern RootWinPropPtr *xf86RegisteredPropertiesTable;
a108 3
#define DEFAULT_UNRESOLVED	TRUE
#define DEFAULT_BEST_REFRESH	FALSE

d114 5
a118 9
void xf86BusProbe(void);
void xf86ChangeBusIndex(int oldIndex, int newIndex);
void xf86AccessInit(void);
void xf86AccessEnter(void);
void xf86AccessLeave(void);
void xf86EntityInit(void);
void xf86EntityEnter(void);
void xf86EntityLeave(void);
void xf86AccessLeaveState(void);
d120 1
a120 1
void xf86FindPrimaryDevice(void);
d122 4
a125 6
void xf86ResourceBrokerInit(void);
void xf86PostProbe(void);
void xf86ClearEntityListForScreen(int scrnIndex);
void xf86AddDevToEntity(int entityIndex, GDevPtr dev);
extern void xf86PostPreInit(void);
extern void xf86PostScreenInit(void);
d129 1
a129 1
Bool xf86PathIsSafe(const char *path);
d133 2
a134 2
extern const DisplayModeRec xf86DefaultModes[];
extern const int xf86NumDefaultModes;
d137 1
a137 1
void DoConfigure(void);
d140 1
a140 1
void DoShowOptions(void);
d144 5
a148 5
void xf86Wakeup(pointer blockData, int err, pointer pReadmask);
void xf86SigHandler(int signo);
void xf86HandlePMEvents(int fd, pointer data);
extern int (*xf86PMGetEventFromOs)(int fd,pmEvent *events,int num);
extern pmWait (*xf86PMConfirmEventToOs)(int fd,pmEvent event);
d151 2
a152 2
void xf86LogInit(void);
void xf86CloseLog(void);
d155 4
a158 4
Bool xf86LoadModules(char **list, pointer *optlist);
int xf86SetVerbosity(int verb);
int xf86SetLogVerbosity(int verb);
Bool xf86CallDriverProbe( struct _DriverRec * drv, Bool detect_only );
d161 1
a161 1
extern EventList *xf86Events;
@


1.3
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d42 1
a53 4
#ifdef XF86MISC
extern Bool xf86MiscModInDevDisabled;
extern Bool xf86MiscModInDevAllowNonLocal;
#endif 
a54 1
extern Bool xf86coFlag;
d59 1
a72 1
extern Bool xf86BestRefresh;
a74 1
extern Bool xf86ShowUnresolved;
d154 1
a154 2
/* xf86DoProbe.c */
void DoProbe(void);
d157 3
a161 2
void xf86PostKbdEvent(unsigned key);
void xf86PostMseEvent(DeviceIntPtr device, int buttons, int dx, int dy);
a166 1
void xf86GrabServerCallback(CallbackListPtr *, pointer, pointer);
a177 10
/* xf86Lock.c */

#ifdef USE_XF86_SERVERLOCK
void xf86UnlockServer(void);
#endif

/* xf86XKB.c */

void xf86InitXkb(void);

d179 1
a179 1
extern xEvent *xf86Events;
@


1.2
log
@Update to xserver 1.4.2. Tested by landry@@, ckuethe@@, jsing@@ mbalmer@@.
@
text
@a0 1

d38 2
d80 1
a80 1
extern PciBusId xf86IsolateDevice;
a98 2
extern ModuleInfoPtr *xf86ModuleInfoList;
extern int xf86NumModuleInfos;
a102 1
extern pciVideoPtr *xf86PciVideoInfo;
a148 3
extern memType getValidBIOSBase(PCITAG tag, int num);
extern memType getEmptyPciRange(PCITAG tag, int base_reg);
extern int pciTestMultiDeviceCard(int bus, int dev, int func, PCITAG** pTag);
d156 2
a157 5
extern DisplayModeRec xf86DefaultModes [];

/* xf86DoScanPci.c */

void DoScanPci(int argc, char **argv, int i);
d182 1
@


1.1
log
@Initial revision
@
text
@a102 1
extern Bool xf86ProbeFailed;
d122 1
a122 1
#define DEFAULT_DPI		75
a156 1
Bool xf86PathIsAbsolute(const char *path);
a176 3
#ifdef MEMDEBUG
void xf86SigMemDebug(int signo);
#endif
a190 14
/* xf86Io.c */

void xf86KbdBell(int percent, DeviceIntPtr pKeyboard, pointer ctrl,
		 int unused);
void xf86KbdLeds(void);
void xf86UpdateKbdLeds(void);
void xf86KbdCtrl(DevicePtr pKeyboard, KeybdCtrl *ctrl); 
void xf86InitKBD(Bool init);  
int xf86KbdProc(DeviceIntPtr pKeyboard, int what);

/* xf86Kbd.c */ 

void xf86KbdGetMapping(KeySymsPtr pKeySyms, CARD8 *pModMap);

d200 3
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d103 1
d158 1
d179 3
d196 14
a218 3

/* xf86Xinput.c */
extern xEvent *xf86Events;
@

