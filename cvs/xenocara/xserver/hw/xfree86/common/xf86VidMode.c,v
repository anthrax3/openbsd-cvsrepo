head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.6
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.05.29.12.02.37;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	s0SI41sEunLdyFfd;

1.10
date	2014.09.27.17.53.01;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	cVXoV5PxI8YrEaVA;

1.9
date	2013.06.07.17.28.49;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.10.13.21.24;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.12.18.16.09.00;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.51;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.07;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.30;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.25;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.20;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.10;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.10;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.12.13.21.13.39;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 * Copyright (c) 1999-2003 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

/*
 * This file contains the VidMode functions required by the extension.
 * These have been added to avoid the need for the higher level extension
 * code to access the private XFree86 data structures directly. Wherever
 * possible this code uses the functions in xf86Mode.c to do the work,
 * so that two version of code that do similar things don't have to be
 * maintained.
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <X11/X.h>
#include "os.h"
#include "xf86.h"
#include "xf86Priv.h"
#include "extinit.h"

#ifdef XF86VIDMODE
#include "vidmodestr.h"
#include "xf86Privstr.h"
#include "xf86Extensions.h"
#include "xf86cmap.h"

static vidMonitorValue
xf86VidModeGetMonitorValue(ScreenPtr pScreen, int valtyp, int indx)
{
    vidMonitorValue ret = { NULL, };
    MonPtr monitor;
    ScrnInfoPtr pScrn;

    pScrn = xf86ScreenToScrn(pScreen);
    monitor = pScrn->monitor;

    switch (valtyp) {
    case VIDMODE_MON_VENDOR:
        ret.ptr = monitor->vendor;
        break;
    case VIDMODE_MON_MODEL:
        ret.ptr = monitor->model;
        break;
    case VIDMODE_MON_NHSYNC:
        ret.i = monitor->nHsync;
        break;
    case VIDMODE_MON_NVREFRESH:
        ret.i = monitor->nVrefresh;
        break;
    case VIDMODE_MON_HSYNC_LO:
        ret.f = (100.0 * monitor->hsync[indx].lo);
        break;
    case VIDMODE_MON_HSYNC_HI:
        ret.f = (100.0 * monitor->hsync[indx].hi);
        break;
    case VIDMODE_MON_VREFRESH_LO:
        ret.f = (100.0 * monitor->vrefresh[indx].lo);
        break;
    case VIDMODE_MON_VREFRESH_HI:
        ret.f = (100.0 * monitor->vrefresh[indx].hi);
        break;
    }
    return ret;
}

static Bool
xf86VidModeGetCurrentModeline(ScreenPtr pScreen, DisplayModePtr *mode, int *dotClock)
{
    ScrnInfoPtr pScrn;

    pScrn = xf86ScreenToScrn(pScreen);

    if (pScrn->currentMode) {
        *mode = pScrn->currentMode;
        *dotClock = pScrn->currentMode->Clock;

        return TRUE;
    }
    return FALSE;
}

static int
xf86VidModeGetDotClock(ScreenPtr pScreen, int Clock)
{
    ScrnInfoPtr pScrn;

    pScrn = xf86ScreenToScrn(pScreen);
    if ((pScrn->progClock) || (Clock >= MAXCLOCKS))
        return Clock;
    else
        return pScrn->clock[Clock];
}

static int
xf86VidModeGetNumOfClocks(ScreenPtr pScreen, Bool *progClock)
{
    ScrnInfoPtr pScrn;

    pScrn = xf86ScreenToScrn(pScreen);
    if (pScrn->progClock) {
        *progClock = TRUE;
        return 0;
    }
    else {
        *progClock = FALSE;
        return pScrn->numClocks;
    }
}

static Bool
xf86VidModeGetClocks(ScreenPtr pScreen, int *Clocks)
{
    ScrnInfoPtr pScrn;
    int i;

    pScrn = xf86ScreenToScrn(pScreen);

    if (pScrn->progClock)
        return FALSE;

    for (i = 0; i < pScrn->numClocks; i++)
        *Clocks++ = pScrn->clock[i];

    return TRUE;
}

static Bool
xf86VidModeGetNextModeline(ScreenPtr pScreen, DisplayModePtr *mode, int *dotClock)
{
    VidModePtr pVidMode;
    DisplayModePtr p;

    pVidMode = VidModeGetPtr(pScreen);

    for (p = pVidMode->Next; p != NULL && p != pVidMode->First; p = p->next) {
        if (p->status == MODE_OK) {
            pVidMode->Next = p->next;
            *mode = p;
            *dotClock = xf86VidModeGetDotClock(pScreen, p->Clock);
            return TRUE;
        }
    }

    return FALSE;
}

static Bool
xf86VidModeGetFirstModeline(ScreenPtr pScreen, DisplayModePtr *mode, int *dotClock)
{
    ScrnInfoPtr pScrn;
    VidModePtr pVidMode;

    pScrn = xf86ScreenToScrn(pScreen);
    if (pScrn->modes == NULL)
        return FALSE;

    pVidMode = VidModeGetPtr(pScreen);
    pVidMode->First = pScrn->modes;
    pVidMode->Next = pVidMode->First->next;

    if (pVidMode->First->status == MODE_OK) {
        *mode = pVidMode->First;
        *dotClock = xf86VidModeGetDotClock(pScreen, pVidMode->First->Clock);
        return TRUE;
    }

    return xf86VidModeGetNextModeline(pScreen, mode, dotClock);
}

static Bool
xf86VidModeDeleteModeline(ScreenPtr pScreen, DisplayModePtr mode)
{
    ScrnInfoPtr pScrn;

    if (mode == NULL)
        return FALSE;

    pScrn = xf86ScreenToScrn(pScreen);
    xf86DeleteMode(&(pScrn->modes), mode);
    return TRUE;
}

static Bool
xf86VidModeZoomViewport(ScreenPtr pScreen, int zoom)
{
    xf86ZoomViewport(pScreen, zoom);
    return TRUE;
}

static Bool
xf86VidModeSetViewPort(ScreenPtr pScreen, int x, int y)
{
    ScrnInfoPtr pScrn;

    pScrn = xf86ScreenToScrn(pScreen);
    pScrn->frameX0 = min(max(x, 0),
                         pScrn->virtualX - pScrn->currentMode->HDisplay);
    pScrn->frameX1 = pScrn->frameX0 + pScrn->currentMode->HDisplay - 1;
    pScrn->frameY0 = min(max(y, 0),
                         pScrn->virtualY - pScrn->currentMode->VDisplay);
    pScrn->frameY1 = pScrn->frameY0 + pScrn->currentMode->VDisplay - 1;
    if (pScrn->AdjustFrame != NULL)
        (pScrn->AdjustFrame) (pScrn, pScrn->frameX0, pScrn->frameY0);

    return TRUE;
}

static Bool
xf86VidModeGetViewPort(ScreenPtr pScreen, int *x, int *y)
{
    ScrnInfoPtr pScrn;

    pScrn = xf86ScreenToScrn(pScreen);
    *x = pScrn->frameX0;
    *y = pScrn->frameY0;
    return TRUE;
}

static Bool
xf86VidModeSwitchMode(ScreenPtr pScreen, DisplayModePtr mode)
{
    ScrnInfoPtr pScrn;
    DisplayModePtr pTmpMode;
    Bool retval;

    pScrn = xf86ScreenToScrn(pScreen);
    /* save in case we fail */
    pTmpMode = pScrn->currentMode;
    /* Force a mode switch */
    pScrn->currentMode = NULL;
    retval = xf86SwitchMode(pScrn->pScreen, mode);
    /* we failed: restore it */
    if (retval == FALSE)
        pScrn->currentMode = pTmpMode;
    return retval;
}

static Bool
xf86VidModeLockZoom(ScreenPtr pScreen, Bool lock)
{
    if (xf86Info.dontZoom)
        return FALSE;

    xf86LockZoom(pScreen, lock);
    return TRUE;
}

static ModeStatus
xf86VidModeCheckModeForMonitor(ScreenPtr pScreen, DisplayModePtr mode)
{
    ScrnInfoPtr pScrn;

    if (mode == NULL)
        return MODE_ERROR;

    pScrn = xf86ScreenToScrn(pScreen);

    return xf86CheckModeForMonitor(mode, pScrn->monitor);
}

static ModeStatus
xf86VidModeCheckModeForDriver(ScreenPtr pScreen, DisplayModePtr mode)
{
    ScrnInfoPtr pScrn;

    if (mode == NULL)
        return MODE_ERROR;

    pScrn = xf86ScreenToScrn(pScreen);

    return xf86CheckModeForDriver(pScrn, mode, 0);
}

static void
xf86VidModeSetCrtcForMode(ScreenPtr pScreen, DisplayModePtr mode)
{
    ScrnInfoPtr pScrn;
    DisplayModePtr ScreenModes;

    if (mode == NULL)
        return;

    /* Ugly hack so that the xf86Mode.c function can be used without change */
    pScrn = xf86ScreenToScrn(pScreen);
    ScreenModes = pScrn->modes;
    pScrn->modes = mode;

    xf86SetCrtcForModes(pScrn, pScrn->adjustFlags);
    pScrn->modes = ScreenModes;
    return;
}

static Bool
xf86VidModeAddModeline(ScreenPtr pScreen, DisplayModePtr mode)
{
    ScrnInfoPtr pScrn;

    if (mode == NULL)
        return FALSE;

    pScrn = xf86ScreenToScrn(pScreen);

    mode->name = strdup(""); /* freed by deletemode */
    mode->status = MODE_OK;
    mode->next = pScrn->modes->next;
    mode->prev = pScrn->modes;
    pScrn->modes->next = mode;
    if (mode->next != NULL)
        mode->next->prev = mode;

    return TRUE;
}

static int
xf86VidModeGetNumOfModes(ScreenPtr pScreen)
{
    DisplayModePtr mode = NULL;
    int dotClock = 0, nummodes = 0;

    if (!xf86VidModeGetFirstModeline(pScreen, &mode, &dotClock))
        return nummodes;

    do {
        nummodes++;
        if (!xf86VidModeGetNextModeline(pScreen, &mode, &dotClock))
            return nummodes;
    } while (TRUE);
}

static Bool
xf86VidModeSetGamma(ScreenPtr pScreen, float red, float green, float blue)
{
    Gamma gamma;

    gamma.red = red;
    gamma.green = green;
    gamma.blue = blue;
    if (xf86ChangeGamma(pScreen, gamma) != Success)
        return FALSE;
    else
        return TRUE;
}

static Bool
xf86VidModeGetGamma(ScreenPtr pScreen, float *red, float *green, float *blue)
{
    ScrnInfoPtr pScrn;

    pScrn = xf86ScreenToScrn(pScreen);
    *red = pScrn->gamma.red;
    *green = pScrn->gamma.green;
    *blue = pScrn->gamma.blue;
    return TRUE;
}

static Bool
xf86VidModeSetGammaRamp(ScreenPtr pScreen, int size, CARD16 *r, CARD16 *g, CARD16 *b)
{
    xf86ChangeGammaRamp(pScreen, size, r, g, b);
    return TRUE;
}

static Bool
xf86VidModeGetGammaRamp(ScreenPtr pScreen, int size, CARD16 *r, CARD16 *g, CARD16 *b)
{
    xf86GetGammaRamp(pScreen, size, r, g, b);
    return TRUE;
}

static Bool
xf86VidModeInit(ScreenPtr pScreen)
{
    VidModePtr pVidMode;

    if (!xf86GetVidModeEnabled()) {
        DebugF("!xf86GetVidModeEnabled()\n");
        return FALSE;
    }

    pVidMode = VidModeInit(pScreen);
    if (!pVidMode)
        return FALSE;

    pVidMode->Flags = 0;
    pVidMode->Next = NULL;

    pVidMode->GetMonitorValue = xf86VidModeGetMonitorValue;
    pVidMode->GetCurrentModeline = xf86VidModeGetCurrentModeline;
    pVidMode->GetFirstModeline = xf86VidModeGetFirstModeline;
    pVidMode->GetNextModeline = xf86VidModeGetNextModeline;
    pVidMode->DeleteModeline = xf86VidModeDeleteModeline;
    pVidMode->ZoomViewport = xf86VidModeZoomViewport;
    pVidMode->GetViewPort = xf86VidModeGetViewPort;
    pVidMode->SetViewPort = xf86VidModeSetViewPort;
    pVidMode->SwitchMode = xf86VidModeSwitchMode;
    pVidMode->LockZoom = xf86VidModeLockZoom;
    pVidMode->GetNumOfClocks = xf86VidModeGetNumOfClocks;
    pVidMode->GetClocks = xf86VidModeGetClocks;
    pVidMode->CheckModeForMonitor = xf86VidModeCheckModeForMonitor;
    pVidMode->CheckModeForDriver = xf86VidModeCheckModeForDriver;
    pVidMode->SetCrtcForMode = xf86VidModeSetCrtcForMode;
    pVidMode->AddModeline = xf86VidModeAddModeline;
    pVidMode->GetDotClock = xf86VidModeGetDotClock;
    pVidMode->GetNumOfModes = xf86VidModeGetNumOfModes;
    pVidMode->SetGamma = xf86VidModeSetGamma;
    pVidMode->GetGamma = xf86VidModeGetGamma;
    pVidMode->SetGammaRamp = xf86VidModeSetGammaRamp;
    pVidMode->GetGammaRamp = xf86VidModeGetGammaRamp;
    pVidMode->GetGammaRampSize = xf86GetGammaRampSize; /* use xf86cmap API directly */

    return TRUE;
}

void
XFree86VidModeExtensionInit(void)
{
    int i;
    Bool enabled = FALSE;

    DebugF("XFree86VidModeExtensionInit");

    /* This means that the DDX doesn't want the vidmode extension enabled */
    if (!xf86GetVidModeEnabled())
        return;

    for (i = 0; i < screenInfo.numScreens; i++) {
        if (xf86VidModeInit (screenInfo.screens[i]))
            enabled = TRUE;
    }
    /* This means that the DDX doesn't want the vidmode extension enabled */
    if (!enabled)
        return;

   VidModeAddExtension(xf86GetVidModeAllowNonLocal());
}

#endif                          /* XF86VIDMODE */
@


1.10
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d45 1
d48 3
a50 1
#include "vidmodeproc.h"
d53 2
a54 66
static DevPrivateKeyRec VidModeKeyRec;
static DevPrivateKey VidModeKey;
static int VidModeCount = 0;
static Bool VidModeClose(ScreenPtr pScreen);

#define VMPTR(p) ((VidModePtr)dixLookupPrivate(&(p)->devPrivates, VidModeKey))

#endif

Bool
VidModeExtensionInit(ScreenPtr pScreen)
{
#ifdef XF86VIDMODE
    VidModePtr pVidMode;

    if (!xf86GetVidModeEnabled()) {
        DebugF("!xf86GetVidModeEnabled()\n");
        return FALSE;
    }

    VidModeKey = &VidModeKeyRec;

    if (!dixRegisterPrivateKey(&VidModeKeyRec, PRIVATE_SCREEN, 0))
        return FALSE;

    pVidMode = calloc(sizeof(VidModeRec), 1);
    if (!pVidMode)
        return FALSE;

    dixSetPrivate(&pScreen->devPrivates, VidModeKey, pVidMode);

    pVidMode->Flags = 0;
    pVidMode->Next = NULL;
    pVidMode->CloseScreen = pScreen->CloseScreen;
    pScreen->CloseScreen = VidModeClose;
    VidModeCount++;
    return TRUE;
#else
    DebugF("no vidmode extension\n");
    return FALSE;
#endif
}

#ifdef XF86VIDMODE

static Bool
VidModeClose(ScreenPtr pScreen)
{
    VidModePtr pVidMode = VMPTR(pScreen);

    /* This shouldn't happen */
    if (!pVidMode)
        return FALSE;

    pScreen->CloseScreen = pVidMode->CloseScreen;

    if (--VidModeCount == 0) {
        free(dixLookupPrivate(&pScreen->devPrivates, VidModeKey));
        dixSetPrivate(&pScreen->devPrivates, VidModeKey, NULL);
        VidModeKey = NULL;
    }
    return pScreen->CloseScreen(pScreen);
}

Bool
VidModeAvailable(int scrnIndex)
d56 2
a58 1
    VidModePtr pVidMode;
d60 2
a61 4
    if (VidModeKey == NULL) {
        DebugF("VidModeKey == NULL\n");
        return FALSE;
    }
d63 25
a87 12
    pScrn = xf86Screens[scrnIndex];
    if (pScrn == NULL) {
        DebugF("pScrn == NULL\n");
        return FALSE;
    }

    pVidMode = VMPTR(pScrn->pScreen);
    if (pVidMode)
        return TRUE;
    else {
        DebugF("pVidMode == NULL\n");
        return FALSE;
d89 1
d92 2
a93 2
Bool
VidModeGetCurrentModeline(int scrnIndex, void **mode, int *dotClock)
d97 1
a97 4
    if (!VidModeAvailable(scrnIndex))
        return FALSE;

    pScrn = xf86Screens[scrnIndex];
d100 1
a100 1
        *mode = (void *) (pScrn->currentMode);
d108 2
a109 2
int
VidModeGetDotClock(int scrnIndex, int Clock)
d113 1
a113 4
    if (!VidModeAvailable(scrnIndex))
        return 0;

    pScrn = xf86Screens[scrnIndex];
d120 2
a121 2
int
VidModeGetNumOfClocks(int scrnIndex, Bool *progClock)
d125 1
a125 4
    if (!VidModeAvailable(scrnIndex))
        return 0;

    pScrn = xf86Screens[scrnIndex];
d136 2
a137 2
Bool
VidModeGetClocks(int scrnIndex, int *Clocks)
d142 1
a142 4
    if (!VidModeAvailable(scrnIndex))
        return FALSE;

    pScrn = xf86Screens[scrnIndex];
d153 2
a154 2
Bool
VidModeGetFirstModeline(int scrnIndex, void **mode, int *dotClock)
a155 1
    ScrnInfoPtr pScrn;
d157 1
d159 1
a159 2
    if (!VidModeAvailable(scrnIndex))
        return FALSE;
d161 7
a167 12
    pScrn = xf86Screens[scrnIndex];
    if (pScrn->modes == NULL)
        return FALSE;

    pVidMode = VMPTR(pScrn->pScreen);
    pVidMode->First = pScrn->modes;
    pVidMode->Next = pVidMode->First->next;

    if (pVidMode->First->status == MODE_OK) {
        *mode = (void *) (pVidMode->First);
        *dotClock = VidModeGetDotClock(scrnIndex, pVidMode->First->Clock);
        return TRUE;
d170 1
a170 1
    return VidModeGetNextModeline(scrnIndex, mode, dotClock);
d173 2
a174 2
Bool
VidModeGetNextModeline(int scrnIndex, void **mode, int *dotClock)
a177 1
    DisplayModePtr p;
d179 2
a180 1
    if (!VidModeAvailable(scrnIndex))
d183 3
a185 2
    pScrn = xf86Screens[scrnIndex];
    pVidMode = VMPTR(pScrn->pScreen);
d187 4
a190 7
    for (p = pVidMode->Next; p != NULL && p != pVidMode->First; p = p->next) {
        if (p->status == MODE_OK) {
            pVidMode->Next = p->next;
            *mode = (void *) p;
            *dotClock = VidModeGetDotClock(scrnIndex, p->Clock);
            return TRUE;
        }
d193 1
a193 1
    return FALSE;
d196 2
a197 2
Bool
VidModeDeleteModeline(int scrnIndex, void *mode)
d201 1
a201 1
    if ((mode == NULL) || (!VidModeAvailable(scrnIndex)))
d204 2
a205 2
    pScrn = xf86Screens[scrnIndex];
    xf86DeleteMode(&(pScrn->modes), (DisplayModePtr) mode);
d209 2
a210 2
Bool
VidModeZoomViewport(int scrnIndex, int zoom)
d212 1
a212 7
    ScrnInfoPtr pScrn;

    if (!VidModeAvailable(scrnIndex))
        return FALSE;

    pScrn = xf86Screens[scrnIndex];
    xf86ZoomViewport(pScrn->pScreen, zoom);
d216 2
a217 2
Bool
VidModeSetViewPort(int scrnIndex, int x, int y)
d221 1
a221 4
    if (!VidModeAvailable(scrnIndex))
        return FALSE;

    pScrn = xf86Screens[scrnIndex];
d234 2
a235 2
Bool
VidModeGetViewPort(int scrnIndex, int *x, int *y)
d239 1
a239 4
    if (!VidModeAvailable(scrnIndex))
        return FALSE;

    pScrn = xf86Screens[scrnIndex];
d245 2
a246 2
Bool
VidModeSwitchMode(int scrnIndex, void *mode)
d252 1
a252 4
    if (!VidModeAvailable(scrnIndex))
        return FALSE;

    pScrn = xf86Screens[scrnIndex];
d264 2
a265 2
Bool
VidModeLockZoom(int scrnIndex, Bool lock)
a266 7
    ScrnInfoPtr pScrn;

    if (!VidModeAvailable(scrnIndex))
        return FALSE;

    pScrn = xf86Screens[scrnIndex];

d270 1
a270 1
    xf86LockZoom(pScrn->pScreen, lock);
d274 2
a275 2
Bool
VidModeGetMonitor(int scrnIndex, void **monitor)
d279 1
a279 15
    if (!VidModeAvailable(scrnIndex))
        return FALSE;

    pScrn = xf86Screens[scrnIndex];
    *monitor = (void *) (pScrn->monitor);

    return TRUE;
}

ModeStatus
VidModeCheckModeForMonitor(int scrnIndex, void *mode)
{
    ScrnInfoPtr pScrn;

    if ((mode == NULL) || (!VidModeAvailable(scrnIndex)))
d282 1
a282 1
    pScrn = xf86Screens[scrnIndex];
d284 1
a284 1
    return xf86CheckModeForMonitor((DisplayModePtr) mode, pScrn->monitor);
d287 2
a288 2
ModeStatus
VidModeCheckModeForDriver(int scrnIndex, void *mode)
d292 1
a292 1
    if ((mode == NULL) || (!VidModeAvailable(scrnIndex)))
d295 1
a295 1
    pScrn = xf86Screens[scrnIndex];
d297 1
a297 1
    return xf86CheckModeForDriver(pScrn, (DisplayModePtr) mode, 0);
d300 2
a301 2
void
VidModeSetCrtcForMode(int scrnIndex, void *mode)
d306 1
a306 1
    if ((mode == NULL) || (!VidModeAvailable(scrnIndex)))
d310 1
a310 1
    pScrn = xf86Screens[scrnIndex];
d312 1
a312 1
    pScrn->modes = (DisplayModePtr) mode;
d319 2
a320 2
Bool
VidModeAddModeline(int scrnIndex, void *mode)
d324 1
a324 1
    if ((mode == NULL) || (!VidModeAvailable(scrnIndex)))
d327 1
a327 1
    pScrn = xf86Screens[scrnIndex];
d329 7
a335 7
    ((DisplayModePtr) mode)->name = strdup(""); /* freed by deletemode */
    ((DisplayModePtr) mode)->status = MODE_OK;
    ((DisplayModePtr) mode)->next = pScrn->modes->next;
    ((DisplayModePtr) mode)->prev = pScrn->modes;
    pScrn->modes->next = (DisplayModePtr) mode;
    if (((DisplayModePtr) mode)->next != NULL)
        ((DisplayModePtr) mode)->next->prev = (DisplayModePtr) mode;
d340 2
a341 2
int
VidModeGetNumOfModes(int scrnIndex)
d343 1
a343 1
    void *mode = NULL;
d346 1
a346 1
    if (!VidModeGetFirstModeline(scrnIndex, &mode, &dotClock))
d351 1
a351 1
        if (!VidModeGetNextModeline(scrnIndex, &mode, &dotClock))
d356 2
a357 2
Bool
VidModeSetGamma(int scrnIndex, float red, float green, float blue)
a358 1
    ScrnInfoPtr pScrn;
a360 4
    if (!VidModeAvailable(scrnIndex))
        return FALSE;

    pScrn = xf86Screens[scrnIndex];
d364 1
a364 1
    if (xf86ChangeGamma(pScrn->pScreen, gamma) != Success)
d370 2
a371 2
Bool
VidModeGetGamma(int scrnIndex, float *red, float *green, float *blue)
d375 1
a375 4
    if (!VidModeAvailable(scrnIndex))
        return FALSE;

    pScrn = xf86Screens[scrnIndex];
d382 2
a383 2
Bool
VidModeSetGammaRamp(int scrnIndex, int size, CARD16 *r, CARD16 *g, CARD16 *b)
d385 3
a387 1
    ScrnInfoPtr pScrn;
d389 4
a392 5
    if (!VidModeAvailable(scrnIndex))
        return FALSE;

    pScrn = xf86Screens[scrnIndex];
    xf86ChangeGammaRamp(pScrn->pScreen, size, r, g, b);
d396 2
a397 2
Bool
VidModeGetGammaRamp(int scrnIndex, int size, CARD16 *r, CARD16 *g, CARD16 *b)
d399 1
a399 1
    ScrnInfoPtr pScrn;
d401 2
a402 1
    if (!VidModeAvailable(scrnIndex))
d404 1
d406 3
a408 4
    pScrn = xf86Screens[scrnIndex];
    xf86GetGammaRamp(pScrn->pScreen, size, r, g, b);
    return TRUE;
}
d410 2
a411 5
int
VidModeGetGammaRampSize(int scrnIndex)
{
    if (!VidModeAvailable(scrnIndex))
        return 0;
d413 23
a435 2
    return xf86GetGammaRampSize(xf86Screens[scrnIndex]->pScreen);
}
d437 1
a437 14
void *
VidModeCreateMode(void)
{
    DisplayModePtr mode;

    mode = malloc(sizeof(DisplayModeRec));
    if (mode != NULL) {
        mode->name = "";
        mode->VScan = 1;        /* divides refresh rate. default = 1 */
        mode->Private = NULL;
        mode->next = mode;
        mode->prev = mode;
    }
    return mode;
d441 1
a441 1
VidModeCopyMode(void *modefrom, void *modeto)
d443 2
a444 2
    memcpy(modeto, modefrom, sizeof(DisplayModeRec));
}
d446 1
a446 4
int
VidModeGetModeValue(void *mode, int valtyp)
{
    int ret = 0;
d448 3
a450 37
    switch (valtyp) {
    case VIDMODE_H_DISPLAY:
        ret = ((DisplayModePtr) mode)->HDisplay;
        break;
    case VIDMODE_H_SYNCSTART:
        ret = ((DisplayModePtr) mode)->HSyncStart;
        break;
    case VIDMODE_H_SYNCEND:
        ret = ((DisplayModePtr) mode)->HSyncEnd;
        break;
    case VIDMODE_H_TOTAL:
        ret = ((DisplayModePtr) mode)->HTotal;
        break;
    case VIDMODE_H_SKEW:
        ret = ((DisplayModePtr) mode)->HSkew;
        break;
    case VIDMODE_V_DISPLAY:
        ret = ((DisplayModePtr) mode)->VDisplay;
        break;
    case VIDMODE_V_SYNCSTART:
        ret = ((DisplayModePtr) mode)->VSyncStart;
        break;
    case VIDMODE_V_SYNCEND:
        ret = ((DisplayModePtr) mode)->VSyncEnd;
        break;
    case VIDMODE_V_TOTAL:
        ret = ((DisplayModePtr) mode)->VTotal;
        break;
    case VIDMODE_FLAGS:
        ret = ((DisplayModePtr) mode)->Flags;
        break;
    case VIDMODE_CLOCK:
        ret = ((DisplayModePtr) mode)->Clock;
        break;
    }
    return ret;
}
d452 3
a454 37
void
VidModeSetModeValue(void *mode, int valtyp, int val)
{
    switch (valtyp) {
    case VIDMODE_H_DISPLAY:
        ((DisplayModePtr) mode)->HDisplay = val;
        break;
    case VIDMODE_H_SYNCSTART:
        ((DisplayModePtr) mode)->HSyncStart = val;
        break;
    case VIDMODE_H_SYNCEND:
        ((DisplayModePtr) mode)->HSyncEnd = val;
        break;
    case VIDMODE_H_TOTAL:
        ((DisplayModePtr) mode)->HTotal = val;
        break;
    case VIDMODE_H_SKEW:
        ((DisplayModePtr) mode)->HSkew = val;
        break;
    case VIDMODE_V_DISPLAY:
        ((DisplayModePtr) mode)->VDisplay = val;
        break;
    case VIDMODE_V_SYNCSTART:
        ((DisplayModePtr) mode)->VSyncStart = val;
        break;
    case VIDMODE_V_SYNCEND:
        ((DisplayModePtr) mode)->VSyncEnd = val;
        break;
    case VIDMODE_V_TOTAL:
        ((DisplayModePtr) mode)->VTotal = val;
        break;
    case VIDMODE_FLAGS:
        ((DisplayModePtr) mode)->Flags = val;
        break;
    case VIDMODE_CLOCK:
        ((DisplayModePtr) mode)->Clock = val;
        break;
d456 3
a458 7
    return;
}

vidMonitorValue
VidModeGetMonitorValue(void *monitor, int valtyp, int indx)
{
    vidMonitorValue ret = { NULL, };
d460 1
a460 27
    switch (valtyp) {
    case VIDMODE_MON_VENDOR:
        ret.ptr = (((MonPtr) monitor)->vendor);
        break;
    case VIDMODE_MON_MODEL:
        ret.ptr = (((MonPtr) monitor)->model);
        break;
    case VIDMODE_MON_NHSYNC:
        ret.i = ((MonPtr) monitor)->nHsync;
        break;
    case VIDMODE_MON_NVREFRESH:
        ret.i = ((MonPtr) monitor)->nVrefresh;
        break;
    case VIDMODE_MON_HSYNC_LO:
        ret.f = (100.0 * ((MonPtr) monitor)->hsync[indx].lo);
        break;
    case VIDMODE_MON_HSYNC_HI:
        ret.f = (100.0 * ((MonPtr) monitor)->hsync[indx].hi);
        break;
    case VIDMODE_MON_VREFRESH_LO:
        ret.f = (100.0 * ((MonPtr) monitor)->vrefresh[indx].lo);
        break;
    case VIDMODE_MON_VREFRESH_HI:
        ret.f = (100.0 * ((MonPtr) monitor)->vrefresh[indx].hi);
        break;
    }
    return ret;
@


1.9
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d141 1
a141 1
VidModeGetCurrentModeline(int scrnIndex, pointer *mode, int *dotClock)
d151 1
a151 1
        *mode = (pointer) (pScrn->currentMode);
d214 1
a214 1
VidModeGetFirstModeline(int scrnIndex, pointer *mode, int *dotClock)
d231 1
a231 1
        *mode = (pointer) (pVidMode->First);
d240 1
a240 1
VidModeGetNextModeline(int scrnIndex, pointer *mode, int *dotClock)
d255 1
a255 1
            *mode = (pointer) p;
d265 1
a265 1
VidModeDeleteModeline(int scrnIndex, pointer mode)
d326 1
a326 1
VidModeSwitchMode(int scrnIndex, pointer mode)
d365 1
a365 1
VidModeGetMonitor(int scrnIndex, pointer *monitor)
d373 1
a373 1
    *monitor = (pointer) (pScrn->monitor);
d379 1
a379 1
VidModeCheckModeForMonitor(int scrnIndex, pointer mode)
d392 1
a392 1
VidModeCheckModeForDriver(int scrnIndex, pointer mode)
d405 1
a405 1
VidModeSetCrtcForMode(int scrnIndex, pointer mode)
d424 1
a424 1
VidModeAddModeline(int scrnIndex, pointer mode)
d447 1
a447 1
    pointer mode = NULL;
d529 1
a529 1
pointer
d546 1
a546 1
VidModeCopyMode(pointer modefrom, pointer modeto)
d552 1
a552 1
VidModeGetModeValue(pointer mode, int valtyp)
d595 1
a595 1
VidModeSetModeValue(pointer mode, int valtyp, int val)
d636 1
a636 1
VidModeGetMonitorValue(pointer monitor, int valtyp, int indx)
@


1.8
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d53 1
a53 1
static Bool VidModeClose(int i, ScreenPtr pScreen);
d96 1
a96 1
VidModeClose(int i, ScreenPtr pScreen)
d111 1
a111 1
    return pScreen->CloseScreen(i, pScreen);
d306 1
a306 1
        (pScrn->AdjustFrame) (scrnIndex, pScrn->frameX0, pScrn->frameY0, 0);
@


1.7
log
@Bugfix Update to xserver 1.11.3
@
text
@d64 1
a64 1
    
d66 2
a67 2
	DebugF("!xf86GetVidModeEnabled()\n");
	return FALSE;
d73 1
a73 1
	return FALSE;
d77 1
a77 1
	return FALSE;
a92 1

d102 1
a102 1
	return FALSE;
d107 3
a109 3
	free(dixLookupPrivate(&pScreen->devPrivates, VidModeKey));
	dixSetPrivate(&pScreen->devPrivates, VidModeKey, NULL);
	VidModeKey = NULL;
d121 2
a122 2
	DebugF("VidModeKey == NULL\n");
	return FALSE;
d124 1
a124 1
 
d127 2
a128 2
	DebugF("pScrn == NULL\n");
	return FALSE;
d130 1
a130 1
    
d133 1
a133 1
	return TRUE;
d135 2
a136 2
	DebugF("pVidMode == NULL\n");
	return FALSE;
d146 1
a146 1
	return FALSE;
d151 2
a152 2
	*mode = (pointer)(pScrn->currentMode);
	*dotClock = pScrn->currentMode->Clock;
d154 1
a154 1
	return TRUE;
d165 1
a165 1
	return 0;
d169 3
a171 3
	return Clock;
    else  
	return pScrn->clock[Clock];
d180 1
a180 1
	return 0;
d183 7
a189 6
    if (pScrn->progClock){
	*progClock = TRUE;
	return 0;
    } else {
	*progClock = FALSE;
	return pScrn->numClocks;
d200 1
a200 1
	return FALSE;
d205 1
a205 1
	return FALSE;
d207 2
a208 2
    for (i = 0;  i < pScrn->numClocks;  i++)
	*Clocks++ = pScrn->clock[i];
a212 1

d220 1
a220 1
	return FALSE;
d224 1
a224 1
	    return FALSE;
d228 1
a228 1
    pVidMode->Next =  pVidMode->First->next;
d231 3
a233 3
      *mode = (pointer)(pVidMode->First);
      *dotClock = VidModeGetDotClock(scrnIndex, pVidMode->First->Clock);
      return TRUE;
d247 1
a247 1
	return FALSE;
d253 6
a258 6
	if (p->status == MODE_OK) {
	    pVidMode->Next = p->next;
	    *mode = (pointer)p;
	    *dotClock = VidModeGetDotClock(scrnIndex, p->Clock);
	    return TRUE;
	}
d260 1
a260 1
    
d270 1
a270 1
	return FALSE;
d273 1
a273 1
    xf86DeleteMode(&(pScrn->modes), (DisplayModePtr)mode);
d283 1
a283 1
	return FALSE;
d296 1
a296 1
	return FALSE;
d299 2
a300 2
    pScrn->frameX0 = min( max(x, 0),
	                 pScrn->virtualX - pScrn->currentMode->HDisplay );
d302 2
a303 2
    pScrn->frameY0 = min( max(y, 0),
	                 pScrn->virtualY - pScrn->currentMode->VDisplay );
d306 1
a306 1
	(pScrn->AdjustFrame)(scrnIndex, pScrn->frameX0, pScrn->frameY0, 0);
d317 1
a317 1
	return FALSE;
d333 1
a333 1
	return FALSE;
d343 1
a343 1
	pScrn->currentMode = pTmpMode;
d353 1
a353 1
	return FALSE;
d358 1
a358 1
	return FALSE;
d370 1
a370 1
	return FALSE;
d373 1
a373 1
    *monitor = (pointer)(pScrn->monitor);
d384 1
a384 1
	return MODE_ERROR;
d388 1
a388 1
    return xf86CheckModeForMonitor((DisplayModePtr)mode, pScrn->monitor);
d397 1
a397 1
	return MODE_ERROR;
d401 1
a401 1
    return xf86CheckModeForDriver(pScrn, (DisplayModePtr)mode, 0);
d409 1
a409 1
    
d411 1
a411 1
	return;
d416 2
a417 2
    pScrn->modes = (DisplayModePtr)mode;
    
d427 1
a427 1
    
d429 1
a429 1
	return FALSE;
d433 7
a439 7
    ((DisplayModePtr)mode)->name         = strdup(""); /* freed by deletemode */
    ((DisplayModePtr)mode)->status       = MODE_OK;
    ((DisplayModePtr)mode)->next         = pScrn->modes->next;
    ((DisplayModePtr)mode)->prev         = pScrn->modes;
    pScrn->modes->next                   = (DisplayModePtr)mode;
    if( ((DisplayModePtr)mode)->next != NULL )
      ((DisplayModePtr)mode)->next->prev   = (DisplayModePtr)mode;
d448 2
a449 2
    int dotClock= 0, nummodes = 0;
  
d451 1
a451 1
	return nummodes;
d454 3
a456 3
	nummodes++;
	if (!VidModeGetNextModeline(scrnIndex, &mode, &dotClock))
	    return nummodes;
d467 1
a467 1
	return FALSE;
d474 1
a474 1
	return FALSE;
d476 1
a476 1
	return TRUE;
d485 1
a485 1
	return FALSE;
d501 1
a501 1
 
d533 1
a533 1
  
d536 5
a540 5
	mode->name          = "";
	mode->VScan         = 1;    /* divides refresh rate. default = 1 */
	mode->Private       = NULL;
	mode->next          = mode;
	mode->prev          = mode;
d548 1
a548 1
  memcpy(modeto, modefrom, sizeof(DisplayModeRec));
a550 1

d554 3
a556 3
  int ret = 0;
  
  switch (valtyp) {
d558 2
a559 2
	ret = ((DisplayModePtr) mode)->HDisplay;
	break;
d561 2
a562 2
	ret = ((DisplayModePtr)mode)->HSyncStart;
	break;
d564 2
a565 2
	ret = ((DisplayModePtr)mode)->HSyncEnd;
	break;
d567 2
a568 2
	ret = ((DisplayModePtr)mode)->HTotal;
	break;
d570 2
a571 2
	ret = ((DisplayModePtr)mode)->HSkew;
	break;
d573 2
a574 2
	ret = ((DisplayModePtr)mode)->VDisplay;
	break;
d576 2
a577 2
	ret = ((DisplayModePtr)mode)->VSyncStart;
	break;
d579 2
a580 2
	ret = ((DisplayModePtr)mode)->VSyncEnd;
	break;
d582 2
a583 2
	ret = ((DisplayModePtr)mode)->VTotal;
	break;
d585 2
a586 2
	ret = ((DisplayModePtr)mode)->Flags;
	break;
d588 4
a591 4
	ret = ((DisplayModePtr)mode)->Clock;
	break;
  }
  return ret;
d597 1
a597 1
  switch (valtyp) {
d599 2
a600 2
	((DisplayModePtr)mode)->HDisplay = val;
	break;
d602 2
a603 2
	((DisplayModePtr)mode)->HSyncStart = val;
	break;
d605 2
a606 2
	((DisplayModePtr)mode)->HSyncEnd = val;
	break;
d608 2
a609 2
	((DisplayModePtr)mode)->HTotal = val;
	break;
d611 2
a612 2
	((DisplayModePtr)mode)->HSkew = val;
	break;
d614 2
a615 2
	((DisplayModePtr)mode)->VDisplay = val;
	break;
d617 2
a618 2
	((DisplayModePtr)mode)->VSyncStart = val;
	break;
d620 2
a621 2
	((DisplayModePtr)mode)->VSyncEnd = val;
	break;
d623 2
a624 2
	((DisplayModePtr)mode)->VTotal = val;
	break;
d626 2
a627 2
	((DisplayModePtr)mode)->Flags = val;
	break;
d629 4
a632 4
	((DisplayModePtr)mode)->Clock = val;
	break;
  }
  return;
d638 3
a640 3
  vidMonitorValue ret = { NULL, };
  
  switch (valtyp) {
d642 2
a643 2
	ret.ptr = (((MonPtr)monitor)->vendor);
	break;
d645 2
a646 2
	ret.ptr = (((MonPtr)monitor)->model);
	break;
d648 2
a649 2
	ret.i = ((MonPtr)monitor)->nHsync;
	break;
d651 2
a652 2
	ret.i = ((MonPtr)monitor)->nVrefresh;
	break;
d654 2
a655 2
	ret.f = (100.0 * ((MonPtr)monitor)->hsync[indx].lo);
	break;
d657 2
a658 2
	ret.f = (100.0 * ((MonPtr)monitor)->hsync[indx].hi);
	break;
d660 2
a661 2
	ret.f = (100.0 * ((MonPtr)monitor)->vrefresh[indx].lo);
	break;
d663 4
a666 4
	ret.f = (100.0 * ((MonPtr)monitor)->vrefresh[indx].hi);
	break;
  }
  return ret;
d669 1
a669 2

#endif /* XF86VIDMODE */
@


1.6
log
@Update to xserver 1.11.2
@
text
@d224 3
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d637 1
a637 1
  vidMonitorValue ret;
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d50 1
a50 1
static int VidModeKeyIndex;
d70 1
a70 1
    VidModeKey = &VidModeKeyIndex;
d72 1
a72 3
    if (!dixSetPrivate(&pScreen->devPrivates, VidModeKey,
		       xcalloc(sizeof(VidModeRec), 1))) {
	DebugF("xcalloc failed\n");
a73 1
    }
d75 6
a80 1
    pVidMode = VMPTR(pScreen);
d108 1
a108 1
	xfree(dixLookupPrivate(&pScreen->devPrivates, VidModeKey));
d532 1
a532 1
    mode = xalloc(sizeof(DisplayModeRec));
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d59 1
a59 7
#ifdef DEBUG
# define DEBUG_P(x) ErrorF(x"\n");
#else
# define DEBUG_P(x) /**/
#endif

_X_EXPORT Bool
d66 1
a66 1
	DEBUG_P("!xf86GetVidModeEnabled()");
d74 1
a74 1
	DEBUG_P("xcalloc failed");
d86 1
a86 1
    DEBUG_P("no vidmode extension");
d120 1
a120 1
	DEBUG_P("VidModeKey == NULL");
d126 1
a126 1
	DEBUG_P("pScrn == NULL");
d134 1
a134 1
	DEBUG_P("pVidMode == NULL");
d139 1
a139 1
_X_EXPORT Bool
d158 1
a158 1
_X_EXPORT int
d173 1
a173 1
_X_EXPORT int
d191 1
a191 1
_X_EXPORT Bool
d212 1
a212 1
_X_EXPORT Bool
d235 1
a235 1
_X_EXPORT Bool
d260 1
a260 1
_X_EXPORT Bool
d273 1
a273 1
_X_EXPORT Bool
d286 1
a286 1
_X_EXPORT Bool
d307 1
a307 1
_X_EXPORT Bool
d321 1
a321 1
_X_EXPORT Bool
d343 1
a343 1
_X_EXPORT Bool
d360 1
a360 1
_X_EXPORT Bool
d374 1
a374 1
_X_EXPORT ModeStatus
d387 1
a387 1
_X_EXPORT ModeStatus
d400 1
a400 1
_X_EXPORT void
d419 1
a419 1
_X_EXPORT Bool
d440 1
a440 1
_X_EXPORT int
d456 1
a456 1
_X_EXPORT Bool
d475 1
a475 1
_X_EXPORT Bool
d490 1
a490 1
_X_EXPORT Bool
d503 1
a503 1
_X_EXPORT Bool
d516 1
a516 1
_X_EXPORT int
d525 1
a525 1
_X_EXPORT pointer
d541 1
a541 1
_X_EXPORT void
d548 1
a548 1
_X_EXPORT int
d591 1
a591 1
_X_EXPORT void
d632 1
a632 1
_X_EXPORT vidMonitorValue
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d50 2
a51 1
static DevPrivateKey VidModeKey = NULL;
d76 1
a76 1
    VidModeKey = &VidModeKey;
@


1.1
log
@Initial revision
@
text
@d50 1
a50 2
static int VidModeGeneration = 0;
static int VidModeIndex = -1;
d54 1
a54 1
#define VMPTR(p) ((VidModePtr)(p)->devPrivates[VidModeIndex].ptr)
a69 2
    DEBUG_P("VidModeExtensionInit");

d75 1
a75 7
    if (serverGeneration != VidModeGeneration) {
	if ((VidModeIndex = AllocateScreenPrivateIndex()) < 0) {
	    DEBUG_P("AllocateScreenPrivateIndex() failed");
	    return FALSE;
	}
	VidModeGeneration = serverGeneration;
    }
d77 2
a78 1
    if (!(pScreen->devPrivates[VidModeIndex].ptr = xcalloc(sizeof(VidModeRec), 1))) {
a103 2
    DEBUG_P("VidModeClose");

d111 3
a113 4
	if (pScreen->devPrivates[VidModeIndex].ptr)
	  xfree(pScreen->devPrivates[VidModeIndex].ptr);
	pScreen->devPrivates[VidModeIndex].ptr = NULL;
	VidModeIndex = -1;
d124 2
a125 4
    DEBUG_P("VidModeAvailable");

    if (VidModeIndex < 0) {
	DEBUG_P("VidModeIndex < 0");
a148 2
    DEBUG_P("VidModeGetCurrentModeline");

a152 2
    *mode = (pointer)(pScrn->currentMode);
    *dotClock = pScrn->currentMode->Clock;
d154 7
a160 1
    return TRUE;
a167 2
    DEBUG_P("VidModeGetDotClock");

a182 2
    DEBUG_P("VidModeGetNumOfClocks");

a201 2
    DEBUG_P("VidModeGetClocks");

a222 2
    DEBUG_P("VidModeGetFirstModeline");

a246 2
    DEBUG_P("VidModeGetNextModeline");

a269 2
    DEBUG_P("VidModeDeleteModeline");

a282 2
    DEBUG_P("VidModeZoomViewPort");

a295 2
    DEBUG_P("VidModeSetViewPort");

a316 2
    DEBUG_P("VidModeGetViewPort");

a332 2
    DEBUG_P("VidModeSwitchMode");

a352 2
    DEBUG_P("VidModeLockZoom");

a369 2
    DEBUG_P("VidModeGetMonitor");

a383 2
    DEBUG_P("VidModeCheckModeForMonitor");

a396 2
    DEBUG_P("VidModeCheckModeForDriver");

a410 2
    DEBUG_P("VidModeSetCrtcForMode");

a428 2
    DEBUG_P("VidModeAddModeline");

a450 2
    DEBUG_P("VidModeGetNumOfModes");

a466 2
    DEBUG_P("VidModeSetGamma");

a483 2

    DEBUG_P("VidModeGetGamma");
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4.0.90
@
text
@d71 2
d112 2
d135 2
d162 2
d179 2
d196 2
d217 2
d240 2
d266 2
d291 2
d306 2
d321 2
d344 2
d362 2
d384 2
d403 2
d419 2
d434 2
d450 2
d470 2
d494 2
d512 2
d531 2
@

