head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.18
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.16
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.18
	OPENBSD_5_0:1.1.1.2.0.16
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.12
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.14
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.44;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.44;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.24;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * Copyright 2002-2004 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   Kevin E. Martin <kem@@redhat.com>
 *
 */

/** \file
 * This file provides support for visuals. */

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#endif

#include "dmx.h"
#include "dmxvisual.h"

#include "scrnintstr.h"

#ifdef GLXEXT

#include <GL/glxint.h>

extern VisualID glxMatchVisualInConfigList(ScreenPtr pScreen,
                                           VisualPtr pVisual,
                                           __GLXvisualConfig * configs,
                                           int nconfigs);

static Visual *
dmxLookupGLXVisual(ScreenPtr pScreen, VisualPtr pVisual)
{
    DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
    int j;
    VisualID vid;

    vid = glxMatchVisualInConfigList(pScreen, pVisual,
                                     dmxScreen->glxVisuals,
                                     dmxScreen->numGlxVisuals);
    if (vid) {
        /* Find the X visual of the matching GLX visual */
        for (j = 0; j < dmxScreen->beNumVisuals; j++)
            if (vid == dmxScreen->beVisuals[j].visualid)
                return dmxScreen->beVisuals[j].visual;
    }

    /* No matching visual found */
    return NULL;
}
#endif

/** Return the visual that matched \a pVisual. */
Visual *
dmxLookupVisual(ScreenPtr pScreen, VisualPtr pVisual)
{
    DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
    int i;

#ifdef GLXEXT
    Visual *retval;
#endif

    if (!dmxScreen->beDisplay)
        return NULL;

#ifdef GLXEXT
    if ((retval = dmxLookupGLXVisual(pScreen, pVisual)))
        return retval;
#endif

    for (i = 0; i < dmxScreen->beNumVisuals; i++) {
        if (pVisual->class == dmxScreen->beVisuals[i].class &&
            pVisual->bitsPerRGBValue == dmxScreen->beVisuals[i].bits_per_rgb &&
            pVisual->ColormapEntries == dmxScreen->beVisuals[i].colormap_size &&
            pVisual->nplanes == dmxScreen->beVisuals[i].depth &&
            pVisual->redMask == dmxScreen->beVisuals[i].red_mask &&
            pVisual->greenMask == dmxScreen->beVisuals[i].green_mask &&
            pVisual->blueMask == dmxScreen->beVisuals[i].blue_mask) {
            return dmxScreen->beVisuals[i].visual;
        }
    }

    return NULL;
}

/** Return the visual that matched the \a vid. */
Visual *
dmxLookupVisualFromID(ScreenPtr pScreen, VisualID vid)
{
    Visual *visual;
    int i;

    if (!dmxScreens[pScreen->myNum].beDisplay)
        return NULL;

    for (i = 0; i < pScreen->numVisuals; i++) {
        if (pScreen->visuals[i].vid == vid) {
            visual = dmxLookupVisual(pScreen, &pScreen->visuals[i]);
            if (visual)
                return visual;
        }
    }

    return NULL;
}

/** Return the colormap for the \a visual. */
Colormap
dmxColormapFromDefaultVisual(ScreenPtr pScreen, Visual * visual)
{
    DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
    int i;

    if (dmxScreen->beDisplay) {
        for (i = 0; i < dmxScreen->beNumDefColormaps; i++)
            if (visual == dmxScreen->beVisuals[i].visual)
                return dmxScreen->beDefColormaps[i];
    }

    return None;
}
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
d51 3
a53 3
					   VisualPtr pVisual,
					   __GLXvisualConfig *configs,
					   int nconfigs);
d55 2
a56 1
static Visual *dmxLookupGLXVisual(ScreenPtr pScreen, VisualPtr pVisual)
d59 2
a60 2
    int            j;
    VisualID       vid;
d63 2
a64 2
				     dmxScreen->glxVisuals,
				     dmxScreen->numGlxVisuals);
d66 4
a69 4
	/* Find the X visual of the matching GLX visual */
	for (j = 0; j < dmxScreen->beNumVisuals; j++)
	    if (vid == dmxScreen->beVisuals[j].visualid)
		return dmxScreen->beVisuals[j].visual;
d78 2
a79 1
Visual *dmxLookupVisual(ScreenPtr pScreen, VisualPtr pVisual)
d82 2
a83 1
    int            i;
d85 1
a85 1
    Visual        *retval;
d89 1
a89 1
	return NULL;
d93 1
a93 1
	return retval;
d97 9
a105 9
	if (pVisual->class == dmxScreen->beVisuals[i].class &&
	    pVisual->bitsPerRGBValue == dmxScreen->beVisuals[i].bits_per_rgb &&
	    pVisual->ColormapEntries == dmxScreen->beVisuals[i].colormap_size &&
	    pVisual->nplanes == dmxScreen->beVisuals[i].depth &&
	    pVisual->redMask == dmxScreen->beVisuals[i].red_mask &&
	    pVisual->greenMask == dmxScreen->beVisuals[i].green_mask &&
	    pVisual->blueMask == dmxScreen->beVisuals[i].blue_mask) {
	    return dmxScreen->beVisuals[i].visual;
	}
d112 2
a113 1
Visual *dmxLookupVisualFromID(ScreenPtr pScreen, VisualID vid)
d116 1
a116 1
    int     i;
d119 1
a119 1
	return NULL;
d122 5
a126 4
	if (pScreen->visuals[i].vid == vid) {
	    visual = dmxLookupVisual(pScreen, &pScreen->visuals[i]);
	    if (visual) return visual;
	}
d133 2
a134 1
Colormap dmxColormapFromDefaultVisual(ScreenPtr pScreen, Visual *visual)
d137 1
a137 1
    int            i;
d140 3
a142 3
	for (i = 0; i < dmxScreen->beNumDefColormaps; i++)
	    if (visual == dmxScreen->beVisuals[i].visual)
		return dmxScreen->beDefColormaps[i];
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
@

