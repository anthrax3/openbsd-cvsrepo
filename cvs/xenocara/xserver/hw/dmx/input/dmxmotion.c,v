head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.16
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.14
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.05.29.12.02.36;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	s0SI41sEunLdyFfd;

1.5
date	2012.06.10.13.21.23;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.50;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.05;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.23.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.23.33;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 * Copyright 2002-2003 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   Rickard E. (Rik) Faith <faith@@redhat.com>
 *
 */

/** \file
 * This file provides functions similar to miPointerGetMotionEvents and
 * miPointerPutMotionEvents, with the exception that devices with more
 * than two axes are fully supported.  These routines may be used only
 * for motion buffers for extension devices, and are \a not compatible
 * replacements for the mi routines.  */

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#endif

#include "inputstr.h"
#include "dmxinputinit.h"
#include "dmxcommon.h"
#include "dmxmotion.h"

#define OFFSET(offset,element) ((offset) * (numAxes + 1) + (element))

/** Return size of motion buffer. \see DMX_MOTION_SIZE */
int
dmxPointerGetMotionBufferSize(void)
{
    return DMX_MOTION_SIZE;
}

/** This routine performs the same function as \a miPointerGetMotionEvents:
 * the events in the motion history that are between the start and stop
 * times (in mS) are placed in the coords vector, and the count of the
 * number of items so placed is returned.  This routine is called from
 * dix/devices.c so that coords can hold valuator->numMotionEvents
 * events.  This routine is called from \a Xi/gtmotion.c with coords large
 * enough to hold the same number of events in a variable-length
 * extended \a xTimecoord structure.  This provides sufficient data for the
 * \a XGetDeviceMotionEvents library call, and would be identical to
 * \a miPointerGetMotionEvents for devices with only 2 axes (i.e., core
 * pointers) if \a xTimecoord used 32bit integers.
 *
 * Because DMX uses the mi* routines for all core devices, this routine
 * only has to support extension devices using the polymorphic coords.
 * Because compatibility with miPointerGetMotionEvents is not possible,
 * it is not provided. */
int
dmxPointerGetMotionEvents(DeviceIntPtr pDevice,
                          xTimecoord * coords,
                          unsigned long start,
                          unsigned long stop, ScreenPtr pScreen)
{
    GETDMXLOCALFROMPDEVICE;
    int numAxes = pDevice->valuator->numAxes;
    unsigned long *c = (unsigned long *) coords;
    int count = 0;
    int i, j;

    if (!dmxLocal->history)
        return 0;
    for (i = dmxLocal->head; i != dmxLocal->tail;) {
        if (dmxLocal->history[OFFSET(i, 0)] >= stop)
            break;
        if (dmxLocal->history[OFFSET(i, 0)] >= start) {
            for (j = 0; j < numAxes + 1; j++)
                c[OFFSET(count, j)] = dmxLocal->history[OFFSET(i, j)];
            ++count;
        }
        if (++i >= DMX_MOTION_SIZE)
            i = 0;
    }
    return count;
}

/** This routine adds an event to the motion history.  A similar
 * function is performed by miPointerMove for the mi versions of these
 * routines. */
void
dmxPointerPutMotionEvent(DeviceIntPtr pDevice,
                         int firstAxis, int axesCount, int *v,
                         unsigned long time)
{
    GETDMXLOCALFROMPDEVICE;
    int numAxes = pDevice->valuator->numAxes;
    int i;

    if (!dmxLocal->history) {
        dmxLocal->history = xallocarray(numAxes + 1,
                                 sizeof(*dmxLocal->history) * DMX_MOTION_SIZE);
        dmxLocal->head = 0;
        dmxLocal->tail = 0;
        dmxLocal->valuators = calloc(sizeof(*dmxLocal->valuators), numAxes);
    }
    else {
        if (++dmxLocal->tail >= DMX_MOTION_SIZE)
            dmxLocal->tail = 0;
        if (dmxLocal->head == dmxLocal->tail)
            if (++dmxLocal->head >= DMX_MOTION_SIZE)
                dmxLocal->head = 0;
    }

    dmxLocal->history[OFFSET(dmxLocal->tail, 0)] = time;

    /* Initialize the data from the known
     * values (if Absolute) or to zero (if
     * Relative) */
    for (i = 0; i < numAxes; i++) {
        if (pDevice->valuator->axes[i].mode == Absolute)
            dmxLocal->history[OFFSET(dmxLocal->tail, i + 1)]
                = dmxLocal->valuators[i];
        else
            dmxLocal->history[OFFSET(dmxLocal->tail, i + 1)] = 0;
    }

    for (i = firstAxis; i < axesCount; i++) {
        dmxLocal->history[OFFSET(dmxLocal->tail, i + i)]
            = (unsigned long) v[i - firstAxis];
        dmxLocal->valuators[i] = v[i - firstAxis];
    }
}
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d116 2
a117 3
        dmxLocal->history = malloc(sizeof(*dmxLocal->history)
                                   * (numAxes + 1)
                                   * DMX_MOTION_SIZE);
@


1.4
log
@Update to xserver 1.11.2
@
text
@d53 2
a54 1
int dmxPointerGetMotionBufferSize(void)
d75 5
a79 5
int dmxPointerGetMotionEvents(DeviceIntPtr pDevice,
                              xTimecoord *coords,
                              unsigned long start,
                              unsigned long stop,
                              ScreenPtr pScreen)
d82 4
a85 4
    int           numAxes = pDevice->valuator->numAxes;
    unsigned long *c      = (unsigned long *)coords;
    int           count   = 0;
    int           i, j;
d87 2
a88 1
    if (!dmxLocal->history) return 0;
d90 3
a92 2
        if (dmxLocal->history[OFFSET(i,0)] >= stop) break;
        if (dmxLocal->history[OFFSET(i,0)] >= start) {
d94 1
a94 1
                c[OFFSET(count,j)] = dmxLocal->history[OFFSET(i,j)];
d97 2
a98 1
        if (++i >= DMX_MOTION_SIZE) i = 0;
d106 4
a109 3
void dmxPointerPutMotionEvent(DeviceIntPtr pDevice,
                              int firstAxis, int axesCount, int *v,
                              unsigned long time)
d112 2
a113 2
    int           numAxes = pDevice->valuator->numAxes;
    int           i;
d116 5
a120 5
        dmxLocal->history   = malloc(sizeof(*dmxLocal->history)
                                     * (numAxes + 1)
                                     * DMX_MOTION_SIZE);
        dmxLocal->head      = 0;
        dmxLocal->tail      = 0;
d122 4
a125 2
    } else {
        if (++dmxLocal->tail >= DMX_MOTION_SIZE) dmxLocal->tail = 0;
d127 2
a128 1
            if (++dmxLocal->head >= DMX_MOTION_SIZE) dmxLocal->head = 0;
d131 1
a131 1
    dmxLocal->history[OFFSET(dmxLocal->tail,0)] = time;
d133 3
a135 3
                                /* Initialize the data from the known
                                 * values (if Absolute) or to zero (if
                                 * Relative) */
d138 1
a138 1
            dmxLocal->history[OFFSET(dmxLocal->tail,i+1)]
d141 1
a141 1
            dmxLocal->history[OFFSET(dmxLocal->tail,i+1)] = 0;
d143 1
a143 1
    
d145 3
a147 3
        dmxLocal->history[OFFSET(dmxLocal->tail,i+i)]
            = (unsigned long)v[i-firstAxis];
        dmxLocal->valuators[i] = v[i-firstAxis];
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d128 2
a129 2
    if (pDevice->valuator->mode == Absolute) {
        for (i = 0; i < numAxes; i++) 
d132 1
a132 2
    } else {
        for (i = 0; i < numAxes; i++) 
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d111 1
a111 1
        dmxLocal->history   = xalloc(sizeof(*dmxLocal->history)
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
d116 1
a116 2
        dmxLocal->valuators = xalloc(sizeof(*dmxLocal->valuators) * numAxes);
        memset(dmxLocal->valuators, 0, sizeof(*dmxLocal->valuators) * numAxes);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
@

