head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.6
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.09.27.17.53.01;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	cVXoV5PxI8YrEaVA;

1.6
date	2014.05.02.19.27.48;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.23;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.05;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.29;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.23.36;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.23.36;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.34;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@/*
 * Copyright 2001-2003 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   David H. Dawes <dawes@@xfree86.org>
 *   Kevin E. Martin <kem@@redhat.com>
 *   Rickard E. (Rik) Faith <faith@@redhat.com>
 */

/** \file
 * These routines support taking input from devices on the backend
 * (output) displays.  \see dmxcommon.c. */

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#endif

#define DMX_BACKEND_DEBUG 0

#include "dmxinputinit.h"
#include "dmxbackend.h"
#include "dmxcommon.h"
#include "dmxconsole.h"
#include "dmxcursor.h"
#include "dmxprop.h"
#include "dmxsync.h"
#include "dmxcb.h"              /* For dmxGlobalWidth and dmxGlobalHeight */
#include "dmxevents.h"          /* For dmxGetGlobalPosition */
#include "ChkNotMaskEv.h"

#include "inputstr.h"
#include "input.h"
#include <X11/keysym.h>
#include "mipointer.h"
#include "scrnintstr.h"
#include "windowstr.h"

/* Private area for backend devices. */
typedef struct _myPrivate {
    DMX_COMMON_PRIVATE;
    int myScreen;
    DMXScreenInfo *grabbedScreen;

    int lastX, lastY;
    int centerX, centerY;
    int relative;
    int newscreen;
    int initialized;
    DevicePtr mou, kbd;
    int entered;
    int offX, offY;
} myPrivate;

#if DMX_BACKEND_DEBUG
#define DMXDBG0(f)                   dmxLog(dmxDebug,f)
#define DMXDBG1(f,a)                 dmxLog(dmxDebug,f,a)
#define DMXDBG2(f,a,b)               dmxLog(dmxDebug,f,a,b)
#define DMXDBG3(f,a,b,c)             dmxLog(dmxDebug,f,a,b,c)
#define DMXDBG4(f,a,b,c,d)           dmxLog(dmxDebug,f,a,b,c,d)
#define DMXDBG5(f,a,b,c,d,e)         dmxLog(dmxDebug,f,a,b,c,d,e)
#define DMXDBG6(f,a,b,c,d,e,g)       dmxLog(dmxDebug,f,a,b,c,d,e,g)
#define DMXDBG7(f,a,b,c,d,e,g,h)     dmxLog(dmxDebug,f,a,b,c,d,e,g,h)
#define DMXDBG8(f,a,b,c,d,e,g,h,i)   dmxLog(dmxDebug,f,a,b,c,d,e,g,h,i)
#define DMXDBG9(f,a,b,c,d,e,g,h,i,j) dmxLog(dmxDebug,f,a,b,c,d,e,g,h,i,j)
#else
#define DMXDBG0(f)
#define DMXDBG1(f,a)
#define DMXDBG2(f,a,b)
#define DMXDBG3(f,a,b,c)
#define DMXDBG4(f,a,b,c,d)
#define DMXDBG5(f,a,b,c,d,e)
#define DMXDBG6(f,a,b,c,d,e,g)
#define DMXDBG7(f,a,b,c,d,e,g,h)
#define DMXDBG8(f,a,b,c,d,e,g,h,i)
#define DMXDBG9(f,a,b,c,d,e,g,h,i,j)
#endif

/** Create and return a private data structure. */
void *
dmxBackendCreatePrivate(DeviceIntPtr pDevice)
{
    GETDMXLOCALFROMPDEVICE;
    myPrivate *priv = calloc(1, sizeof(*priv));

    priv->dmxLocal = dmxLocal;
    return priv;
}

/** Destroy the private data structure.  No checking is performed to
 * verify that the structure was actually created by
 * #dmxBackendCreatePrivate. */
void
dmxBackendDestroyPrivate(void *private)
{
    free(private);
}

static void *
dmxBackendTestScreen(DMXScreenInfo * dmxScreen, void *closure)
{
    long target = (long) closure;

    if (dmxScreen->index == target)
        return dmxScreen;
    return NULL;
}

/* Return non-zero if screen and priv->myScreen are on the same physical
 * backend display (1 if they are the same screen, 2 if they are
 * different screens).  Since this is a common operation, the results
 * are cached.  The cache is invalidated if \a priv is NULL (this should
 * be done with each server generation and reconfiguration). */
static int
dmxBackendSameDisplay(myPrivate * priv, long screen)
{
    static myPrivate *oldpriv = NULL;
    static int oldscreen = -1;
    static int retcode = 0;

    if (priv == oldpriv && screen == oldscreen)
        return retcode;
    if (!priv) {                /* Invalidate cache */
        oldpriv = NULL;
        oldscreen = -1;
        retcode = 0;
        return 0;
    }

    if (screen == priv->myScreen)
        retcode = 1;
    else if (screen < 0 || screen >= dmxNumScreens)
        retcode = 0;
    else if (dmxPropertyIterate(priv->be,
                                dmxBackendTestScreen, (void *) screen))
        retcode = 2;
    else
        retcode = 0;

    oldpriv = priv;
    oldscreen = screen;
    return retcode;
}

static void *
dmxBackendTestEvents(DMXScreenInfo * dmxScreen, void *closure)
{
    XEvent *X = (XEvent *) closure;

    if (XCheckNotMaskEvent(dmxScreen->beDisplay, ExposureMask, X))
        return dmxScreen;
    return NULL;
}

static void *
dmxBackendTestMotionEvent(DMXScreenInfo * dmxScreen, void *closure)
{
    XEvent *X = (XEvent *) closure;

    if (XCheckTypedEvent(dmxScreen->beDisplay, MotionNotify, X))
        return dmxScreen;
    return NULL;
}

static DMXScreenInfo *
dmxBackendGetEvent(myPrivate * priv, XEvent * X)
{
    DMXScreenInfo *dmxScreen;

    if ((dmxScreen = dmxPropertyIterate(priv->be, dmxBackendTestEvents, X)))
        return dmxScreen;
    return NULL;
}

static DMXScreenInfo *
dmxBackendPendingMotionEvent(myPrivate * priv, int save)
{
    DMXScreenInfo *dmxScreen;
    XEvent N;

    if ((dmxScreen = dmxPropertyIterate(priv->be,
                                        dmxBackendTestMotionEvent, &N))) {
        if (save)
            XPutBackEvent(dmxScreen->beDisplay, &N);
        return dmxScreen;
    }
    return NULL;
}

static void *
dmxBackendTestWindow(DMXScreenInfo * dmxScreen, void *closure)
{
    Window win = (Window) (long) closure;

    if (dmxScreen->scrnWin == win)
        return dmxScreen;
    return NULL;
}

static DMXScreenInfo *
dmxBackendFindWindow(myPrivate * priv, Window win)
{
    return dmxPropertyIterate(priv->be, dmxBackendTestWindow,
                              (void *) (long) win);
}

/* If the cursor is over a set of overlapping screens and one of those
 * screens takes backend input, then we want that particular screen to
 * be current, not one of the other ones. */
static int
dmxBackendFindOverlapping(myPrivate * priv, int screen, int x, int y)
{
    DMXScreenInfo *start = &dmxScreens[screen];
    DMXScreenInfo *pt;

    if (!start->over)
        return screen;

    for (pt = start->over; /* condition at end of loop */ ; pt = pt->over) {
        if (pt->index == priv->myScreen
            && dmxOnScreen(x, y, &dmxScreens[pt->index]))
            return pt->index;
        if (pt == start)
            break;
    }
    return screen;
}

/* Return non-zero if \a x and \a y are off \a screen. */
static int
dmxBackendOffscreen(int screen, int x, int y)
{
    DMXScreenInfo *dmxScreen = &dmxScreens[screen];

    return (!dmxOnScreen(x, y, dmxScreen));
}

/** This routine is called from #dmxCoreMotion for each motion
 * event. \a x and \a y are global coordinants. */
void
dmxBackendUpdatePosition(void *private, int x, int y)
{
    GETPRIVFROMPRIVATE;
    int screen = miPointerGetScreen(inputInfo.pointer)->myNum;
    DMXScreenInfo *dmxScreen = &dmxScreens[priv->myScreen];
    int oldRelative = priv->relative;
    int topscreen = dmxBackendFindOverlapping(priv, screen, x, y);
    int same = dmxBackendSameDisplay(priv, topscreen);
    int offscreen = dmxBackendOffscreen(priv->myScreen, x, y);
    int offthis = dmxBackendOffscreen(screen, x, y);

    DMXDBG9("dmxBackendUpdatePosition(%d,%d) my=%d mi=%d rel=%d"
            " topscreen=%d same=%d offscreen=%d offthis=%d\n",
            x, y, priv->myScreen, screen, priv->relative,
            topscreen, same, offscreen, offthis);

    if (offscreen) {
        /* If the cursor is off the input screen, it should be moving
         * relative unless it is visible on a screen of the same display
         * (i.e., one that shares the mouse). */
        if (same == 2 && !offthis) {
            if (priv->relative) {
                DMXDBG0("   Off screen, but not absolute\n");
                priv->relative = 0;
            }
        }
        else {
            if (!priv->relative) {
                DMXDBG0("   Off screen, but not relative\n");
                priv->relative = 1;
            }
        }
    }
    else {
        if (topscreen != screen) {
            DMXDBG2("   Using screen %d instead of %d (from mi)\n",
                    topscreen, screen);
        }
        if (same) {
            if (priv->relative) {
                DMXDBG0("   On screen, but not absolute\n");
                priv->relative = 0;
            }
        }
        else {
            if (!priv->relative) {
                DMXDBG0("   Not on screen, but not relative\n");
                priv->relative = 1;
            }
        }
    }

    if (oldRelative != priv->relative) {
        DMXDBG2("   Do switch, relative=%d same=%d\n", priv->relative, same);
        /* Discard all pre-switch events */
        dmxSync(dmxScreen, TRUE);
        while (dmxBackendPendingMotionEvent(priv, FALSE));

        if (dmxInput->console && offscreen) {
            /* Our special case is a console window and a backend window
             * share a display.  In this case, the cursor is either on
             * the backend window (taking absolute input), or not (in
             * which case the cursor needs to be in the console
             * window). */
            if (priv->grabbedScreen) {
                DMXDBG2("   *** force ungrab on %s, display=%p\n",
                        priv->grabbedScreen->name,
                        priv->grabbedScreen->beDisplay);
                XUngrabPointer(priv->grabbedScreen->beDisplay, CurrentTime);
                dmxSync(priv->grabbedScreen, TRUE);
                priv->grabbedScreen = NULL;
            }
            DMXDBG0("   Capturing console\n");
            dmxConsoleCapture(dmxInput);
        }
        else {
            priv->newscreen = 1;
            if (priv->relative && !dmxInput->console) {
                DMXDBG5("   Hide cursor; warp from %d,%d to %d,%d on %d\n",
                        priv->lastX, priv->lastY, priv->centerX, priv->centerY,
                        priv->myScreen);
                dmxConsoleUncapture(dmxInput);
                dmxHideCursor(dmxScreen);
                priv->lastX = priv->centerX;
                priv->lastY = priv->centerY;
                XWarpPointer(priv->display, None, priv->window,
                             0, 0, 0, 0, priv->lastX, priv->lastY);
                dmxSync(dmxScreen, TRUE);
            }
            else {
                DMXDBG0("   Check cursor\n");
                dmxCheckCursor();
            }
        }
    }
}

/** Get events from the X queue on the backend servers and put the
 * events into the DMX event queue. */
void
dmxBackendCollectEvents(DevicePtr pDev,
                        dmxMotionProcPtr motion,
                        dmxEnqueueProcPtr enqueue,
                        dmxCheckSpecialProcPtr checkspecial, DMXBlockType block)
{
    GETPRIVFROMPDEV;
    GETDMXINPUTFROMPRIV;
    XEvent X;
    DMXScreenInfo *dmxScreen;
    int left = 0;
    int entered = priv->entered;
    int ignoreLeave = 0;
    int v[2];
    int retcode;

    while ((dmxScreen = dmxBackendGetEvent(priv, &X))) {
        switch (X.type) {
        case EnterNotify:
            dmxCommonSaveState(priv);
            if (entered++)
                continue;
            priv->entered = 1;
            ignoreLeave = 1;
            DMXDBG5("dmxBackendCollectEvents: Enter %lu %d,%d; GRAB %s %p\n",
                    X.xcrossing.root, X.xcrossing.x, X.xcrossing.y,
                    dmxScreen->name, dmxScreen->beDisplay);
            XRaiseWindow(dmxScreen->beDisplay, dmxScreen->scrnWin);
            priv->grabbedScreen = dmxScreen;
            if ((retcode = XGrabPointer(dmxScreen->beDisplay,
                                        dmxScreen->scrnWin,
                                        True, 0, GrabModeAsync,
                                        GrabModeAsync, None, None,
                                        CurrentTime))) {
                dmxLog(dmxError,
                       "XGrabPointer failed during backend enter (%d)\n",
                       retcode);
            }
            break;
        case LeaveNotify:
            if (ignoreLeave) {
                ignoreLeave = 0;
                continue;
            }
            dmxCommonRestoreState(priv);
            if (left++)
                continue;
            DMXDBG7("dmxBackendCollectEvents: Leave %lu %d,%d %d %d %s %s\n",
                    X.xcrossing.root, X.xcrossing.x, X.xcrossing.y,
                    X.xcrossing.detail, X.xcrossing.focus,
                    priv->grabbedScreen ? "UNGRAB" : "", dmxScreen->name);
            if (priv->grabbedScreen) {
                XUngrabPointer(priv->grabbedScreen->beDisplay, CurrentTime);
                dmxSync(priv->grabbedScreen, TRUE);
                priv->grabbedScreen = NULL;
            }
            break;
        case MotionNotify:
            DMXDBG8("dmxBackendCollectEvents: MotionNotify %d/%d"
                    " newscreen=%d: %d %d (e=%d; last=%d,%d)\n",
                    dmxScreen->index, priv->myScreen,
                    priv->newscreen,
                    X.xmotion.x, X.xmotion.y,
                    entered, priv->lastX, priv->lastY);
            if (dmxBackendPendingMotionEvent(priv, TRUE))
                continue;
            if (!(dmxScreen = dmxBackendFindWindow(priv, X.xmotion.window)))
                dmxLog(dmxFatal,
                       "   Event on non-existant window %lu\n",
                       X.xmotion.window);
            if (!priv->relative || dmxInput->console) {
                int newX = X.xmotion.x - dmxScreen->rootX;
                int newY = X.xmotion.y - dmxScreen->rootY;

                if (!priv->newscreen) {
                    int width = dmxScreen->rootWidth;
                    int height = dmxScreen->rootHeight;

                    if (!newX)
                        newX = -1;
                    if (newX == width - 1)
                        newX = width;
                    if (!newY)
                        newY = -1;
                    if (newY == height - 1)
                        newY = height;
                }
                priv->newscreen = 0;
                v[0] = dmxScreen->rootXOrigin + newX;
                v[1] = dmxScreen->rootYOrigin + newY;
                DMXDBG8("   Absolute move: %d,%d (r=%dx%d+%d+%d s=%dx%d)\n",
                        v[0], v[1],
                        priv->be->rootWidth, priv->be->rootHeight,
                        priv->be->rootX, priv->be->rootY,
                        priv->be->scrnWidth, priv->be->scrnHeight);
                motion(priv->mou, v, 0, 2, DMX_ABSOLUTE, block);
                priv->entered = 0;
            }
            else {
                int newX = priv->lastX - X.xmotion.x;
                int newY = priv->lastY - X.xmotion.y;

                priv->lastX = X.xmotion.x;
                priv->lastY = X.xmotion.y;
                v[0] = newX;
                v[1] = newY;
                DMXDBG2("   Relative move: %d, %d\n", v[0], v[1]);
                motion(priv->mou, v, 0, 2, DMX_RELATIVE, block);
            }
            if (entered && priv->relative) {
                DMXDBG4("   **** Relative %d %d instead of absolute %d %d\n",
                        v[0], v[1],
                        (dmxScreen->rootXOrigin + X.xmotion.x
                         - dmxScreen->rootX),
                        (dmxScreen->rootYOrigin + X.xmotion.y
                         - dmxScreen->rootY));
            }
            break;

        case KeyPress:
        case KeyRelease:
            enqueue(priv->kbd, X.type, X.xkey.keycode, 0, NULL, block);
            break;
        case ButtonPress:
        case ButtonRelease:
            /* fall-through */
        default:
            /* Pass the whole event here, because
             * this may be an extension event. */
            enqueue(priv->mou, X.type, X.xbutton.button, 0, &X, block);
            break;
        }
    }
}

/** Called after input events are processed from the DMX queue.  No
 * event processing actually takes place here, but this is a convenient
 * place to update the pointer. */
void
dmxBackendProcessInput(void *private)
{
    GETPRIVFROMPRIVATE;

    DMXDBG6("dmxBackendProcessInput: myScreen=%d relative=%d"
            " last=%d,%d center=%d,%d\n",
            priv->myScreen, priv->relative,
            priv->lastX, priv->lastY, priv->centerX, priv->centerY);

    if (priv->relative
        && !dmxInput->console
        && (priv->lastX != priv->centerX || priv->lastY != priv->centerY)) {
        DMXDBG4("   warping pointer from last=%d,%d to center=%d,%d\n",
                priv->lastX, priv->lastY, priv->centerX, priv->centerY);
        priv->lastX = priv->centerX;
        priv->lastY = priv->centerY;
        XWarpPointer(priv->display, None, priv->window,
                     0, 0, 0, 0, priv->lastX, priv->lastY);
        dmxSync(&dmxScreens[priv->myScreen], TRUE);
    }
}

static void
dmxBackendComputeCenter(myPrivate * priv)
{
    int centerX;
    int centerY;

    centerX = priv->be->rootWidth / 2 + priv->be->rootX;
    centerY = priv->be->rootHeight / 2 + priv->be->rootY;

    if (centerX > priv->be->rootWidth)
        centerX = priv->be->rootWidth - 1;
    if (centerY > priv->be->rootHeight)
        centerY = priv->be->rootHeight - 1;
    if (centerX < 1)
        centerX = 1;
    if (centerY < 1)
        centerY = 1;

    priv->centerX = centerX;
    priv->centerY = centerY;
}

static DMXScreenInfo *
dmxBackendInitPrivate(DevicePtr pDev)
{
    GETPRIVFROMPDEV;
    DMXInputInfo *dmxInput = &dmxInputs[dmxLocal->inputIdx];
    DMXScreenInfo *dmxScreen;
    int i;

    /* Fill in myPrivate */
    for (i = 0, dmxScreen = &dmxScreens[0]; i < dmxNumScreens; i++, dmxScreen++) {
        if (dmxPropertySameDisplay(dmxScreen, dmxInput->name)) {
            priv->display = dmxScreen->beDisplay;
            priv->window = dmxScreen->scrnWin;
            priv->be = dmxScreen;
            break;
        }
    }

    if (i >= dmxNumScreens)
        dmxLog(dmxFatal,
               "%s is not an existing backend display - cannot initialize\n",
               dmxInput->name);

    return dmxScreen;
}

/** Re-initialized the backend device described by \a pDev (after a
 * reconfig). */
void
dmxBackendLateReInit(DevicePtr pDev)
{
    GETPRIVFROMPDEV;
    int x, y;

    dmxBackendSameDisplay(NULL, 0);     /* Invalidate cache */
    dmxBackendInitPrivate(pDev);
    dmxBackendComputeCenter(priv);
    dmxGetGlobalPosition(&x, &y);
    dmxInvalidateGlobalPosition();      /* To force event processing */
    dmxBackendUpdatePosition(priv, x, y);
}

/** Initialized the backend device described by \a pDev. */
void
dmxBackendInit(DevicePtr pDev)
{
    GETPRIVFROMPDEV;
    DMXScreenInfo *dmxScreen;

    dmxBackendSameDisplay(NULL, 0);     /* Invalidate cache */

    if (dmxLocal->type == DMX_LOCAL_MOUSE)
        priv->mou = pDev;
    if (dmxLocal->type == DMX_LOCAL_KEYBOARD)
        priv->kbd = pDev;
    if (priv->initialized++)
        return;                 /* Only do once for mouse/keyboard pair */

    dmxScreen = dmxBackendInitPrivate(pDev);

    /* Finish initialization using computed values or constants. */
    dmxBackendComputeCenter(priv);
    priv->eventMask = (EnterWindowMask | LeaveWindowMask);
    priv->myScreen = dmxScreen->index;
    priv->lastX = priv->centerX;
    priv->lastY = priv->centerY;
    priv->relative = 0;
    priv->newscreen = 0;
}

/** Get information about the backend pointer (for initialization). */
void
dmxBackendMouGetInfo(DevicePtr pDev, DMXLocalInitInfoPtr info)
{
    const DMXScreenInfo *dmxScreen = dmxBackendInitPrivate(pDev);

    info->buttonClass = 1;
    dmxCommonMouGetMap(pDev, info->map, &info->numButtons);
    info->valuatorClass = 1;
    info->numRelAxes = 2;
    info->minval[0] = 0;
    info->minval[1] = 0;
    info->maxval[0] = dmxScreen->beWidth;
    info->maxval[1] = dmxScreen->beHeight;
    info->res[0] = 1;
    info->minres[0] = 0;
    info->maxres[0] = 1;
    info->ptrFeedbackClass = 1;
}

/** Get information about the backend keyboard (for initialization). */
void
dmxBackendKbdGetInfo(DevicePtr pDev, DMXLocalInitInfoPtr info)
{
    dmxCommonKbdGetInfo(pDev, info);
    info->keyboard = 1;
    info->keyClass = 1;
    dmxCommonKbdGetMap(pDev, &info->keySyms, info->modMap);
    info->freemap = 1;
    info->focusClass = 1;
    info->kbdFeedbackClass = 1;
}

/** Process #DMXFunctionType functions.  The only function handled here
 * is to acknowledge a pending server shutdown. */
int
dmxBackendFunctions(void *private, DMXFunctionType function)
{
    switch (function) {
    case DMX_FUNCTION_TERMINATE:
        return 1;
    default:
        return 0;
    }
}
@


1.6
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d104 1
a104 1
pointer
d118 1
a118 1
dmxBackendDestroyPrivate(pointer private)
d265 1
a265 1
dmxBackendUpdatePosition(pointer private, int x, int y)
d503 1
a503 1
dmxBackendProcessInput(pointer private)
d653 1
a653 1
dmxBackendFunctions(pointer private, DMXFunctionType function)
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d422 1
a422 1
            DMXDBG9("dmxBackendCollectEvents: MotionNotify %d/%d (mi %d)"
a424 1
                    miPointerCurrentScreen()->myNum,
a579 3

    DMXDBG1("dmxBackendLateReInit miPointerCurrentScreen() = %p\n",
            miPointerCurrentScreen());
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d66 11
a76 11
    int                     myScreen;
    DMXScreenInfo           *grabbedScreen;
    
    int                     lastX, lastY;
    int                     centerX, centerY;
    int                     relative;
    int                     newscreen;
    int                     initialized;
    DevicePtr               mou, kbd;
    int                     entered;
    int                     offX, offY;
d104 2
a105 1
pointer dmxBackendCreatePrivate(DeviceIntPtr pDevice)
d109 2
a110 1
    priv->dmxLocal  = dmxLocal;
d117 2
a118 1
void dmxBackendDestroyPrivate(pointer private)
d123 2
a124 1
static void *dmxBackendTestScreen(DMXScreenInfo *dmxScreen, void *closure)
d126 1
a126 1
    long target = (long)closure;
d128 2
a129 1
    if (dmxScreen->index == target) return dmxScreen;
d138 2
a139 1
static int dmxBackendSameDisplay(myPrivate *priv, long screen)
d141 3
a143 3
    static myPrivate *oldpriv  = NULL;
    static int       oldscreen = -1;
    static int       retcode   = 0;
d145 2
a146 1
    if (priv == oldpriv && screen == oldscreen) return retcode;
d148 1
a148 1
        oldpriv   = NULL;
d150 1
a150 1
        retcode   = 0;
d154 4
a157 2
    if (screen == priv->myScreen)                     retcode = 1;
    else if (screen < 0 || screen >= dmxNumScreens)   retcode = 0;
d159 4
a162 3
                                dmxBackendTestScreen,
                                (void *)screen))      retcode = 2;
    else                                              retcode = 0;
d164 1
a164 1
    oldpriv   = priv;
d169 2
a170 1
static void *dmxBackendTestEvents(DMXScreenInfo *dmxScreen, void *closure)
d172 2
a173 2
    XEvent *X = (XEvent *)closure;
    
d179 2
a180 1
static void *dmxBackendTestMotionEvent(DMXScreenInfo *dmxScreen, void *closure)
d182 1
a182 1
    XEvent *X = (XEvent *)closure;
d189 2
a190 1
static DMXScreenInfo *dmxBackendGetEvent(myPrivate *priv, XEvent *X)
d199 2
a200 1
static DMXScreenInfo *dmxBackendPendingMotionEvent(myPrivate *priv, int save)
d203 1
a203 1
    XEvent        N;
d207 2
a208 1
        if (save) XPutBackEvent(dmxScreen->beDisplay, &N);
d214 2
a215 1
static void *dmxBackendTestWindow(DMXScreenInfo *dmxScreen, void *closure)
d217 4
a220 2
    Window win = (Window)(long)closure;
    if (dmxScreen->scrnWin == win) return dmxScreen;
d224 2
a225 1
static DMXScreenInfo *dmxBackendFindWindow(myPrivate *priv, Window win)
d228 1
a228 1
                              (void *)(long)win);
d234 2
a235 1
static int dmxBackendFindOverlapping(myPrivate *priv, int screen, int x, int y)
d240 4
a243 3
    if (!start->over) return screen;
    
    for (pt = start->over; /* condition at end of loop */; pt = pt->over) {
d245 4
a248 2
            && dmxOnScreen(x, y, &dmxScreens[pt->index])) return pt->index;
        if (pt == start) break;
d254 2
a255 1
static int dmxBackendOffscreen(int screen, int x, int y)
d264 2
a265 1
void dmxBackendUpdatePosition(pointer private, int x, int y)
d268 7
a274 7
    int           screen      = miPointerGetScreen(inputInfo.pointer)->myNum;
    DMXScreenInfo *dmxScreen  = &dmxScreens[priv->myScreen];
    int           oldRelative = priv->relative;
    int           topscreen   = dmxBackendFindOverlapping(priv, screen, x, y);
    int           same        = dmxBackendSameDisplay(priv, topscreen);
    int           offscreen   = dmxBackendOffscreen(priv->myScreen, x, y);
    int           offthis     = dmxBackendOffscreen(screen, x, y);
d290 2
a291 1
        } else {
d297 2
a298 1
    } else {
d308 2
a309 1
        } else {
d318 1
a318 2
        DMXDBG2("   Do switch, relative=%d same=%d\n",
                priv->relative, same);
d322 1
a322 1
        
d339 2
a340 1
        } else {
d348 2
a349 2
                priv->lastX   = priv->centerX;
                priv->lastY   = priv->centerY;
d353 2
a354 1
            } else {
d364 5
a368 5
void dmxBackendCollectEvents(DevicePtr pDev,
                             dmxMotionProcPtr motion,
                             dmxEnqueueProcPtr enqueue,
                             dmxCheckSpecialProcPtr checkspecial,
                             DMXBlockType block)
d372 7
a378 7
    XEvent               X;
    DMXScreenInfo        *dmxScreen;
    int                  left        = 0;
    int                  entered     = priv->entered;
    int                  ignoreLeave = 0;
    int                  v[2];
    int                  retcode;
d381 1
a381 1
	switch (X.type) {
d387 1
a387 1
            ignoreLeave   = 1;
d394 1
a394 1
					dmxScreen->scrnWin,
d414 1
a414 2
                    priv->grabbedScreen ? "UNGRAB" : "",
                    dmxScreen->name);
d421 1
a421 1
	case MotionNotify:
d440 1
a440 1
                    int width  = dmxScreen->rootWidth;
d442 9
a450 4
                    if (!newX)              newX = -1;
                    if (newX == width - 1)  newX = width;
                    if (!newY)              newY = -1;
                    if (newY == height - 1) newY = height;
d462 2
a463 1
            } else {
d466 1
d469 2
a470 2
                v[0]        = newX;
                v[1]        = newY;
d482 1
a482 1
	    break;
d491 3
a493 3
	default:
                                /* Pass the whole event here, because
                                 * this may be an extension event. */
d495 2
a496 2
	    break;
	}
d503 2
a504 1
void dmxBackendProcessInput(pointer private)
d511 1
a511 2
            priv->lastX, priv->lastY,
            priv->centerX, priv->centerY);
d518 2
a519 2
	priv->lastX   = priv->centerX;
	priv->lastY   = priv->centerY;
d526 2
a527 1
static void dmxBackendComputeCenter(myPrivate *priv)
d531 12
a542 8
    
    centerX       = priv->be->rootWidth / 2 + priv->be->rootX;
    centerY       = priv->be->rootHeight / 2 + priv->be->rootY;

    if (centerX > priv->be->rootWidth)  centerX = priv->be->rootWidth  - 1;
    if (centerY > priv->be->rootHeight) centerY = priv->be->rootHeight - 1;
    if (centerX < 1)                    centerX = 1;
    if (centerY < 1)                    centerY = 1;
d548 2
a549 1
static DMXScreenInfo *dmxBackendInitPrivate(DevicePtr pDev)
d552 3
a554 3
    DMXInputInfo      *dmxInput = &dmxInputs[dmxLocal->inputIdx];
    DMXScreenInfo     *dmxScreen;
    int               i;
d557 1
a557 1
    for (i = 0,dmxScreen = &dmxScreens[0]; i<dmxNumScreens; i++,dmxScreen++) {
d559 3
a561 3
            priv->display  = dmxScreen->beDisplay;
            priv->window   = dmxScreen->scrnWin;
            priv->be       = dmxScreen;
d576 2
a577 1
void dmxBackendLateReInit(DevicePtr pDev)
d580 1
a580 1
    int               x, y;
d585 1
a585 1
    dmxBackendSameDisplay(NULL, 0); /* Invalidate cache */
d589 1
a589 1
    dmxInvalidateGlobalPosition(); /* To force event processing */
d594 2
a595 1
void dmxBackendInit(DevicePtr pDev)
d598 1
a598 1
    DMXScreenInfo     *dmxScreen;
d600 1
a600 1
    dmxBackendSameDisplay(NULL, 0); /* Invalidate cache */
d602 6
a607 3
    if (dmxLocal->type == DMX_LOCAL_MOUSE)    priv->mou = pDev;
    if (dmxLocal->type == DMX_LOCAL_KEYBOARD) priv->kbd = pDev;
    if (priv->initialized++) return; /* Only do once for mouse/keyboard pair */
d613 6
a618 6
    priv->eventMask          = (EnterWindowMask|LeaveWindowMask);
    priv->myScreen           = dmxScreen->index;
    priv->lastX              = priv->centerX;
    priv->lastY              = priv->centerY;
    priv->relative           = 0;
    priv->newscreen          = 0;
d622 2
a623 1
void dmxBackendMouGetInfo(DevicePtr pDev, DMXLocalInitInfoPtr info)
d627 1
a627 1
    info->buttonClass      = 1;
d629 9
a637 9
    info->valuatorClass    = 1;
    info->numRelAxes       = 2;
    info->minval[0]        = 0;
    info->minval[1]        = 0;
    info->maxval[0]        = dmxScreen->beWidth;
    info->maxval[1]        = dmxScreen->beHeight;
    info->res[0]           = 1;
    info->minres[0]        = 0;
    info->maxres[0]        = 1;
d642 2
a643 1
void dmxBackendKbdGetInfo(DevicePtr pDev, DMXLocalInitInfoPtr info)
d646 2
a647 2
    info->keyboard         = 1;
    info->keyClass         = 1;
d649 2
a650 2
    info->freemap          = 1;
    info->focusClass       = 1;
d656 2
a657 1
int dmxBackendFunctions(pointer private, DMXFunctionType function)
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d117 1
a117 1
    if (private) free(private);
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d239 1
a239 1
 * event. #x and #y are global coordinants. */
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
d107 1
a107 2
    myPrivate *priv = xalloc(sizeof(*priv));
    memset(priv, 0, sizeof(*priv));
d117 1
a117 1
    if (private) xfree(private);
d243 1
a243 1
    int           screen      = miPointerCurrentScreen()->myNum;
d355 2
a356 1
            if (entered++) continue;
d380 2
a381 1
            if (left++) continue;
d401 2
a402 1
            if (dmxBackendPendingMotionEvent(priv, TRUE)) continue;
d453 3
d578 2
d585 3
a587 1
    info->maxval[0]        = 0;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
d245 1
a245 1
    int           screen      = miPointerGetScreen(inputInfo.pointer)->myNum;
d357 1
a357 2
            if (entered++)
                continue;
d381 1
a381 2
            if (left++)
                continue;
d401 1
a401 2
            if (dmxBackendPendingMotionEvent(priv, TRUE))
                continue;
a451 3
        case ButtonPress:
        case ButtonRelease:
            /* fall-through */
a573 2
    const DMXScreenInfo *dmxScreen = dmxBackendInitPrivate(pDev);

d579 1
a579 3
    info->minval[1]        = 0;
    info->maxval[0]        = dmxScreen->beWidth;
    info->maxval[1]        = dmxScreen->beHeight;
@

