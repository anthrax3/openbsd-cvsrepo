head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.14
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.12
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.10
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.8
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.18
	OPENBSD_5_0:1.1.1.2.0.16
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.12
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.14
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.06.07.17.28.48;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.10.13.21.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.23.37;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.23.37;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.36;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@/*
 * Copyright 2002-2003 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   Rickard E. (Rik) Faith <faith@@redhat.com>
 *
 */

/** \file
 *
 * Provides an interface for handling SIGIO signals for input devices. */

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#endif

#include "inputstr.h"
#include "dmxinputinit.h"
#include "dmxsigio.h"
#include "dmxevents.h"
#include <signal.h>
#include <unistd.h>
#include <fcntl.h>

static int dmxFdCount = 0;
static Bool dmxInputEnabled = TRUE;

/* Define equivalents for non-POSIX systems (e.g., SGI IRIX, Solaris) */
#ifndef O_ASYNC
#ifdef FASYNC
#define O_ASYNC FASYNC
#else
#define O_ASYNC 0
#endif
#endif
#ifndef O_NONBLOCK
#define O_NONBLOCK FNONBLK
#endif

static void
dmxSigioHandler(int sig)
{
    int i, j;
    DMXInputInfo *dmxInput;

    for (i = 0, dmxInput = &dmxInputs[0]; i < dmxNumInputs; i++, dmxInput++) {
        if (dmxInput->sigioState == DMX_ACTIVESIGIO) {
            for (j = 0; j < dmxInput->numDevs; j++) {
                DMXLocalInputInfoPtr dmxLocal = dmxInput->devs[j];

                if (dmxLocal->collect_events) {
                    dmxLocal->collect_events(&dmxLocal->pDevice->public,
                                             dmxMotion,
                                             dmxEnqueue,
                                             dmxCheckSpecialKeys, DMX_NO_BLOCK);
                }
            }
        }
    }
}

static void
dmxSigioHook(void)
{
    struct sigaction a;
    sigset_t s;

    memset(&a, 0, sizeof(a));
    a.sa_handler = dmxSigioHandler;
    sigemptyset(&a.sa_mask);
    sigaddset(&a.sa_mask, SIGIO);
    sigaddset(&a.sa_mask, SIGALRM);
    sigaddset(&a.sa_mask, SIGVTALRM);
    sigaction(SIGIO, &a, 0);

    sigemptyset(&s);
    sigprocmask(SIG_SETMASK, &s, 0);
}

static void
dmxSigioUnhook(void)
{
    struct sigaction a;

    memset(&a, 0, sizeof(a));
    a.sa_handler = SIG_IGN;
    sigemptyset(&a.sa_mask);
    sigaction(SIGIO, &a, 0);
}

static void
dmxSigioAdd(DMXInputInfo * dmxInput)
{
    int flags;
    int i;

    switch (dmxInput->sigioState) {
    case DMX_NOSIGIO:
        return;
    case DMX_USESIGIO:
        dmxInput->sigioState = DMX_ACTIVESIGIO;
        break;
    case DMX_ACTIVESIGIO:
        return;
    }

    for (i = 0; i < dmxInput->sigioFdCount; i++) {
        if (!dmxInput->sigioAdded[i]) {
            int fd = dmxInput->sigioFd[i];

            fcntl(fd, F_SETOWN, getpid());
            flags = fcntl(fd, F_GETFL);
            flags |= O_ASYNC | O_NONBLOCK;
            fcntl(fd, F_SETFL, flags);

            AddEnabledDevice(fd);
            dmxInput->sigioAdded[i] = TRUE;

            if (++dmxFdCount == 1)
                dmxSigioHook();
        }
    }
}

static void
dmxSigioRemove(DMXInputInfo * dmxInput)
{
    int flags;
    int i;

    switch (dmxInput->sigioState) {
    case DMX_NOSIGIO:
        return;
    case DMX_USESIGIO:
        return;
    case DMX_ACTIVESIGIO:
        dmxInput->sigioState = DMX_USESIGIO;
        break;
    }

    for (i = 0; i < dmxInput->sigioFdCount; i++) {
        if (dmxInput->sigioAdded[i]) {
            int fd = dmxInput->sigioFd[i];

            dmxInput->sigioAdded[i] = FALSE;
            RemoveEnabledDevice(fd);

            flags = fcntl(fd, F_GETFL);
            flags &= ~(O_ASYNC | O_NONBLOCK);
            fcntl(fd, F_SETFL, flags);

            if (!--dmxFdCount)
                dmxSigioUnhook();
        }
    }
}

/** Enable SIGIO handling.  This instantiates the handler with the OS. */
void
dmxSigioEnableInput(void)
{
    int i;
    DMXInputInfo *dmxInput;

    dmxInputEnabled = TRUE;
    for (i = 0, dmxInput = &dmxInputs[0]; i < dmxNumInputs; i++, dmxInput++)
        dmxSigioAdd(dmxInput);
}

/** Disable SIGIO handling.  This removes the hanlder from the OS. */
void
dmxSigioDisableInput(void)
{
    int i;
    DMXInputInfo *dmxInput;

    dmxInputEnabled = FALSE;
    for (i = 0, dmxInput = &dmxInputs[0]; i < dmxNumInputs; i++, dmxInput++)
        dmxSigioRemove(dmxInput);
}

/** Make a note that the input device described in \a dmxInput will be
 * using the file descriptor \a fd for SIGIO signals.  Calls
 * AddEnabledDevice ifi SIGIO handling has been enabled with
 * #dmxSigioEnableInput(). */
void
dmxSigioRegister(DMXInputInfo * dmxInput, int fd)
{
    dmxInput->sigioState = DMX_USESIGIO;
    if (dmxInput->sigioFdCount >= DMX_MAX_SIGIO_FDS)
        dmxLog(dmxFatal, "Too many SIGIO file descriptors (%d >= %d)\n",
               dmxInput->sigioFdCount, DMX_MAX_SIGIO_FDS);

    dmxInput->sigioFd[dmxInput->sigioFdCount++] = fd;
    if (dmxInputEnabled)
        dmxSigioAdd(dmxInput);
}

/** Remove the notes that \a dmxInput is using any file descriptors for
 * SIGIO signals.  Calls RemoveEnabledDevice. */
void
dmxSigioUnregister(DMXInputInfo * dmxInput)
{
    if (dmxInput->sigioState == DMX_NOSIGIO)
        return;
    dmxSigioRemove(dmxInput);
    dmxInput->sigioState = DMX_NOSIGIO;
    dmxInput->sigioFdCount = 0;
}
@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a86 22
/** Block SIGIO handling. */
void
dmxSigioBlock(void)
{
    sigset_t s;

    sigemptyset(&s);
    sigaddset(&s, SIGIO);
    sigprocmask(SIG_BLOCK, &s, 0);
}

/** Unblock SIGIO handling. */
void
dmxSigioUnblock(void)
{
    sigset_t s;

    sigemptyset(&s);
    sigaddset(&s, SIGIO);
    sigprocmask(SIG_UNBLOCK, &s, 0);
}

@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
d50 1
a50 1
static int  dmxFdCount      = 0;
d55 5
a59 5
# ifdef FASYNC
# define O_ASYNC FASYNC
# else
# define O_ASYNC 0
# endif
d65 2
a66 1
static void dmxSigioHandler(int sig)
d68 1
a68 1
    int          i, j;
d75 1
d80 1
a80 2
                                             dmxCheckSpecialKeys,
                                             DMX_NO_BLOCK);
d88 2
a89 1
void dmxSigioBlock(void)
d99 2
a100 1
void dmxSigioUnblock(void)
d109 2
a110 1
static void dmxSigioHook(void)
d113 1
a113 1
    sigset_t         s;
d122 1
a122 1
    
d127 2
a128 1
static void dmxSigioUnhook(void)
d132 1
a132 1
    memset (&a, 0, sizeof(a));
d138 2
a139 1
static void dmxSigioAdd(DMXInputInfo *dmxInput)
d145 7
a151 3
    case DMX_NOSIGIO:     return;
    case DMX_USESIGIO:    dmxInput->sigioState = DMX_ACTIVESIGIO; break;
    case DMX_ACTIVESIGIO: return;
d157 1
a157 1
        
d160 1
a160 1
            flags |= O_ASYNC|O_NONBLOCK;
d162 1
a162 1
    
d166 2
a167 1
            if (++dmxFdCount == 1) dmxSigioHook();
d172 2
a173 1
static void dmxSigioRemove(DMXInputInfo *dmxInput)
d177 1
a177 1
    
d179 7
a185 3
    case DMX_NOSIGIO:     return;
    case DMX_USESIGIO:    return;
    case DMX_ACTIVESIGIO: dmxInput->sigioState = DMX_USESIGIO; break;
d191 1
a191 1
        
d194 1
a194 1
        
d196 1
a196 1
            flags &= ~(O_ASYNC|O_NONBLOCK);
d199 2
a200 1
            if (!--dmxFdCount) dmxSigioUnhook();
d206 2
a207 1
void dmxSigioEnableInput(void)
d209 2
a210 2
    int              i;
    DMXInputInfo     *dmxInput;
d218 2
a219 1
void dmxSigioDisableInput(void)
d221 2
a222 2
    int              i;
    DMXInputInfo     *dmxInput;
d233 2
a234 1
void dmxSigioRegister(DMXInputInfo *dmxInput, int fd)
d240 1
a240 1
    
d242 2
a243 1
    if (dmxInputEnabled) dmxSigioAdd(dmxInput);
d248 2
a249 1
void dmxSigioUnregister(DMXInputInfo *dmxInput)
d251 2
a252 1
    if (dmxInput->sigioState == DMX_NOSIGIO) return;
d254 1
a254 1
    dmxInput->sigioState   = DMX_NOSIGIO;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
@

