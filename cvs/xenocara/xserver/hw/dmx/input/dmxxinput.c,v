head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.18
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.16
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.14
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.12
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.06.10.13.21.23;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.05.13.32.50;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.05;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.29;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.23.36;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.23.36;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * Copyright 2002-2003 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   Rickard E. (Rik) Faith <faith@@redhat.com>
 *
 */

/** \file
 *
 * This file implements support required by the XINPUT extension.
 */

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#endif

#include <X11/X.h>
#include <X11/Xproto.h>
#include "inputstr.h"
#include <X11/extensions/XI.h>
#include <X11/extensions/XIproto.h>
#include "XIstubs.h"

#include "mipointer.h"
#include "dmxinputinit.h"
#include "exevents.h"

/** Set device mode to \a mode.  This is not implemented. */
int
SetDeviceMode(ClientPtr client, DeviceIntPtr dev, int mode)
{
    return BadMatch;
}

/** Set device valuators.  This is not implemented. */
int
SetDeviceValuators(ClientPtr client,
                   DeviceIntPtr dev,
                   int *valuators, int first_valuator, int num_valuators)
{
    return BadMatch;
}

/** Change device control.  This is not implemented. */
int
ChangeDeviceControl(ClientPtr client, DeviceIntPtr dev, xDeviceCtl * control)
{
    return BadMatch;
}
@


1.5
log
@Update to xserver 1.11.2
@
text
@d55 2
a56 1
int SetDeviceMode(ClientPtr client, DeviceIntPtr dev, int mode)
d62 4
a65 5
int SetDeviceValuators (ClientPtr client,
                        DeviceIntPtr dev,
                        int *valuators,
                        int first_valuator,
                        int num_valuators)
d71 2
a72 3
int ChangeDeviceControl(ClientPtr client,
                        DeviceIntPtr dev,
                        xDeviceCtl *control)
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a53 17
/** Close the input device.  This is not required by the XINPUT model
 * that DMX uses. */
void CloseInputDevice (DeviceIntPtr d, ClientPtr client)
{
}

/** This is not required by the XINPUT model that DMX uses. */
void AddOtherInputDevices(void)
{
}

/** Open an input device.  This is not required by the XINPUT model that
 * DMX uses. */
void OpenInputDevice (DeviceIntPtr dev, ClientPtr client, int *status)
{
}

@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a53 57
/** Change the core keyboard from \a old_dev to \a new_dev.  Currently
 * this is not implemented. */
int ChangeKeyboardDevice(DeviceIntPtr old_dev, DeviceIntPtr new_dev)
{
#if 0
    DMXLocalInputInfoPtr dmxLocalOld = old_dev->public.devicePrivate;
    DMXLocalInputInfoPtr dmxLocalNew = new_dev->public.devicePrivate;
    
                                /* Switch our notion of core keyboard */
    dmxLocalOld->isCore         = 0;
    dmxLocalOld->sendsCore      = dmxLocalOld->savedSendsCore;

    dmxLocalNew->isCore         = 1;
    dmxLocalNew->savedSendsCore = dmxLocalNew->sendsCore;
    dmxLocalNew->sendsCore      = 1;
    dmxLocalCorePointer         = dmxLocalNew;

    RegisterKeyboardDevice(new_dev);
    RegisterOtherDevice(old_dev);
    
    return Success;
#endif
    return BadMatch;
}

/** Change the core pointer from \a old_dev to \a new_dev. */
int ChangePointerDevice(DeviceIntPtr old_dev,
                        DeviceIntPtr new_dev,
                        unsigned char x,
                        unsigned char y)
{
    DMXLocalInputInfoPtr dmxLocalOld = old_dev->public.devicePrivate;
    DMXLocalInputInfoPtr dmxLocalNew = new_dev->public.devicePrivate;
    
    if (x != 0 || y != 1) return BadMatch;

                                /* Make sure the new device can focus */
    InitFocusClassDeviceStruct(old_dev);

                                /* Switch the motion history buffers */
    if (dmxLocalOld->savedMotionProc) {
        old_dev->valuator->numMotionEvents = dmxLocalOld->savedMotionEvents;
    }
    dmxLocalNew->savedMotionEvents     = new_dev->valuator->numMotionEvents;
    new_dev->valuator->numMotionEvents = GetMaximumEventsNum();
                                /* Switch our notion of core pointer */
    dmxLocalOld->isCore         = 0;
    dmxLocalOld->sendsCore      = dmxLocalOld->savedSendsCore;

    dmxLocalNew->isCore         = 1;
    dmxLocalNew->savedSendsCore = dmxLocalNew->sendsCore;
    dmxLocalNew->sendsCore      = 1;
    dmxLocalCorePointer         = dmxLocalNew;
    
    return Success;
}

@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a42 1
#define	 NEED_EVENTS
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
a95 1
        old_dev->valuator->GetMotionProc   = dmxLocalOld->savedMotionProc;
a97 1
    dmxLocalNew->savedMotionProc       = new_dev->valuator->GetMotionProc;
d99 1
a99 3
    new_dev->valuator->GetMotionProc   = miPointerGetMotionEvents;
    new_dev->valuator->numMotionEvents = miPointerGetMotionBufferSize();

@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
a101 1
#if 00 /*BP*/
d104 1
a104 4
#else
    new_dev->valuator->GetMotionProc   = GetMotionHistory;
    new_dev->valuator->numMotionEvents = GetMaximumEventsNum();
#endif
@

