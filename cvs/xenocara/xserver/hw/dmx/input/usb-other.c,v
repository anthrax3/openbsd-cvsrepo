head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.22
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.20
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.18
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.16
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.18
	OPENBSD_5_0:1.1.1.2.0.16
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.12
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.14
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2012.06.10.13.21.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.23.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.23.33;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.34;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * Copyright 2002 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   Rickard E. (Rik) Faith <faith@@redhat.com>
 *
 */

/** \file
 *
 * This code implements a low-level device driver for a non-keyboard,
 * non-mouse USB device (e.g., a joystick or gamepad). */

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#endif

#include "usb-private.h"

/*****************************************************************************/
/* Define some macros to make it easier to move this file to another
 * part of the Xserver tree.  All calls to the dmx* layer are #defined
 * here for the .c file.  The .h file will also have to be edited. */
#include "dmxinputinit.h"
#include "usb-other.h"

#define GETPRIV       myPrivate *priv                            \
                      = ((DMXLocalInputInfoPtr)(pDev->devicePrivate))->private

#define LOG0(f)       dmxLog(dmxDebug,f)
#define LOG1(f,a)     dmxLog(dmxDebug,f,a)
#define LOG2(f,a,b)   dmxLog(dmxDebug,f,a,b)
#define LOG3(f,a,b,c) dmxLog(dmxDebug,f,a,b,c)
#define FATAL0(f)     dmxLog(dmxFatal,f)
#define FATAL1(f,a)   dmxLog(dmxFatal,f,a)
#define FATAL2(f,a,b) dmxLog(dmxFatal,f,a,b)
#define MOTIONPROC    dmxMotionProcPtr
#define ENQUEUEPROC   dmxEnqueueProcPtr
#define CHECKPROC     dmxCheckSpecialProcPtr
#define BLOCK         DMXBlockType

/* End of interface definitions. */
/*****************************************************************************/

/** Read the USB device using #usbRead. */
void
othUSBRead(DevicePtr pDev,
           MOTIONPROC motion,
           ENQUEUEPROC enqueue, CHECKPROC checkspecial, BLOCK block)
{
    usbRead(pDev, motion, enqueue, 0xffff, block);
}

/** Initialize \a pDev using #usbInit. */
void
othUSBInit(DevicePtr pDev)
{
    usbInit(pDev, usbOther);
}

/** Turn \a pDev on (i.e., take input from \a pDev). */
int
othUSBOn(DevicePtr pDev)
{
    GETPRIV;

    if (priv->fd < 0)
        othUSBInit(pDev);
    return priv->fd;
}

/** Fill the \a info structure with information needed to initialize \a
 * pDev. */
void
othUSBGetInfo(DevicePtr pDev, DMXLocalInitInfoPtr info)
{
    GETPRIV;
    int i, j;
    static KeySym keyboard_mapping = NoSymbol;
    int absolute[5];

#define test_bit(bit) (priv->mask[(bit)/8] & (1 << ((bit)%8)))

    /* Some USB mice devices return key
     * events from their pair'd
     * keyboard...  */
    info->keyClass = 1;
    info->keySyms.minKeyCode = 8;
    info->keySyms.maxKeyCode = 8;
    info->keySyms.mapWidth = 1;
    info->keySyms.map = &keyboard_mapping;

    for (i = 0; i < EV_MAX; i++) {
        if (test_bit(i)) {
            switch (i) {
            case EV_KEY:
                /* See above */
                break;
            case EV_REL:
                info->valuatorClass = 1;
                if (info->numRelAxes + info->numAbsAxes > DMX_MAX_AXES - 1) {
                    info->numRelAxes = DMX_MAX_AXES - info->numAbsAxes - 1;
                    dmxLog(dmxWarning, "Can only use %d relative axes\n",
                           info->numRelAxes);
                }
                else
                    info->numRelAxes = priv->numRel;
                info->minval[0] = 0;
                info->maxval[0] = 0;
                info->res[0] = 1;
                info->minres[0] = 0;
                info->maxres[0] = 1;
                break;
            case EV_ABS:
                info->valuatorClass = 1;
                if (info->numRelAxes + info->numAbsAxes > DMX_MAX_AXES - 1) {
                    info->numAbsAxes = DMX_MAX_AXES - info->numRelAxes - 1;
                    dmxLog(dmxWarning, "Can only use %d absolute axes\n",
                           info->numAbsAxes);
                }
                else
                    info->numAbsAxes = priv->numAbs;
                for (j = 0; j < info->numAbsAxes; j++) {
                    ioctl(priv->fd, EVIOCGABS(j), absolute);
                    info->minval[1 + j] = absolute[1];
                    info->maxval[1 + j] = absolute[2];
                    info->res[1 + j] = absolute[3];
                    info->minres[1 + j] = absolute[3];
                    info->maxres[1 + j] = absolute[3];
                }
                break;
            case EV_LED:
                info->ledFeedbackClass = 0;     /* Not supported at this time */
                break;
            case EV_SND:
                info->belFeedbackClass = 0;     /* Not supported at this time */
                break;
            }
        }
    }
}
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
d71 4
a74 5
void othUSBRead(DevicePtr pDev,
                MOTIONPROC motion,
                ENQUEUEPROC enqueue,
                CHECKPROC checkspecial,
                BLOCK block)
d80 2
a81 1
void othUSBInit(DevicePtr pDev)
d87 2
a88 1
int othUSBOn(DevicePtr pDev)
d92 2
a93 1
    if (priv->fd < 0) othUSBInit(pDev);
d98 3
a100 2
 * pDev. */ 
void othUSBGetInfo(DevicePtr pDev, DMXLocalInitInfoPtr info)
d103 1
a103 1
    int           i, j;
d105 2
a106 2
    int           absolute[5];
    
d109 4
a112 4
                                /* Some USB mice devices return key
                                 * events from their pair'd
                                 * keyboard...  */
    info->keyClass           = 1;
d115 2
a116 2
    info->keySyms.mapWidth   = 1;
    info->keySyms.map        = &keyboard_mapping;
d122 1
a122 1
                                /* See above */
d125 1
a125 1
                info->valuatorClass      = 1;
d127 1
a127 1
                    info->numRelAxes     = DMX_MAX_AXES - info->numAbsAxes - 1;
d130 8
a137 7
                } else
                    info->numRelAxes     = priv->numRel;
                info->minval[0]          = 0;
                info->maxval[0]          = 0;
                info->res[0]             = 1;
                info->minres[0]          = 0;
                info->maxres[0]          = 1;
d140 1
a140 1
                info->valuatorClass      = 1;
d142 1
a142 1
                    info->numAbsAxes     = DMX_MAX_AXES - info->numRelAxes - 1;
d145 3
a147 2
                } else
                    info->numAbsAxes     = priv->numAbs;
d150 5
a154 5
                    info->minval[1+j]    = absolute[1];
                    info->maxval[1+j]    = absolute[2];
                    info->res[1+j]       = absolute[3];
                    info->minres[1+j]    = absolute[3];
                    info->maxres[1+j]    = absolute[3];
d158 1
a158 1
                info->ledFeedbackClass   = 0; /* Not supported at this time */
d161 1
a161 1
                info->belFeedbackClass   = 0; /* Not supported at this time */
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
@

