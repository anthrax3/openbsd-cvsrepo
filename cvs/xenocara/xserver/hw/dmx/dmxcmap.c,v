head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.16
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.05.29.12.02.36;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	s0SI41sEunLdyFfd;

1.4
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.16;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.46;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.46;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.18;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 * Copyright 2001-2004 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   Kevin E. Martin <kem@@redhat.com>
 *
 */

/** \file
 * Colormap support. */

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#endif

#include "dmx.h"
#include "dmxlog.h"
#include "dmxsync.h"
#include "dmxcmap.h"
#include "dmxvisual.h"

#include "micmap.h"

static Bool
dmxAllocateColormapPrivates(ColormapPtr pColormap)
{
    dmxColormapPrivPtr pCmapPriv;

    pCmapPriv = (dmxColormapPrivPtr) malloc(sizeof(*pCmapPriv));
    if (!pCmapPriv)
        return FALSE;
    pCmapPriv->cmap = (Colormap) 0;

    DMX_SET_COLORMAP_PRIV(pColormap, pCmapPriv);

    return TRUE;
}

/** Create \a pColormap on the back-end server. */
Bool
dmxBECreateColormap(ColormapPtr pColormap)
{
    ScreenPtr pScreen = pColormap->pScreen;
    DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
    dmxColormapPrivPtr pCmapPriv = DMX_GET_COLORMAP_PRIV(pColormap);
    VisualPtr pVisual = pColormap->pVisual;
    Visual *visual = dmxLookupVisual(pScreen, pVisual);

    if (visual) {
        pCmapPriv->cmap = XCreateColormap(dmxScreen->beDisplay,
                                          dmxScreen->scrnWin,
                                          visual,
                                          (pVisual->class & DynamicClass ?
                                           AllocAll : AllocNone));
        return pCmapPriv->cmap != 0;
    }
    else {
        dmxLog(dmxWarning, "dmxBECreateColormap: No visual found\n");
        return 0;
    }
}

/** Create colormap on back-end server associated with \a pColormap's
 *  screen. */
Bool
dmxCreateColormap(ColormapPtr pColormap)
{
    ScreenPtr pScreen = pColormap->pScreen;
    DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
    Bool ret = TRUE;

    if (!dmxAllocateColormapPrivates(pColormap))
        return FALSE;

    if (dmxScreen->beDisplay) {
        if (!dmxBECreateColormap(pColormap))
            return FALSE;
    }

    DMX_UNWRAP(CreateColormap, dmxScreen, pScreen);
    if (pScreen->CreateColormap)
        ret = pScreen->CreateColormap(pColormap);
    DMX_WRAP(CreateColormap, dmxCreateColormap, dmxScreen, pScreen);

    return ret;
}

/** Destroy \a pColormap on the back-end server. */
Bool
dmxBEFreeColormap(ColormapPtr pColormap)
{
    ScreenPtr pScreen = pColormap->pScreen;
    DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
    dmxColormapPrivPtr pCmapPriv = DMX_GET_COLORMAP_PRIV(pColormap);

    if (pCmapPriv->cmap) {
        XFreeColormap(dmxScreen->beDisplay, pCmapPriv->cmap);
        pCmapPriv->cmap = (Colormap) 0;
        return TRUE;
    }

    return FALSE;
}

/** Destroy colormap on back-end server associated with \a pColormap's
 *  screen. */
void
dmxDestroyColormap(ColormapPtr pColormap)
{
    ScreenPtr pScreen = pColormap->pScreen;
    DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
    dmxColormapPrivPtr pCmapPriv = DMX_GET_COLORMAP_PRIV(pColormap);

    if (dmxScreen->beDisplay)
        dmxBEFreeColormap(pColormap);
    free(pCmapPriv);
    DMX_SET_COLORMAP_PRIV(pColormap, NULL);

    DMX_UNWRAP(DestroyColormap, dmxScreen, pScreen);
    if (pScreen->DestroyColormap)
        pScreen->DestroyColormap(pColormap);
    DMX_WRAP(DestroyColormap, dmxDestroyColormap, dmxScreen, pScreen);
}

/** Install colormap on back-end server associated with \a pColormap's
 *  screen. */
void
dmxInstallColormap(ColormapPtr pColormap)
{
    ScreenPtr pScreen = pColormap->pScreen;
    DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
    dmxColormapPrivPtr pCmapPriv = DMX_GET_COLORMAP_PRIV(pColormap);

    DMX_UNWRAP(InstallColormap, dmxScreen, pScreen);
    if (pScreen->InstallColormap)
        pScreen->InstallColormap(pColormap);
    DMX_WRAP(InstallColormap, dmxInstallColormap, dmxScreen, pScreen);

    if (dmxScreen->beDisplay) {
        XInstallColormap(dmxScreen->beDisplay, pCmapPriv->cmap);
        dmxSync(dmxScreen, FALSE);
    }
}

/** Store colors in \a pColormap on back-end server associated with \a
 *  pColormap's screen. */
void
dmxStoreColors(ColormapPtr pColormap, int ndef, xColorItem * pdef)
{
    ScreenPtr pScreen = pColormap->pScreen;
    DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
    dmxColormapPrivPtr pCmapPriv = DMX_GET_COLORMAP_PRIV(pColormap);

    if (dmxScreen->beDisplay && (pColormap->pVisual->class & DynamicClass)) {
        XColor *color = xallocarray(ndef, sizeof(*color));
        int i;

        if (color) {
            for (i = 0; i < ndef; i++) {
                color[i].pixel = pdef[i].pixel;
                color[i].red = pdef[i].red;
                color[i].blue = pdef[i].blue;
                color[i].green = pdef[i].green;
                color[i].flags = pdef[i].flags;
                color[i].pad = pdef[i].pad;
            }
            XStoreColors(dmxScreen->beDisplay, pCmapPriv->cmap, color, ndef);
            free(color);
        }
        else {                  /* xalloc failed, so fallback */
            XColor c;

            for (i = 0; i < ndef; i++) {
                c.pixel = pdef[i].pixel;
                c.red = pdef[i].red;
                c.blue = pdef[i].blue;
                c.green = pdef[i].green;
                c.flags = pdef[i].flags;
                c.pad = pdef[i].pad;
                XStoreColor(dmxScreen->beDisplay, pCmapPriv->cmap, &c);
            }
        }
        dmxSync(dmxScreen, FALSE);
    }

    DMX_UNWRAP(StoreColors, dmxScreen, pScreen);
    if (pScreen->StoreColors)
        pScreen->StoreColors(pColormap, ndef, pdef);
    DMX_WRAP(StoreColors, dmxStoreColors, dmxScreen, pScreen);
}

/** Create the DMX server's default colormap. */
Bool
dmxCreateDefColormap(ScreenPtr pScreen)
{
    return miCreateDefColormap(pScreen);
}
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d180 1
a180 1
        XColor *color = malloc(sizeof(*color) * ndef);
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d49 2
a50 1
static Bool dmxAllocateColormapPrivates(ColormapPtr pColormap)
d52 1
a52 1
    dmxColormapPrivPtr   pCmapPriv;
d54 1
a54 1
    pCmapPriv = (dmxColormapPrivPtr)malloc(sizeof(*pCmapPriv));
d56 2
a57 2
	return FALSE;
    pCmapPriv->cmap = (Colormap)0;
d65 2
a66 1
Bool dmxBECreateColormap(ColormapPtr pColormap)
d68 5
a72 5
    ScreenPtr           pScreen   = pColormap->pScreen;
    DMXScreenInfo      *dmxScreen = &dmxScreens[pScreen->myNum];
    dmxColormapPrivPtr  pCmapPriv = DMX_GET_COLORMAP_PRIV(pColormap);
    VisualPtr           pVisual   = pColormap->pVisual;
    Visual             *visual    = dmxLookupVisual(pScreen, pVisual);
d75 6
a80 6
       pCmapPriv->cmap = XCreateColormap(dmxScreen->beDisplay,
                                         dmxScreen->scrnWin,
                                         visual,
                                         (pVisual->class & DynamicClass ?
                                          AllocAll : AllocNone));
       return pCmapPriv->cmap != 0;
d83 2
a84 2
       dmxLog(dmxWarning, "dmxBECreateColormap: No visual found\n");
       return 0;
d90 2
a91 1
Bool dmxCreateColormap(ColormapPtr pColormap)
d93 3
a95 3
    ScreenPtr           pScreen   = pColormap->pScreen;
    DMXScreenInfo      *dmxScreen = &dmxScreens[pScreen->myNum];
    Bool                ret       = TRUE;
d98 1
a98 1
	return FALSE;
d101 2
a102 2
	if (!dmxBECreateColormap(pColormap))
	    return FALSE;
d107 1
a107 1
	ret = pScreen->CreateColormap(pColormap);
d114 2
a115 1
Bool dmxBEFreeColormap(ColormapPtr pColormap)
d117 3
a119 3
    ScreenPtr           pScreen   = pColormap->pScreen;
    DMXScreenInfo      *dmxScreen = &dmxScreens[pScreen->myNum];
    dmxColormapPrivPtr  pCmapPriv = DMX_GET_COLORMAP_PRIV(pColormap);
d122 3
a124 3
	XFreeColormap(dmxScreen->beDisplay, pCmapPriv->cmap);
	pCmapPriv->cmap = (Colormap)0;
	return TRUE;
d132 2
a133 1
void dmxDestroyColormap(ColormapPtr pColormap)
d135 3
a137 3
    ScreenPtr           pScreen   = pColormap->pScreen;
    DMXScreenInfo      *dmxScreen = &dmxScreens[pScreen->myNum];
    dmxColormapPrivPtr  pCmapPriv = DMX_GET_COLORMAP_PRIV(pColormap);
d140 1
a140 1
	dmxBEFreeColormap(pColormap);
d146 1
a146 1
	pScreen->DestroyColormap(pColormap);
d152 2
a153 1
void dmxInstallColormap(ColormapPtr pColormap)
d155 3
a157 3
    ScreenPtr           pScreen   = pColormap->pScreen;
    DMXScreenInfo      *dmxScreen = &dmxScreens[pScreen->myNum];
    dmxColormapPrivPtr  pCmapPriv = DMX_GET_COLORMAP_PRIV(pColormap);
d161 1
a161 1
	pScreen->InstallColormap(pColormap);
d165 2
a166 2
	XInstallColormap(dmxScreen->beDisplay, pCmapPriv->cmap);
	dmxSync(dmxScreen, FALSE);
d172 2
a173 1
void dmxStoreColors(ColormapPtr pColormap, int ndef, xColorItem *pdef)
d175 3
a177 3
    ScreenPtr           pScreen   = pColormap->pScreen;
    DMXScreenInfo      *dmxScreen = &dmxScreens[pScreen->myNum];
    dmxColormapPrivPtr  pCmapPriv = DMX_GET_COLORMAP_PRIV(pColormap);
d181 2
a182 2
        int    i;
        
d186 2
a187 2
                color[i].red   = pdef[i].red;
                color[i].blue  = pdef[i].blue;
d190 1
a190 1
                color[i].pad   = pdef[i].pad;
d194 2
a195 1
        } else {                /* xalloc failed, so fallback */
d197 1
d200 2
a201 2
                c.red   = pdef[i].red;
                c.blue  = pdef[i].blue;
d204 1
a204 1
                c.pad   = pdef[i].pad;
d208 1
a208 1
	dmxSync(dmxScreen, FALSE);
d213 1
a213 1
	pScreen->StoreColors(pColormap, ndef, pdef);
d218 2
a219 1
Bool dmxCreateDefColormap(ScreenPtr pScreen)
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d53 1
a53 1
    pCmapPriv = (dmxColormapPrivPtr)xalloc(sizeof(*pCmapPriv));
d78 1
a78 1
       return (pCmapPriv->cmap != 0);
d136 1
a136 1
    xfree(pCmapPriv);
d173 1
a173 1
        XColor *color = xalloc(sizeof(*color) * ndef);
d186 1
a186 1
            xfree(color);
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
a48 5
static int dmxInitColormapPrivateFunc(ColormapPtr pColormap, int index)
{
    return TRUE;
}

a50 1
    static unsigned long dmxColormapGeneration;
a51 8

    if (dmxColormapGeneration != serverGeneration) {
	if ((dmxColormapPrivateIndex
	     = AllocateColormapPrivateIndex(dmxInitColormapPrivateFunc)) < 0)
	    return FALSE;

	dmxColormapGeneration = serverGeneration;
    }
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
@

