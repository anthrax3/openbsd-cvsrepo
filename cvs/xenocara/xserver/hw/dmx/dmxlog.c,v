head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.18
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.16
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.14
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.12
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.10
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.10
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2013.06.07.17.28.48;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.44;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.44;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.22;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@/*
 * Copyright 2001 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   Rickard E. (Rik) Faith <faith@@redhat.com>
 *
 */

/** \file
 * This file encapsulated all of the logging functions that are used by
 * DMX for informational, warning, and error messages. */

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#endif

#include "dmx.h"
#include "dmxlog.h"
#include "dmxinput.h"
#include <X11/extensions/XI.h>
#include <X11/extensions/XIproto.h>

static dmxLogLevel dmxCurrentLogLevel = dmxDebug;

/** Set the default level for logging to #dmxLogLevel.  Returns the
 * previous log level. */
dmxLogLevel
dmxSetLogLevel(dmxLogLevel newLevel)
{
    dmxLogLevel oldLevel = dmxCurrentLogLevel;

    if (newLevel > dmxFatal)
        newLevel = dmxFatal;
    dmxCurrentLogLevel = newLevel;
    return oldLevel;
}

/** Returns the log level set by #dmxLogLevel. */
dmxLogLevel
dmxGetLogLevel(void)
{
    return dmxCurrentLogLevel;
}

#ifdef DMX_LOG_STANDALONE
/* When using this file as part of a stand-alone (i.e., non-X-Server
 * program, then the ultimate output routines have to be defined.  */

/** Provide an ErrorF function when used stand-alone. */
void
ErrorF(const char *format, ...)
{
    va_list args;

    va_start(args, format);
    vfprintf(stderr, format, args);     /* RATS: We assume the format string
                                         * is trusted, since it is always
                                         * from a log message in our code. */
    va_end(args);
}

/** Provide an VFatalError function when used stand-alone. */
static void
VFatalError(const char *format, va_list args) _X_ATTRIBUTE_PRINTF(1, 0) _X_NORETURN;
static void
VFatalError(const char *format, va_list args)
{
    vfprintf(stderr, format, args);     /* RATS: We assume the format string
                                         * is trusted, since it is always
                                         * from a log message in our code. */
    exit(1);
}

/** Provide an VErrorF function when used stand-alone. */
void
VErrorF(const char *format, va_list args)
{
    vfprintf(stderr, format, args);     /* RATS: We assume the format string
                                         * is trusted, since it is always
                                         * from a log message in our code. */
}
#else
/** This function was removed between XFree86 4.3.0 and XFree86 4.4.0. */
extern void AbortServer(void) _X_NORETURN;
static void
VFatalError(const char *format, va_list args) _X_ATTRIBUTE_PRINTF(1, 0) _X_NORETURN;
static void
VFatalError(const char *format, va_list args)
{
    VErrorF(format, args);
    ErrorF("\n");
    AbortServer();
 /*NOTREACHED*/}
#endif

/* Prints a consistent header for each line. */
static void
dmxHeader(dmxLogLevel logLevel, DMXInputInfo * dmxInput,
          DMXScreenInfo * dmxScreen)
{
    const char *type = "??";

    switch (logLevel) {
    case dmxDebug:
        type = "..";
        break;
    case dmxInfo:
        type = "II";
        break;
    case dmxWarning:
        type = "**";
        break;
    case dmxError:
        type = "!!";
        break;
    case dmxFatal:
        type = "Fatal Error";
        break;
    }

    if (dmxInput && dmxScreen) {
        ErrorF("(%s) dmx[i%d/%s;o%d/%s]: ", type,
               dmxInput->inputIdx, dmxInput->name,
               dmxScreen->index, dmxScreen->name);
    }
    else if (dmxScreen) {
        ErrorF("(%s) dmx[o%d/%s]: ", type, dmxScreen->index, dmxScreen->name);
    }
    else if (dmxInput) {
        const char *pt = strchr(dmxInput->name, ',');
        int len = (pt ? (size_t) (pt - dmxInput->name)
                   : strlen(dmxInput->name));

        ErrorF("(%s) dmx[i%d/%*.*s]: ", type,
               dmxInput->inputIdx, len, len, dmxInput->name);
    }
    else {
        ErrorF("(%s) dmx: ", type);
    }
}

/* Prints the error message with the appropriate low-level X output
 * routine. */
static void
dmxMessage(dmxLogLevel logLevel, const char *format, va_list args) _X_ATTRIBUTE_PRINTF(2, 0);
static void
dmxMessage(dmxLogLevel logLevel, const char *format, va_list args)
{
    if (logLevel == dmxFatal || logLevel >= dmxCurrentLogLevel) {
        if (logLevel == dmxFatal)
            VFatalError(format, args);
        else
            VErrorF(format, args);
    }
}

/** Log the specified message at the specified \a logLevel.  \a format
 * can be a printf-like format expression. */
void
dmxLog(dmxLogLevel logLevel, const char *format, ...)
{
    va_list args;

    dmxHeader(logLevel, NULL, NULL);
    va_start(args, format);
    dmxMessage(logLevel, format, args);
    va_end(args);
}

/** Continue a log message without printing the message prefix. */
void
dmxLogCont(dmxLogLevel logLevel, const char *format, ...)
{
    va_list args;

    va_start(args, format);
    dmxMessage(logLevel, format, args);
    va_end(args);
}

#ifndef DMX_LOG_STANDALONE
/** Log an informational message (at level #dmxInfo) related to ouput.
 * The message prefix will contain backend information from \a
 * dmxScreen. */
void
dmxLogOutput(DMXScreenInfo * dmxScreen, const char *format, ...)
{
    va_list args;

    dmxHeader(dmxInfo, NULL, dmxScreen);
    va_start(args, format);
    dmxMessage(dmxInfo, format, args);
    va_end(args);
}

/** Continue a message related to output without printing the message
 * prefix. */
void
dmxLogOutputCont(DMXScreenInfo * dmxScreen, const char *format, ...)
{
    va_list args;

    va_start(args, format);
    dmxMessage(dmxInfo, format, args);
    va_end(args);
}

/** Log a warning message (at level #dmxWarning) related to output.
 * The message prefix will contain backend information from \a
 * dmxScreen. */
void
dmxLogOutputWarning(DMXScreenInfo * dmxScreen, const char *format, ...)
{
    va_list args;

    dmxHeader(dmxWarning, NULL, dmxScreen);
    va_start(args, format);
    dmxMessage(dmxWarning, format, args);
    va_end(args);
}

/** Log an informational message (at level #dmxInfo) related to input.
 * The message prefix will contain information from \a dmxInput. */
void
dmxLogInput(DMXInputInfo * dmxInput, const char *format, ...)
{
    va_list args;

    dmxHeader(dmxInfo, dmxInput, NULL);
    va_start(args, format);
    dmxMessage(dmxInfo, format, args);
    va_end(args);
}

/** Continue a message related to input without printing the message
 * prefix. */
void
dmxLogInputCont(DMXInputInfo * dmxInput, const char *format, ...)
{
    va_list args;

    va_start(args, format);
    dmxMessage(dmxInfo, format, args);
    va_end(args);
}

/** Print \a argc messages, each describing an element in \a argv.  This
 * is maingly for debugging purposes. */
void
dmxLogArgs(dmxLogLevel logLevel, int argc, char **argv)
{
    int i;

    for (i = 0; i < argc; i++)
        dmxLog(logLevel, "   Arg[%d] = \"%s\"\n", i, argv[i]);
}

/** Print messages at level #dmxInfo describing the visuals in \a vi. */
void
dmxLogVisual(DMXScreenInfo * dmxScreen, XVisualInfo * vi, int defaultVisual)
{
    const char *class = "Unknown";

    switch (vi->class) {
    case StaticGray:
        class = "StaticGray ";
        break;
    case GrayScale:
        class = "GrayScale  ";
        break;
    case StaticColor:
        class = "StaticColor";
        break;
    case PseudoColor:
        class = "PseudoColor";
        break;
    case TrueColor:
        class = "TrueColor  ";
        break;
    case DirectColor:
        class = "DirectColor";
        break;
    }
#define VisualLogFormat "0x%02lx %s %2db %db/rgb %3d 0x%04lx 0x%04lx 0x%04lx%s\n"

    if (dmxScreen) {
        dmxLogOutput(dmxScreen,
                     VisualLogFormat,
                     vi->visualid, class, vi->depth, vi->bits_per_rgb,
                     vi->colormap_size,
                     vi->red_mask, vi->green_mask, vi->blue_mask,
                     defaultVisual ? " *" : "");
    }
    else {
        dmxLog(dmxInfo,
               "  " VisualLogFormat,
               vi->visualid, class, vi->depth, vi->bits_per_rgb,
               vi->colormap_size,
               vi->red_mask, vi->green_mask, vi->blue_mask,
               defaultVisual ? " *" : "");
    }
}

/** Translate a (normalized) XInput event \a type into a human-readable
 * string. */
const char *
dmxXInputEventName(int type)
{
    switch (type) {
    case XI_DeviceValuator:
        return "XI_DeviceValuator";
    case XI_DeviceKeyPress:
        return "XI_DeviceKeyPress";
    case XI_DeviceKeyRelease:
        return "XI_DeviceKeyRelease";
    case XI_DeviceButtonPress:
        return "XI_DeviceButtonPress";
    case XI_DeviceButtonRelease:
        return "XI_DeviceButtonRelease";
    case XI_DeviceMotionNotify:
        return "XI_DeviceMotionNotify";
    case XI_DeviceFocusIn:
        return "XI_DeviceFocusIn";
    case XI_DeviceFocusOut:
        return "XI_DeviceFocusOut";
    case XI_ProximityIn:
        return "XI_ProximityIn";
    case XI_ProximityOut:
        return "XI_ProximityOut";
    case XI_DeviceStateNotify:
        return "XI_DeviceStateNotify";
    case XI_DeviceMappingNotify:
        return "XI_DeviceMappingNotify";
    case XI_ChangeDeviceNotify:
        return "XI_ChangeDeviceNotify";
    case XI_DeviceKeystateNotify:
        return "XI_DeviceKeystateNotify";
    case XI_DeviceButtonstateNotify:
        return "XI_DeviceButtonstateNotify";
    default:
        return "unknown";
    }
}

#endif

/** Translate an event \a type into a human-readable string. */
const char *
dmxEventName(int type)
{
    switch (type) {
    case KeyPress:
        return "KeyPress";
    case KeyRelease:
        return "KeyRelease";
    case ButtonPress:
        return "ButtonPress";
    case ButtonRelease:
        return "ButtonRelease";
    case MotionNotify:
        return "MotionNotify";
    case EnterNotify:
        return "EnterNotify";
    case LeaveNotify:
        return "LeaveNotify";
    case FocusIn:
        return "FocusIn";
    case FocusOut:
        return "FocusOut";
    case KeymapNotify:
        return "KeymapNotify";
    case Expose:
        return "Expose";
    case GraphicsExpose:
        return "GraphicsExpose";
    case NoExpose:
        return "NoExpose";
    case VisibilityNotify:
        return "VisibilityNotify";
    case CreateNotify:
        return "CreateNotify";
    case DestroyNotify:
        return "DestroyNotify";
    case UnmapNotify:
        return "UnmapNotify";
    case MapNotify:
        return "MapNotify";
    case MapRequest:
        return "MapRequest";
    case ReparentNotify:
        return "ReparentNotify";
    case ConfigureNotify:
        return "ConfigureNotify";
    case ConfigureRequest:
        return "ConfigureRequest";
    case GravityNotify:
        return "GravityNotify";
    case ResizeRequest:
        return "ResizeRequest";
    case CirculateNotify:
        return "CirculateNotify";
    case CirculateRequest:
        return "CirculateRequest";
    case PropertyNotify:
        return "PropertyNotify";
    case SelectionClear:
        return "SelectionClear";
    case SelectionRequest:
        return "SelectionRequest";
    case SelectionNotify:
        return "SelectionNotify";
    case ColormapNotify:
        return "ColormapNotify";
    case ClientMessage:
        return "ClientMessage";
    case MappingNotify:
        return "MappingNotify";
    default:
        return "<unknown>";
    }
}
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a116 3
#ifdef DDXOSFATALERROR
    OsVendorFatalError();
#endif
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d52 2
a53 1
dmxLogLevel dmxSetLogLevel(dmxLogLevel newLevel)
d56 3
a58 1
    if (newLevel > dmxFatal) newLevel = dmxFatal;
d64 2
a65 1
dmxLogLevel dmxGetLogLevel(void)
d75 2
a76 1
void ErrorF(const char *format, ...)
d81 3
a83 3
    vfprintf(stderr, format, args); /* RATS: We assume the format string
                                     * is trusted, since it is always
                                     * from a log message in our code. */
d88 8
a95 5
static void VFatalError(const char *format, va_list args)
{
    vfprintf(stderr, format, args); /* RATS: We assume the format string
                                     * is trusted, since it is always
                                     * from a log message in our code. */
d100 2
a101 1
void VErrorF(const char *format, va_list args)
d103 3
a105 3
    vfprintf(stderr, format, args); /* RATS: We assume the format string
                                     * is trusted, since it is always
                                     * from a log message in our code. */
d109 5
a113 2
extern void AbortServer(void);
static void VFatalError(const char *format, va_list args)
d121 1
a121 2
    /*NOTREACHED*/
}
d125 3
a127 2
static void dmxHeader(dmxLogLevel logLevel, DMXInputInfo *dmxInput,
                      DMXScreenInfo *dmxScreen)
d132 15
a146 5
    case dmxDebug:   type = ".."; break;
    case dmxInfo:    type = "II"; break;
    case dmxWarning: type = "**"; break;
    case dmxError:   type = "!!"; break;
    case dmxFatal:   type = "Fatal Error"; break;
d153 5
a157 4
    } else if (dmxScreen) {
        ErrorF("(%s) dmx[o%d/%s]: ", type,
               dmxScreen->index, dmxScreen->name);
    } else if (dmxInput) {
d159 2
a160 3
        int        len = (pt
                          ? (size_t)(pt-dmxInput->name)
                          : strlen(dmxInput->name));
d164 2
a165 1
    } else {
d172 4
a175 1
static void dmxMessage(dmxLogLevel logLevel, const char *format, va_list args)
d178 4
a181 2
        if (logLevel == dmxFatal) VFatalError(format, args);
        else VErrorF(format, args);
d187 2
a188 1
void dmxLog(dmxLogLevel logLevel, const char *format, ...)
d191 1
a191 1
    
d199 2
a200 1
void dmxLogCont(dmxLogLevel logLevel, const char *format, ...)
d213 2
a214 1
void dmxLogOutput(DMXScreenInfo *dmxScreen, const char *format, ...)
d226 2
a227 1
void dmxLogOutputCont(DMXScreenInfo *dmxScreen, const char *format, ...)
d239 2
a240 1
void dmxLogOutputWarning(DMXScreenInfo *dmxScreen, const char *format, ...)
d252 2
a253 1
void dmxLogInput(DMXInputInfo *dmxInput, const char *format, ...)
d265 2
a266 1
void dmxLogInputCont(DMXInputInfo *dmxInput, const char *format, ...)
d277 2
a278 1
void dmxLogArgs(dmxLogLevel logLevel, int argc, char **argv)
d281 1
d287 2
a288 1
void dmxLogVisual(DMXScreenInfo *dmxScreen, XVisualInfo *vi, int defaultVisual)
d290 1
a290 1
    const char  *class = "Unknown";
d293 18
a310 6
    case StaticGray:  class = "StaticGray "; break;
    case GrayScale:   class = "GrayScale  "; break;
    case StaticColor: class = "StaticColor"; break;
    case PseudoColor: class = "PseudoColor"; break;
    case TrueColor:   class = "TrueColor  "; break;
    case DirectColor: class = "DirectColor"; break;
d312 1
d316 1
a316 1
                     "0x%02x %s %2db %db/rgb %3d 0x%04x 0x%04x 0x%04x%s\n",
d321 2
a322 1
    } else {
d324 1
a324 1
               "  0x%02x %s %2db %db/rgb %3d 0x%04x 0x%04x 0x%04x%s\n",
d334 2
a335 1
const char *dmxXInputEventName(int type)
d338 32
a369 16
    case XI_DeviceValuator:          return "XI_DeviceValuator";
    case XI_DeviceKeyPress:          return "XI_DeviceKeyPress";
    case XI_DeviceKeyRelease:        return "XI_DeviceKeyRelease";
    case XI_DeviceButtonPress:       return "XI_DeviceButtonPress";
    case XI_DeviceButtonRelease:     return "XI_DeviceButtonRelease";
    case XI_DeviceMotionNotify:      return "XI_DeviceMotionNotify";
    case XI_DeviceFocusIn:           return "XI_DeviceFocusIn";
    case XI_DeviceFocusOut:          return "XI_DeviceFocusOut";
    case XI_ProximityIn:             return "XI_ProximityIn";
    case XI_ProximityOut:            return "XI_ProximityOut";
    case XI_DeviceStateNotify:       return "XI_DeviceStateNotify";
    case XI_DeviceMappingNotify:     return "XI_DeviceMappingNotify";
    case XI_ChangeDeviceNotify:      return "XI_ChangeDeviceNotify";
    case XI_DeviceKeystateNotify:    return "XI_DeviceKeystateNotify";
    case XI_DeviceButtonstateNotify: return "XI_DeviceButtonstateNotify";
    default:                         return "unknown";
d376 2
a377 1
const char *dmxEventName(int type)
d380 68
a447 34
    case KeyPress:         return "KeyPress"; 
    case KeyRelease:       return "KeyRelease";
    case ButtonPress:      return "ButtonPress";
    case ButtonRelease:    return "ButtonRelease";
    case MotionNotify:     return "MotionNotify";
    case EnterNotify:      return "EnterNotify";
    case LeaveNotify:      return "LeaveNotify";
    case FocusIn:          return "FocusIn";
    case FocusOut:         return "FocusOut";
    case KeymapNotify:     return "KeymapNotify";
    case Expose:           return "Expose";
    case GraphicsExpose:   return "GraphicsExpose";
    case NoExpose:         return "NoExpose";
    case VisibilityNotify: return "VisibilityNotify";
    case CreateNotify:     return "CreateNotify";
    case DestroyNotify:    return "DestroyNotify";
    case UnmapNotify:      return "UnmapNotify";
    case MapNotify:        return "MapNotify";
    case MapRequest:       return "MapRequest";
    case ReparentNotify:   return "ReparentNotify";
    case ConfigureNotify:  return "ConfigureNotify";
    case ConfigureRequest: return "ConfigureRequest";
    case GravityNotify:    return "GravityNotify";
    case ResizeRequest:    return "ResizeRequest";
    case CirculateNotify:  return "CirculateNotify";
    case CirculateRequest: return "CirculateRequest";
    case PropertyNotify:   return "PropertyNotify";
    case SelectionClear:   return "SelectionClear";
    case SelectionRequest: return "SelectionRequest";
    case SelectionNotify:  return "SelectionNotify";
    case ColormapNotify:   return "ColormapNotify";
    case ClientMessage:    return "ClientMessage";
    case MappingNotify:    return "MappingNotify";
    default:               return "<unknown>";
a449 1

@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
a44 1
#ifdef XINPUT
a46 1
#endif
a279 1
#ifdef XINPUT
a303 1
#endif
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
@

