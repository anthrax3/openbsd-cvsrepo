head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.22
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.20
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.18
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.16
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.14
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.14
	OPENBSD_5_0:1.2.0.12
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.8
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.16;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.41;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.41;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.19;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * Copyright 2003-2004 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Author:
 *   Rickard E. (Rik) Faith <faith@@redhat.com>
 *
 */

/** \file
 * Provides DPMS support and unifies all DPMS and other screen-saver
 * support in one file.  If -dpms is given on the command line, or the
 * Xdmx server is not compiled with DPMS support, then the DPMS extension
 * does not work for clients, but DPMS on the backends is still disables
 * (and restored at Xdmx server shutdown time).
 */

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#endif

#include "dmx.h"
#include "dmxdpms.h"
#include "dmxlog.h"
#include "dmxsync.h"
#ifdef DPMSExtension
#include "dpmsproc.h"
#endif
#include "windowstr.h"          /* For screenIsSaved */
#include <X11/extensions/dpms.h>

static unsigned long dpmsGeneration = 0;
static Bool dpmsSupported = TRUE;

static void
_dmxDPMSInit(DMXScreenInfo * dmxScreen)
{
    int event_base, error_base;
    int major, minor;
    CARD16 level, standby, suspend, off;
    BOOL state;
    const char *monitor;

    if (dpmsGeneration != serverGeneration) {
        dpmsSupported = TRUE;   /* On unless a backend doesn't support it */
        dpmsGeneration = serverGeneration;
    }

#ifdef DPMSExtension
    if (DPMSDisabledSwitch)
        dpmsSupported = FALSE;  /* -dpms turns off */
#endif

    dmxScreen->dpmsCapable = 0;

    if (!dmxScreen->beDisplay) {
        dmxLogOutput(dmxScreen,
                     "Cannot determine if DPMS supported (detached screen)\n");
        dpmsSupported = FALSE;
        return;
    }

    if (!DPMSQueryExtension(dmxScreen->beDisplay, &event_base, &error_base)) {
        dmxLogOutput(dmxScreen, "DPMS not supported\n");
        dpmsSupported = FALSE;
        return;
    }
    if (!DPMSGetVersion(dmxScreen->beDisplay, &major, &minor)) {
        dmxLogOutput(dmxScreen, "DPMS not supported\n");
        dpmsSupported = FALSE;
        return;
    }
    if (!DPMSCapable(dmxScreen->beDisplay)) {
        dmxLogOutput(dmxScreen, "DPMS %d.%d (not DPMS capable)\n",
                     major, minor);
        dpmsSupported = FALSE;
        return;
    }

    DPMSInfo(dmxScreen->beDisplay, &level, &state);
    DPMSGetTimeouts(dmxScreen->beDisplay, &standby, &suspend, &off);
    DPMSSetTimeouts(dmxScreen->beDisplay, 0, 0, 0);
    DPMSEnable(dmxScreen->beDisplay);
    DPMSForceLevel(dmxScreen->beDisplay, DPMSModeOn);
    dmxScreen->dpmsCapable = 1;
    dmxScreen->dpmsEnabled = ! !state;
    dmxScreen->dpmsStandby = standby;
    dmxScreen->dpmsSuspend = suspend;
    dmxScreen->dpmsOff = off;

    switch (level) {
    case DPMSModeOn:
        monitor = "on";
        break;
    case DPMSModeStandby:
        monitor = "standby";
        break;
    case DPMSModeSuspend:
        monitor = "suspend";
        break;
    case DPMSModeOff:
        monitor = "off";
        break;
    default:
        monitor = "unknown";
        break;
    }

    dmxLogOutput(dmxScreen,
                 "DPMS %d.%d (%s, %s, %d %d %d)\n",
                 major, minor, monitor, state ? "enabled" : "disabled",
                 standby, suspend, off);
}

/** Initialize DPMS support.  We save the current settings and turn off
 * DPMS.  The settings are restored in #dmxDPMSTerm. */
void
dmxDPMSInit(DMXScreenInfo * dmxScreen)
{
    int interval, preferBlanking, allowExposures;

    /* Turn off DPMS */
    _dmxDPMSInit(dmxScreen);

    if (!dmxScreen->beDisplay)
        return;

    /* Turn off screen saver */
    XGetScreenSaver(dmxScreen->beDisplay, &dmxScreen->savedTimeout, &interval,
                    &preferBlanking, &allowExposures);
    XSetScreenSaver(dmxScreen->beDisplay, 0, interval,
                    preferBlanking, allowExposures);
    XResetScreenSaver(dmxScreen->beDisplay);
    dmxSync(dmxScreen, FALSE);
}

/** Terminate DPMS support on \a dmxScreen.  We restore the settings
 * saved in #dmxDPMSInit. */
void
dmxDPMSTerm(DMXScreenInfo * dmxScreen)
{
    int timeout, interval, preferBlanking, allowExposures;

    if (!dmxScreen->beDisplay)
        return;

    XGetScreenSaver(dmxScreen->beDisplay, &timeout, &interval,
                    &preferBlanking, &allowExposures);
    XSetScreenSaver(dmxScreen->beDisplay, dmxScreen->savedTimeout, interval,
                    preferBlanking, allowExposures);
    if (dmxScreen->dpmsCapable) {
        /* Restore saved state */
        DPMSForceLevel(dmxScreen->beDisplay, DPMSModeOn);
        DPMSSetTimeouts(dmxScreen->beDisplay, dmxScreen->dpmsStandby,
                        dmxScreen->dpmsSuspend, dmxScreen->dpmsOff);
        if (dmxScreen->dpmsEnabled)
            DPMSEnable(dmxScreen->beDisplay);
        else
            DPMSDisable(dmxScreen->beDisplay);
    }
    dmxSync(dmxScreen, FALSE);
}

/** Called when activity is detected so that DPMS power-saving mode can
 * be deactivated. */
void
dmxDPMSWakeup(void)
{
    if (screenIsSaved == SCREEN_SAVER_ON)
        dixSaveScreens(serverClient, SCREEN_SAVER_OFF, ScreenSaverReset);
#ifdef DPMSExtension
    if (DPMSPowerLevel)
        DPMSSet(serverClient, 0);
#endif
}

#ifdef DPMSExtension
/** This is called on each server generation.  It should determine if
 * DPMS is supported on all of the backends and, if so, return TRUE. */
Bool
DPMSSupported(void)
{
    return dpmsSupported;
}

/** This is used by clients (e.g., xset) to set the DPMS level. */
int
DPMSSet(ClientPtr client, int level)
{
    int i;

    if (!dpmsSupported)
        return Success;

    if (level < 0)
        level = DPMSModeOn;
    if (level > 3)
        level = DPMSModeOff;

    DPMSPowerLevel = level;

    for (i = 0; i < dmxNumScreens; i++) {
        DMXScreenInfo *dmxScreen = &dmxScreens[i];

        if (dmxScreen->beDisplay) {
            DPMSForceLevel(dmxScreen->beDisplay, level);
            dmxSync(dmxScreen, FALSE);
        }
    }
    return Success;
}
#endif
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d57 1
a57 1
static Bool          dpmsSupported  = TRUE;
d59 2
a60 1
static void _dmxDPMSInit(DMXScreenInfo *dmxScreen)
d62 4
a65 4
    int        event_base, error_base;
    int        major, minor;
    CARD16     level, standby, suspend, off;
    BOOL       state;
d69 1
a69 1
        dpmsSupported  = TRUE;  /* On unless a backend doesn't support it */
d74 2
a75 1
    if (DPMSDisabledSwitch) dpmsSupported = FALSE; /* -dpms turns off */
d79 1
a79 1
    
d82 1
a82 1
		     "Cannot determine if DPMS supported (detached screen)\n");
d87 1
a87 2
    if (!DPMSQueryExtension(dmxScreen->beDisplay,
                            &event_base, &error_base)) {
d110 1
a110 1
    dmxScreen->dpmsEnabled = !!state;
d113 1
a113 1
    dmxScreen->dpmsOff     = off;
d116 15
a130 5
    case DPMSModeOn:      monitor = "on";      break;
    case DPMSModeStandby: monitor = "standby"; break;
    case DPMSModeSuspend: monitor = "suspend"; break;
    case DPMSModeOff:     monitor = "off";     break;
    default:              monitor = "unknown"; break;
d132 1
a132 1
        
d141 2
a142 1
void dmxDPMSInit(DMXScreenInfo *dmxScreen)
d144 1
a144 1
    int    interval, preferBlanking, allowExposures;
d146 1
a146 1
                                /* Turn off DPMS */
d150 1
a150 1
	return;
d152 1
a152 1
                                /* Turn off screen saver */
d154 1
a154 1
		    &preferBlanking, &allowExposures);
d156 1
a156 1
		    preferBlanking, allowExposures);
d163 2
a164 1
void dmxDPMSTerm(DMXScreenInfo *dmxScreen)
d166 1
a166 1
    int    timeout, interval, preferBlanking, allowExposures;
d169 1
a169 1
	return;
d172 1
a172 1
		    &preferBlanking, &allowExposures);
d174 1
a174 1
		    preferBlanking, allowExposures);
d176 1
a176 1
                                /* Restore saved state */
d180 4
a183 2
        if (dmxScreen->dpmsEnabled) DPMSEnable(dmxScreen->beDisplay);
        else                        DPMSDisable(dmxScreen->beDisplay);
d190 2
a191 1
void dmxDPMSWakeup(void)
d196 2
a197 1
    if (DPMSPowerLevel) DPMSSet(serverClient, 0);
d204 2
a205 1
Bool DPMSSupported(void)
d211 2
a212 1
int DPMSSet(ClientPtr client, int level)
d216 7
a222 1
    if (!dpmsSupported) return Success;
a223 3
    if (level < 0) level = DPMSModeOn;
    if (level > 3) level = DPMSModeOff;
    
d228 5
a232 4
	if (dmxScreen->beDisplay) {
	    DPMSForceLevel(dmxScreen->beDisplay, level);
	    dmxSync(dmxScreen, FALSE);
	}
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
d178 1
a178 1
        SaveScreens(SCREEN_SAVER_OFF, ScreenSaverReset);
d180 1
a180 1
    if (DPMSPowerLevel) DPMSSet(0);
d193 1
a193 1
void DPMSSet(int level)
d197 1
a197 1
    if (!dpmsSupported) return;
d211 1
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
@

