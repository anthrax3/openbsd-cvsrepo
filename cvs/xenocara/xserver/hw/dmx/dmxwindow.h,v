head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.8
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.6
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.14
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.09.16.19.10.21;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	Te1daavkBLskZ8gc;

1.5
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.22;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.16;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.46;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.46;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.24;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright 2001-2004 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   Kevin E. Martin <kem@@redhat.com>
 *
 */

/** \file
 * Interface for window support.  \see dmxwindow.c */

#ifndef DMXWINDOW_H
#define DMXWINDOW_H

#include "windowstr.h"

/** Window private area. */
typedef struct _dmxWinPriv {
    Window window;
    Bool offscreen;
    Bool mapped;
    Bool restacked;
    unsigned long attribMask;
    Colormap cmap;
    Visual *visual;
    Bool isShaped;
    Bool hasPict;
#ifdef GLXEXT
    void *swapGroup;
    int barrier;
    void (*windowDestroyed) (WindowPtr);
    void (*windowUnmapped) (WindowPtr);
#endif
} dmxWinPrivRec, *dmxWinPrivPtr;

extern Bool dmxInitWindow(ScreenPtr pScreen);

extern Window dmxCreateRootWindow(WindowPtr pWindow);

extern void dmxGetDefaultWindowAttributes(WindowPtr pWindow,
                                          Colormap * cmap, Visual ** visual);
extern void dmxCreateAndRealizeWindow(WindowPtr pWindow, Bool doSync);

extern Bool dmxCreateWindow(WindowPtr pWindow);
extern Bool dmxDestroyWindow(WindowPtr pWindow);
extern Bool dmxPositionWindow(WindowPtr pWindow, int x, int y);
extern Bool dmxChangeWindowAttributes(WindowPtr pWindow, unsigned long mask);
extern Bool dmxRealizeWindow(WindowPtr pWindow);
extern Bool dmxUnrealizeWindow(WindowPtr pWindow);
extern void dmxRestackWindow(WindowPtr pWindow, WindowPtr pOldNextSib);
extern void dmxWindowExposures(WindowPtr pWindow, RegionPtr prgn);
extern void dmxCopyWindow(WindowPtr pWindow, DDXPointRec ptOldOrg,
                          RegionPtr prgnSrc);

extern void dmxResizeWindow(WindowPtr pWindow, int x, int y,
                            unsigned int w, unsigned int h, WindowPtr pSib);
extern void dmxReparentWindow(WindowPtr pWindow, WindowPtr pPriorParent);

extern void dmxChangeBorderWidth(WindowPtr pWindow, unsigned int width);

extern void dmxResizeScreenWindow(ScreenPtr pScreen,
                                  int x, int y, int w, int h);
extern void dmxResizeRootWindow(WindowPtr pRoot, int x, int y, int w, int h);

extern Bool dmxBEDestroyWindow(WindowPtr pWindow);

/* Support for shape extension */
extern void dmxSetShape(WindowPtr pWindow, int kind);

/** Get window private pointer. */
#define DMX_GET_WINDOW_PRIV(_pWin) ((dmxWinPrivPtr) \
    dixLookupPrivate(&(_pWin)->devPrivates, dmxWinPrivateKey))

/* All of these macros are only used in dmxwindow.c */
#define DMX_WINDOW_FUNC_PROLOGUE(_pGC)					\
do {									\
    dmxGCPrivPtr pGCPriv = DMX_GET_GC_PRIV(_pGC);			\
    DMX_UNWRAP(funcs, pGCPriv, (_pGC));					\
    if (pGCPriv->ops)							\
	DMX_UNWRAP(ops, pGCPriv, (_pGC));				\
} while (0)

#define DMX_WINDOW_FUNC_EPILOGUE(_pGC)					\
do {									\
    dmxGCPrivPtr pGCPriv = DMX_GET_GC_PRIV(_pGC);			\
    DMX_WRAP(funcs, &dmxGCFuncs, pGCPriv, (_pGC));			\
    if (pGCPriv->ops)							\
	DMX_WRAP(ops, &dmxGCOps, pGCPriv, (_pGC));			\
} while (0)

#define DMX_WINDOW_X1(_pWin)						\
    ((_pWin)->drawable.x - wBorderWidth(_pWin))
#define DMX_WINDOW_Y1(_pWin)						\
    ((_pWin)->drawable.y - wBorderWidth(_pWin))
#define DMX_WINDOW_X2(_pWin)						\
    ((_pWin)->drawable.x + wBorderWidth(_pWin) + (_pWin)->drawable.width)
#define DMX_WINDOW_Y2(_pWin)						\
    ((_pWin)->drawable.y + wBorderWidth(_pWin) + (_pWin)->drawable.height)

#define DMX_WINDOW_OFFSCREEN(_pWin)					\
    (DMX_WINDOW_X1(_pWin) >= (_pWin)->drawable.pScreen->width  ||	\
     DMX_WINDOW_Y1(_pWin) >= (_pWin)->drawable.pScreen->height ||	\
     DMX_WINDOW_X2(_pWin) <= 0                                 ||	\
     DMX_WINDOW_Y2(_pWin) <= 0)

#endif                          /* DMXWINDOW_H */
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d76 1
a76 2
extern void dmxWindowExposures(WindowPtr pWindow, RegionPtr prgn,
                               RegionPtr other_exposed);
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d44 9
a52 9
    Window         window;
    Bool           offscreen;
    Bool           mapped;
    Bool           restacked;
    unsigned long  attribMask;
    Colormap       cmap;
    Visual        *visual;
    Bool           isShaped;
    Bool           hasPict;
d54 4
a57 4
    void          *swapGroup;
    int            barrier;
    void         (*windowDestroyed)(WindowPtr);
    void         (*windowUnmapped)(WindowPtr);
a60 1

d66 1
a66 2
					  Colormap *cmap,
					  Visual **visual);
d77 1
a77 1
			       RegionPtr other_exposed);
d79 1
a79 1
			  RegionPtr prgnSrc);
d82 1
a82 1
			    unsigned int w, unsigned int h, WindowPtr pSib);
d88 2
a89 3
				  int x, int y, int w, int h);
extern void dmxResizeRootWindow(WindowPtr pRoot,
				int x, int y, int w, int h);
d122 1
a122 1
    ((_pWin)->drawable.x + wBorderWidth(_pWin) + (_pWin)->drawable.width) 
d124 1
a124 1
    ((_pWin)->drawable.y + wBorderWidth(_pWin) + (_pWin)->drawable.height) 
d132 1
a132 1
#endif /* DMXWINDOW_H */
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a51 1
#ifdef RENDER
a52 1
#endif
d97 1
a97 4
extern void dmxSetShape(WindowPtr pWindow);

/** Private index.  \see dmxwindow.c \see dmxscrinit.c */
extern DevPrivateKey dmxWinPrivateKey;
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a50 1
#ifdef SHAPE
a51 1
#endif
a97 1
#ifdef SHAPE
a99 1
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
a83 4
extern void dmxPaintWindowBackground(WindowPtr pWindow, RegionPtr pRegion,
				     int what);
extern void dmxPaintWindowBorder(WindowPtr pWindow, RegionPtr pRegion,
				 int what);
d106 1
a106 1
extern int dmxWinPrivateIndex;
d109 2
a110 2
#define DMX_GET_WINDOW_PRIV(_pWin)					\
    ((dmxWinPrivPtr)(_pWin)->devPrivates[dmxWinPrivateIndex].ptr)
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
@

