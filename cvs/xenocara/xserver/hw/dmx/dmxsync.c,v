head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.09.27.17.53.00;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	cVXoV5PxI8YrEaVA;

1.4
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.40;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.40;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.24;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@/*
 * Copyright 2002-2004 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   Rickard E. (Rik) Faith <faith@@redhat.com>
 *
 */

/** \file
 *
 * The DMX server code is written to call #dmxSync() whenever an XSync()
 * might be necessary.  However, since XSync() requires a two way
 * communication with the other X server, eliminating unnecessary
 * XSync() calls is a key performance optimization.  Support for this
 * optimization is provided here.  Statistics about XSync() calls and
 * latency are gathered in \a dmxstat.c.
 *
 * During the initial conversion from calling XSync() immediately to the
 * XSync() batching method implemented in this file, it was noted that,
 * out of more than 300 \a x11perf tests, 8 tests became more than 100
 * times faster, with 68 more than 50X faster, 114 more than 10X faster,
 * and 181 more than 2X faster. */

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#endif

#include "dmx.h"
#include "dmxsync.h"
#include "dmxstat.h"
#include "dmxlog.h"
#include <sys/time.h>

static int dmxSyncInterval = 100;       /* Default interval in milliseconds */
static OsTimerPtr dmxSyncTimer;
static int dmxSyncPending;

static void
dmxDoSync(DMXScreenInfo * dmxScreen)
{
    dmxScreen->needsSync = FALSE;

    if (!dmxScreen->beDisplay)
        return;                 /* FIXME: Is this correct behavior for sync stats? */

    if (!dmxStatInterval) {
        XSync(dmxScreen->beDisplay, False);
    }
    else {
        struct timeval start, stop;

        gettimeofday(&start, 0);
        XSync(dmxScreen->beDisplay, False);
        gettimeofday(&stop, 0);
        dmxStatSync(dmxScreen, &stop, &start, dmxSyncPending);
    }
}

static CARD32
dmxSyncCallback(OsTimerPtr timer, CARD32 time, void *arg)
{
    int i;

    if (dmxSyncPending) {
        for (i = 0; i < dmxNumScreens; i++) {
            DMXScreenInfo *dmxScreen = &dmxScreens[i];

            if (dmxScreen->needsSync)
                dmxDoSync(dmxScreen);
        }
    }
    dmxSyncPending = 0;
    return 0;                   /* Do not place on queue again */
}

static void
dmxSyncBlockHandler(void *blockData, OSTimePtr pTimeout, void *pReadMask)
{
    TimerForce(dmxSyncTimer);
}

static void
dmxSyncWakeupHandler(void *blockData, int result, void *pReadMask)
{
}

/** Request the XSync() batching optimization with the specified \a
 * interval (in mS).  If the \a interval is 0, 100mS is used.  If the \a
 * interval is less than 0, then the XSync() batching optimization is
 * not requested (e.g., so the -syncbatch -1 command line option can
 * turn off the default 100mS XSync() batching).
 *
 * Note that the parameter to this routine is a string, since it will
 * usually be called from #ddxProcessArgument in \a dmxinit.c */
void
dmxSyncActivate(const char *interval)
{
    dmxSyncInterval = (interval ? atoi(interval) : 100);

    if (dmxSyncInterval < 0)
        dmxSyncInterval = 0;
}

/** Initialize the XSync() batching optimization, but only if
 * #dmxSyncActivate was last called with a non-negative value. */
void
dmxSyncInit(void)
{
    if (dmxSyncInterval) {
        RegisterBlockAndWakeupHandlers(dmxSyncBlockHandler,
                                       dmxSyncWakeupHandler, NULL);
        dmxLog(dmxInfo, "XSync batching with %d ms interval\n",
               dmxSyncInterval);
    }
    else {
        dmxLog(dmxInfo, "XSync batching disabled\n");
    }
}

/** Request an XSync() to the display used by \a dmxScreen.  If \a now
 * is TRUE, call XSync() immediately instead of waiting for the next
 * XSync() batching point.  Note that if XSync() batching was deselected
 * with #dmxSyncActivate() before #dmxSyncInit() was called, then no
 * XSync() batching is performed and this function always calles XSync()
 * immediately.
 *
 * (Note that this function uses TimerSet but works correctly in the
 * face of a server generation.  See the source for details.)
 *
 * If \a dmxScreen is \a NULL, then all pending syncs will be flushed
 * immediately.
 */
void
dmxSync(DMXScreenInfo * dmxScreen, Bool now)
{
    static unsigned long dmxGeneration = 0;

    if (dmxSyncInterval) {
        if (dmxGeneration != serverGeneration) {
            /* Server generation does a TimerInit, which frees all
             * timers.  So, at this point dmxSyncTimer is either:
             * 1) NULL, iff dmxGeneration == 0,
             * 2) freed, if it was on a queue (dmxSyncPending != 0), or
             * 3) allocated, if it wasn't on a queue (dmxSyncPending == 0)
             */
            if (dmxSyncTimer && !dmxSyncPending)
                free(dmxSyncTimer);
            dmxSyncTimer = NULL;
            now = TRUE;
            dmxGeneration = serverGeneration;
        }
        /* Queue sync */
        if (dmxScreen) {
            dmxScreen->needsSync = TRUE;
            ++dmxSyncPending;
        }

        /* Do sync or set time for later */
        if (now || !dmxScreen) {
            if (!TimerForce(dmxSyncTimer))
                dmxSyncCallback(NULL, 0, NULL);
            /* At this point, dmxSyncPending == 0 because
             * dmxSyncCallback must have been called. */
            if (dmxSyncPending)
                dmxLog(dmxFatal, "dmxSync(%s,%d): dmxSyncPending = %d\n",
                       dmxScreen ? dmxScreen->name : "", now, dmxSyncPending);
        }
        else {
            dmxScreen->needsSync = TRUE;
            if (dmxSyncPending == 1)
                dmxSyncTimer = TimerSet(dmxSyncTimer, 0, dmxSyncInterval,
                                        dmxSyncCallback, NULL);
        }
    }
    else {
        /* If dmxSyncInterval is not being used,
         * then all the backends are already
         * up-to-date. */
        if (dmxScreen)
            dmxDoSync(dmxScreen);
    }
}
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d85 1
a85 1
dmxSyncCallback(OsTimerPtr timer, CARD32 time, pointer arg)
d102 1
a102 1
dmxSyncBlockHandler(pointer blockData, OSTimePtr pTimeout, pointer pReadMask)
d108 1
a108 1
dmxSyncWakeupHandler(pointer blockData, int result, pointer pReadMask)
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d59 1
a59 1
static int        dmxSyncInterval = 100; /* Default interval in milliseconds */
d61 1
a61 1
static int        dmxSyncPending;
d63 2
a64 1
static void dmxDoSync(DMXScreenInfo *dmxScreen)
d69 1
a69 1
	return; /* FIXME: Is this correct behavior for sync stats? */
d73 2
a74 1
    } else {
d76 1
a76 1
        
d84 2
a85 1
static CARD32 dmxSyncCallback(OsTimerPtr timer, CARD32 time, pointer arg)
d87 1
a87 1
    int           i;
d92 3
a94 1
            if (dmxScreen->needsSync) dmxDoSync(dmxScreen);
d101 2
a102 2
static void dmxSyncBlockHandler(pointer blockData, OSTimePtr pTimeout,
                                pointer pReadMask)
d107 2
a108 2
static void dmxSyncWakeupHandler(pointer blockData, int result,
                                 pointer pReadMask)
d120 2
a121 1
void dmxSyncActivate(const char *interval)
d125 2
a126 1
    if (dmxSyncInterval < 0) dmxSyncInterval = 0;
d131 2
a132 1
void dmxSyncInit(void)
d136 1
a136 2
                                       dmxSyncWakeupHandler,
                                       NULL);
d139 2
a140 1
    } else {
d158 2
a159 1
void dmxSync(DMXScreenInfo *dmxScreen, Bool now)
d171 4
a174 3
            if (dmxSyncTimer && !dmxSyncPending) free(dmxSyncTimer);
            dmxSyncTimer  = NULL;
            now           = TRUE;
d177 1
a177 1
                                /* Queue sync */
d183 1
a183 1
                                /* Do sync or set time for later */
d185 2
a186 1
            if (!TimerForce(dmxSyncTimer)) dmxSyncCallback(NULL, 0, NULL);
d192 2
a193 1
        } else {
d199 7
a205 5
    } else {
                                /* If dmxSyncInterval is not being used,
                                 * then all the backends are already
                                 * up-to-date. */
        if (dmxScreen) dmxDoSync(dmxScreen);
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d162 1
a162 1
            if (dmxSyncTimer && !dmxSyncPending) xfree(dmxSyncTimer);
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
d41 1
a41 1
 * latency are gathered in #dmxstat.c.
d114 1
a114 1
 * usually be called from #ddxProcessArgument in #dmxinit.c */
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
@

