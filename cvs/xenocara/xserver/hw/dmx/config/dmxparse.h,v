head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.18
	OPENBSD_5_0:1.1.1.2.0.16
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.12
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.14
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2016.05.29.12.02.36;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	s0SI41sEunLdyFfd;

1.3
date	2015.11.07.16.48.52;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	7pAEtF6Y5EgemkuY;

1.2
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.23.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.23.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.40;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 * Copyright 2002 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   Rickard E. (Rik) Faith <faith@@redhat.com>
 *
 */

/** \file
 * Interface to DMX configuration file parser.  \see dmxparse.c */

#ifndef _DMXPARSE_H_
#define _DMXPARSE_H_

#include <stdio.h>              /* For FILE */
#include <X11/Xfuncproto.h>     /* For _X_ATTRIBUTE_PRINTF */

/** Stores tokens not stored in other structures (e.g., keywords and ;) */
typedef struct _DMXConfigToken {
    int token;
    int line;
    const char *comment;
} DMXConfigToken, *DMXConfigTokenPtr;

/** Stores parsed strings. */
typedef struct _DMXConfigString {
    int token;
    int line;
    const char *comment;
    const char *string;
    struct _DMXConfigString *next;
} DMXConfigString, *DMXConfigStringPtr;

/** Stores parsed numbers. */
typedef struct _DMXConfigNumber {
    int token;
    int line;
    const char *comment;
    int number;
} DMXConfigNumber, *DMXConfigNumberPtr;

/** Stores parsed pairs (e.g., x y) */
typedef struct _DMXConfigPair {
    int token;
    int line;
    const char *comment;
    int x;
    int y;
    int xsign;
    int ysign;
} DMXConfigPair, *DMXConfigPairPtr;

/** Stores parsed comments not stored with a token. */
typedef struct _DMXConfigComment {
    int token;
    int line;
    const char *comment;
} DMXConfigComment, *DMXConfigCommentPtr;

typedef enum {
    dmxConfigComment,
    dmxConfigVirtual,
    dmxConfigDisplay,
    dmxConfigWall,
    dmxConfigOption,
    dmxConfigParam
} DMXConfigType;

/** Stores a geometry specification. */
typedef struct _DMXConfigPartDim {
    DMXConfigPairPtr dim;
    DMXConfigPairPtr offset;
} DMXConfigPartDim, *DMXConfigPartDimPtr;

/** Stores a pair of geometry specifications. */
typedef struct _DMXConfigFullDim {
    DMXConfigPartDimPtr scrn;
    DMXConfigPartDimPtr root;
} DMXConfigFullDim, *DMXConfigFullDimPtr;

/** Stores parsed display information. */
typedef struct _DMXConfigDisplay {
    /* Summary information */
    const char *name;
    /* Screen Window Geometry */
    int scrnWidth, scrnHeight;
    int scrnX, scrnY;
    int scrnXSign, scrnYSign;
    /* Root Window Geometry */
    int rootWidth, rootHeight;
    int rootX, rootY;
    int rootXSign, rootYSign;
    /* Origin in global space */
    int rootXOrigin, rootYOrigin;

    /* Raw configuration information */
    DMXConfigTokenPtr start;
    DMXConfigStringPtr dname;
    DMXConfigFullDimPtr dim;
    DMXConfigPairPtr origin;
    DMXConfigTokenPtr end;
} DMXConfigDisplay, *DMXConfigDisplayPtr;

/** Stores parsed wall information. */
typedef struct _DMXConfigWall {
    /* Summary information */
    int width, height;          /* dimensions of displays */
    int xwall, ywall;           /* dimensions of wall, in tiles */

    /* Raw configuration informaiton */
    DMXConfigTokenPtr start;
    DMXConfigPairPtr wallDim;
    DMXConfigPairPtr displayDim;
    DMXConfigStringPtr nameList;
    DMXConfigTokenPtr end;
} DMXConfigWall, *DMXConfigWallPtr;

/** Stores parsed option information. */
typedef struct _DMXConfigOption {
    /* Summary information */
    char *string;

    /* Raw configuration informaiton */
    DMXConfigTokenPtr start;
    DMXConfigStringPtr option;
    DMXConfigTokenPtr end;
} DMXConfigOption, *DMXConfigOptionPtr;

/** Stores parsed param information. */
typedef struct _DMXConfigParam {
    int argc;
    const char **argv;

    DMXConfigTokenPtr start;
    DMXConfigTokenPtr open;
    DMXConfigStringPtr param;
    DMXConfigTokenPtr close;
    DMXConfigTokenPtr end;      /* Either open/close OR end */
    struct _DMXConfigParam *next;
} DMXConfigParam, *DMXConfigParamPtr;

/** Stores options under an entry (subentry). */
typedef struct _DMXConfigSub {
    DMXConfigType type;
    DMXConfigCommentPtr comment;
    DMXConfigDisplayPtr display;
    DMXConfigWallPtr wall;
    DMXConfigOptionPtr option;
    DMXConfigParamPtr param;
    struct _DMXConfigSub *next;
} DMXConfigSub, *DMXConfigSubPtr;

/** Stores parsed virtual information. */
typedef struct _DMXConfigVirtual {
    /* Summary information */
    const char *name;
    int width, height;

    /* Raw configuration information */
    DMXConfigTokenPtr start;
    DMXConfigStringPtr vname;
    DMXConfigPairPtr dim;
    DMXConfigTokenPtr open;
    DMXConfigSubPtr subentry;
    DMXConfigTokenPtr close;
} DMXConfigVirtual, *DMXConfigVirtualPtr;

/** Heads entry storage. */
typedef struct _DMXConfigEntry {
    DMXConfigType type;
    DMXConfigCommentPtr comment;
    DMXConfigVirtualPtr virtual;
    struct _DMXConfigEntry *next;
} DMXConfigEntry, *DMXConfigEntryPtr;

extern DMXConfigEntryPtr dmxConfigEntry;

extern void yyerror(const char *message);

extern void dmxConfigLog(const char *format, ...) _X_ATTRIBUTE_PRINTF(1,0);
extern void *dmxConfigAlloc(unsigned long bytes);
extern void *dmxConfigRealloc(void *orig,
                              unsigned long orig_bytes, unsigned long bytes);
extern const char *dmxConfigCopyString(const char *string, int length);
extern void dmxConfigFree(void *area);
extern DMXConfigTokenPtr dmxConfigCreateToken(int token, int line,
                                              const char *comment);
extern void dmxConfigFreeToken(DMXConfigTokenPtr p);
extern DMXConfigStringPtr dmxConfigCreateString(int token, int line,
                                                const char *comment,
                                                const char *string);
extern void dmxConfigFreeString(DMXConfigStringPtr p);
extern DMXConfigNumberPtr dmxConfigCreateNumber(int token, int line,
                                                const char *comment,
                                                int number);
extern void dmxConfigFreeNumber(DMXConfigNumberPtr p);
extern DMXConfigPairPtr dmxConfigCreatePair(int token, int line,
                                            const char *comment,
                                            int x, int y, int xsign, int ysign);
extern void dmxConfigFreePair(DMXConfigPairPtr p);
extern DMXConfigCommentPtr dmxConfigCreateComment(int token, int line,
                                                  const char *comment);
extern void dmxConfigFreeComment(DMXConfigCommentPtr p);
extern DMXConfigPartDimPtr dmxConfigCreatePartDim(DMXConfigPairPtr pDim,
                                                  DMXConfigPairPtr pOffset);
extern void dmxConfigFreePartDim(DMXConfigPartDimPtr p);
extern DMXConfigFullDimPtr dmxConfigCreateFullDim(DMXConfigPartDimPtr pScrn,
                                                  DMXConfigPartDimPtr pRoot);
extern void dmxConfigFreeFullDim(DMXConfigFullDimPtr p);
extern DMXConfigDisplayPtr dmxConfigCreateDisplay(DMXConfigTokenPtr pStart,
                                                  DMXConfigStringPtr pName,
                                                  DMXConfigFullDimPtr pDim,
                                                  DMXConfigPairPtr pOrigin,
                                                  DMXConfigTokenPtr pEnd);
extern void dmxConfigFreeDisplay(DMXConfigDisplayPtr p);
extern DMXConfigWallPtr dmxConfigCreateWall(DMXConfigTokenPtr pStart,
                                            DMXConfigPairPtr pWallDim,
                                            DMXConfigPairPtr pDisplayDim,
                                            DMXConfigStringPtr pNameList,
                                            DMXConfigTokenPtr pEnd);
extern void dmxConfigFreeWall(DMXConfigWallPtr p);
extern DMXConfigOptionPtr dmxConfigCreateOption(DMXConfigTokenPtr pStart,
                                                DMXConfigStringPtr pOption,
                                                DMXConfigTokenPtr pEnd);
extern void dmxConfigFreeOption(DMXConfigOptionPtr p);
extern DMXConfigParamPtr dmxConfigCreateParam(DMXConfigTokenPtr pStart,
                                              DMXConfigTokenPtr pOpen,
                                              DMXConfigStringPtr pParam,
                                              DMXConfigTokenPtr pClose,
                                              DMXConfigTokenPtr pEnd);
extern void dmxConfigFreeParam(DMXConfigParamPtr p);
extern const char **dmxConfigLookupParam(DMXConfigParamPtr p,
                                         const char *key, int *argc);
extern DMXConfigSubPtr dmxConfigCreateSub(DMXConfigType type,
                                          DMXConfigCommentPtr comment,
                                          DMXConfigDisplayPtr display,
                                          DMXConfigWallPtr wall,
                                          DMXConfigOptionPtr option,
                                          DMXConfigParamPtr param);
extern void dmxConfigFreeSub(DMXConfigSubPtr sub);
extern DMXConfigSubPtr dmxConfigSubComment(DMXConfigCommentPtr comment);
extern DMXConfigSubPtr dmxConfigSubDisplay(DMXConfigDisplayPtr display);
extern DMXConfigSubPtr dmxConfigSubWall(DMXConfigWallPtr wall);
extern DMXConfigSubPtr dmxConfigSubOption(DMXConfigOptionPtr option);
extern DMXConfigSubPtr dmxConfigSubParam(DMXConfigParamPtr param);
extern DMXConfigSubPtr dmxConfigAddSub(DMXConfigSubPtr head,
                                       DMXConfigSubPtr sub);
extern DMXConfigVirtualPtr dmxConfigCreateVirtual(DMXConfigTokenPtr pStart,
                                                  DMXConfigStringPtr pName,
                                                  DMXConfigPairPtr pDim,
                                                  DMXConfigTokenPtr pOpen,
                                                  DMXConfigSubPtr pSubentry,
                                                  DMXConfigTokenPtr pClose);
extern void dmxConfigFreeVirtual(DMXConfigVirtualPtr virtual);
extern DMXConfigEntryPtr dmxConfigCreateEntry(DMXConfigType type,
                                              DMXConfigCommentPtr comment,
                                              DMXConfigVirtualPtr virtual);
extern void dmxConfigFreeEntry(DMXConfigEntryPtr entry);
extern DMXConfigEntryPtr dmxConfigAddEntry(DMXConfigEntryPtr head,
                                           DMXConfigType type,
                                           DMXConfigCommentPtr comment,
                                           DMXConfigVirtualPtr virtual);
extern DMXConfigEntryPtr dmxConfigEntryComment(DMXConfigCommentPtr comment);
extern DMXConfigEntryPtr dmxConfigEntryVirtual(DMXConfigVirtualPtr virtual);

#endif
@


1.3
log
@Update to xserver 1.17.4.
tested by naddy@@
@
text
@a202 2
extern int yylex(void);
extern int yydebug;
@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d41 1
d207 1
a207 1
extern void dmxConfigLog(const char *format, ...);
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
d44 3
a46 3
    int                      token;
    int                      line;
    const char               *comment;
d51 5
a55 5
    int                      token;
    int                      line;
    const char               *comment;
    const char               *string;
    struct _DMXConfigString  *next;
d60 4
a63 4
    int                      token;
    int                      line;
    const char               *comment;
    int                      number;
d68 7
a74 7
    int                      token;
    int                      line;
    const char               *comment;
    int                      x;
    int                      y;
    int                      xsign;
    int                      ysign;
d79 3
a81 3
    int                      token;
    int                      line;
    const char               *comment;
d95 2
a96 2
    DMXConfigPairPtr         dim;
    DMXConfigPairPtr         offset;
d101 2
a102 2
    DMXConfigPartDimPtr      scrn;
    DMXConfigPartDimPtr      root;
d107 19
a125 19
                                /* Summary information */
    const char               *name;
                                /* Screen Window Geometry */
    int                      scrnWidth, scrnHeight;
    int                      scrnX, scrnY;
    int                      scrnXSign, scrnYSign;
                                /* Root Window Geometry */
    int                      rootWidth, rootHeight;
    int                      rootX, rootY;
    int                      rootXSign, rootYSign;
                                /* Origin in global space */
    int                      rootXOrigin, rootYOrigin;
    
                                /* Raw configuration information */
    DMXConfigTokenPtr        start;
    DMXConfigStringPtr       dname;
    DMXConfigFullDimPtr      dim;
    DMXConfigPairPtr         origin;
    DMXConfigTokenPtr        end;
d130 10
a139 11
                                /* Summary information */
    int                      width, height; /* dimensions of displays */
    int                      xwall, ywall; /* dimensions of wall, in tiles */

    
                                /* Raw configuration informaiton */
    DMXConfigTokenPtr        start;
    DMXConfigPairPtr         wallDim;
    DMXConfigPairPtr         displayDim;
    DMXConfigStringPtr       nameList;
    DMXConfigTokenPtr        end;
d144 7
a150 7
                                /* Summary information */
    char                     *string;
    
                                /* Raw configuration informaiton */
    DMXConfigTokenPtr        start;
    DMXConfigStringPtr       option;
    DMXConfigTokenPtr        end;
d155 9
a163 9
    int                      argc;
    const char               **argv;
    
    DMXConfigTokenPtr        start;
    DMXConfigTokenPtr        open;
    DMXConfigStringPtr       param;
    DMXConfigTokenPtr        close;
    DMXConfigTokenPtr        end; /* Either open/close OR end */
    struct _DMXConfigParam   *next;
d168 7
a174 7
    DMXConfigType             type;
    DMXConfigCommentPtr       comment;
    DMXConfigDisplayPtr       display;
    DMXConfigWallPtr          wall;
    DMXConfigOptionPtr        option;
    DMXConfigParamPtr         param;
    struct _DMXConfigSub      *next;
d179 11
a189 11
                                /* Summary information */
    const char                *name;
    int                       width, height;

                                /* Raw configuration information */
    DMXConfigTokenPtr         start;
    DMXConfigStringPtr        vname;
    DMXConfigPairPtr          dim;
    DMXConfigTokenPtr         open;
    DMXConfigSubPtr           subentry;
    DMXConfigTokenPtr         close;
d194 4
a197 4
    DMXConfigType            type;
    DMXConfigCommentPtr      comment;
    DMXConfigVirtualPtr      virtual;
    struct _DMXConfigEntry   *next;
d200 1
a200 1
extern DMXConfigEntryPtr   dmxConfigEntry;
d202 25
a226 28
extern int                 yylex(void);
extern int                 yydebug;
extern void                yyerror(const char *message);

extern void                dmxConfigLog(const char *format, ...);
extern void                *dmxConfigAlloc(unsigned long bytes);
extern void                *dmxConfigRealloc(void *orig,
                                             unsigned long orig_bytes,
                                             unsigned long bytes);
extern const char          *dmxConfigCopyString(const char *string,
                                                int length);
extern void                dmxConfigFree(void *area);
extern DMXConfigTokenPtr   dmxConfigCreateToken(int token, int line,
                                                const char *comment);
extern void                dmxConfigFreeToken(DMXConfigTokenPtr p);
extern DMXConfigStringPtr  dmxConfigCreateString(int token, int line,
                                                 const char *comment,
                                                 const char *string);
extern void                dmxConfigFreeString(DMXConfigStringPtr p);
extern DMXConfigNumberPtr  dmxConfigCreateNumber(int token, int line,
                                                 const char *comment,
                                                 int number);
extern void                dmxConfigFreeNumber(DMXConfigNumberPtr p);
extern DMXConfigPairPtr    dmxConfigCreatePair(int token, int line,
                                               const char *comment,
                                               int x, int y,
                                               int xsign, int ysign);
extern void                dmxConfigFreePair(DMXConfigPairPtr p);
d229 1
a229 1
extern void                dmxConfigFreeComment(DMXConfigCommentPtr p);
d232 1
a232 1
extern void                dmxConfigFreePartDim(DMXConfigPartDimPtr p);
d235 1
a235 1
extern void                dmxConfigFreeFullDim(DMXConfigFullDimPtr p);
d241 9
a249 15
extern void                dmxConfigFreeDisplay(DMXConfigDisplayPtr p);
extern DMXConfigWallPtr    dmxConfigCreateWall(DMXConfigTokenPtr pStart,
                                               DMXConfigPairPtr pWallDim,
                                               DMXConfigPairPtr pDisplayDim,
                                               DMXConfigStringPtr pNameList,
                                               DMXConfigTokenPtr pEnd);
extern void                dmxConfigFreeWall(DMXConfigWallPtr p);
extern DMXConfigOptionPtr  dmxConfigCreateOption(DMXConfigTokenPtr pStart,
                                                 DMXConfigStringPtr pOption,
                                                 DMXConfigTokenPtr pEnd);
extern void                dmxConfigFreeOption(DMXConfigOptionPtr p);
extern DMXConfigParamPtr   dmxConfigCreateParam(DMXConfigTokenPtr pStart,
                                                DMXConfigTokenPtr pOpen,
                                                DMXConfigStringPtr pParam,
                                                DMXConfigTokenPtr pClose,
d251 23
a273 18
extern void                dmxConfigFreeParam(DMXConfigParamPtr p);
extern const char          **dmxConfigLookupParam(DMXConfigParamPtr p,
                                                  const char *key,
                                                  int *argc);
extern DMXConfigSubPtr     dmxConfigCreateSub(DMXConfigType type,
                                              DMXConfigCommentPtr comment,
                                              DMXConfigDisplayPtr display,
                                              DMXConfigWallPtr wall,
                                              DMXConfigOptionPtr option,
                                              DMXConfigParamPtr param);
extern void                dmxConfigFreeSub(DMXConfigSubPtr sub);
extern DMXConfigSubPtr     dmxConfigSubComment(DMXConfigCommentPtr comment);
extern DMXConfigSubPtr     dmxConfigSubDisplay(DMXConfigDisplayPtr display);
extern DMXConfigSubPtr     dmxConfigSubWall(DMXConfigWallPtr wall);
extern DMXConfigSubPtr     dmxConfigSubOption(DMXConfigOptionPtr option);
extern DMXConfigSubPtr     dmxConfigSubParam(DMXConfigParamPtr param);
extern DMXConfigSubPtr     dmxConfigAddSub(DMXConfigSubPtr head,
                                           DMXConfigSubPtr sub);
d280 11
a290 11
extern void                dmxConfigFreeVirtual(DMXConfigVirtualPtr virtual);
extern DMXConfigEntryPtr   dmxConfigCreateEntry(DMXConfigType type,
                                                DMXConfigCommentPtr comment,
                                                DMXConfigVirtualPtr virtual);
extern void                dmxConfigFreeEntry(DMXConfigEntryPtr entry);
extern DMXConfigEntryPtr   dmxConfigAddEntry(DMXConfigEntryPtr head,
                                             DMXConfigType type,
                                             DMXConfigCommentPtr comment,
                                             DMXConfigVirtualPtr virtual);
extern DMXConfigEntryPtr   dmxConfigEntryComment(DMXConfigCommentPtr comment);
extern DMXConfigEntryPtr   dmxConfigEntryVirtual(DMXConfigVirtualPtr virtual);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
@

