head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.22
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.20
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.16
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.23.29;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.23.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.40;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * Copyright 2002 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   Rickard E. (Rik) Faith <faith@@redhat.com>
 *
 */

/** \file
 *
 * This file provides support routines and helper functions to be used
 * by the DMX configuration file parser.
 *
 * Because the DMX configuration file parsing should be capable of being
 * used in a stand-alone fashion (i.e., independent from the DMX server
 * source tree), no dependencies on other DMX routines are made. */

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "dmxparse.h"

/** A general error logging routine that does not depend on the dmxLog
 * functions. */
void
dmxConfigLog(const char *format, ...)
{
    va_list args;

    va_start(args, format);
    vprintf(format, args);      /* RATS: All calls to dmxConfigLog from
                                 * dmxparse.c and dmxprint.c use a
                                 * trusted format. */
    va_end(args);
}

void *
dmxConfigAlloc(unsigned long bytes)
{
    void *area = calloc(1, bytes);

    if (!area) {
        dmxConfigLog("dmxConfigAlloc: out of memory\n");
        return NULL;
    }
    return area;
}

void *
dmxConfigRealloc(void *orig, unsigned long orig_bytes, unsigned long bytes)
{
    unsigned char *area = realloc(orig, bytes);

    if (!area) {
        dmxConfigLog("dmxConfigRealloc: out of memory\n");
        return NULL;
    }
    memset(area + orig_bytes, 0, bytes - orig_bytes);
    return area;
}

const char *
dmxConfigCopyString(const char *string, int length)
{
    char *copy;

    if (!length)
        length = strlen(string);
    copy = dmxConfigAlloc(length + 1);
    if (length)
        strncpy(copy, string, length);
    copy[length] = '\0';
    return copy;
}

void
dmxConfigFree(void *area)
{
    free(area);
}

DMXConfigTokenPtr
dmxConfigCreateToken(int token, int line, const char *comment)
{
    DMXConfigTokenPtr pToken = dmxConfigAlloc(sizeof(*pToken));

    pToken->token = token;
    pToken->line = line;
    pToken->comment = comment;
    return pToken;
}

void
dmxConfigFreeToken(DMXConfigTokenPtr p)
{
    if (!p)
        return;
    dmxConfigFree((void *) p->comment);
    dmxConfigFree(p);
}

DMXConfigStringPtr
dmxConfigCreateString(int token, int line,
                      const char *comment, const char *string)
{
    DMXConfigStringPtr pString = dmxConfigAlloc(sizeof(*pString));

    pString->token = token;
    pString->line = line;
    pString->comment = comment;
    pString->string = string;
    return pString;
}

void
dmxConfigFreeString(DMXConfigStringPtr p)
{
    DMXConfigStringPtr next;

    if (!p)
        return;
    do {
        next = p->next;
        dmxConfigFree((void *) p->comment);
        dmxConfigFree((void *) p->string);
        dmxConfigFree(p);
    } while ((p = next));
}

DMXConfigNumberPtr
dmxConfigCreateNumber(int token, int line, const char *comment, int number)
{
    DMXConfigNumberPtr pNumber = dmxConfigAlloc(sizeof(*pNumber));

    pNumber->token = token;
    pNumber->line = line;
    pNumber->comment = comment;
    pNumber->number = number;
    return pNumber;
}

void
dmxConfigFreeNumber(DMXConfigNumberPtr p)
{
    if (!p)
        return;
    dmxConfigFree((void *) p->comment);
    dmxConfigFree(p);
}

DMXConfigPairPtr
dmxConfigCreatePair(int token, int line,
                    const char *comment, int x, int y, int xsign, int ysign)
{
    DMXConfigPairPtr pPair = dmxConfigAlloc(sizeof(*pPair));

    pPair->token = token;
    pPair->line = line;
    pPair->comment = comment;
    pPair->x = x;
    pPair->y = y;
    pPair->xsign = (xsign < 0) ? -1 : 1;
    pPair->ysign = (ysign < 0) ? -1 : 1;
    return pPair;
}

void
dmxConfigFreePair(DMXConfigPairPtr p)
{
    if (!p)
        return;
    dmxConfigFree((void *) p->comment);
    dmxConfigFree(p);
}

DMXConfigCommentPtr
dmxConfigCreateComment(int token, int line, const char *comment)
{
    DMXConfigCommentPtr pComment = dmxConfigAlloc(sizeof(*pComment));

    pComment->token = token;
    pComment->line = line;
    pComment->comment = comment;
    return pComment;
}

void
dmxConfigFreeComment(DMXConfigCommentPtr p)
{
    if (!p)
        return;
    dmxConfigFree((void *) p->comment);
    dmxConfigFree(p);
}

DMXConfigPartDimPtr
dmxConfigCreatePartDim(DMXConfigPairPtr pDim, DMXConfigPairPtr pOffset)
{
    DMXConfigPartDimPtr pPart = dmxConfigAlloc(sizeof(*pPart));

    pPart->dim = pDim;
    pPart->offset = pOffset;
    return pPart;
}

void
dmxConfigFreePartDim(DMXConfigPartDimPtr p)
{
    if (!p)
        return;
    dmxConfigFreePair(p->dim);
    dmxConfigFreePair(p->offset);
    dmxConfigFree(p);
}

DMXConfigFullDimPtr
dmxConfigCreateFullDim(DMXConfigPartDimPtr pScrn, DMXConfigPartDimPtr pRoot)
{
    DMXConfigFullDimPtr pFull = dmxConfigAlloc(sizeof(*pFull));

    pFull->scrn = pScrn;
    pFull->root = pRoot;
    return pFull;
}

void
dmxConfigFreeFullDim(DMXConfigFullDimPtr p)
{
    if (!p)
        return;
    dmxConfigFreePartDim(p->scrn);
    dmxConfigFreePartDim(p->root);
    dmxConfigFree(p);
}

DMXConfigDisplayPtr
dmxConfigCreateDisplay(DMXConfigTokenPtr pStart,
                       DMXConfigStringPtr pName,
                       DMXConfigFullDimPtr pDim,
                       DMXConfigPairPtr pOrigin, DMXConfigTokenPtr pEnd)
{
    DMXConfigDisplayPtr pDisplay = dmxConfigAlloc(sizeof(*pDisplay));

    pDisplay->start = pStart;
    pDisplay->dname = pName;
    pDisplay->dim = pDim;
    pDisplay->origin = pOrigin;
    pDisplay->end = pEnd;

    pDisplay->name = pName ? pName->string : NULL;
    pDisplay->rootXOrigin = pOrigin ? pOrigin->x : 0;
    pDisplay->rootYOrigin = pOrigin ? pOrigin->y : 0;

    if (pDim && pDim->scrn && pDim->scrn->dim) {
        pDisplay->scrnWidth = pDim->scrn->dim->x;
        pDisplay->scrnHeight = pDim->scrn->dim->y;
    }
    if (pDim && pDim->scrn && pDim->scrn->offset) {
        pDisplay->scrnX = pDim->scrn->offset->x;
        pDisplay->scrnY = pDim->scrn->offset->y;
        pDisplay->scrnXSign = pDim->scrn->offset->xsign;
        pDisplay->scrnYSign = pDim->scrn->offset->ysign;
    }

    if (pDim && pDim->root) {
        if (pDim->root->dim) {
            pDisplay->rootWidth = pDim->root->dim->x;
            pDisplay->rootHeight = pDim->root->dim->y;
        }
        if (pDim->root->offset) {
            pDisplay->rootX = pDim->root->offset->x;
            pDisplay->rootY = pDim->root->offset->y;
            pDisplay->rootXSign = pDim->root->offset->xsign;
            pDisplay->rootYSign = pDim->root->offset->ysign;
        }
    }
    else {                      /* If no root specification, copy width
                                 * and height from scrn -- leave offset
                                 * as zero, since it is relative to
                                 * scrn. */
        pDisplay->rootWidth = pDisplay->scrnWidth;
        pDisplay->rootHeight = pDisplay->scrnHeight;
    }

    return pDisplay;
}

void
dmxConfigFreeDisplay(DMXConfigDisplayPtr p)
{
    if (!p)
        return;
    dmxConfigFreeToken(p->start);
    dmxConfigFreeString(p->dname);
    dmxConfigFreeFullDim(p->dim);
    dmxConfigFreeToken(p->end);
    dmxConfigFree(p);
}

DMXConfigWallPtr
dmxConfigCreateWall(DMXConfigTokenPtr pStart,
                    DMXConfigPairPtr pWallDim,
                    DMXConfigPairPtr pDisplayDim,
                    DMXConfigStringPtr pNameList, DMXConfigTokenPtr pEnd)
{
    DMXConfigWallPtr pWall = dmxConfigAlloc(sizeof(*pWall));

    pWall->start = pStart;
    pWall->wallDim = pWallDim;
    pWall->displayDim = pDisplayDim;
    pWall->nameList = pNameList;
    pWall->end = pEnd;

    pWall->width = pDisplayDim ? pDisplayDim->x : 0;
    pWall->height = pDisplayDim ? pDisplayDim->y : 0;
    pWall->xwall = pWallDim ? pWallDim->x : 0;
    pWall->ywall = pWallDim ? pWallDim->y : 0;

    return pWall;
}

void
dmxConfigFreeWall(DMXConfigWallPtr p)
{
    if (!p)
        return;
    dmxConfigFreeToken(p->start);
    dmxConfigFreePair(p->wallDim);
    dmxConfigFreePair(p->displayDim);
    dmxConfigFreeString(p->nameList);
    dmxConfigFreeToken(p->end);
    dmxConfigFree(p);
}

DMXConfigOptionPtr
dmxConfigCreateOption(DMXConfigTokenPtr pStart,
                      DMXConfigStringPtr pOption, DMXConfigTokenPtr pEnd)
{
    int length = 0;
    int offset = 0;
    DMXConfigStringPtr p;
    DMXConfigOptionPtr option = dmxConfigAlloc(sizeof(*option));

    for (p = pOption; p; p = p->next) {
        if (p->string)
            length += strlen(p->string) + 1;
    }

    option->string = dmxConfigAlloc(length + 1);

    for (p = pOption; p; p = p->next) {
        if (p->string) {
            int len = strlen(p->string);

            strncpy(option->string + offset, p->string, len);
            offset += len;
            if (p->next)
                option->string[offset++] = ' ';
        }
    }
    option->string[offset] = '\0';

    option->start = pStart;
    option->option = pOption;
    option->end = pEnd;

    return option;
}

void
dmxConfigFreeOption(DMXConfigOptionPtr p)
{
    if (!p)
        return;
    free(p->string);
    dmxConfigFreeToken(p->start);
    dmxConfigFreeString(p->option);
    dmxConfigFreeToken(p->end);
    dmxConfigFree(p);
}

const char **
dmxConfigLookupParam(DMXConfigParamPtr p, const char *key, int *argc)
{
    DMXConfigParamPtr pt;

    for (pt = p; pt; pt = pt->next) {
        if (pt->argv && !strcasecmp(pt->argv[0], key)) {
            *argc = pt->argc;
            return pt->argv;
        }
    }
    *argc = 0;
    return NULL;
}

DMXConfigParamPtr
dmxConfigCreateParam(DMXConfigTokenPtr pStart,
                     DMXConfigTokenPtr pOpen,
                     DMXConfigStringPtr pParam,
                     DMXConfigTokenPtr pClose, DMXConfigTokenPtr pEnd)
{
    DMXConfigParamPtr param = dmxConfigAlloc(sizeof(*param));
    DMXConfigStringPtr pt;

    param->argc = 0;
    param->argv = NULL;
    for (pt = pParam; pt; pt = pt->next) {
        if (pt->string) {
            param->argv = realloc(param->argv,
                                  (param->argc + 2) * sizeof(*param->argv));
            param->argv[param->argc] = pt->string;
            ++param->argc;
        }
    }
    if (param->argv)
        param->argv[param->argc] = NULL;

    param->start = pStart;
    param->open = pOpen;
    param->param = pParam;
    param->close = pClose;
    param->end = pEnd;

    return param;
}

void
dmxConfigFreeParam(DMXConfigParamPtr p)
{
    DMXConfigParamPtr next;

    if (!p)
        return;
    do {
        next = p->next;
        dmxConfigFreeToken(p->start);
        dmxConfigFreeToken(p->open);
        dmxConfigFreeString(p->param);
        dmxConfigFreeToken(p->close);
        dmxConfigFreeToken(p->end);
        dmxConfigFree(p->argv);
        dmxConfigFree(p);
    } while ((p = next));
}

DMXConfigSubPtr
dmxConfigCreateSub(DMXConfigType type,
                   DMXConfigCommentPtr comment,
                   DMXConfigDisplayPtr display,
                   DMXConfigWallPtr wall,
                   DMXConfigOptionPtr option, DMXConfigParamPtr param)
{
    DMXConfigSubPtr pSub = dmxConfigAlloc(sizeof(*pSub));

    pSub->type = type;
    switch (type) {
    case dmxConfigComment:
        pSub->comment = comment;
        break;
    case dmxConfigDisplay:
        pSub->display = display;
        break;
    case dmxConfigWall:
        pSub->wall = wall;
        break;
    case dmxConfigOption:
        pSub->option = option;
        break;
    case dmxConfigParam:
        pSub->param = param;
        break;
    default:
        dmxConfigLog("Type %d not supported in subentry\n", type);
        break;
    }
    return pSub;
}

void
dmxConfigFreeSub(DMXConfigSubPtr sub)
{
    DMXConfigSubPtr pt;

    for (pt = sub; pt; pt = pt->next) {
        switch (pt->type) {
        case dmxConfigComment:
            dmxConfigFreeComment(pt->comment);
            break;
        case dmxConfigDisplay:
            dmxConfigFreeDisplay(pt->display);
            break;
        case dmxConfigWall:
            dmxConfigFreeWall(pt->wall);
            break;
        case dmxConfigOption:
            dmxConfigFreeOption(pt->option);
            break;
        case dmxConfigParam:
            dmxConfigFreeParam(pt->param);
            break;
        default:
            dmxConfigLog("Type %d not supported in subentry\n", pt->type);
            break;
        }
    }
    dmxConfigFree(sub);
}

DMXConfigSubPtr
dmxConfigSubComment(DMXConfigCommentPtr comment)
{
    return dmxConfigCreateSub(dmxConfigComment, comment, NULL, NULL, NULL,
                              NULL);
}

DMXConfigSubPtr
dmxConfigSubDisplay(DMXConfigDisplayPtr display)
{
    return dmxConfigCreateSub(dmxConfigDisplay, NULL, display, NULL, NULL,
                              NULL);
}

DMXConfigSubPtr
dmxConfigSubWall(DMXConfigWallPtr wall)
{
    return dmxConfigCreateSub(dmxConfigWall, NULL, NULL, wall, NULL, NULL);
}

DMXConfigSubPtr
dmxConfigSubOption(DMXConfigOptionPtr option)
{
    return dmxConfigCreateSub(dmxConfigOption, NULL, NULL, NULL, option, NULL);
}

DMXConfigSubPtr
dmxConfigSubParam(DMXConfigParamPtr param)
{
    return dmxConfigCreateSub(dmxConfigParam, NULL, NULL, NULL, NULL, param);
}

extern DMXConfigSubPtr
dmxConfigAddSub(DMXConfigSubPtr head, DMXConfigSubPtr sub)
{
    DMXConfigSubPtr pt;

    if (!head)
        return sub;
    for (pt = head; pt->next; pt = pt->next);
    pt->next = sub;
    return head;
}

DMXConfigVirtualPtr
dmxConfigCreateVirtual(DMXConfigTokenPtr pStart,
                       DMXConfigStringPtr pName,
                       DMXConfigPairPtr pDim,
                       DMXConfigTokenPtr pOpen,
                       DMXConfigSubPtr pSubentry, DMXConfigTokenPtr pClose)
{
    DMXConfigVirtualPtr pVirtual = dmxConfigAlloc(sizeof(*pVirtual));

    pVirtual->start = pStart;
    pVirtual->vname = pName;
    pVirtual->dim = pDim;
    pVirtual->open = pOpen;
    pVirtual->subentry = pSubentry;
    pVirtual->close = pClose;

    pVirtual->name = pName ? pName->string : NULL;
    pVirtual->width = pDim ? pDim->x : 0;
    pVirtual->height = pDim ? pDim->y : 0;

    return pVirtual;
}

void
dmxConfigFreeVirtual(DMXConfigVirtualPtr virtual)
{
    dmxConfigFreeToken(virtual->start);
    dmxConfigFreeString(virtual->vname);
    dmxConfigFreePair(virtual->dim);
    dmxConfigFreeToken(virtual->open);
    dmxConfigFreeSub(virtual->subentry);
    dmxConfigFreeToken(virtual->close);
    dmxConfigFree(virtual);
}

DMXConfigEntryPtr
dmxConfigCreateEntry(DMXConfigType type,
                     DMXConfigCommentPtr comment, DMXConfigVirtualPtr virtual)
{
    DMXConfigEntryPtr pEntry = dmxConfigAlloc(sizeof(*pEntry));

    pEntry->type = type;
    switch (type) {
    case dmxConfigComment:
        pEntry->comment = comment;
        break;
    case dmxConfigVirtual:
        pEntry->virtual = virtual;
        break;
    default:
        dmxConfigLog("Type %d not supported in entry\n", type);
        break;
    }
    return pEntry;
}

void
dmxConfigFreeEntry(DMXConfigEntryPtr entry)
{
    DMXConfigEntryPtr pt;

    for (pt = entry; pt; pt = pt->next) {
        switch (pt->type) {
        case dmxConfigComment:
            dmxConfigFreeComment(pt->comment);
            break;
        case dmxConfigVirtual:
            dmxConfigFreeVirtual(pt->virtual);
            break;
        default:
            dmxConfigLog("Type %d not supported in entry\n", pt->type);
            break;
        }
    }
    dmxConfigFree(entry);
}

DMXConfigEntryPtr
dmxConfigAddEntry(DMXConfigEntryPtr head,
                  DMXConfigType type,
                  DMXConfigCommentPtr comment, DMXConfigVirtualPtr virtual)
{
    DMXConfigEntryPtr child = dmxConfigCreateEntry(type, comment, virtual);
    DMXConfigEntryPtr pt;

    if (!head)
        return child;

    for (pt = head; pt->next; pt = pt->next);
    pt->next = child;

    return head;
}

DMXConfigEntryPtr
dmxConfigEntryComment(DMXConfigCommentPtr comment)
{
    return dmxConfigCreateEntry(dmxConfigComment, comment, NULL);
}

DMXConfigEntryPtr
dmxConfigEntryVirtual(DMXConfigVirtualPtr virtual)
{
    return dmxConfigCreateEntry(dmxConfigVirtual, NULL, virtual);
}
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d55 2
a56 1
void dmxConfigLog(const char *format, ...)
d59 1
a59 1
    
d67 2
a68 1
void *dmxConfigAlloc(unsigned long bytes)
d71 1
d79 2
a80 2
void *dmxConfigRealloc(void *orig, unsigned long orig_bytes,
                       unsigned long bytes)
d83 1
d92 2
a93 1
const char *dmxConfigCopyString(const char *string, int length)
d96 3
a98 2
    
    if (!length) length = strlen(string);
d100 2
a101 1
    if (length) strncpy(copy, string, length);
d106 2
a107 1
void dmxConfigFree(void *area)
d112 2
a113 2
DMXConfigTokenPtr dmxConfigCreateToken(int token, int line,
                                       const char *comment)
d116 3
a118 2
    pToken->token   = token;
    pToken->line    = line;
d123 2
a124 1
void dmxConfigFreeToken(DMXConfigTokenPtr p)
d126 3
a128 2
    if (!p) return;
    dmxConfigFree((void *)p->comment);
d132 3
a134 3
DMXConfigStringPtr dmxConfigCreateString(int token, int line,
                                         const char *comment,
                                         const char *string)
d138 2
a139 2
    pString->token   = token;
    pString->line    = line;
d141 1
a141 1
    pString->string  = string;
d145 2
a146 1
void dmxConfigFreeString(DMXConfigStringPtr p)
d150 2
a151 1
    if (!p) return;
d154 2
a155 2
        dmxConfigFree((void *)p->comment);
        dmxConfigFree((void *)p->string);
d159 3
a161 4
 
DMXConfigNumberPtr dmxConfigCreateNumber(int token, int line,
                                         const char *comment,
                                         int number)
d165 2
a166 2
    pNumber->token   = token;
    pNumber->line    = line;
d168 1
a168 1
    pNumber->number  = number;
d172 2
a173 1
void dmxConfigFreeNumber(DMXConfigNumberPtr p)
d175 3
a177 2
    if (!p) return;
    dmxConfigFree((void *)p->comment);
d181 3
a183 4
DMXConfigPairPtr dmxConfigCreatePair(int token, int line,
                                     const char *comment,
                                     int x, int y,
                                     int xsign, int ysign)
d187 2
a188 2
    pPair->token   = token;
    pPair->line    = line;
d190 4
a193 4
    pPair->x       = x;
    pPair->y       = y;
    pPair->xsign   = (xsign < 0) ? -1 : 1;
    pPair->ysign   = (ysign < 0) ? -1 : 1;
d197 2
a198 1
void dmxConfigFreePair(DMXConfigPairPtr p)
d200 3
a202 2
    if (!p) return;
    dmxConfigFree((void *)p->comment);
d206 2
a207 2
DMXConfigCommentPtr dmxConfigCreateComment(int token, int line,
                                           const char *comment)
d211 2
a212 2
    pComment->token   = token;
    pComment->line    = line;
d217 2
a218 1
void dmxConfigFreeComment(DMXConfigCommentPtr p)
d220 3
a222 2
    if (!p) return;
    dmxConfigFree((void *)p->comment);
d226 2
a227 2
DMXConfigPartDimPtr dmxConfigCreatePartDim(DMXConfigPairPtr pDim,
                                           DMXConfigPairPtr pOffset)
d230 2
a231 1
    pPart->dim    = pDim;
d236 2
a237 1
void dmxConfigFreePartDim(DMXConfigPartDimPtr p)
d239 2
a240 1
    if (!p) return;
d246 2
a247 2
DMXConfigFullDimPtr dmxConfigCreateFullDim(DMXConfigPartDimPtr pScrn,
                                           DMXConfigPartDimPtr pRoot)
d250 1
d256 2
a257 1
void dmxConfigFreeFullDim(DMXConfigFullDimPtr p)
d259 2
a260 1
    if (!p) return;
d266 5
a270 5
DMXConfigDisplayPtr dmxConfigCreateDisplay(DMXConfigTokenPtr pStart,
                                           DMXConfigStringPtr pName,
                                           DMXConfigFullDimPtr pDim,
                                           DMXConfigPairPtr pOrigin,
                                           DMXConfigTokenPtr pEnd)
d274 9
a282 9
    pDisplay->start          = pStart;
    pDisplay->dname          = pName;
    pDisplay->dim            = pDim;
    pDisplay->origin         = pOrigin;
    pDisplay->end            = pEnd;

    pDisplay->name           = pName ? pName->string : NULL;
    pDisplay->rootXOrigin    = pOrigin ? pOrigin->x : 0;
    pDisplay->rootYOrigin    = pOrigin ? pOrigin->y : 0;
d285 1
a285 1
        pDisplay->scrnWidth  = pDim->scrn->dim->x;
d289 4
a292 4
        pDisplay->scrnX      = pDim->scrn->offset->x;
        pDisplay->scrnY      = pDim->scrn->offset->y;
        pDisplay->scrnXSign  = pDim->scrn->offset->xsign;
        pDisplay->scrnYSign  = pDim->scrn->offset->ysign;
d294 1
a294 1
    
d297 1
a297 1
            pDisplay->rootWidth  = pDim->root->dim->x;
d301 4
a304 4
            pDisplay->rootX      = pDim->root->offset->x;
            pDisplay->rootY      = pDim->root->offset->y;
            pDisplay->rootXSign  = pDim->root->offset->xsign;
            pDisplay->rootYSign  = pDim->root->offset->ysign;
d306 2
a307 1
    } else {                    /* If no root specification, copy width
d311 1
a311 1
        pDisplay->rootWidth  = pDisplay->scrnWidth;
a314 1

d318 2
a319 1
void dmxConfigFreeDisplay(DMXConfigDisplayPtr p)
d321 2
a322 1
    if (!p) return;
d330 5
a334 5
DMXConfigWallPtr dmxConfigCreateWall(DMXConfigTokenPtr pStart,
                                     DMXConfigPairPtr pWallDim,
                                     DMXConfigPairPtr pDisplayDim,
                                     DMXConfigStringPtr pNameList,
                                     DMXConfigTokenPtr pEnd)
d338 2
a339 2
    pWall->start      = pStart;
    pWall->wallDim    = pWallDim;
d341 2
a342 2
    pWall->nameList   = pNameList;
    pWall->end        = pEnd;
d344 4
a347 4
    pWall->width      = pDisplayDim ? pDisplayDim->x : 0;
    pWall->height     = pDisplayDim ? pDisplayDim->y : 0;
    pWall->xwall      = pWallDim    ? pWallDim->x    : 0;
    pWall->ywall      = pWallDim    ? pWallDim->y    : 0;
d352 2
a353 1
void dmxConfigFreeWall(DMXConfigWallPtr p)
d355 2
a356 1
    if (!p) return;
d365 3
a367 3
DMXConfigOptionPtr dmxConfigCreateOption(DMXConfigTokenPtr pStart,
                                         DMXConfigStringPtr pOption,
                                         DMXConfigTokenPtr pEnd)
d369 2
a370 2
    int                length = 0;
    int                offset = 0;
d375 2
a376 1
        if (p->string) length += strlen(p->string) + 1;
d380 1
a380 1
    
d384 1
d387 2
a388 1
            if (p->next) option->string[offset++] = ' ';
d393 1
a393 1
    option->start  = pStart;
d395 1
a395 1
    option->end    = pEnd;
d400 2
a401 1
void dmxConfigFreeOption(DMXConfigOptionPtr p)
d403 2
a404 1
    if (!p) return;
d412 2
a413 2
const char **dmxConfigLookupParam(DMXConfigParamPtr p, const char *key,
                                  int *argc)
d423 1
a423 1
    *argc  = 0;
d427 5
a431 5
DMXConfigParamPtr dmxConfigCreateParam(DMXConfigTokenPtr pStart,
                                       DMXConfigTokenPtr pOpen,
                                       DMXConfigStringPtr pParam,
                                       DMXConfigTokenPtr pClose,
                                       DMXConfigTokenPtr pEnd)
d433 1
a433 1
    DMXConfigParamPtr  param = dmxConfigAlloc(sizeof(*param));
d441 1
a441 1
                                  (param->argc+2) * sizeof(*param->argv));
d446 2
a447 1
    if (param->argv) param->argv[param->argc] = NULL;
d450 1
a450 1
    param->open  = pOpen;
d453 1
a453 1
    param->end   = pEnd;
d458 2
a459 1
void dmxConfigFreeParam(DMXConfigParamPtr p)
d463 2
a464 1
    if (!p) return;
d477 6
a482 6
DMXConfigSubPtr dmxConfigCreateSub(DMXConfigType type,
                                   DMXConfigCommentPtr comment,
                                   DMXConfigDisplayPtr display,
                                   DMXConfigWallPtr wall,
                                   DMXConfigOptionPtr option,
                                   DMXConfigParamPtr param)
d485 1
d488 18
a505 6
    case dmxConfigComment: pSub->comment = comment;                     break;
    case dmxConfigDisplay: pSub->display = display;                     break;
    case dmxConfigWall:    pSub->wall    = wall;                        break;
    case dmxConfigOption:  pSub->option  = option;                      break;
    case dmxConfigParam:   pSub->param   = param;                       break;
    default: dmxConfigLog("Type %d not supported in subentry\n", type); break;
d510 2
a511 1
void dmxConfigFreeSub(DMXConfigSubPtr sub)
d517 15
a531 5
        case dmxConfigComment: dmxConfigFreeComment(pt->comment); break;
        case dmxConfigDisplay: dmxConfigFreeDisplay(pt->display); break;
        case dmxConfigWall:    dmxConfigFreeWall(pt->wall);       break;
        case dmxConfigOption:  dmxConfigFreeOption(pt->option);   break;
        case dmxConfigParam:   dmxConfigFreeParam(pt->param);     break;
d540 2
a541 1
DMXConfigSubPtr dmxConfigSubComment(DMXConfigCommentPtr comment)
d547 2
a548 1
DMXConfigSubPtr dmxConfigSubDisplay(DMXConfigDisplayPtr display)
d554 2
a555 1
DMXConfigSubPtr dmxConfigSubWall(DMXConfigWallPtr wall)
d560 2
a561 1
DMXConfigSubPtr dmxConfigSubOption(DMXConfigOptionPtr option)
d566 2
a567 1
DMXConfigSubPtr dmxConfigSubParam(DMXConfigParamPtr param)
d572 2
a573 2
extern DMXConfigSubPtr dmxConfigAddSub(DMXConfigSubPtr head,
                                       DMXConfigSubPtr sub)
d576 3
a578 2
    
    if (!head) return sub;
d584 6
a589 6
DMXConfigVirtualPtr dmxConfigCreateVirtual(DMXConfigTokenPtr pStart,
                                           DMXConfigStringPtr pName,
                                           DMXConfigPairPtr pDim,
                                           DMXConfigTokenPtr pOpen,
                                           DMXConfigSubPtr pSubentry,
                                           DMXConfigTokenPtr pClose)
d593 4
a596 4
    pVirtual->start    = pStart;
    pVirtual->vname    = pName;
    pVirtual->dim      = pDim;
    pVirtual->open     = pOpen;
d598 5
a602 1
    pVirtual->close    = pClose;
a603 4
    pVirtual->name     = pName ? pName->string : NULL;
    pVirtual->width    = pDim ? pDim->x : 0;
    pVirtual->height   = pDim ? pDim->y : 0;
    
d607 2
a608 1
void dmxConfigFreeVirtual(DMXConfigVirtualPtr virtual)
d619 3
a621 3
DMXConfigEntryPtr dmxConfigCreateEntry(DMXConfigType type,
                                       DMXConfigCommentPtr comment,
                                       DMXConfigVirtualPtr virtual)
d624 1
d627 9
a635 3
    case dmxConfigComment: pEntry->comment = comment;                break;
    case dmxConfigVirtual: pEntry->virtual = virtual;                break;
    default: dmxConfigLog("Type %d not supported in entry\n", type); break;
d640 2
a641 1
void dmxConfigFreeEntry(DMXConfigEntryPtr entry)
d647 6
a652 2
        case dmxConfigComment: dmxConfigFreeComment(pt->comment); break;
        case dmxConfigVirtual: dmxConfigFreeVirtual(pt->virtual); break;
d661 4
a664 4
DMXConfigEntryPtr dmxConfigAddEntry(DMXConfigEntryPtr head,
                                    DMXConfigType type,
                                    DMXConfigCommentPtr comment,
                                    DMXConfigVirtualPtr virtual)
d669 2
a670 1
    if (!head) return child;
d678 2
a679 1
DMXConfigEntryPtr dmxConfigEntryComment(DMXConfigCommentPtr comment)
d684 2
a685 1
DMXConfigEntryPtr dmxConfigEntryVirtual(DMXConfigVirtualPtr virtual)
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d101 1
a101 1
    if (area) free(area);
d373 1
a373 1
    if (p->string) free(p->string);
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
d68 1
a68 1
    void *area = malloc(bytes);
a72 1
    memset(area, 0, bytes);
a249 2

    memset(pDisplay, 0, sizeof(*pDisplay));
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
@

