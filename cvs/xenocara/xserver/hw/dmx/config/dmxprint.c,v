head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.18
	OPENBSD_5_0:1.1.1.2.0.16
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.12
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.14
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.11.07.16.48.52;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	7pAEtF6Y5EgemkuY;

1.3
date	2015.09.16.19.10.21;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	Te1daavkBLskZ8gc;

1.2
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.23.30;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.23.30;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.40;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.17.4.
tested by naddy@@
@
text
@/*
 * Copyright 2002 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   Rickard E. (Rik) Faith <faith@@redhat.com>
 *
 */

/** \file
 *
 * This file provides support routines and helper functions to be used
 * to pretty-print DMX configurations.
 *
 * Because the DMX configuration file parsing should be capable of being
 * used in a stand-alone fashion (i.e., independent from the DMX server
 * source tree), no dependencies on other DMX routines are made. */

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#endif

#include "dmxconfig.h"
#include "dmxparse.h"
#include "dmxprint.h"
#include "parser.h"
#include <stdio.h>
#include <stdarg.h>
#include <ctype.h>

static FILE *str = NULL;
static int indent = 0;
static int pos = 0;

/** Stack of indentation information used for pretty-printing
 * configuration information. */
static struct stack {
    int base;
    int comment;
    int step;
    struct stack *next;
} *stack, initialStack = {
0, 0, 4, NULL};

static void
dmxConfigIndent(void)
{
    int i;

    if (indent < 0)
        indent = 0;
    if (indent > 40)
        indent = 40;
    for (i = 0; i < indent; i++)
        fprintf(str, " ");
}

static void
dmxConfigNewline(void)
{
    if (pos)
        fprintf(str, "\n");
    pos = 0;
}

static void
dmxConfigPushState(int base, int comment, int step)
{
    struct stack *new = dmxConfigAlloc(sizeof(*new));

    new->base = base;
    new->comment = comment;
    new->step = step;
    new->next = stack;
    stack = new;
    indent = base;
    dmxConfigNewline();
}

static void
dmxConfigPushComment(void)
{
    if (stack)
        indent = stack->comment;
}

static void
dmxConfigPushStep(void)
{
    if (stack)
        indent = stack->step;
}

static void
dmxConfigPopState(void)
{
    struct stack *old = stack;

    if (!stack)
        return;
    indent = old->base;
    stack = old->next;
    if (!stack)
        dmxConfigLog("Stack underflow\n");
    dmxConfigFree(old);
    dmxConfigNewline();
}

static void _X_ATTRIBUTE_PRINTF(4, 5)
dmxConfigOutput(int addSpace, int doNewline, const char *comment,
                const char *format, ...)
{
    va_list args;

    if (!pos)
        dmxConfigIndent();
    else if (addSpace)
        fprintf(str, " ");

    if (format) {
        va_start(args, format);
        /* RATS: This hasn't been audited -- it
         * could probably result in a buffer
         * overflow. */
        pos += vfprintf(str, format, args);     /* assumes no newlines! */
        va_end(args);
    }

    if (comment) {
        if (pos)
            fprintf(str, " ");
        pos += fprintf(str, "#%s", comment);
        dmxConfigNewline();
        dmxConfigPushComment();
    }
    else if (doNewline)
        dmxConfigNewline();
}

static void
dmxConfigPrintComment(DMXConfigCommentPtr p)
{
    dmxConfigOutput(1, 1, p->comment, NULL);
}

static void
dmxConfigPrintTokenFlag(DMXConfigTokenPtr p, int flag)
{
    if (!p)
        return;
    switch (p->token) {
    case T_VIRTUAL:
        dmxConfigPushState(0, 4, 4);
        dmxConfigOutput(0, 0, p->comment, "virtual");
        break;
    case T_DISPLAY:
        dmxConfigPushState(4, 12, 16);
        dmxConfigOutput(0, 0, p->comment, "display");
        break;
    case T_WALL:
        dmxConfigPushState(4, 12, 16);
        dmxConfigOutput(0, 0, p->comment, "wall");
        break;
    case T_OPTION:
        dmxConfigPushState(4, 12, 16);
        dmxConfigOutput(0, 0, p->comment, "option");
        break;
    case T_PARAM:
        dmxConfigPushState(4, 8, 12);
        dmxConfigOutput(0, 0, p->comment, "param");
        break;
    case ';':
        dmxConfigOutput(0, 1, p->comment, ";");
        if (flag)
            dmxConfigPopState();
        break;
    case '{':
        dmxConfigOutput(1, 1, p->comment, "{");
        dmxConfigPushStep();
        break;
    case '}':
        if (flag)
            dmxConfigPopState();
        dmxConfigOutput(0, 1, p->comment, "}");
        break;
    case '/':
        dmxConfigOutput(1, 0, NULL, "/");
        break;
    default:
        dmxConfigLog("unknown token %d on line %d\n", p->token, p->line);
    }
}

static void
dmxConfigPrintToken(DMXConfigTokenPtr p)
{
    dmxConfigPrintTokenFlag(p, 1);
}

static void
dmxConfigPrintTokenNopop(DMXConfigTokenPtr p)
{
    dmxConfigPrintTokenFlag(p, 0);
}

static int
dmxConfigPrintQuotedString(const char *s)
{
    const char *pt;

    if (!s || !s[0])
        return 1;               /* Quote empty string */
    for (pt = s; *pt; ++pt)
        if (isspace(*pt))
            return 1;
    return 0;
}

static void
dmxConfigPrintString(DMXConfigStringPtr p, int quote)
{
    DMXConfigStringPtr pt;

    if (!p)
        return;
    for (pt = p; pt; pt = pt->next) {
        if (quote && dmxConfigPrintQuotedString(pt->string)) {
            dmxConfigOutput(1, 0, pt->comment, "\"%s\"",
                            pt->string ? pt->string : "");
        }
        else
            dmxConfigOutput(1, 0, pt->comment, "%s",
                            pt->string ? pt->string : "");
    }
}

static int
dmxConfigPrintPair(DMXConfigPairPtr p, int addSpace)
{
    if (!p)
        return 0;
    if (p->token == T_OFFSET) {
        if (!p->comment && !p->x && !p->y && p->xsign >= 0 && p->ysign >= 0)
            return 0;
        dmxConfigOutput(addSpace, 0, p->comment, "%c%d%c%d",
                        p->xsign < 0 ? '-' : '+', p->x,
                        p->ysign < 0 ? '-' : '+', p->y);
    }
    else {
        if (!p->comment && !p->x && !p->y)
            return 0;
        dmxConfigOutput(addSpace, 0, p->comment, "%s%dx%d",
                        (p->token == T_ORIGIN) ? "@@" : "", p->x, p->y);
    }
    return 1;
}

static void
dmxConfigPrintDisplay(DMXConfigDisplayPtr p)
{
    DMXConfigToken dummyStart = { T_DISPLAY, 0, NULL };
    DMXConfigToken dummyEnd = { ';', 0, NULL };
    DMXConfigToken dummySep = { '/', 0, NULL };
    DMXConfigString dummyName = { T_STRING, 0, NULL, NULL, NULL };
    DMXConfigPair dummySDim = { T_DIMENSION, 0, NULL, 0, 0, 0, 0 };
    DMXConfigPair dummySOffset = { T_OFFSET, 0, NULL, 0, 0, 0, 0 };
    DMXConfigPair dummyRDim = { T_DIMENSION, 0, NULL, 0, 0, 0, 0 };
    DMXConfigPair dummyROffset = { T_OFFSET, 0, NULL, 0, 0, 0, 0 };
    DMXConfigPair dummyOrigin = { T_ORIGIN, 0, NULL, 0, 0, 0, 0 };
    int output;

    if (p->dname)
        p->dname->string = p->name;
    else
        dummyName.string = p->name;

    if (p->dim && p->dim->scrn && p->dim->scrn->dim) {
        p->dim->scrn->dim->x = p->scrnWidth;
        p->dim->scrn->dim->y = p->scrnHeight;
    }
    else {
        dummySDim.x = p->scrnWidth;
        dummySDim.y = p->scrnHeight;
    }

    if (p->dim && p->dim->scrn && p->dim->scrn->offset) {
        p->dim->scrn->offset->x = p->scrnX;
        p->dim->scrn->offset->y = p->scrnY;
    }
    else {
        dummySOffset.x = p->scrnX;
        dummySOffset.y = p->scrnY;
    }

    if (p->dim && p->dim->root && p->dim->root->dim) {
        p->dim->root->dim->x = p->rootWidth;
        p->dim->root->dim->y = p->rootHeight;
    }
    else {
        dummyRDim.x = p->rootWidth;
        dummyRDim.y = p->rootHeight;
    }

    if (p->dim && p->dim->root && p->dim->root->offset) {
        p->dim->root->offset->x = p->rootX;
        p->dim->root->offset->y = p->rootY;
    }
    else {
        dummyROffset.x = p->rootX;
        dummyROffset.y = p->rootY;
    }

    if (p->origin) {
        p->origin->x = p->rootXOrigin, p->origin->y = p->rootYOrigin;
        p->origin->xsign = p->rootXSign, p->origin->ysign = p->rootYSign;
    }
    else {
        dummyOrigin.x = p->rootXOrigin, dummyOrigin.y = p->rootYOrigin;
        dummyOrigin.xsign = p->rootXSign, dummyOrigin.ysign = p->rootYSign;
    }

    dmxConfigPrintToken(p->start ? p->start : &dummyStart);
    dmxConfigPrintString(p->dname ? p->dname : &dummyName, 1);

    if (p->dim && p->dim->scrn && p->dim->scrn->dim)
        output = dmxConfigPrintPair(p->dim->scrn->dim, 1);
    else
        output = dmxConfigPrintPair(&dummySDim, 1);
    if (p->dim && p->dim->scrn && p->dim->scrn->offset)
        dmxConfigPrintPair(p->dim->scrn->offset, !output);
    else
        dmxConfigPrintPair(&dummySOffset, !output);

    if (p->scrnWidth != p->rootWidth
        || p->scrnHeight != p->rootHeight || p->rootX || p->rootY) {
        dmxConfigPrintToken(&dummySep);
        if (p->dim && p->dim->root && p->dim->root->dim)
            output = dmxConfigPrintPair(p->dim->root->dim, 1);
        else
            output = dmxConfigPrintPair(&dummyRDim, 1);
        if (p->dim && p->dim->root && p->dim->root->offset)
            dmxConfigPrintPair(p->dim->root->offset, !output);
        else
            dmxConfigPrintPair(&dummyROffset, !output);
    }

    dmxConfigPrintPair(p->origin ? p->origin : &dummyOrigin, 1);
    dmxConfigPrintToken(p->end ? p->end : &dummyEnd);
}

static void
dmxConfigPrintWall(DMXConfigWallPtr p)
{
    dmxConfigPrintToken(p->start);
    dmxConfigPrintPair(p->wallDim, 1);
    dmxConfigPrintPair(p->displayDim, 1);
    dmxConfigPrintString(p->nameList, 1);
    dmxConfigPrintToken(p->end);
}

static void
dmxConfigPrintOption(DMXConfigOptionPtr p)
{
    DMXConfigToken dummyStart = { T_OPTION, 0, NULL };
    DMXConfigString dummyOption = { T_STRING, 0, NULL, NULL, NULL };
    DMXConfigToken dummyEnd = { ';', 0, NULL };

    dummyOption.string = p->string;

    dmxConfigPrintToken(p->start ? p->start : &dummyStart);
    dmxConfigPrintString(&dummyOption, 0);
    dmxConfigPrintToken(p->end ? p->end : &dummyEnd);
}

static void
dmxConfigPrintParam(DMXConfigParamPtr p)
{
    if (!p)
        return;
    if (p->start) {
        if (p->open && p->close) {
            dmxConfigPrintToken(p->start);
            dmxConfigPrintToken(p->open);
            dmxConfigPrintParam(p->next);
            dmxConfigPrintToken(p->close);
        }
        else if (p->end && p->param) {
            dmxConfigPrintToken(p->start);
            dmxConfigPrintString(p->param, 1);
            dmxConfigPrintToken(p->end);
        }
        else
            dmxConfigLog("dmxConfigPrintParam: cannot handle format (a)\n");
    }
    else if (p->end && p->param) {
        dmxConfigPrintString(p->param, 1);
        dmxConfigPrintTokenNopop(p->end);
        dmxConfigPrintParam(p->next);
    }
    else
        dmxConfigLog("dmxConfigPrintParam: cannot handle format (b)\n");
}

static void
dmxConfigPrintSub(DMXConfigSubPtr p)
{
    DMXConfigSubPtr pt;

    if (!p)
        return;
    for (pt = p; pt; pt = pt->next) {
        switch (pt->type) {
        case dmxConfigComment:
            dmxConfigPrintComment(pt->comment);
            break;
        case dmxConfigDisplay:
            dmxConfigPrintDisplay(pt->display);
            break;
        case dmxConfigWall:
            dmxConfigPrintWall(pt->wall);
            break;
        case dmxConfigOption:
            dmxConfigPrintOption(pt->option);
            break;
        case dmxConfigParam:
            dmxConfigPrintParam(pt->param);
            break;
        default:
            dmxConfigLog("dmxConfigPrintSub:"
                         " cannot handle type %d in subentry\n", pt->type);
        }
    }
}

static void
dmxConfigPrintVirtual(DMXConfigVirtualPtr p)
{
    DMXConfigToken dummyStart = { T_VIRTUAL, 0, NULL };
    DMXConfigToken dummyOpen = { '{', 0, NULL };
    DMXConfigToken dummyClose = { '}', 0, NULL };
    DMXConfigString dummyName = { T_STRING, 0, NULL, NULL, NULL };
    DMXConfigPair dummyDim = { T_DIMENSION, 0, NULL, 0, 0 };

    if (p->vname)
        p->vname->string = p->name;
    else
        dummyName.string = p->name;

    if (p->dim)
        p->dim->x = p->width, p->dim->y = p->height;
    else
        dummyDim.x = p->width, dummyDim.y = p->height;

    dmxConfigPrintToken(p->start ? p->start : &dummyStart);
    dmxConfigPrintString(p->vname ? p->vname : &dummyName, 1);
    dmxConfigPrintPair(p->dim ? p->dim : &dummyDim, 1);
    dmxConfigPrintToken(p->open ? p->open : &dummyOpen);
    dmxConfigPrintSub(p->subentry);
    dmxConfigPrintToken(p->close ? p->close : &dummyClose);
}

/** The configuration information in \a entry will be pretty-printed to
 * the \a stream.  If \a stream is NULL, then stdout will be used. */
void
dmxConfigPrint(FILE * stream, DMXConfigEntryPtr entry)
{
    DMXConfigEntryPtr pt;

    if (!stream)
        str = stdout;
    else
        str = stream;

    stack = &initialStack;

    for (pt = entry; pt; pt = pt->next) {
        switch (pt->type) {
        case dmxConfigComment:
            dmxConfigPrintComment(pt->comment);
            break;
        case dmxConfigVirtual:
            dmxConfigPrintVirtual(pt->virtual);
            break;
        default:
            dmxConfigLog("dmxConfigPrint: cannot handle type %d in entry\n",
                         pt->type);
        }
    }
    if (pos)
        dmxConfigNewline();
}

/** The configuration information in \a p will be pretty-printed to the
 * \a stream.  If \a stream is NULL, then stdout will be used. */
void
dmxConfigVirtualPrint(FILE * stream, DMXConfigVirtualPtr p)
{
    if (!stream)
        str = stdout;
    else
        str = stream;

    stack = &initialStack;

    dmxConfigPrintVirtual(p);
    if (pos)
        dmxConfigNewline();
}
@


1.3
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d133 1
a133 1
static void
a263 2
    const char *format = NULL;

a265 11
    switch (p->token) {
    case T_ORIGIN:
        format = "@@%dx%d";
        break;
    case T_DIMENSION:
        format = "%dx%d";
        break;
    case T_OFFSET:
        format = "%c%d%c%d";
        break;
    }
d269 1
a269 1
        dmxConfigOutput(addSpace, 0, p->comment, format,
d276 2
a277 1
        dmxConfigOutput(addSpace, 0, p->comment, format, p->x, p->y);
@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d38 1
a38 1
 * 
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
d55 3
a57 3
static FILE *str   = NULL;
static int  indent = 0;
static int  pos    = 0;
d62 3
a64 3
    int          base;
    int          comment;
    int          step;
d66 2
a67 1
} *stack, initialStack = { 0, 0, 4, NULL };
d69 2
a70 1
static void dmxConfigIndent(void)
d73 7
a79 3
    if (indent < 0)  indent = 0;
    if (indent > 40) indent = 40;
    for (i = 0; i < indent; i++) fprintf(str, " ");
d82 2
a83 1
static void dmxConfigNewline(void)
d85 2
a86 1
    if (pos) fprintf(str, "\n");
d90 2
a91 1
static void dmxConfigPushState(int base, int comment, int step)
d94 2
a95 1
    new->base    = base;
d97 4
a100 4
    new->step    = step;
    new->next    = stack;
    stack        = new;
    indent       = base;
d104 2
a105 1
static void dmxConfigPushComment(void)
d107 2
a108 1
    if (stack) indent = stack->comment;
d111 2
a112 1
static void dmxConfigPushStep(void)
d114 2
a115 1
    if (stack) indent = stack->step;
d118 2
a119 1
static void dmxConfigPopState(void)
d123 2
a124 1
    if (!stack) return;
d126 3
a128 2
    stack  = old->next;
    if (!stack) dmxConfigLog("Stack underflow\n");
d133 3
a135 2
static void dmxConfigOutput(int addSpace, int doNewline, const char *comment,
                            const char *format, ...)
d139 4
a142 2
    if (!pos) dmxConfigIndent();
    else if (addSpace) fprintf(str, " ");
d146 4
a149 4
                                /* RATS: This hasn't been audited -- it
                                 * could probably result in a buffer
                                 * overflow. */
        pos += vfprintf(str, format, args); /* assumes no newlines! */
d154 2
a155 1
        if (pos) fprintf(str, " ");
d159 3
a161 1
    } else if (doNewline) dmxConfigNewline();
d164 2
a165 1
static void dmxConfigPrintComment(DMXConfigCommentPtr p)
d170 2
a171 1
static void dmxConfigPrintTokenFlag(DMXConfigTokenPtr p, int flag)
d173 2
a174 1
    if (!p) return;
d198 2
a199 1
        if (flag) dmxConfigPopState();
d206 2
a207 1
        if (flag) dmxConfigPopState();
d218 2
a219 1
static void dmxConfigPrintToken(DMXConfigTokenPtr p)
d224 2
a225 1
static void dmxConfigPrintTokenNopop(DMXConfigTokenPtr p)
d230 2
a231 1
static int dmxConfigPrintQuotedString(const char *s)
d235 5
a239 2
    if (!s || !s[0]) return 1;  /* Quote empty string */
    for (pt = s; *pt; ++pt) if (isspace(*pt)) return 1;
d243 2
a244 1
static void dmxConfigPrintString(DMXConfigStringPtr p, int quote)
d247 3
a249 2
    
    if (!p) return;
d254 2
a255 1
            } else
d261 2
a262 1
static int dmxConfigPrintPair(DMXConfigPairPtr p, int addSpace)
d265 3
a267 2
    
    if (!p) return 0;
d269 9
a277 3
    case T_ORIGIN:    format = "@@%dx%d";   break;
    case T_DIMENSION: format = "%dx%d";    break;
    case T_OFFSET:    format = "%c%d%c%d"; break;
d285 4
a288 2
    } else {
        if (!p->comment && !p->x && !p->y) return 0;
d294 2
a295 1
static void dmxConfigPrintDisplay(DMXConfigDisplayPtr p)
d297 16
a312 14
    DMXConfigToken  dummyStart   = { T_DISPLAY, 0, NULL };
    DMXConfigToken  dummyEnd     = { ';', 0, NULL };
    DMXConfigToken  dummySep     = { '/', 0, NULL };
    DMXConfigString dummyName    = { T_STRING, 0, NULL, NULL, NULL };
    DMXConfigPair   dummySDim    = { T_DIMENSION, 0, NULL, 0, 0, 0, 0 };
    DMXConfigPair   dummySOffset = { T_OFFSET, 0, NULL, 0, 0, 0, 0 };
    DMXConfigPair   dummyRDim    = { T_DIMENSION, 0, NULL, 0, 0, 0, 0 };
    DMXConfigPair   dummyROffset = { T_OFFSET, 0, NULL, 0, 0, 0, 0 };
    DMXConfigPair   dummyOrigin  = { T_ORIGIN, 0, NULL, 0, 0, 0, 0 };
    int             output;

    if (p->dname) p->dname->string = p->name;
    else          dummyName.string = p->name;
    
d314 6
a319 5
        p->dim->scrn->dim->x    = p->scrnWidth;
        p->dim->scrn->dim->y    = p->scrnHeight;
    } else {
        dummySDim.x             = p->scrnWidth;
        dummySDim.y             = p->scrnHeight;
a324 3
    } else {
        dummySOffset.x          = p->scrnX;
        dummySOffset.y          = p->scrnY;
d326 5
a330 1
    
d332 6
a337 5
        p->dim->root->dim->x    = p->rootWidth;
        p->dim->root->dim->y    = p->rootHeight;
    } else {
        dummyRDim.x             = p->rootWidth;
        dummyRDim.y             = p->rootHeight;
d343 4
a346 3
    } else {
        dummyROffset.x          = p->rootX;
        dummyROffset.y          = p->rootY;
d350 6
a355 5
        p->origin->x     = p->rootXOrigin, p->origin->y     = p->rootYOrigin;
        p->origin->xsign = p->rootXSign,   p->origin->ysign = p->rootYSign;
    } else {
        dummyOrigin.x     = p->rootXOrigin, dummyOrigin.y     = p->rootYOrigin;
        dummyOrigin.xsign = p->rootXSign,   dummyOrigin.ysign = p->rootYSign;
d357 1
a357 1
    
d371 1
a371 3
        || p->scrnHeight != p->rootHeight
        || p->rootX
        || p->rootY) {
d387 2
a388 1
static void dmxConfigPrintWall(DMXConfigWallPtr p)
d397 2
a398 1
static void dmxConfigPrintOption(DMXConfigOptionPtr p)
d400 1
a400 1
    DMXConfigToken  dummyStart  = { T_OPTION, 0, NULL };
d402 1
a402 1
    DMXConfigToken  dummyEnd    = { ';', 0, NULL };
d411 2
a412 1
static void dmxConfigPrintParam(DMXConfigParamPtr p)
d414 2
a415 1
    if (!p) return;
d422 2
a423 1
        } else if (p->end && p->param) {
d427 2
a428 1
        } else
d430 2
a431 1
    } else if (p->end && p->param) {
d435 2
a436 1
    } else
d440 2
a441 1
static void dmxConfigPrintSub(DMXConfigSubPtr p)
d445 2
a446 1
    if (!p) return;
d449 15
a463 5
        case dmxConfigComment: dmxConfigPrintComment(pt->comment); break;
        case dmxConfigDisplay: dmxConfigPrintDisplay(pt->display); break;
        case dmxConfigWall:    dmxConfigPrintWall(pt->wall);       break;
        case dmxConfigOption:  dmxConfigPrintOption(pt->option);   break;
        case dmxConfigParam:   dmxConfigPrintParam(pt->param);     break;
d471 2
a472 1
static void dmxConfigPrintVirtual(DMXConfigVirtualPtr p)
d474 15
a488 12
    DMXConfigToken  dummyStart = { T_VIRTUAL, 0, NULL };
    DMXConfigToken  dummyOpen  = { '{', 0, NULL };
    DMXConfigToken  dummyClose = { '}', 0, NULL };
    DMXConfigString dummyName  = { T_STRING, 0, NULL, NULL, NULL };
    DMXConfigPair   dummyDim   = { T_DIMENSION, 0, NULL, 0, 0 };

    if (p->vname) p->vname->string = p->name;
    else          dummyName.string = p->name;

    if (p->dim) p->dim->x  = p->width, p->dim->y  = p->height;
    else        dummyDim.x = p->width, dummyDim.y = p->height;
    
d500 2
a501 1
void dmxConfigPrint(FILE *stream, DMXConfigEntryPtr entry)
d505 5
a509 3
    if (!stream) str = stdout;
    else         str = stream;
    
d511 1
a511 1
    
d514 6
a519 2
        case dmxConfigComment: dmxConfigPrintComment(pt->comment); break;
        case dmxConfigVirtual: dmxConfigPrintVirtual(pt->virtual); break;
d525 2
a526 1
    if (pos) dmxConfigNewline();
d531 2
a532 1
void dmxConfigVirtualPrint(FILE *stream, DMXConfigVirtualPtr p)
d534 4
a537 2
    if (!stream) str = stdout;
    else         str = stream;
d540 1
a540 1
    
d542 2
a543 1
    if (pos) dmxConfigNewline();
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
@

