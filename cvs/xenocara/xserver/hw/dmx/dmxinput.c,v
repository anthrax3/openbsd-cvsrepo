head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.18
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.16
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.14
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.49;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.27;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.15.00.17.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.42;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.42;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.22;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * Copyright 2001,2002 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   David H. Dawes <dawes@@xfree86.org>
 *   Kevin E. Martin <kem@@redhat.com>
 *   Rickard E. (Rik) Faith <faith@@redhat.com>
 *
 */

/** \file
 * Provide the main entry points for input initialization and processing
 * that arequired by the dix layer.
 */

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#endif

#include "dmx.h"
#include "dmxlog.h"
#include "dmxinput.h"

#include "inputstr.h"
#include "input.h"
#include "mi.h"

/** Returns TRUE if the key is a valid modifier.  For PC-class
 * keyboards, all keys can be used as modifiers, so return TRUE
 * always. */
Bool
LegalModifier(unsigned int key, DeviceIntPtr pDev)
{
    return TRUE;
}

/** Called from dix/main.c on each server generation to initialize
 * inputs.  All the work is done in dmxInputInit.  \see
 * dmxInputInit() */
void
InitInput(int argc, char **argv)
{
    int i;
    DMXInputInfo *dmxInput;

    if (!dmxNumInputs)
        dmxLog(dmxFatal, "InitInput: no inputs specified\n");

    for (i = 0, dmxInput = &dmxInputs[0]; i < dmxNumInputs; i++, dmxInput++)
        dmxInputInit(dmxInput);

    mieqInit();
}

void
CloseInput(void)
{
    mieqFini();
}

/** Called from dix/dispatch.c in Dispatch() whenever input events
 * require processing.  All the work is done in the lower level
 * routines. */
void
ProcessInputEvents(void)
{
    int i;
    DMXInputInfo *dmxInput;

    for (i = 0, dmxInput = &dmxInputs[0]; i < dmxNumInputs; i++, dmxInput++)
        if (!dmxInput->detached && dmxInput->processInputEvents)
            dmxInput->processInputEvents(dmxInput);
}

/** This routine is called from \a dmxwindow.c whenever the layout of
 * windows on the display might have changed.  This information is used
 * by input drivers (currently only the console driver) that provide
 * information about window layout to the user. */
void
dmxUpdateWindowInfo(DMXUpdateType type, WindowPtr pWindow)
{
    int i;
    DMXInputInfo *dmxInput;

    for (i = 0, dmxInput = &dmxInputs[0]; i < dmxNumInputs; i++, dmxInput++)
        if (!dmxInput->detached && dmxInput->updateWindowInfo)
            dmxInput->updateWindowInfo(dmxInput, type, pWindow);
}

int
NewInputDeviceRequest(InputOption *options, InputAttributes * attrs,
                      DeviceIntPtr *pdev)
{
    return BadRequest;
}

void
DeleteInputDeviceRequest(DeviceIntPtr pDev)
{
}
@


1.4
log
@Update to xserver 1.11.2
@
text
@d56 2
a57 1
Bool LegalModifier(unsigned int key, DeviceIntPtr pDev)
d65 2
a66 1
void InitInput(int argc, char **argv)
d68 1
a68 1
    int          i;
d73 1
a73 1
    
d80 2
a81 1
void CloseInput(void)
d89 2
a90 1
void ProcessInputEvents(void)
d92 1
a92 1
    int          i;
d104 2
a105 1
void dmxUpdateWindowInfo(DMXUpdateType type, WindowPtr pWindow)
d107 1
a107 1
    int          i;
d116 2
a117 2
NewInputDeviceRequest (InputOption *options, InputAttributes *attrs,
                       DeviceIntPtr *pdev)
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d80 1
@


1.2
log
@Update to xserver 1.4.2. Tested by landry@@, ckuethe@@, jsing@@ mbalmer@@.
@
text
@a73 4
    if (!dmxeqInitialized()) {
        dmxLog(dmxWarning, "Use keyboard/mouse pair with the first -input\n");
        dmxLog(dmxFatal,   "At least one core keyboard/mouse pair required\n");
    }
d78 4
d95 1
a95 1
/** This routine is called from #dmxwindow.c whenever the layout of
d110 2
a111 1
NewInputDeviceRequest (InputOption *options, DeviceIntPtr *pdev)
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
d51 1
d56 1
a56 1
Bool LegalModifier(unsigned int key, DevicePtr pDev)
d78 2
d107 11
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
a51 1
#include "mi.h"
d56 1
a56 1
Bool LegalModifier(unsigned int key, DeviceIntPtr pDev)
a77 2

    mieqInit();
@

