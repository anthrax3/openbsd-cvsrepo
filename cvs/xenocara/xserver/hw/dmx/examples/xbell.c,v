head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.18
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.16
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.14
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.1.2.0.16
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.12
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.14
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.05.13.32.50;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.48;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.48;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.43;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * Copyright 2002 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   Rickard E. (Rik) Faith <faith@@redhat.com>
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <X11/Xlib.h>

static void
pkc(XKeyboardControl * kc, unsigned long vm)
{
    if (vm & KBKeyClickPercent)
        printf("   key_click_percent  = %d\n", kc->key_click_percent);
    if (vm & KBBellPercent)
        printf("   bell_percent       = %d\n", kc->bell_percent);
    if (vm & KBBellPitch)
        printf("   bell_pitch         = %d\n", kc->bell_pitch);
    if (vm & KBBellDuration)
        printf("   bell_duration      = %d\n", kc->bell_duration);
    if (vm & KBLed)
        printf("   led                = 0x%x\n", kc->led);
    if (vm & KBLedMode)
        printf("   led_mode           = %d\n", kc->led_mode);
    if (vm & KBKey)
        printf("   key                = %d\n", kc->key);
    if (vm & KBAutoRepeatMode)
        printf("   auto_repeat_mode   = %d\n", kc->auto_repeat_mode);
}

static void
pks(XKeyboardState * ks)
{
    printf("   key_click_percent  = %d\n", ks->key_click_percent);
    printf("   bell_percent       = %d\n", ks->bell_percent);
    printf("   bell_pitch         = %u\n", ks->bell_pitch);
    printf("   bell_duration      = %u\n", ks->bell_duration);
    printf("   led_mask           = 0x%lx\n", ks->led_mask);
    printf("   global_auto_repeat = %d\n", ks->global_auto_repeat);
}

int
main(int argc, char **argv)
{
    Display *display = XOpenDisplay(NULL);
    XKeyboardControl kc;
    XKeyboardState ks;
    unsigned long vm;

    if (argc != 5) {
        printf("Usage: xbell percent baseVolume pitch duration\n");
        return 1;
    }

    vm = (KBBellPercent | KBBellPitch | KBBellDuration);
    kc.key_click_percent = atoi(argv[1]);
    kc.bell_percent = atoi(argv[2]);
    kc.bell_pitch = atoi(argv[3]);
    kc.bell_duration = atoi(argv[4]);

    printf("Setting:\n");
    pkc(&kc, vm);
    XChangeKeyboardControl(display, vm, &kc);

    printf("Have:\n");
    XGetKeyboardControl(display, &ks);
    pks(&ks);

    XBell(display, 100);

    XCloseDisplay(display);
    return 0;
}
@


1.2
log
@Update to xserver 1.11.2
@
text
@d38 2
a39 1
static void pkc(XKeyboardControl *kc, unsigned long vm)
d41 1
a41 1
    if (vm&KBKeyClickPercent)
d43 1
a43 1
    if (vm&KBBellPercent)
d45 1
a45 1
    if (vm&KBBellPitch)
d47 1
a47 1
    if (vm&KBBellDuration)
d49 1
a49 1
    if (vm&KBLed)
d51 1
a51 1
    if (vm&KBLedMode)
d53 1
a53 1
    if (vm&KBKey)
d55 1
a55 1
    if (vm&KBAutoRepeatMode)
d59 2
a60 1
static void pks(XKeyboardState *ks)
d70 2
a71 1
int main(int argc, char **argv)
d73 1
a73 1
    Display          *display = XOpenDisplay(NULL);
d75 2
a76 2
    XKeyboardState   ks;
    unsigned long    vm;
d82 2
a83 4
    
    vm               = (KBBellPercent
                        | KBBellPitch
                        | KBBellDuration);
d85 2
a86 2
    kc.bell_percent  = atoi(argv[2]);
    kc.bell_pitch    = atoi(argv[3]);
d96 1
a96 1
    
d98 1
a98 1
    
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
a73 1
    int              percent;
d83 1
a83 1
    percent          = atoi(argv[1]);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
@

