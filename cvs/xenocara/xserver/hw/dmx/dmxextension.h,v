head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.20
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.18
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.16
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.14
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.43;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.43;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.20;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * Copyright 2003-2004 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Author:
 *   Rickard E. (Rik) Faith <faith@@redhat.com>
 *   Kevin E. Martin <kem@@redhat.com>
 *
 */

/** \file
 * Interface for DMX extension support.  These routines are called by
 * function in Xserver/Xext/dmx.c.  \see dmxextension.c */

#ifndef _DMXEXTENSION_H_
#define _DMXEXTENSION_H_

/** Screen attributes.  Used by #ProcDMXGetScreenAttributes and
 * \a ProcDMXChangeScreensAttributes. */
typedef struct {
    const char *displayName;
    int logicalScreen;

    unsigned int screenWindowWidth;     /* displayName's coordinate system */
    unsigned int screenWindowHeight;    /* displayName's coordinate system */
    int screenWindowXoffset;    /* displayName's coordinate system */
    int screenWindowYoffset;    /* displayName's coordinate system */

    unsigned int rootWindowWidth;       /* screenWindow's coordinate system */
    unsigned int rootWindowHeight;      /* screenWindow's coordinate system */
    int rootWindowXoffset;      /* screenWindow's coordinate system */
    int rootWindowYoffset;      /* screenWindow's coordinate system */

    int rootWindowXorigin;      /* global coordinate system */
    int rootWindowYorigin;      /* global coordinate system */
} DMXScreenAttributesRec, *DMXScreenAttributesPtr;

/** Window attributes.  Used by #ProcDMXGetWindowAttributes. */
typedef struct {
    int screen;
    Window window;
    xRectangle pos;
    xRectangle vis;
} DMXWindowAttributesRec, *DMXWindowAttributesPtr;

/** Desktop attributes.  Used by #ProcDMXGetDesktopAttributes and
 * #ProcDMXChangeDesktopAttributes. */
typedef struct {
    int width;
    int height;
    int shiftX;
    int shiftY;
} DMXDesktopAttributesRec, *DMXDesktopAttributesPtr;

/** Input attributes.  Used by #ProcDMXGetInputAttributes. */
typedef struct {
    const char *name;
    int inputType;
    int physicalScreen;
    int physicalId;
    int isCore;
    int sendsCore;
    int detached;
} DMXInputAttributesRec, *DMXInputAttributesPtr;

extern unsigned long dmxGetNumScreens(void);
extern void dmxForceWindowCreation(WindowPtr pWindow);
extern void dmxFlushPendingSyncs(void);
extern Bool dmxGetScreenAttributes(int physical, DMXScreenAttributesPtr attr);
extern Bool dmxGetWindowAttributes(WindowPtr pWindow,
                                   DMXWindowAttributesPtr attr);
extern void dmxGetDesktopAttributes(DMXDesktopAttributesPtr attr);
extern int dmxGetInputCount(void);
extern int dmxGetInputAttributes(int deviceId, DMXInputAttributesPtr attr);
extern int dmxAddInput(DMXInputAttributesPtr attr, int *deviceId);
extern int dmxRemoveInput(int deviceId);

extern int dmxConfigureScreenWindows(int nscreens,
                                     CARD32 *screens,
                                     DMXScreenAttributesPtr attribs,
                                     int *errorScreen);

extern int dmxConfigureDesktop(DMXDesktopAttributesPtr attribs);

/* dmxUpdateScreenResources exposed for dmxCreateWindow in dmxwindow.c */
extern void dmxUpdateScreenResources(ScreenPtr pScreen,
                                     int x, int y, int w, int h);

extern int dmxAttachScreen(int idx, DMXScreenAttributesPtr attr);
extern int dmxDetachScreen(int idx);
#endif
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d45 2
a46 2
    const char   *displayName;
    int          logicalScreen;
d48 9
a56 9
    unsigned int screenWindowWidth;    /* displayName's coordinate system */
    unsigned int screenWindowHeight;   /* displayName's coordinate system */
    int          screenWindowXoffset;  /* displayName's coordinate system */
    int          screenWindowYoffset;  /* displayName's coordinate system */

    unsigned int rootWindowWidth;      /* screenWindow's coordinate system */
    unsigned int rootWindowHeight;     /* screenWindow's coordinate system */
    int          rootWindowXoffset;    /* screenWindow's coordinate system */
    int          rootWindowYoffset;    /* screenWindow's coordinate system */
d58 2
a59 2
    int          rootWindowXorigin;    /* global coordinate system */
    int          rootWindowYorigin;    /* global coordinate system */
d64 4
a67 4
    int          screen;
    Window       window;
    xRectangle   pos;
    xRectangle   vis;
d73 4
a76 4
    int          width;
    int          height;
    int          shiftX;
    int          shiftY;
d81 7
a87 7
    const char   *name;
    int          inputType;
    int          physicalScreen;
    int          physicalId;
    int          isCore;
    int          sendsCore;
    int          detached;
a89 1

d91 15
a105 17
extern void          dmxForceWindowCreation(WindowPtr pWindow);
extern void          dmxFlushPendingSyncs(void);
extern Bool          dmxGetScreenAttributes(int physical,
                                            DMXScreenAttributesPtr attr);
extern Bool          dmxGetWindowAttributes(WindowPtr pWindow,
                                            DMXWindowAttributesPtr attr);
extern void          dmxGetDesktopAttributes(DMXDesktopAttributesPtr attr);
extern int           dmxGetInputCount(void);
extern int           dmxGetInputAttributes(int deviceId,
                                           DMXInputAttributesPtr attr);
extern int           dmxAddInput(DMXInputAttributesPtr attr, int *deviceId);
extern int           dmxRemoveInput(int deviceId);

extern int           dmxConfigureScreenWindows(int nscreens,
					       CARD32 *screens,
					       DMXScreenAttributesPtr attribs,
					       int *errorScreen);
d107 1
a107 1
extern int           dmxConfigureDesktop(DMXDesktopAttributesPtr attribs);
d110 2
a111 2
extern void          dmxUpdateScreenResources(ScreenPtr pScreen,
                                              int x, int y, int w, int h);
d113 2
a114 2
extern int           dmxAttachScreen(int idx, DMXScreenAttributesPtr attr);
extern int           dmxDetachScreen(int idx);
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
d43 1
a43 1
 * #ProcDMXChangeScreenAttributes. */
d62 1
a62 1
/** Window attributes.  Used by #ProcDMXGetWidowAttributes. */
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
@

