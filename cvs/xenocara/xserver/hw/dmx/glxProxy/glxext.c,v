head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.6
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.05.29.12.02.36;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	s0SI41sEunLdyFfd;

1.10
date	2014.09.27.17.53.01;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	cVXoV5PxI8YrEaVA;

1.9
date	2014.05.02.19.27.48;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2013.06.07.17.28.48;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.50;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.29;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.23;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.17;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.23.43;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.23.43;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 * SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008)
 * Copyright (C) 1991-2000 Silicon Graphics, Inc. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice including the dates of first publication and
 * either this permission notice or a reference to
 * http://oss.sgi.com/projects/FreeB/
 * shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of Silicon Graphics, Inc.
 * shall not be used in advertising or otherwise to promote the sale, use or
 * other dealings in this Software without prior written authorization from
 * Silicon Graphics, Inc.
 */

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#endif

#include "dmx.h"

#include "glxserver.h"
#include <windowstr.h>
#include <propertyst.h>
#include <os.h>
#include "g_disptab.h"
#include "glxutil.h"
#include "glxext.h"
#include "glxvisuals.h"
#include "micmap.h"
#include "glxswap.h"
#include "extinit.h"
#include "glx_extinit.h"

/*
** Forward declarations.
*/
static int __glXSwapDispatch(ClientPtr);
static int __glXDispatch(ClientPtr);

/*
** Called when the extension is reset.
*/
static void
ResetExtension(ExtensionEntry * extEntry)
{
    __glXFlushContextCache();
    __glXScreenReset();
    SwapBarrierReset();
}

/*
** Initialize the per-client context storage.
*/
static void
ResetClientState(int clientIndex)
{
    __GLXclientState *cl = __glXClients[clientIndex];
    Display **keep_be_displays;
    int i;

    free(cl->returnBuf);
    free(cl->currentContexts);
    free(cl->currentDrawables);
    free(cl->largeCmdBuf);

    for (i = 0; i < screenInfo.numScreens; i++) {
        if (cl->be_displays[i])
            XCloseDisplay(cl->be_displays[i]);
    }

    keep_be_displays = cl->be_displays;
    memset(cl, 0, sizeof(__GLXclientState));
    cl->be_displays = keep_be_displays;

    free(cl->GLClientextensions);

    memset(cl->be_displays, 0, screenInfo.numScreens * sizeof(Display *));
}

/*
** This procedure is called when the client who created the context goes
** away OR when glXDestroyContext is called.  In either case, all we do is
** flag that the ID is no longer valid, and (maybe) free the context.
** use.
*/
static int
ContextGone(__GLXcontext * cx, XID id)
{
    cx->idExists = GL_FALSE;
    if (!cx->isCurrent) {
        __glXFreeContext(cx);
    }

    return True;
}

/*
** Free a client's state.
*/
static int
ClientGone(int clientIndex, XID id)
{
    __GLXcontext *cx;
    __GLXclientState *cl = __glXClients[clientIndex];
    int i;

    if (cl) {
        /*
         ** Free all the contexts that are current for this client.
         */
        for (i = 0; i < cl->numCurrentContexts; i++) {
            cx = cl->currentContexts[i];
            if (cx) {
                cx->isCurrent = GL_FALSE;
                if (!cx->idExists) {
                    __glXFreeContext(cx);
                }
            }
        }
        /*
         ** Re-initialize the client state structure.  Don't free it because
         ** we'll probably get another client with this index and use the struct
         ** again.  There is a maximum of MAXCLIENTS of these structures.
         */
        ResetClientState(clientIndex);
    }

    return True;
}

/*
** Free a GLX Pixmap.
*/
void
__glXFreeGLXPixmap(__GLXpixmap * pGlxPixmap)
{
    if (!pGlxPixmap->idExists && !pGlxPixmap->refcnt) {

        PixmapPtr pPixmap = (PixmapPtr) pGlxPixmap->pDraw;

        /*
         ** The DestroyPixmap routine should decrement the refcount and free
         ** only if it's zero.
         */
        (*pGlxPixmap->pScreen->DestroyPixmap) (pPixmap);
        free(pGlxPixmap->be_xids);
        free(pGlxPixmap);
    }

}

static int
PixmapGone(__GLXpixmap * pGlxPixmap, XID id)
{

    pGlxPixmap->idExists = False;
    __glXFreeGLXPixmap(pGlxPixmap);

    return True;
}

void
__glXFreeGLXWindow(__glXWindow * pGlxWindow)
{
    if (!pGlxWindow->idExists && !pGlxWindow->refcnt) {
        WindowPtr pWindow = (WindowPtr) pGlxWindow->pDraw;
        WindowPtr ret;

        dixLookupResourceByType((void *) &ret,
                                pWindow->drawable.id, RT_WINDOW,
                                NullClient, DixUnknownAccess);
        if (ret == pWindow) {
            (*pGlxWindow->pScreen->DestroyWindow) (pWindow);
        }

        free(pGlxWindow);
    }
}

static void
WindowGone(__glXWindow * pGlxWindow, XID id)
{
    pGlxWindow->idExists = False;
    __glXFreeGLXWindow(pGlxWindow);
}

void
__glXFreeGLXPbuffer(__glXPbuffer * pGlxPbuffer)
{
    if (!pGlxPbuffer->idExists && !pGlxPbuffer->refcnt) {
        free(pGlxPbuffer->be_xids);
        free(pGlxPbuffer);
    }
}

static void
PbufferGone(__glXPbuffer * pGlxPbuffer, XID id)
{
    pGlxPbuffer->idExists = False;
    __glXFreeGLXPbuffer(pGlxPbuffer);
}

/*
** Free a context.
*/
GLboolean
__glXFreeContext(__GLXcontext * cx)
{
    if (cx->idExists || cx->isCurrent)
        return GL_FALSE;

    free(cx->feedbackBuf);
    free(cx->selectBuf);
    free(cx->real_ids);
    free(cx->real_vids);

    if (cx->pGlxPixmap) {
        /*
         ** The previous drawable was a glx pixmap, release it.
         */
        cx->pGlxPixmap->refcnt--;
        __glXFreeGLXPixmap(cx->pGlxPixmap);
        cx->pGlxPixmap = 0;
    }

    if (cx->pGlxReadPixmap) {
        /*
         ** The previous drawable was a glx pixmap, release it.
         */
        cx->pGlxReadPixmap->refcnt--;
        __glXFreeGLXPixmap(cx->pGlxReadPixmap);
        cx->pGlxReadPixmap = 0;
    }

    if (cx->pGlxWindow) {
        /*
         ** The previous drawable was a glx window, release it.
         */
        cx->pGlxWindow->refcnt--;
        __glXFreeGLXWindow(cx->pGlxWindow);
        cx->pGlxWindow = 0;
    }

    if (cx->pGlxReadWindow) {
        /*
         ** The previous drawable was a glx window, release it.
         */
        cx->pGlxReadWindow->refcnt--;
        __glXFreeGLXWindow(cx->pGlxReadWindow);
        cx->pGlxReadWindow = 0;
    }

    free(cx);

    if (cx == __glXLastContext) {
        __glXFlushContextCache();
    }

    return GL_TRUE;
}

/*
** Initialize the GLX extension.
*/
void
GlxExtensionInit(void)
{
    ExtensionEntry *extEntry;
    int i;
    int glxSupported = 1;

    /*
       // do not initialize GLX extension if GLX is not supported
       // by ALL back-end servers.
     */
    for (i = 0; i < screenInfo.numScreens; i++) {
        glxSupported &= (dmxScreens[i].glxMajorOpcode > 0);
    }

    if (!glxSupported || !dmxGLXProxy) {
        return;
    }

    __glXContextRes = CreateNewResourceType((DeleteType) ContextGone,
                                            "GLXContext");
    __glXClientRes = CreateNewResourceType((DeleteType) ClientGone,
                                           "GLXClient");
    __glXPixmapRes = CreateNewResourceType((DeleteType) PixmapGone,
                                           "GLXPixmap");
    __glXWindowRes = CreateNewResourceType((DeleteType) WindowGone,
                                           "GLXWindow");
    __glXPbufferRes = CreateNewResourceType((DeleteType) PbufferGone,
                                            "GLXPbuffer");

    if (!__glXContextRes || !__glXClientRes || !__glXPixmapRes ||
        !__glXWindowRes || !__glXPbufferRes)
        return;

    /*
     ** Add extension to server extensions.
     */
    extEntry = AddExtension(GLX_EXTENSION_NAME, __GLX_NUMBER_EVENTS,
                            __GLX_NUMBER_ERRORS, __glXDispatch,
                            __glXSwapDispatch, ResetExtension,
                            StandardMinorOpcode);
    if (!extEntry) {
        FatalError("__glXExtensionInit: AddExtensions failed\n");
        return;
    }
    /*
       if (!AddExtensionAlias(GLX_EXTENSION_ALIAS, extEntry)) {
       ErrorF("__glXExtensionInit: AddExtensionAlias failed\n");
       return;
       }
     */

    __glXerrorBase = extEntry->errorBase;
    __glXBadContext = extEntry->errorBase + GLXBadContext;
    __glXBadContextState = extEntry->errorBase + GLXBadContextState;
    __glXBadDrawable = extEntry->errorBase + GLXBadDrawable;
    __glXBadPixmap = extEntry->errorBase + GLXBadPixmap;
    __glXBadContextTag = extEntry->errorBase + GLXBadContextTag;
    __glXBadCurrentWindow = extEntry->errorBase + GLXBadCurrentWindow;
    __glXBadRenderRequest = extEntry->errorBase + GLXBadRenderRequest;
    __glXBadLargeRequest = extEntry->errorBase + GLXBadLargeRequest;
    __glXUnsupportedPrivateRequest = extEntry->errorBase +
        GLXUnsupportedPrivateRequest;
    __glXBadFBConfig = extEntry->errorBase + GLXBadFBConfig;
    __glXBadPbuffer = extEntry->errorBase + GLXBadPbuffer;

    /*
     ** Initialize table of client state.  There is never a client 0.
     */
    for (i = 1; i <= LimitClients; i++) {
        __glXClients[i] = 0;
    }

    /*
     ** Initialize screen specific data.
     */
    __glXScreenInit(screenInfo.numScreens);

    /*
     ** Initialize swap barrier support.
     */
    SwapBarrierInit();
}

/************************************************************************/

Bool
__glXCoreType(void)
{
    return 0;
}

/************************************************************************/

void
__glXFlushContextCache(void)
{
    __glXLastContext = 0;
}

/************************************************************************/

/*
** Top level dispatcher; all commands are executed from here down.
*/
static int
__glXDispatch(ClientPtr client)
{
    REQUEST(xGLXSingleReq);
    CARD8 opcode;
    int (*proc) (__GLXclientState * cl, GLbyte * pc);
    __GLXclientState *cl;

    opcode = stuff->glxCode;
    cl = __glXClients[client->index];
    if (!cl) {
        cl = calloc(1, sizeof(__GLXclientState));
        __glXClients[client->index] = cl;
        if (!cl) {
            return BadAlloc;
        }

        cl->be_displays = calloc(screenInfo.numScreens, sizeof(Display *));
        if (!cl->be_displays) {
            free(cl);
            return BadAlloc;
        }
    }

    if (!cl->inUse) {
        /*
         ** This is first request from this client.  Associate a resource
         ** with the client so we will be notified when the client dies.
         */
        XID xid = FakeClientID(client->index);

        if (!AddResource(xid, __glXClientRes, (void *) (long) client->index)) {
            return BadAlloc;
        }
        ResetClientState(client->index);
        cl->largeCmdRequestsTotal = 0;
        cl->inUse = GL_TRUE;
        cl->client = client;
    }

    /*
     ** Check for valid opcode.
     */
    if (opcode >= __GLX_SINGLE_TABLE_SIZE) {
        return BadRequest;
    }

    /*
     ** Use the opcode to index into the procedure table.
     */
    proc = __glXSingleTable[opcode];
    return (*proc) (cl, (GLbyte *) stuff);
}

static int
__glXSwapDispatch(ClientPtr client)
{
    REQUEST(xGLXSingleReq);
    CARD8 opcode;
    int (*proc) (__GLXclientState * cl, GLbyte * pc);
    __GLXclientState *cl;

    opcode = stuff->glxCode;
    cl = __glXClients[client->index];
    if (!cl) {
        cl = calloc(1, sizeof(__GLXclientState));
        __glXClients[client->index] = cl;
        if (!cl) {
            return BadAlloc;
        }

        cl->be_displays = calloc(screenInfo.numScreens, sizeof(Display *));
        if (!cl->be_displays) {
            free(cl);
            return BadAlloc;
        }
    }

    if (!cl->inUse) {
        /*
         ** This is first request from this client.  Associate a resource
         ** with the client so we will be notified when the client dies.
         */
        XID xid = FakeClientID(client->index);

        if (!AddResource(xid, __glXClientRes, (void *) (long) client->index)) {
            return BadAlloc;
        }
        ResetClientState(client->index);
        cl->inUse = GL_TRUE;
        cl->client = client;
    }

    /*
     ** Check for valid opcode.
     */
    if (opcode >= __GLX_SINGLE_TABLE_SIZE) {
        return BadRequest;
    }

    /*
     ** Use the opcode to index into the procedure table.
     */
    proc = __glXSwapSingleTable[opcode];
    return (*proc) (cl, (GLbyte *) stuff);
}

int
__glXNoSuchSingleOpcode(__GLXclientState * cl, GLbyte * pc)
{
    return BadRequest;
}

void
__glXNoSuchRenderOpcode(GLbyte * pc)
{
    return;
}
@


1.10
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d350 1
a350 1
    for (i = 1; i <= MAXCLIENTS; i++) {
@


1.9
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d185 1
a185 1
        dixLookupResourceByType((pointer) &ret,
d417 1
a417 1
        if (!AddResource(xid, __glXClientRes, (pointer) (long) client->index)) {
d471 1
a471 1
        if (!AddResource(xid, __glXClientRes, (pointer) (long) client->index)) {
@


1.8
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a90 6
    /*
     ** By default, assume that the client supports
     ** GLX major version 1 minor version 0 protocol.
     */
    cl->GLClientmajorVersion = 1;
    cl->GLClientminorVersion = 0;
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d47 2
a48 10

/*
** Stubs to satisfy miinitext.c references.
*/
typedef int __GLXprovider;
__GLXprovider __glXDRISWRastProvider;
void
GlxPushProvider(__GLXprovider * provider)
{
}
@


1.6
log
@Update to xserver 1.11.2
@
text
@d53 4
a56 1
void GlxPushProvider(__GLXprovider *provider) { }
d67 2
a68 1
static void ResetExtension(ExtensionEntry* extEntry)
d78 2
a79 1
static void ResetClientState(int clientIndex)
d90 3
a92 3
    for (i=0; i< screenInfo.numScreens; i++) {
       if (cl->be_displays[i])
	  XCloseDisplay( cl->be_displays[i] );
d100 3
a102 3
    ** By default, assume that the client supports
    ** GLX major version 1 minor version 0 protocol.
    */
a109 1

d116 2
a117 1
static int ContextGone(__GLXcontext* cx, XID id)
d121 1
a121 1
	__glXFreeContext(cx);
d130 2
a131 1
static int ClientGone(int clientIndex, XID id)
d138 18
a155 18
	/*
	** Free all the contexts that are current for this client.
	*/
	for (i=0; i < cl->numCurrentContexts; i++) {
	    cx = cl->currentContexts[i];
	    if (cx) {
		cx->isCurrent = GL_FALSE;
		if (!cx->idExists) {
		    __glXFreeContext(cx);
		}
	    }
	}
	/*
	** Re-initialize the client state structure.  Don't free it because
	** we'll probably get another client with this index and use the struct
	** again.  There is a maximum of MAXCLIENTS of these structures.
	*/
	ResetClientState(clientIndex);
d164 2
a165 1
void __glXFreeGLXPixmap( __GLXpixmap *pGlxPixmap )
d167 1
a167 2
   if (!pGlxPixmap->idExists &&
       !pGlxPixmap->refcnt) {
d169 1
a169 1
       PixmapPtr pPixmap = (PixmapPtr) pGlxPixmap->pDraw;
d171 7
a177 7
	/*
	** The DestroyPixmap routine should decrement the refcount and free
	** only if it's zero.
	*/
	(*pGlxPixmap->pScreen->DestroyPixmap)(pPixmap);
	free(pGlxPixmap->be_xids);
	free(pGlxPixmap);
d182 2
a183 1
static int PixmapGone(__GLXpixmap *pGlxPixmap, XID id)
d187 1
a187 1
    __glXFreeGLXPixmap( pGlxPixmap );
d192 2
a193 1
void __glXFreeGLXWindow(__glXWindow *pGlxWindow)
d196 2
a197 2
	WindowPtr pWindow = (WindowPtr) pGlxWindow->pDraw;
	WindowPtr ret;
d199 3
a201 3
	dixLookupResourceByType((pointer) &ret,
				pWindow->drawable.id, RT_WINDOW,
				NullClient, DixUnknownAccess);
d203 1
a203 1
            (*pGlxWindow->pScreen->DestroyWindow)(pWindow);
d206 1
a206 1
	free(pGlxWindow);
d210 2
a211 1
static void WindowGone(__glXWindow *pGlxWindow, XID id)
d217 2
a218 1
void __glXFreeGLXPbuffer(__glXPbuffer *pGlxPbuffer)
d226 2
a227 1
static void PbufferGone(__glXPbuffer *pGlxPbuffer, XID id)
d236 2
a237 1
GLboolean __glXFreeContext(__GLXcontext *cx)
d239 3
a241 2
    if (cx->idExists || cx->isCurrent) return GL_FALSE;
    
d248 6
a253 6
       /*
	** The previous drawable was a glx pixmap, release it.
	*/
       cx->pGlxPixmap->refcnt--;
       __glXFreeGLXPixmap( cx->pGlxPixmap );
       cx->pGlxPixmap = 0;
d257 6
a262 6
       /*
	** The previous drawable was a glx pixmap, release it.
	*/
       cx->pGlxReadPixmap->refcnt--;
       __glXFreeGLXPixmap( cx->pGlxReadPixmap );
       cx->pGlxReadPixmap = 0;
d266 6
a271 6
       /*
	** The previous drawable was a glx window, release it.
	*/
       cx->pGlxWindow->refcnt--;
       __glXFreeGLXWindow( cx->pGlxWindow );
       cx->pGlxWindow = 0;   
d275 6
a280 6
       /*
	** The previous drawable was a glx window, release it.
	*/
       cx->pGlxReadWindow->refcnt--;
       __glXFreeGLXWindow( cx->pGlxReadWindow );
       cx->pGlxReadWindow = 0;   
d286 1
a286 1
	__glXFlushContextCache();
d295 2
a296 1
void GlxExtensionInit(void)
d303 5
a307 5
    // do not initialize GLX extension if GLX is not supported
    // by ALL back-end servers.
    */
    for (i=0; i<screenInfo.numScreens; i++) {
       glxSupported &= (dmxScreens[i].glxMajorOpcode > 0);
d311 1
a311 1
       return;
d313 11
a323 11
    
    __glXContextRes = CreateNewResourceType((DeleteType)ContextGone,
					    "GLXContext");
    __glXClientRes = CreateNewResourceType((DeleteType)ClientGone,
					   "GLXClient");
    __glXPixmapRes = CreateNewResourceType((DeleteType)PixmapGone,
					   "GLXPixmap");
    __glXWindowRes = CreateNewResourceType((DeleteType)WindowGone,
					   "GLXWindow");
    __glXPbufferRes = CreateNewResourceType((DeleteType)PbufferGone,
					    "GLXPbuffer");
d326 2
a327 2
	!__glXWindowRes || !__glXPbufferRes)
	return;
d330 2
a331 2
    ** Add extension to server extensions.
    */
d333 3
a335 3
			    __GLX_NUMBER_ERRORS, __glXDispatch,
			    __glXSwapDispatch, ResetExtension,
			    StandardMinorOpcode);
d337 2
a338 2
	FatalError("__glXExtensionInit: AddExtensions failed\n");
	return;
d341 5
a345 5
    if (!AddExtensionAlias(GLX_EXTENSION_ALIAS, extEntry)) {
	ErrorF("__glXExtensionInit: AddExtensionAlias failed\n");
	return;
    }
    */
d357 1
a357 1
      			GLXUnsupportedPrivateRequest;
d362 4
a365 4
    ** Initialize table of client state.  There is never a client 0.
    */
    for (i=1; i <= MAXCLIENTS; i++) {
	__glXClients[i] = 0;
d369 2
a370 2
    ** Initialize screen specific data.
    */
d374 2
a375 2
    ** Initialize swap barrier support.
    */
d381 2
a382 1
Bool __glXCoreType(void)
d389 2
a390 1
void __glXFlushContextCache(void)
d400 2
a401 1
static int __glXDispatch(ClientPtr client)
d405 1
a405 1
    int (*proc)(__GLXclientState *cl, GLbyte *pc);
d411 11
a421 11
	cl = calloc(1, sizeof(__GLXclientState));
	 __glXClients[client->index] = cl;
	if (!cl) {
	    return BadAlloc;
	}

	cl->be_displays = calloc(screenInfo.numScreens, sizeof(Display *));
	if (!cl->be_displays) {
	    free( cl );
	    return BadAlloc;
	}
d423 1
a423 1
    
d425 13
a437 12
	/*
	** This is first request from this client.  Associate a resource
	** with the client so we will be notified when the client dies.
	*/
	XID xid = FakeClientID(client->index);
	if (!AddResource( xid, __glXClientRes, (pointer)(long)client->index)) {
	    return BadAlloc;
	}
	ResetClientState(client->index);
	cl->largeCmdRequestsTotal = 0;
	cl->inUse = GL_TRUE;
	cl->client = client;
d441 2
a442 2
    ** Check for valid opcode.
    */
d444 1
a444 1
	return BadRequest;
d448 2
a449 2
    ** Use the opcode to index into the procedure table.
    */
d451 1
a451 1
    return (*proc)(cl, (GLbyte *) stuff);
d454 2
a455 1
static int __glXSwapDispatch(ClientPtr client)
d459 1
a459 1
    int (*proc)(__GLXclientState *cl, GLbyte *pc);
d465 11
a475 11
	cl = calloc(1, sizeof(__GLXclientState));
	 __glXClients[client->index] = cl;
	if (!cl) {
	    return BadAlloc;
	}

	cl->be_displays = calloc(screenInfo.numScreens, sizeof(Display *));
	if (!cl->be_displays) {
	    free( cl );
	    return BadAlloc;
	}
d477 1
a477 1
    
d479 12
a490 11
	/*
	** This is first request from this client.  Associate a resource
	** with the client so we will be notified when the client dies.
	*/
	XID xid = FakeClientID(client->index);
	if (!AddResource( xid, __glXClientRes, (pointer)(long)client->index)) {
	    return BadAlloc;
	}
	ResetClientState(client->index);
	cl->inUse = GL_TRUE;
	cl->client = client;
d494 2
a495 2
    ** Check for valid opcode.
    */
d497 1
a497 1
	return BadRequest;
d501 2
a502 2
    ** Use the opcode to index into the procedure table.
    */
d504 1
a504 1
    return (*proc)(cl, (GLbyte *) stuff);
d507 2
a508 1
int __glXNoSuchSingleOpcode(__GLXclientState *cl, GLbyte *pc)
d513 2
a514 1
void __glXNoSuchRenderOpcode(GLbyte *pc)
a517 1

@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d80 4
a83 4
    if (cl->returnBuf) __glXFree(cl->returnBuf);
    if (cl->currentContexts) __glXFree(cl->currentContexts);
    if (cl->currentDrawables) __glXFree(cl->currentDrawables);
    if (cl->largeCmdBuf) __glXFree(cl->largeCmdBuf);
d100 1
a100 1
    if (cl->GLClientextensions) __glXFree(cl->GLClientextensions);
d170 2
a171 2
	__glXFree(pGlxPixmap->be_xids);
	__glXFree(pGlxPixmap);
d189 1
d191 4
a194 1
        if (LookupIDByType(pWindow->drawable.id, RT_WINDOW) == pWindow) {
d229 4
a232 4
    if (cx->feedbackBuf) __glXFree(cx->feedbackBuf);
    if (cx->selectBuf) __glXFree(cx->selectBuf);
    if (cx->real_ids) __glXFree(cx->real_ids);
    if (cx->real_vids) __glXFree(cx->real_vids);
d270 1
a270 1
    __glXFree(cx);
a373 40
void GlxSetVisualConfigs(int nconfigs, 
                         __GLXvisualConfig *configs, void **privates)
{
    glxSetVisualConfigs(nconfigs, configs, privates);
}

static miInitVisualsProcPtr saveInitVisualsProc;

Bool GlxInitVisuals(VisualPtr *visualp, DepthPtr *depthp,
		    int *nvisualp, int *ndepthp,
		    int *rootDepthp, VisualID *defaultVisp,
		    unsigned long sizes, int bitsPerRGB,
		    int preferredVis)
{
    Bool ret;

    if (saveInitVisualsProc) {
        ret = saveInitVisualsProc(visualp, depthp, nvisualp, ndepthp,
                                  rootDepthp, defaultVisp, sizes, bitsPerRGB,
                                  preferredVis);
        if (!ret)
            return False;
    }

    glxInitVisuals(nvisualp, visualp, defaultVisp, *ndepthp, *depthp,*rootDepthp);

    return True;
}

void
GlxWrapInitVisuals(miInitVisualsProcPtr *initVisProc)
{
    if (dmxGLXProxy) {
	saveInitVisualsProc = *initVisProc;
	*initVisProc = GlxInitVisuals;
    }
}

/************************************************************************/

d394 1
a394 1
	cl = __glXCalloc(1, sizeof(__GLXclientState));
d400 1
a400 1
	cl->be_displays = __glXCalloc(screenInfo.numScreens, sizeof(Display *));
d402 1
a402 1
	    __glXFree( cl );
d446 1
a446 1
	cl = __glXCalloc(1, sizeof(__GLXclientState));
d452 1
a452 1
	cl->be_displays = __glXCalloc(screenInfo.numScreens, sizeof(Display *));
d454 1
a454 1
	    __glXFree( cl );
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d194 1
a194 1
	xfree(pGlxWindow);
d207 2
a208 2
        xfree(pGlxPbuffer->be_xids);
        xfree(pGlxPbuffer);
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a36 1
#define NEED_REPLIES
d296 14
a309 5
    __glXContextRes = CreateNewResourceType((DeleteType)ContextGone);
    __glXClientRes = CreateNewResourceType((DeleteType)ClientGone);
    __glXPixmapRes = CreateNewResourceType((DeleteType)PixmapGone);
    __glXWindowRes = CreateNewResourceType((DeleteType)WindowGone);
    __glXPbufferRes = CreateNewResourceType((DeleteType)PbufferGone);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d2 28
a29 18
** The contents of this file are subject to the GLX Public License Version 1.0
** (the "License"). You may not use this file except in compliance with the
** License. You may obtain a copy of the License at Silicon Graphics, Inc.,
** attn: Legal Services, 2011 N. Shoreline Blvd., Mountain View, CA 94043
** or at http://www.sgi.com/software/opensource/glx/license.html.
**
** Software distributed under the License is distributed on an "AS IS"
** basis. ALL WARRANTIES ARE DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY
** IMPLIED WARRANTIES OF MERCHANTABILITY, OF FITNESS FOR A PARTICULAR
** PURPOSE OR OF NON- INFRINGEMENT. See the License for the specific
** language governing rights and limitations under the License.
**
** The Original Software is GLX version 1.2 source code, released February,
** 1999. The developer of the Original Software is Silicon Graphics, Inc.
** Those portions of the Subject Software created by Silicon Graphics, Inc.
** are Copyright (c) 1991-9 Silicon Graphics, Inc. All Rights Reserved.
**
*/
d422 1
a422 1
	cl = (__GLXclientState *) __glXMalloc(sizeof(__GLXclientState));
a426 1
	memset(cl, 0, sizeof(__GLXclientState));
d428 1
a428 1
	cl->be_displays = (Display **) __glXMalloc( screenInfo.numScreens * sizeof(Display *) );
a432 1
	memset(cl->be_displays, 0, screenInfo.numScreens * sizeof(Display *));
d474 1
a474 1
	cl = (__GLXclientState *) __glXMalloc(sizeof(__GLXclientState));
a478 1
	memset(cl, 0, sizeof(__GLXclientState));
d480 1
a480 1
	cl->be_displays = (Display **) __glXMalloc( screenInfo.numScreens * sizeof(Display *) );
a484 2

	memset(cl->be_displays, 0, screenInfo.numScreens * sizeof(Display *));
@


1.1
log
@Initial revision
@
text
@d43 1
a43 1
__GLXprovider __glXMesaProvider;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
