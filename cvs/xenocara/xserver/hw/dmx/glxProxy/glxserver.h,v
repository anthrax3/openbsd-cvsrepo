head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.11.07.16.48.52;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	7pAEtF6Y5EgemkuY;

1.5
date	2014.05.02.19.27.48;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.50;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.23.42;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.23.42;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.29;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.17.4.
tested by naddy@@
@
text
@#ifndef _GLX_server_h_
#define _GLX_server_h_

/*
 * SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008)
 * Copyright (C) 1991-2000 Silicon Graphics, Inc. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice including the dates of first publication and
 * either this permission notice or a reference to
 * http://oss.sgi.com/projects/FreeB/
 * shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of Silicon Graphics, Inc.
 * shall not be used in advertising or otherwise to promote the sale, use or
 * other dealings in this Software without prior written authorization from
 * Silicon Graphics, Inc.
 */

#include "dmx.h"

#include <misc.h>
#include <dixstruct.h>
#include <pixmapstr.h>
#include <gcstruct.h>
#include <extnsionst.h>
#include <resource.h>
#include <scrnintstr.h>

#define GL_GLEXT_PROTOTYPES     /* we want prototypes */
#include <GL/gl.h>
#include <GL/glxproto.h>
#include <GL/glxint.h>

#include "glxscreens.h"
#include "glxdrawable.h"
#include "glxcontext.h"
#include "glxerror.h"

#define GLX_SERVER_MAJOR_VERSION 1
#define GLX_SERVER_MINOR_VERSION 3

#ifndef True
#define True 1
#endif
#ifndef False
#define False 0
#endif

/*
** GLX resources.
typedef XID GLXContextID;
typedef XID GLXPixmap;
typedef XID GLXDrawable;
typedef XID GLXWindow;
typedef XID GLXPbuffer;

typedef struct __GLXcontextRec *GLXContext;
*/
typedef struct __GLXclientStateRec __GLXclientState;

extern __GLXscreenInfo *__glXActiveScreens;
extern GLint __glXNumActiveScreens;

/************************************************************************/

/*
** The last context used (from the server's persective) is cached.
*/
extern __GLXcontext *__glXLastContext;
extern __GLXcontext *__glXForceCurrent(__GLXclientState *, GLXContextTag,
                                       int *);

/************************************************************************/

typedef struct {
    int elem_size;              /* element size in bytes */
    int nelems;                 /* number of elements to swap */
    void (*swapfunc) (GLbyte * pc);
} __GLXRenderSwapInfo;

/*
** State kept per client.
*/
struct __GLXclientStateRec {
    /*
     ** Whether this structure is currently being used to support a client.
     */
    Bool inUse;

    /*
     ** Buffer for returned data.
     */
    GLbyte *returnBuf;
    GLint returnBufSize;

    /*
     ** Keep a list of all the contexts that are current for this client's
     ** threads.
     */
    __GLXcontext **currentContexts;
    DrawablePtr *currentDrawables;
    GLint numCurrentContexts;

    /* Back pointer to X client record */
    ClientPtr client;

    char *GLClientextensions;

    GLXContextTag *be_currentCTag;
    Display **be_displays;

    /*
     ** Keep track of large rendering commands, which span multiple requests.
     */
    GLint largeCmdBytesSoFar;   /* bytes received so far        */
    GLint largeCmdBytesTotal;   /* total bytes expected         */
    GLint largeCmdRequestsSoFar;        /* requests received so far     */
    GLint largeCmdRequestsTotal;        /* total requests expected      */
    void (*largeCmdRequestsSwapProc) (GLbyte *);
    __GLXRenderSwapInfo *largeCmdRequestsSwap_info;
    GLbyte *largeCmdBuf;
    GLint largeCmdBufSize;
    GLint largeCmdMaxReqDataSize;

};

extern __GLXclientState *__glXClients[];

/************************************************************************/

/*
** Dispatch tables.
*/
typedef void (*__GLXdispatchRenderProcPtr) (GLbyte *);
typedef int (*__GLXdispatchSingleProcPtr) (__GLXclientState *, GLbyte *);
typedef int (*__GLXdispatchVendorPrivProcPtr) (__GLXclientState *, GLbyte *);
extern __GLXdispatchVendorPrivProcPtr __glXVendorPrivTable_EXT[];
extern __GLXdispatchVendorPrivProcPtr __glXSwapVendorPrivTable_EXT[];
extern __GLXdispatchRenderProcPtr __glXSwapRenderTable[];

extern __GLXRenderSwapInfo __glXSwapRenderTable_EXT[];

/*
 * Dispatch for GLX commands.
 */
typedef int (*__GLXprocPtr) (__GLXclientState *, char *pc);
extern __GLXprocPtr __glXProcTable[];

/*
 * Tables for computing the size of each rendering command.
 */
typedef struct {
    int bytes;
    int (*varsize) (GLbyte * pc, Bool swap);
} __GLXrenderSizeData;
extern __GLXrenderSizeData __glXRenderSizeTable[];
extern __GLXrenderSizeData __glXRenderSizeTable_EXT[];

/************************************************************************/

/*
** X resources.
*/
extern RESTYPE __glXContextRes;
extern RESTYPE __glXClientRes;
extern RESTYPE __glXPixmapRes;
extern RESTYPE __glXDrawableRes;
extern RESTYPE __glXWindowRes;
extern RESTYPE __glXPbufferRes;

/************************************************************************/

/*
** Prototypes.
*/

extern char *__glXcombine_strings(const char *, const char *);

/*
** Routines for sending swapped replies.
*/

extern void __glXSwapMakeCurrentReply(ClientPtr client,
                                      xGLXMakeCurrentReadSGIReply * reply);

extern void __glXSwapIsDirectReply(ClientPtr client, xGLXIsDirectReply * reply);
extern void __glXSwapQueryVersionReply(ClientPtr client,
                                       xGLXQueryVersionReply * reply);
extern void __glXSwapQueryContextInfoEXTReply(ClientPtr client,
                                              xGLXQueryContextInfoEXTReply *
                                              reply, int *buf);
extern void glxSwapQueryExtensionsStringReply(ClientPtr client,
                                              xGLXQueryExtensionsStringReply *
                                              reply, char *buf);
extern void glxSwapQueryServerStringReply(ClientPtr client,
                                          xGLXQueryServerStringReply * reply,
                                          char *buf);
extern void __glXSwapQueryContextReply(ClientPtr client,
                                       xGLXQueryContextReply * reply, int *buf);
extern void __glXSwapGetDrawableAttributesReply(ClientPtr client,
                                                xGLXGetDrawableAttributesReply *
                                                reply, int *buf);
extern void __glXSwapQueryMaxSwapBarriersSGIXReply(ClientPtr client,
                                                   xGLXQueryMaxSwapBarriersSGIXReply
                                                   * reply);

/*
 * Routines for computing the size of variably-sized rendering commands.
 */

extern int __glXTypeSize(GLenum enm);
extern int __glXImageSize(GLenum format, GLenum type, GLsizei w, GLsizei h,
                          GLint rowLength, GLint skipRows, GLint alignment);
extern int __glXImage3DSize(GLenum format, GLenum type,
                            GLsizei w, GLsizei h, GLsizei d,
                            GLint imageHeight, GLint rowLength,
                            GLint skipImages, GLint skipRows, GLint alignment);

extern int __glXCallListsReqSize(GLbyte * pc, Bool swap);
extern int __glXBitmapReqSize(GLbyte * pc, Bool swap);
extern int __glXFogfvReqSize(GLbyte * pc, Bool swap);
extern int __glXFogivReqSize(GLbyte * pc, Bool swap);
extern int __glXLightfvReqSize(GLbyte * pc, Bool swap);
extern int __glXLightivReqSize(GLbyte * pc, Bool swap);
extern int __glXLightModelfvReqSize(GLbyte * pc, Bool swap);
extern int __glXLightModelivReqSize(GLbyte * pc, Bool swap);
extern int __glXMaterialfvReqSize(GLbyte * pc, Bool swap);
extern int __glXMaterialivReqSize(GLbyte * pc, Bool swap);
extern int __glXTexParameterfvReqSize(GLbyte * pc, Bool swap);
extern int __glXTexParameterivReqSize(GLbyte * pc, Bool swap);
extern int __glXTexImage1DReqSize(GLbyte * pc, Bool swap);
extern int __glXTexImage2DReqSize(GLbyte * pc, Bool swap);
extern int __glXTexEnvfvReqSize(GLbyte * pc, Bool swap);
extern int __glXTexEnvivReqSize(GLbyte * pc, Bool swap);
extern int __glXTexGendvReqSize(GLbyte * pc, Bool swap);
extern int __glXTexGenfvReqSize(GLbyte * pc, Bool swap);
extern int __glXTexGenivReqSize(GLbyte * pc, Bool swap);
extern int __glXMap1dReqSize(GLbyte * pc, Bool swap);
extern int __glXMap1fReqSize(GLbyte * pc, Bool swap);
extern int __glXMap2dReqSize(GLbyte * pc, Bool swap);
extern int __glXMap2fReqSize(GLbyte * pc, Bool swap);
extern int __glXPixelMapfvReqSize(GLbyte * pc, Bool swap);
extern int __glXPixelMapuivReqSize(GLbyte * pc, Bool swap);
extern int __glXPixelMapusvReqSize(GLbyte * pc, Bool swap);
extern int __glXDrawPixelsReqSize(GLbyte * pc, Bool swap);
extern int __glXDrawArraysSize(GLbyte * pc, Bool swap);
extern int __glXPrioritizeTexturesReqSize(GLbyte * pc, Bool swap);
extern int __glXTexSubImage1DReqSize(GLbyte * pc, Bool swap);
extern int __glXTexSubImage2DReqSize(GLbyte * pc, Bool swap);
extern int __glXTexImage3DReqSize(GLbyte * pc, Bool swap);
extern int __glXTexSubImage3DReqSize(GLbyte * pc, Bool swap);
extern int __glXConvolutionFilter1DReqSize(GLbyte * pc, Bool swap);
extern int __glXConvolutionFilter2DReqSize(GLbyte * pc, Bool swap);
extern int __glXConvolutionParameterivReqSize(GLbyte * pc, Bool swap);
extern int __glXConvolutionParameterfvReqSize(GLbyte * pc, Bool swap);
extern int __glXSeparableFilter2DReqSize(GLbyte * pc, Bool swap);
extern int __glXColorTableReqSize(GLbyte * pc, Bool swap);
extern int __glXColorSubTableReqSize(GLbyte * pc, Bool swap);
extern int __glXColorTableParameterfvReqSize(GLbyte * pc, Bool swap);
extern int __glXColorTableParameterivReqSize(GLbyte * pc, Bool swap);

/*
 * Routines for computing the size of returned data.
 */
extern int __glXConvolutionParameterivSize(GLenum pname);
extern int __glXConvolutionParameterfvSize(GLenum pname);
extern int __glXColorTableParameterfvSize(GLenum pname);
extern int __glXColorTableParameterivSize(GLenum pname);

extern int __glXVersionMajor;
extern int __glXVersionMinor;

#define __GLX_IS_VERSION_SUPPORTED(major,minor) \
         ( (__glXVersionMajor > (major)) || \
           ((__glXVersionMajor == (major)) && (__glXVersionMinor >= (minor))) )

#endif                          /* !__GLX_server_h__ */
@


1.5
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@a151 1
extern __GLXdispatchSingleProcPtr __glXSingleTable[];
a152 1
extern __GLXdispatchSingleProcPtr __glXSwapSingleTable[];
a193 3
extern void __glXDisp_DrawArrays(GLbyte *);
extern void __glXDispSwap_DrawArrays(GLbyte *);

a283 3

extern void __glXFreeGLXWindow(__glXWindow * pGlxWindow);
extern void __glXFreeGLXPbuffer(__glXPbuffer * pGlxPbuffer);
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a121 2
    int GLClientmajorVersion;
    int GLClientminorVersion;
@


1.3
log
@Update to xserver 1.11.2
@
text
@d44 1
a44 8

/*
** The X header misc.h defines these math functions.
*/
#undef abs
#undef fabs

#define GL_GLEXT_PROTOTYPES /* we want prototypes */
a53 1

d85 2
a86 1
extern __GLXcontext *__glXForceCurrent(__GLXclientState*, GLXContextTag, int*);
d91 3
a93 3
   int elem_size;  /* element size in bytes */
   int nelems;     /* number of elements to swap */
   void (*swapfunc)(GLbyte *pc);
d101 2
a102 2
    ** Whether this structure is currently being used to support a client.
    */
d106 2
a107 2
    ** Buffer for returned data.
    */
d112 3
a114 3
    ** Keep a list of all the contexts that are current for this client's
    ** threads.
    */
d126 1
a126 1
    GLXContextTag  *be_currentCTag;
d130 8
a137 8
    ** Keep track of large rendering commands, which span multiple requests.
    */
    GLint largeCmdBytesSoFar;		/* bytes received so far	*/
    GLint largeCmdBytesTotal;		/* total bytes expected		*/
    GLint largeCmdRequestsSoFar;	/* requests received so far	*/
    GLint largeCmdRequestsTotal;	/* total requests expected	*/
    void (*largeCmdRequestsSwapProc)(GLbyte *); 
    __GLXRenderSwapInfo  *largeCmdRequestsSwap_info;
d151 3
a153 3
typedef void (*__GLXdispatchRenderProcPtr)(GLbyte *);
typedef int (*__GLXdispatchSingleProcPtr)(__GLXclientState *, GLbyte *);
typedef int (*__GLXdispatchVendorPrivProcPtr)(__GLXclientState *, GLbyte *);
d165 1
a165 1
typedef int (*__GLXprocPtr)(__GLXclientState *, char *pc);
d173 1
a173 1
    int (*varsize)(GLbyte *pc, Bool swap);
a195 1

d198 2
a199 3
extern void __glXDisp_DrawArrays(GLbyte*);
extern void __glXDispSwap_DrawArrays(GLbyte*);

d205 2
a206 2
extern void __glXSwapMakeCurrentReply(ClientPtr client,  
                                      xGLXMakeCurrentReadSGIReply *reply);
d208 1
a208 2
extern void __glXSwapIsDirectReply(ClientPtr client,
				   xGLXIsDirectReply *reply);
d210 1
a210 1
				       xGLXQueryVersionReply *reply);
d212 2
a213 2
					      xGLXQueryContextInfoEXTReply *reply,
					      int *buf);
d215 2
a216 1
				xGLXQueryExtensionsStringReply *reply, char *buf);
d218 2
a219 1
				xGLXQueryServerStringReply *reply, char *buf);
d221 1
a221 1
                                xGLXQueryContextReply *reply, int *buf);
d223 2
a224 1
                             xGLXGetDrawableAttributesReply *reply, int *buf);
d226 2
a227 1
				   xGLXQueryMaxSwapBarriersSGIXReply *reply);
d235 1
a235 1
			  GLint rowLength, GLint skipRows, GLint alignment);
d237 46
a282 47
			    GLsizei w, GLsizei h, GLsizei d,
			    GLint imageHeight, GLint rowLength,
			    GLint skipImages, GLint skipRows,
			    GLint alignment);

extern int __glXCallListsReqSize(GLbyte *pc, Bool swap);
extern int __glXBitmapReqSize(GLbyte *pc, Bool swap);
extern int __glXFogfvReqSize(GLbyte *pc, Bool swap);
extern int __glXFogivReqSize(GLbyte *pc, Bool swap);
extern int __glXLightfvReqSize(GLbyte *pc, Bool swap);
extern int __glXLightivReqSize(GLbyte *pc, Bool swap);
extern int __glXLightModelfvReqSize(GLbyte *pc, Bool swap);
extern int __glXLightModelivReqSize(GLbyte *pc, Bool swap);
extern int __glXMaterialfvReqSize(GLbyte *pc, Bool swap);
extern int __glXMaterialivReqSize(GLbyte *pc, Bool swap);
extern int __glXTexParameterfvReqSize(GLbyte *pc, Bool swap);
extern int __glXTexParameterivReqSize(GLbyte *pc, Bool swap);
extern int __glXTexImage1DReqSize(GLbyte *pc, Bool swap);
extern int __glXTexImage2DReqSize(GLbyte *pc, Bool swap);
extern int __glXTexEnvfvReqSize(GLbyte *pc, Bool swap);
extern int __glXTexEnvivReqSize(GLbyte *pc, Bool swap);
extern int __glXTexGendvReqSize(GLbyte *pc, Bool swap);
extern int __glXTexGenfvReqSize(GLbyte *pc, Bool swap);
extern int __glXTexGenivReqSize(GLbyte *pc, Bool swap);
extern int __glXMap1dReqSize(GLbyte *pc, Bool swap);
extern int __glXMap1fReqSize(GLbyte *pc, Bool swap);
extern int __glXMap2dReqSize(GLbyte *pc, Bool swap);
extern int __glXMap2fReqSize(GLbyte *pc, Bool swap);
extern int __glXPixelMapfvReqSize(GLbyte *pc, Bool swap);
extern int __glXPixelMapuivReqSize(GLbyte *pc, Bool swap);
extern int __glXPixelMapusvReqSize(GLbyte *pc, Bool swap);
extern int __glXDrawPixelsReqSize(GLbyte *pc, Bool swap);
extern int __glXDrawArraysSize(GLbyte *pc, Bool swap);
extern int __glXPrioritizeTexturesReqSize(GLbyte *pc, Bool swap);
extern int __glXTexSubImage1DReqSize(GLbyte *pc, Bool swap);
extern int __glXTexSubImage2DReqSize(GLbyte *pc, Bool swap);
extern int __glXTexImage3DReqSize(GLbyte *pc, Bool swap );
extern int __glXTexSubImage3DReqSize(GLbyte *pc, Bool swap);
extern int __glXConvolutionFilter1DReqSize(GLbyte *pc, Bool swap);
extern int __glXConvolutionFilter2DReqSize(GLbyte *pc, Bool swap);
extern int __glXConvolutionParameterivReqSize(GLbyte *pc, Bool swap);
extern int __glXConvolutionParameterfvReqSize(GLbyte *pc, Bool swap);
extern int __glXSeparableFilter2DReqSize(GLbyte *pc, Bool swap);
extern int __glXColorTableReqSize(GLbyte *pc, Bool swap);
extern int __glXColorSubTableReqSize(GLbyte *pc, Bool swap);
extern int __glXColorTableParameterfvReqSize(GLbyte *pc, Bool swap);
extern int __glXColorTableParameterivReqSize(GLbyte *pc, Bool swap);
d292 2
a293 2
extern void __glXFreeGLXWindow(__glXWindow *pGlxWindow);
extern void __glXFreeGLXPbuffer(__glXPbuffer *pGlxPbuffer);
d302 1
a302 1
#endif /* !__GLX_server_h__ */
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a94 8
/*
** Macros to set, unset, and retrieve the flag that says whether a context
** has unflushed commands.
*/
#define __GLX_NOTE_UNFLUSHED_CMDS(glxc) glxc->hasUnflushedCommands = GL_TRUE
#define __GLX_NOTE_FLUSHED_CMDS(glxc) glxc->hasUnflushedCommands = GL_FALSE
#define __GLX_HAS_UNFLUSHED_CMDS(glxc) (glxc->hasUnflushedCommands)

@


1.1
log
@Initial revision
@
text
@d5 28
a32 33
** License Applicability. Except to the extent portions of this file are
** made subject to an alternative license as permitted in the SGI Free
** Software License B, Version 1.1 (the "License"), the contents of this
** file are subject only to the provisions of the License. You may not use
** this file except in compliance with the License. You may obtain a copy
** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
** 
** http://oss.sgi.com/projects/FreeB
** 
** Note that, as provided in the License, the Software is distributed on an
** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
** 
** Original Code. The Original Code is: OpenGL Sample Implementation,
** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
** Copyright in any portions created by third parties is as indicated
** elsewhere herein. All Rights Reserved.
** 
** Additional Notice Provisions: The application programming interfaces
** established by SGI in conjunction with the Original Code are The
** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
** Window System(R) (Version 1.3), released October 19, 1998. This software
** was created using the OpenGL(R) version 1.2.1 Sample Implementation
** published by SGI, but has not been independently verified as being
** compliant with the OpenGL(R) version 1.2.1 Specification.
**
*/
a54 3

/* For glxscreens.h */
typedef struct __GLXdrawablePrivateRec __GLXdrawablePrivate;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d61 3
@

