head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.22
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.20
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.18
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.16
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.14
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.12.18.16.09.00;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.23.43;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.23.43;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008)
 * Copyright (C) 1991-2000 Silicon Graphics, Inc. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice including the dates of first publication and
 * either this permission notice or a reference to
 * http://oss.sgi.com/projects/FreeB/
 * shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of Silicon Graphics, Inc.
 * shall not be used in advertising or otherwise to promote the sale, use or
 * other dealings in this Software without prior written authorization from
 * Silicon Graphics, Inc.
 */

#include <GL/gl.h>
#include "compsize.h"

GLint
__glFogiv_size(GLenum pname)
{
    switch (pname) {
    case GL_FOG_COLOR:
        return 4;
    case GL_FOG_DENSITY:
        return 1;
    case GL_FOG_END:
        return 1;
    case GL_FOG_MODE:
        return 1;
    case GL_FOG_INDEX:
        return 1;
    case GL_FOG_START:
        return 1;
    default:
        return 0;
    }
}

GLint
__glFogfv_size(GLenum pname)
{
    return __glFogiv_size(pname);
}

GLint
__glCallLists_size(GLsizei n, GLenum type)
{
    GLint size;

    if (n < 0)
        return 0;
    switch (type) {
    case GL_BYTE:
        size = 1;
        break;
    case GL_UNSIGNED_BYTE:
        size = 1;
        break;
    case GL_SHORT:
        size = 2;
        break;
    case GL_UNSIGNED_SHORT:
        size = 2;
        break;
    case GL_INT:
        size = 4;
        break;
    case GL_UNSIGNED_INT:
        size = 4;
        break;
    case GL_FLOAT:
        size = 4;
        break;
    case GL_2_BYTES:
        size = 2;
        break;
    case GL_3_BYTES:
        size = 3;
        break;
    case GL_4_BYTES:
        size = 4;
        break;
    default:
        return 0;
    }
    return n * size;
}

GLint
__glDrawPixels_size(GLenum format, GLenum type, GLsizei w, GLsizei h)
{
    GLint elements, esize;

    switch (format) {
    case GL_COLOR_INDEX:
    case GL_STENCIL_INDEX:
    case GL_DEPTH_COMPONENT:
        elements = 1;
        break;
    case GL_RED:
    case GL_GREEN:
    case GL_BLUE:
    case GL_ALPHA:
    case GL_LUMINANCE:
        elements = 1;
        break;
    case GL_LUMINANCE_ALPHA:
        elements = 2;
        break;
    case GL_RGB:
        elements = 3;
        break;
    case GL_RGBA:
    case GL_ABGR_EXT:
        elements = 4;
        break;
    default:
        return 0;
    }
    switch (type) {
    case GL_BITMAP:
        if (format == GL_COLOR_INDEX || format == GL_STENCIL_INDEX) {
            return (h * ((w + 7) / 8));
        }
        else {
            return 0;
        }
    case GL_BYTE:
    case GL_UNSIGNED_BYTE:
        esize = 1;
        break;
    case GL_UNSIGNED_BYTE_3_3_2:
    case GL_UNSIGNED_BYTE_2_3_3_REV:
        esize = 1;
        elements = 1;
        break;
    case GL_SHORT:
    case GL_UNSIGNED_SHORT:
        esize = 2;
        break;
    case GL_UNSIGNED_SHORT_5_6_5:
    case GL_UNSIGNED_SHORT_5_6_5_REV:
    case GL_UNSIGNED_SHORT_4_4_4_4:
    case GL_UNSIGNED_SHORT_4_4_4_4_REV:
    case GL_UNSIGNED_SHORT_5_5_5_1:
    case GL_UNSIGNED_SHORT_1_5_5_5_REV:
        esize = 2;
        elements = 1;
        break;
    case GL_INT:
    case GL_UNSIGNED_INT:
    case GL_FLOAT:
        esize = 4;
        break;
    case GL_UNSIGNED_INT_8_8_8_8:
    case GL_UNSIGNED_INT_8_8_8_8_REV:
    case GL_UNSIGNED_INT_10_10_10_2:
    case GL_UNSIGNED_INT_2_10_10_10_REV:
        esize = 4;
        elements = 1;
        break;
    default:
        return 0;
    }
    return elements * esize * w * h;
}

GLint
__glBitmap_size(GLsizei w, GLsizei h)
{
    return __glDrawPixels_size(GL_COLOR_INDEX, GL_BITMAP, w, h);
}

GLint
__glTexGendv_size(GLenum e)
{
    switch (e) {
    case GL_TEXTURE_GEN_MODE:
        return 1;
    case GL_OBJECT_PLANE:
    case GL_EYE_PLANE:
        return 4;
    default:
        return 0;
    }
}

GLint
__glTexGenfv_size(GLenum e)
{
    return __glTexGendv_size(e);
}

GLint
__glTexGeniv_size(GLenum e)
{
    return __glTexGendv_size(e);
}

GLint
__glTexParameterfv_size(GLenum e)
{
    switch (e) {
    case GL_TEXTURE_WRAP_S:
    case GL_TEXTURE_WRAP_T:
    case GL_TEXTURE_WRAP_R:
    case GL_TEXTURE_MIN_FILTER:
    case GL_TEXTURE_MAG_FILTER:
        return 1;
    case GL_TEXTURE_BORDER_COLOR:
        return 4;
    case GL_TEXTURE_PRIORITY:
        return 1;
    case GL_TEXTURE_MIN_LOD:
    case GL_TEXTURE_MAX_LOD:
    case GL_TEXTURE_BASE_LEVEL:
    case GL_TEXTURE_MAX_LEVEL:
        return 1;
    default:
        return 0;
    }
}

GLint
__glTexParameteriv_size(GLenum e)
{
    return __glTexParameterfv_size(e);
}

GLint
__glTexEnvfv_size(GLenum e)
{
    switch (e) {
    case GL_TEXTURE_ENV_MODE:
        return 1;
    case GL_TEXTURE_ENV_COLOR:
        return 4;
    default:
        return 0;
    }
}

GLint
__glTexEnviv_size(GLenum e)
{
    return __glTexEnvfv_size(e);
}

GLint
__glTexImage1D_size(GLenum format, GLenum type, GLsizei w)
{
    GLint elements, esize;

    if (w < 0)
        return 0;
    switch (format) {
    case GL_COLOR_INDEX:
        elements = 1;
        break;
    case GL_RED:
    case GL_GREEN:
    case GL_BLUE:
    case GL_ALPHA:
    case GL_LUMINANCE:
        elements = 1;
        break;
    case GL_LUMINANCE_ALPHA:
        elements = 2;
        break;
    case GL_RGB:
        elements = 3;
        break;
    case GL_RGBA:
    case GL_ABGR_EXT:
        elements = 4;
        break;
    default:
        return 0;
    }
    switch (type) {
    case GL_BITMAP:
        if (format == GL_COLOR_INDEX) {
            return (w + 7) / 8;
        }
        else {
            return 0;
        }
    case GL_BYTE:
    case GL_UNSIGNED_BYTE:
        esize = 1;
        break;
    case GL_UNSIGNED_BYTE_3_3_2:
    case GL_UNSIGNED_BYTE_2_3_3_REV:
        esize = 1;
        elements = 1;
        break;
    case GL_SHORT:
    case GL_UNSIGNED_SHORT:
        esize = 2;
        break;
    case GL_UNSIGNED_SHORT_5_6_5:
    case GL_UNSIGNED_SHORT_5_6_5_REV:
    case GL_UNSIGNED_SHORT_4_4_4_4:
    case GL_UNSIGNED_SHORT_4_4_4_4_REV:
    case GL_UNSIGNED_SHORT_5_5_5_1:
    case GL_UNSIGNED_SHORT_1_5_5_5_REV:
        esize = 2;
        elements = 1;
        break;
    case GL_INT:
    case GL_UNSIGNED_INT:
    case GL_FLOAT:
        esize = 4;
        break;
    case GL_UNSIGNED_INT_8_8_8_8:
    case GL_UNSIGNED_INT_8_8_8_8_REV:
    case GL_UNSIGNED_INT_10_10_10_2:
    case GL_UNSIGNED_INT_2_10_10_10_REV:
        esize = 4;
        elements = 1;
        break;
    default:
        return 0;
    }
    return elements * esize * w;
}

GLint
__glTexImage2D_size(GLenum format, GLenum type, GLsizei w, GLsizei h)
{
    GLint elements, esize;

    if (w < 0)
        return 0;
    if (h < 0)
        return 0;
    switch (format) {
    case GL_COLOR_INDEX:
        elements = 1;
        break;
    case GL_RED:
    case GL_GREEN:
    case GL_BLUE:
    case GL_ALPHA:
    case GL_LUMINANCE:
        elements = 1;
        break;
    case GL_LUMINANCE_ALPHA:
        elements = 2;
        break;
    case GL_RGB:
        elements = 3;
        break;
    case GL_RGBA:
    case GL_ABGR_EXT:
        elements = 4;
        break;
    default:
        return 0;
    }
    switch (type) {
    case GL_BITMAP:
        if (format == GL_COLOR_INDEX) {
            return (h * ((w + 7) / 8));
        }
        else {
            return 0;
        }
    case GL_BYTE:
    case GL_UNSIGNED_BYTE:
        esize = 1;
        break;
    case GL_UNSIGNED_BYTE_3_3_2:
    case GL_UNSIGNED_BYTE_2_3_3_REV:
        esize = 1;
        elements = 1;
        break;
    case GL_SHORT:
    case GL_UNSIGNED_SHORT:
        esize = 2;
        break;
    case GL_UNSIGNED_SHORT_5_6_5:
    case GL_UNSIGNED_SHORT_5_6_5_REV:
    case GL_UNSIGNED_SHORT_4_4_4_4:
    case GL_UNSIGNED_SHORT_4_4_4_4_REV:
    case GL_UNSIGNED_SHORT_5_5_5_1:
    case GL_UNSIGNED_SHORT_1_5_5_5_REV:
        esize = 2;
        elements = 1;
        break;
    case GL_INT:
    case GL_UNSIGNED_INT:
    case GL_FLOAT:
        esize = 4;
        break;
    case GL_UNSIGNED_INT_8_8_8_8:
    case GL_UNSIGNED_INT_8_8_8_8_REV:
    case GL_UNSIGNED_INT_10_10_10_2:
    case GL_UNSIGNED_INT_2_10_10_10_REV:
        esize = 4;
        elements = 1;
        break;
    default:
        return 0;
    }
    return elements * esize * w * h;
}

GLint
__glTexImage3D_size(GLenum format, GLenum type, GLsizei w, GLsizei h, GLsizei d)
{
    GLint elements, esize;

    if (w < 0)
        return 0;
    if (h < 0)
        return 0;
    if (d < 0)
        return 0;
    switch (format) {
    case GL_COLOR_INDEX:
        elements = 1;
        break;
    case GL_RED:
    case GL_GREEN:
    case GL_BLUE:
    case GL_ALPHA:
    case GL_LUMINANCE:
        elements = 1;
        break;
    case GL_LUMINANCE_ALPHA:
        elements = 2;
        break;
    case GL_RGB:
        elements = 3;
        break;
    case GL_RGBA:
    case GL_ABGR_EXT:
        elements = 4;
        break;
    default:
        return 0;
    }
    switch (type) {
    case GL_BITMAP:
        if (format == GL_COLOR_INDEX) {
            return (d * (h * ((w + 7) / 8)));
        }
        else {
            return 0;
        }
    case GL_BYTE:
    case GL_UNSIGNED_BYTE:
        esize = 1;
        break;
    case GL_UNSIGNED_BYTE_3_3_2:
    case GL_UNSIGNED_BYTE_2_3_3_REV:
        esize = 1;
        elements = 1;
        break;
    case GL_SHORT:
    case GL_UNSIGNED_SHORT:
        esize = 2;
        break;
    case GL_UNSIGNED_SHORT_5_6_5:
    case GL_UNSIGNED_SHORT_5_6_5_REV:
    case GL_UNSIGNED_SHORT_4_4_4_4:
    case GL_UNSIGNED_SHORT_4_4_4_4_REV:
    case GL_UNSIGNED_SHORT_5_5_5_1:
    case GL_UNSIGNED_SHORT_1_5_5_5_REV:
        esize = 2;
        elements = 1;
        break;
    case GL_INT:
    case GL_UNSIGNED_INT:
    case GL_FLOAT:
        esize = 4;
        break;
    case GL_UNSIGNED_INT_8_8_8_8:
    case GL_UNSIGNED_INT_8_8_8_8_REV:
    case GL_UNSIGNED_INT_10_10_10_2:
    case GL_UNSIGNED_INT_2_10_10_10_REV:
        esize = 4;
        elements = 1;
        break;
    default:
        return 0;
    }
    return elements * esize * w * h * d;
}

GLint
__glLightfv_size(GLenum pname)
{
    switch (pname) {
    case GL_SPOT_EXPONENT:
        return 1;
    case GL_SPOT_CUTOFF:
        return 1;
    case GL_AMBIENT:
        return 4;
    case GL_DIFFUSE:
        return 4;
    case GL_SPECULAR:
        return 4;
    case GL_POSITION:
        return 4;
    case GL_SPOT_DIRECTION:
        return 3;
    case GL_CONSTANT_ATTENUATION:
        return 1;
    case GL_LINEAR_ATTENUATION:
        return 1;
    case GL_QUADRATIC_ATTENUATION:
        return 1;
    default:
        return 0;
    }
}

GLint
__glLightiv_size(GLenum pname)
{
    return __glLightfv_size(pname);
}

GLint
__glLightModelfv_size(GLenum pname)
{
    switch (pname) {
    case GL_LIGHT_MODEL_AMBIENT:
        return 4;
    case GL_LIGHT_MODEL_LOCAL_VIEWER:
        return 1;
    case GL_LIGHT_MODEL_TWO_SIDE:
        return 1;
    case GL_LIGHT_MODEL_COLOR_CONTROL:
        return 1;
    default:
        return 0;
    }
}

GLint
__glLightModeliv_size(GLenum pname)
{
    return __glLightModelfv_size(pname);
}

GLint
__glMaterialfv_size(GLenum pname)
{
    switch (pname) {
    case GL_SHININESS:
        return 1;
    case GL_EMISSION:
        return 4;
    case GL_AMBIENT:
        return 4;
    case GL_DIFFUSE:
        return 4;
    case GL_SPECULAR:
        return 4;
    case GL_AMBIENT_AND_DIFFUSE:
        return 4;
    case GL_COLOR_INDEXES:
        return 3;
    default:
        return 0;
    }
}

GLint
__glMaterialiv_size(GLenum pname)
{
    return __glMaterialfv_size(pname);
}

GLint
__glColorTableParameterfv_size(GLenum pname)
{
    switch (pname) {
    case GL_COLOR_TABLE_FORMAT:
    case GL_COLOR_TABLE_WIDTH:
    case GL_COLOR_TABLE_RED_SIZE:
    case GL_COLOR_TABLE_GREEN_SIZE:
    case GL_COLOR_TABLE_BLUE_SIZE:
    case GL_COLOR_TABLE_ALPHA_SIZE:
    case GL_COLOR_TABLE_LUMINANCE_SIZE:
    case GL_COLOR_TABLE_INTENSITY_SIZE:
        return 1;
    case GL_COLOR_TABLE_SCALE:
    case GL_COLOR_TABLE_BIAS:
        return 4;
    default:
        return -1;
    }
}

GLint
__glColorTableParameteriv_size(GLenum pname)
{
    return __glColorTableParameterfv_size(pname);
}

GLint
__glConvolutionParameterfv_size(GLenum pname)
{
    switch (pname) {
    case GL_CONVOLUTION_BORDER_MODE:
        return 1;
    case GL_CONVOLUTION_BORDER_COLOR:
    case GL_CONVOLUTION_FILTER_SCALE:
    case GL_CONVOLUTION_FILTER_BIAS:
        return 4;
    default:                   /* error: bad enum value */
        return -1;
    }
}

GLint
__glConvolutionParameteriv_size(GLenum pname)
{
    return __glConvolutionParameterfv_size(pname);
}
@


1.4
log
@Bugfix Update to xserver 1.11.3
@
text
@d34 2
a35 1
GLint __glFogiv_size(GLenum pname)
d38 14
a51 8
      case GL_FOG_COLOR:	return 4;
      case GL_FOG_DENSITY:	return 1;
      case GL_FOG_END:		return 1;
      case GL_FOG_MODE:		return 1;
      case GL_FOG_INDEX:	return 1;
      case GL_FOG_START:	return 1;
      default:
	return 0;
d55 2
a56 1
GLint __glFogfv_size(GLenum pname)
d61 2
a62 1
GLint __glCallLists_size(GLsizei n, GLenum type)
d66 2
a67 1
    if (n < 0) return 0;
d69 32
a100 12
      case GL_BYTE:		size = 1; break;
      case GL_UNSIGNED_BYTE:	size = 1; break;
      case GL_SHORT:		size = 2; break;
      case GL_UNSIGNED_SHORT:	size = 2; break;
      case GL_INT:		size = 4; break;
      case GL_UNSIGNED_INT:	size = 4; break;
      case GL_FLOAT:		size = 4; break;
      case GL_2_BYTES:		size = 2; break;
      case GL_3_BYTES:		size = 3; break;
      case GL_4_BYTES:		size = 4; break;
      default:
	return 0;
d105 2
a106 1
GLint __glDrawPixels_size(GLenum format, GLenum type, GLsizei w, GLsizei h)
d109 1
a109 1
    
d111 24
a134 24
      case GL_COLOR_INDEX:
      case GL_STENCIL_INDEX:
      case GL_DEPTH_COMPONENT:
	elements = 1;
	break;
      case GL_RED:
      case GL_GREEN:
      case GL_BLUE:
      case GL_ALPHA:
      case GL_LUMINANCE:
	elements = 1;
	break;
      case GL_LUMINANCE_ALPHA:
	elements = 2;
	break;
      case GL_RGB:
	elements = 3;
	break;
      case GL_RGBA:
      case GL_ABGR_EXT:
	elements = 4;
	break;
      default:
	return 0;
d137 43
a179 42
      case GL_BITMAP:
	if (format == GL_COLOR_INDEX || format == GL_STENCIL_INDEX) {
	    return (h * ((w+7)/8));
	} else {
	    return 0;
	}
      case GL_BYTE:
      case GL_UNSIGNED_BYTE:
	esize = 1;
	break;
      case GL_UNSIGNED_BYTE_3_3_2:
      case GL_UNSIGNED_BYTE_2_3_3_REV:
	esize = 1;
	elements = 1;
	break;
      case GL_SHORT:
      case GL_UNSIGNED_SHORT:
	esize = 2;
	break;
      case GL_UNSIGNED_SHORT_5_6_5:
      case GL_UNSIGNED_SHORT_5_6_5_REV:
      case GL_UNSIGNED_SHORT_4_4_4_4:
      case GL_UNSIGNED_SHORT_4_4_4_4_REV:
      case GL_UNSIGNED_SHORT_5_5_5_1:
      case GL_UNSIGNED_SHORT_1_5_5_5_REV:
	esize = 2;
	elements = 1;
	break;
      case GL_INT:
      case GL_UNSIGNED_INT:
      case GL_FLOAT:
	esize = 4;
	break;
      case GL_UNSIGNED_INT_8_8_8_8:
      case GL_UNSIGNED_INT_8_8_8_8_REV:
      case GL_UNSIGNED_INT_10_10_10_2:
      case GL_UNSIGNED_INT_2_10_10_10_REV:
	esize = 4;
	elements = 1;
	break;
      default:
	return 0;
d184 2
a185 1
GLint __glBitmap_size(GLsizei w, GLsizei h)
d190 2
a191 1
GLint __glTexGendv_size(GLenum e)
d194 7
a200 7
      case GL_TEXTURE_GEN_MODE:
	return 1;
      case GL_OBJECT_PLANE:
      case GL_EYE_PLANE:
	return 4;
      default:
	return 0;
d204 2
a205 1
GLint __glTexGenfv_size(GLenum e)
d210 2
a211 1
GLint __glTexGeniv_size(GLenum e)
d216 2
a217 1
GLint __glTexParameterfv_size(GLenum e)
d220 17
a236 17
      case GL_TEXTURE_WRAP_S:
      case GL_TEXTURE_WRAP_T:
      case GL_TEXTURE_WRAP_R:
      case GL_TEXTURE_MIN_FILTER:
      case GL_TEXTURE_MAG_FILTER:
	return 1;
      case GL_TEXTURE_BORDER_COLOR:
	return 4;
      case GL_TEXTURE_PRIORITY:
	return 1;
      case GL_TEXTURE_MIN_LOD:
      case GL_TEXTURE_MAX_LOD:
      case GL_TEXTURE_BASE_LEVEL:
      case GL_TEXTURE_MAX_LEVEL:
	return 1;
      default:
	return 0;
d240 2
a241 1
GLint __glTexParameteriv_size(GLenum e)
d246 2
a247 1
GLint __glTexEnvfv_size(GLenum e)
d250 6
a255 6
      case GL_TEXTURE_ENV_MODE:
	return 1;
      case GL_TEXTURE_ENV_COLOR:
	return 4;
      default:
	return 0;
d259 2
a260 1
GLint __glTexEnviv_size(GLenum e)
d265 2
a266 1
GLint __glTexImage1D_size(GLenum format, GLenum type, GLsizei w)
d270 2
a271 1
    if (w < 0) return 0;
d273 22
a294 22
      case GL_COLOR_INDEX:
	elements = 1;
	break;
      case GL_RED:
      case GL_GREEN:
      case GL_BLUE:
      case GL_ALPHA:
      case GL_LUMINANCE:
	elements = 1;
	break;
      case GL_LUMINANCE_ALPHA:
	elements = 2;
	break;
      case GL_RGB:
	elements = 3;
	break;
      case GL_RGBA:
      case GL_ABGR_EXT:
	elements = 4;
	break;
      default:
	return 0;
d297 43
a339 42
      case GL_BITMAP:
	if (format == GL_COLOR_INDEX) {
	    return (w+7)/8;
	} else {
	    return 0;
	}
      case GL_BYTE:
      case GL_UNSIGNED_BYTE:
	esize = 1;
	break;
      case GL_UNSIGNED_BYTE_3_3_2:
      case GL_UNSIGNED_BYTE_2_3_3_REV:
	esize = 1;
	elements = 1;
	break;
      case GL_SHORT:
      case GL_UNSIGNED_SHORT:
	esize = 2;
	break;
      case GL_UNSIGNED_SHORT_5_6_5:
      case GL_UNSIGNED_SHORT_5_6_5_REV:
      case GL_UNSIGNED_SHORT_4_4_4_4:
      case GL_UNSIGNED_SHORT_4_4_4_4_REV:
      case GL_UNSIGNED_SHORT_5_5_5_1:
      case GL_UNSIGNED_SHORT_1_5_5_5_REV:
	esize = 2;
	elements = 1;
	break;
      case GL_INT:
      case GL_UNSIGNED_INT:
      case GL_FLOAT:
	esize = 4;
	break;
      case GL_UNSIGNED_INT_8_8_8_8:
      case GL_UNSIGNED_INT_8_8_8_8_REV:
      case GL_UNSIGNED_INT_10_10_10_2:
      case GL_UNSIGNED_INT_2_10_10_10_REV:
	esize = 4;
	elements = 1;
	break;
      default:
	return 0;
d344 2
a345 1
GLint __glTexImage2D_size(GLenum format, GLenum type, GLsizei w, GLsizei h)
d349 4
a352 2
    if (w < 0) return 0;
    if (h < 0) return 0;
d354 22
a375 22
      case GL_COLOR_INDEX:
	elements = 1;
	break;
      case GL_RED:
      case GL_GREEN:
      case GL_BLUE:
      case GL_ALPHA:
      case GL_LUMINANCE:
	elements = 1;
	break;
      case GL_LUMINANCE_ALPHA:
	elements = 2;
	break;
      case GL_RGB:
	elements = 3;
	break;
      case GL_RGBA:
      case GL_ABGR_EXT:
	elements = 4;
	break;
      default:
	return 0;
d378 43
a420 42
      case GL_BITMAP:
	if (format == GL_COLOR_INDEX) {
	    return (h * ((w+7)/8));
	} else {
	    return 0;
	}
      case GL_BYTE:
      case GL_UNSIGNED_BYTE:
	esize = 1;
	break;
      case GL_UNSIGNED_BYTE_3_3_2:
      case GL_UNSIGNED_BYTE_2_3_3_REV:
	esize = 1;
	elements = 1;
	break;
      case GL_SHORT:
      case GL_UNSIGNED_SHORT:
	esize = 2;
	break;
      case GL_UNSIGNED_SHORT_5_6_5:
      case GL_UNSIGNED_SHORT_5_6_5_REV:
      case GL_UNSIGNED_SHORT_4_4_4_4:
      case GL_UNSIGNED_SHORT_4_4_4_4_REV:
      case GL_UNSIGNED_SHORT_5_5_5_1:
      case GL_UNSIGNED_SHORT_1_5_5_5_REV:
	esize = 2;
	elements = 1;
	break;
      case GL_INT:
      case GL_UNSIGNED_INT:
      case GL_FLOAT:
	esize = 4;
	break;
      case GL_UNSIGNED_INT_8_8_8_8:
      case GL_UNSIGNED_INT_8_8_8_8_REV:
      case GL_UNSIGNED_INT_10_10_10_2:
      case GL_UNSIGNED_INT_2_10_10_10_REV:
	esize = 4;
	elements = 1;
	break;
      default:
	return 0;
d425 2
a426 2
GLint __glTexImage3D_size(GLenum format, GLenum type, GLsizei w, GLsizei h,
			  GLsizei d)
d430 6
a435 3
    if (w < 0) return 0;
    if (h < 0) return 0;
    if (d < 0) return 0;
d437 22
a458 22
      case GL_COLOR_INDEX:
	elements = 1;
	break;
      case GL_RED:
      case GL_GREEN:
      case GL_BLUE:
      case GL_ALPHA:
      case GL_LUMINANCE:
	elements = 1;
	break;
      case GL_LUMINANCE_ALPHA:
	elements = 2;
	break;
      case GL_RGB:
	elements = 3;
	break;
      case GL_RGBA:
      case GL_ABGR_EXT:
	elements = 4;
	break;
      default:
	return 0;
d461 43
a503 42
      case GL_BITMAP:
	if (format == GL_COLOR_INDEX) {
	    return (d * (h * ((w+7)/8)));
	} else {
	    return 0;
	}
      case GL_BYTE:
      case GL_UNSIGNED_BYTE:
	esize = 1;
	break;
      case GL_UNSIGNED_BYTE_3_3_2:
      case GL_UNSIGNED_BYTE_2_3_3_REV:
	esize = 1;
	elements = 1;
	break;
      case GL_SHORT:
      case GL_UNSIGNED_SHORT:
	esize = 2;
	break;
      case GL_UNSIGNED_SHORT_5_6_5:
      case GL_UNSIGNED_SHORT_5_6_5_REV:
      case GL_UNSIGNED_SHORT_4_4_4_4:
      case GL_UNSIGNED_SHORT_4_4_4_4_REV:
      case GL_UNSIGNED_SHORT_5_5_5_1:
      case GL_UNSIGNED_SHORT_1_5_5_5_REV:
	esize = 2;
	elements = 1;
	break;
      case GL_INT:
      case GL_UNSIGNED_INT:
      case GL_FLOAT:
	esize = 4;
	break;
      case GL_UNSIGNED_INT_8_8_8_8:
      case GL_UNSIGNED_INT_8_8_8_8_REV:
      case GL_UNSIGNED_INT_10_10_10_2:
      case GL_UNSIGNED_INT_2_10_10_10_REV:
	esize = 4;
	elements = 1;
	break;
      default:
	return 0;
d508 2
a509 1
GLint __glLightfv_size(GLenum pname)
d512 22
a533 12
      case GL_SPOT_EXPONENT:		return 1;
      case GL_SPOT_CUTOFF:		return 1;
      case GL_AMBIENT:			return 4;
      case GL_DIFFUSE:			return 4;
      case GL_SPECULAR:			return 4;
      case GL_POSITION:			return 4;
      case GL_SPOT_DIRECTION:		return 3;
      case GL_CONSTANT_ATTENUATION:	return 1;
      case GL_LINEAR_ATTENUATION:	return 1;
      case GL_QUADRATIC_ATTENUATION:	return 1;
      default:
	return 0;
d537 2
a538 1
GLint __glLightiv_size(GLenum pname)
d543 2
a544 1
GLint __glLightModelfv_size(GLenum pname)
d547 10
a556 6
      case GL_LIGHT_MODEL_AMBIENT:		return 4;
      case GL_LIGHT_MODEL_LOCAL_VIEWER:		return 1;
      case GL_LIGHT_MODEL_TWO_SIDE:		return 1;
      case GL_LIGHT_MODEL_COLOR_CONTROL:	return 1;
      default:
	return 0;
d560 2
a561 1
GLint __glLightModeliv_size(GLenum pname)
d566 2
a567 1
GLint __glMaterialfv_size(GLenum pname)
d570 16
a585 9
      case GL_SHININESS:		return 1;
      case GL_EMISSION:			return 4;
      case GL_AMBIENT:			return 4;
      case GL_DIFFUSE:			return 4;
      case GL_SPECULAR:			return 4;
      case GL_AMBIENT_AND_DIFFUSE:	return 4;
      case GL_COLOR_INDEXES:		return 3;
      default:
	return 0;
d589 2
a590 1
GLint __glMaterialiv_size(GLenum pname)
d595 2
a596 1
GLint __glColorTableParameterfv_size(GLenum pname)
d599 14
a612 14
      case GL_COLOR_TABLE_FORMAT:
      case GL_COLOR_TABLE_WIDTH:
      case GL_COLOR_TABLE_RED_SIZE:
      case GL_COLOR_TABLE_GREEN_SIZE:
      case GL_COLOR_TABLE_BLUE_SIZE:
      case GL_COLOR_TABLE_ALPHA_SIZE:
      case GL_COLOR_TABLE_LUMINANCE_SIZE:
      case GL_COLOR_TABLE_INTENSITY_SIZE:
	return 1;
      case GL_COLOR_TABLE_SCALE:
      case GL_COLOR_TABLE_BIAS:
	return 4;
      default:
	return -1;
d616 2
a617 1
GLint __glColorTableParameteriv_size(GLenum pname)
d622 2
a623 1
GLint __glConvolutionParameterfv_size(GLenum pname)
d625 9
a633 9
    switch(pname) {
      case GL_CONVOLUTION_BORDER_MODE:
	return 1;
      case GL_CONVOLUTION_BORDER_COLOR:
      case GL_CONVOLUTION_FILTER_SCALE:
      case GL_CONVOLUTION_FILTER_BIAS:
	return 4;
      default: /* error: bad enum value */
	return -1;
d637 2
a638 1
GLint __glConvolutionParameteriv_size(GLenum pname)
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d32 1
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d148 1
a148 1
    return (elements * esize * w * h);
d297 1
a297 1
    return (elements * esize * w);
d374 1
a374 1
    return (elements * esize * w * h);
d453 1
a453 1
    return (elements * esize * w * h * d);
@


1.1
log
@Initial revision
@
text
@d2 28
a29 33
** License Applicability. Except to the extent portions of this file are
** made subject to an alternative license as permitted in the SGI Free
** Software License B, Version 1.1 (the "License"), the contents of this
** file are subject only to the provisions of the License. You may not use
** this file except in compliance with the License. You may obtain a copy
** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
** 
** http://oss.sgi.com/projects/FreeB
** 
** Note that, as provided in the License, the Software is distributed on an
** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
** 
** Original Code. The Original Code is: OpenGL Sample Implementation,
** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
** Copyright in any portions created by third parties is as indicated
** elsewhere herein. All Rights Reserved.
** 
** Additional Notice Provisions: The application programming interfaces
** established by SGI in conjunction with the Original Code are The
** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
** Window System(R) (Version 1.3), released October 19, 1998. This software
** was created using the OpenGL(R) version 1.2.1 Sample Implementation
** published by SGI, but has not been independently verified as being
** compliant with the OpenGL(R) version 1.2.1 Specification.
**
*/
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
