head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.14
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.12
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.8
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.06.07.17.28.48;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.23;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.50;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.05;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.23.43;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.23.43;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@#ifndef __GLX_unpack_h__
#define __GLX_unpack_h__

/*
 * SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008)
 * Copyright (C) 1991-2000 Silicon Graphics, Inc. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice including the dates of first publication and
 * either this permission notice or a reference to
 * http://oss.sgi.com/projects/FreeB/
 * shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of Silicon Graphics, Inc.
 * shall not be used in advertising or otherwise to promote the sale, use or
 * other dealings in this Software without prior written authorization from
 * Silicon Graphics, Inc.
 */

#define __GLX_PAD(s) (((s)+3) & (GLuint)~3)

/*
** Fetch the context-id out of a SingleReq request pointed to by pc.
*/
#define __GLX_GET_SINGLE_CONTEXT_TAG(pc) (((xGLXSingleReq*)pc)->contextTag)
#define __GLX_GET_VENDPRIV_CONTEXT_TAG(pc) (((xGLXVendorPrivateReq*)pc)->contextTag)

/*
** Fetch a double from potentially unaligned memory.
*/
#ifdef __GLX_ALIGN64
#define __GLX_MEM_COPY(dst,src,n)	memmove(dst,src,n)
#define __GLX_GET_DOUBLE(dst,src)	__GLX_MEM_COPY(&dst,src,8)
#else
#define __GLX_GET_DOUBLE(dst,src)	(dst) = *((GLdouble*)(src))
#endif

extern void __glXMemInit(void);

extern xGLXSingleReply __glXReply;

#define __GLX_BEGIN_REPLY(size) \
  	__glXReply.length = __GLX_PAD(size) >> 2;	\
  	__glXReply.type = X_Reply; 			\
  	__glXReply.sequenceNumber = client->sequence;

#define __GLX_SEND_HEADER() \
	WriteToClient (client, sz_xGLXSingleReply, &__glXReply);

#define __GLX_PUT_RETVAL(a) \
  	__glXReply.retval = (a);

#define __GLX_PUT_SIZE(a) \
  	__glXReply.size = (a);

#define __GLX_PUT_RENDERMODE(m) \
        __glXReply.pad3 = (m)

/*
** Get a buffer to hold returned data, with the given alignment.  If we have
** to realloc, allocate size+align, in case the pointer has to be bumped for
** alignment.  The answerBuffer should already be aligned.
**
** NOTE: the cast (long)res below assumes a long is large enough to hold a
** pointer.
*/
#define __GLX_GET_ANSWER_BUFFER(res,cl,size,align)			 \
    if ((size) > sizeof(answerBuffer)) {				 \
	int bump;							 \
	if ((cl)->returnBufSize < (size)+(align)) {			 \
	    (cl)->returnBuf = (GLbyte*)realloc((cl)->returnBuf,		 \
						(size)+(align));         \
	    if (!(cl)->returnBuf) {					 \
		return BadAlloc;					 \
	    }								 \
	    (cl)->returnBufSize = (size)+(align);			 \
	}								 \
	res = (char*)cl->returnBuf;					 \
	bump = (long)(res) % (align);					 \
	if (bump) res += (align) - (bump);				 \
    } else {								 \
	res = (char *)answerBuffer;					 \
    }

#define __GLX_PUT_BYTE() \
  	*(GLbyte *)&__glXReply.pad3 = *(GLbyte *)answer

#define __GLX_PUT_SHORT() \
  	*(GLshort *)&__glXReply.pad3 = *(GLshort *)answer

#define __GLX_PUT_INT() \
  	*(GLint *)&__glXReply.pad3 = *(GLint *)answer

#define __GLX_PUT_FLOAT() \
  	*(GLfloat *)&__glXReply.pad3 = *(GLfloat *)answer

#define __GLX_PUT_DOUBLE() \
  	*(GLdouble *)&__glXReply.pad3 = *(GLdouble *)answer

#define __GLX_SEND_BYTE_ARRAY(len) \
	WriteToClient(client, __GLX_PAD((len)*__GLX_SIZE_INT8), answer)

#define __GLX_SEND_SHORT_ARRAY(len) \
	WriteToClient(client, __GLX_PAD((len)*__GLX_SIZE_INT16), answer)

#define __GLX_SEND_INT_ARRAY(len) \
	WriteToClient(client, (len)*__GLX_SIZE_INT32, answer)

#define __GLX_SEND_FLOAT_ARRAY(len) \
	WriteToClient(client, (len)*__GLX_SIZE_FLOAT32, answer)

#define __GLX_SEND_DOUBLE_ARRAY(len) \
	WriteToClient(client, (len)*__GLX_SIZE_FLOAT64, answer)

#define __GLX_SEND_VOID_ARRAY(len)  __GLX_SEND_BYTE_ARRAY(len)
#define __GLX_SEND_UBYTE_ARRAY(len)  __GLX_SEND_BYTE_ARRAY(len)
#define __GLX_SEND_USHORT_ARRAY(len) __GLX_SEND_SHORT_ARRAY(len)
#define __GLX_SEND_UINT_ARRAY(len)  __GLX_SEND_INT_ARRAY(len)

/*
** PERFORMANCE NOTE:
** Machine dependent optimizations abound here; these swapping macros can
** conceivably be replaced with routines that do the job faster.
*/
#define __GLX_DECLARE_SWAP_VARIABLES \
	GLbyte sw

#define __GLX_DECLARE_SWAP_ARRAY_VARIABLES \
  	GLbyte *swapPC;		\
  	GLbyte *swapEnd

#define __GLX_SWAP_INT(pc) 			\
  	sw = ((GLbyte *)(pc))[0]; 		\
  	((GLbyte *)(pc))[0] = ((GLbyte *)(pc))[3]; 	\
  	((GLbyte *)(pc))[3] = sw; 		\
  	sw = ((GLbyte *)(pc))[1]; 		\
  	((GLbyte *)(pc))[1] = ((GLbyte *)(pc))[2]; 	\
  	((GLbyte *)(pc))[2] = sw;

#define __GLX_SWAP_SHORT(pc) \
  	sw = ((GLbyte *)(pc))[0]; 		\
  	((GLbyte *)(pc))[0] = ((GLbyte *)(pc))[1]; 	\
  	((GLbyte *)(pc))[1] = sw;

#define __GLX_SWAP_DOUBLE(pc) \
  	sw = ((GLbyte *)(pc))[0]; 		\
  	((GLbyte *)(pc))[0] = ((GLbyte *)(pc))[7]; 	\
  	((GLbyte *)(pc))[7] = sw; 		\
  	sw = ((GLbyte *)(pc))[1]; 		\
  	((GLbyte *)(pc))[1] = ((GLbyte *)(pc))[6]; 	\
  	((GLbyte *)(pc))[6] = sw;			\
  	sw = ((GLbyte *)(pc))[2]; 		\
  	((GLbyte *)(pc))[2] = ((GLbyte *)(pc))[5]; 	\
  	((GLbyte *)(pc))[5] = sw;			\
  	sw = ((GLbyte *)(pc))[3]; 		\
  	((GLbyte *)(pc))[3] = ((GLbyte *)(pc))[4]; 	\
  	((GLbyte *)(pc))[4] = sw;

#define __GLX_SWAP_FLOAT(pc) \
  	sw = ((GLbyte *)(pc))[0]; 		\
  	((GLbyte *)(pc))[0] = ((GLbyte *)(pc))[3]; 	\
  	((GLbyte *)(pc))[3] = sw; 		\
  	sw = ((GLbyte *)(pc))[1]; 		\
  	((GLbyte *)(pc))[1] = ((GLbyte *)(pc))[2]; 	\
  	((GLbyte *)(pc))[2] = sw;

#define __GLX_SWAP_INT_ARRAY(pc, count) \
  	swapPC = ((GLbyte *)(pc));		\
  	swapEnd = ((GLbyte *)(pc)) + (count)*__GLX_SIZE_INT32;\
  	while (swapPC < swapEnd) {		\
	    __GLX_SWAP_INT(swapPC);		\
	    swapPC += __GLX_SIZE_INT32;		\
	}

#define __GLX_SWAP_SHORT_ARRAY(pc, count) \
  	swapPC = ((GLbyte *)(pc));		\
  	swapEnd = ((GLbyte *)(pc)) + (count)*__GLX_SIZE_INT16;\
  	while (swapPC < swapEnd) {		\
	    __GLX_SWAP_SHORT(swapPC);		\
	    swapPC += __GLX_SIZE_INT16;		\
	}

#define __GLX_SWAP_DOUBLE_ARRAY(pc, count) \
  	swapPC = ((GLbyte *)(pc));		\
  	swapEnd = ((GLbyte *)(pc)) + (count)*__GLX_SIZE_FLOAT64;\
  	while (swapPC < swapEnd) {		\
	    __GLX_SWAP_DOUBLE(swapPC);		\
	    swapPC += __GLX_SIZE_FLOAT64;	\
	}

#define __GLX_SWAP_FLOAT_ARRAY(pc, count) \
  	swapPC = ((GLbyte *)(pc));		\
  	swapEnd = ((GLbyte *)(pc)) + (count)*__GLX_SIZE_FLOAT32;\
  	while (swapPC < swapEnd) {		\
	    __GLX_SWAP_FLOAT(swapPC);		\
	    swapPC += __GLX_SIZE_FLOAT32;	\
	}

#define __GLX_SWAP_REPLY_HEADER() \
  	__GLX_SWAP_SHORT(&__glXReply.sequenceNumber); \
  	__GLX_SWAP_INT(&__glXReply.length);

#define __GLX_SWAP_REPLY_RETVAL() \
  	__GLX_SWAP_INT(&__glXReply.retval)

#define __GLX_SWAP_REPLY_SIZE() \
  	__GLX_SWAP_INT(&__glXReply.size)

#endif                          /* !__GLX_unpack_h__ */
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d62 1
a62 1
	WriteToClient( client, sz_xGLXSingleReply, (char *)&__glXReply);
d115 1
a115 1
	WriteToClient(client, __GLX_PAD((len)*__GLX_SIZE_INT8), (char *)answer)
d118 1
a118 1
	WriteToClient(client, __GLX_PAD((len)*__GLX_SIZE_INT16), (char *)answer)
d121 1
a121 1
	WriteToClient(client, (len)*__GLX_SIZE_INT32, (char *)answer)
d124 1
a124 1
	WriteToClient(client, (len)*__GLX_SIZE_FLOAT32, (char *)answer)
d127 1
a127 1
	WriteToClient(client, (len)*__GLX_SIZE_FLOAT64, (char *)answer)
@


1.4
log
@Update to xserver 1.11.2
@
text
@d66 1
a66 1
  
d101 1
a101 1
	  
d104 1
a104 1
	  
d107 1
a107 1
	  
d110 1
a110 1
	  
d113 1
a113 1
	  
d119 1
a119 1
  
d122 1
a122 1
  
d125 1
a125 1
  
a128 1

a145 1

d152 1
a152 1
  	((GLbyte *)(pc))[2] = sw;	
d157 1
a157 1
  	((GLbyte *)(pc))[1] = sw; 	
d171 1
a171 1
  	((GLbyte *)(pc))[4] = sw;	
d179 1
a179 1
  	((GLbyte *)(pc))[2] = sw;	
d188 1
a188 1
	
d196 1
a196 1
	
d204 1
a204 1
    
d223 1
a223 6
#endif /* !__GLX_unpack_h__ */





@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d46 1
a46 1
#define __GLX_MEM_COPY(dst,src,n)	memcpy(dst,src,n)
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d85 1
a85 1
	    (cl)->returnBuf = (GLbyte*)Xrealloc((cl)->returnBuf,	 \
d141 3
a143 1
	GLbyte sw; \
@


1.1
log
@Initial revision
@
text
@d5 28
a32 33
** License Applicability. Except to the extent portions of this file are
** made subject to an alternative license as permitted in the SGI Free
** Software License B, Version 1.1 (the "License"), the contents of this
** file are subject only to the provisions of the License. You may not use
** this file except in compliance with the License. You may obtain a copy
** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
** 
** http://oss.sgi.com/projects/FreeB
** 
** Note that, as provided in the License, the Software is distributed on an
** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
** 
** Original Code. The Original Code is: OpenGL Sample Implementation,
** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
** Copyright in any portions created by third parties is as indicated
** elsewhere herein. All Rights Reserved.
** 
** Additional Notice Provisions: The application programming interfaces
** established by SGI in conjunction with the Original Code are The
** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
** Window System(R) (Version 1.3), released October 19, 1998. This software
** was created using the OpenGL(R) version 1.2.1 Sample Implementation
** published by SGI, but has not been independently verified as being
** compliant with the OpenGL(R) version 1.2.1 Specification.
**
*/
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
