head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.6
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.11.07.16.48.52;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	7pAEtF6Y5EgemkuY;

1.5
date	2014.09.27.17.53.01;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	cVXoV5PxI8YrEaVA;

1.4
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.05;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.23.38;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.23.38;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.30;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.17.4.
tested by naddy@@
@
text
@/*
 * Copyright 2003 Red Hat Inc., Raleigh, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   Kevin E. Martin <kem@@redhat.com>
 *
 */

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#endif

#include "dmx.h"
#include "dmxwindow.h"
#include "glxserver.h"
#include "glxswap.h"
#include "glxcmds.h"

typedef struct _SwapGroup *SwapGroupPtr;

static Bool SwapBarrierIsReadyToSwap(GLuint barrier);
static void SwapSwapBarrier(GLuint barrier);
static void UpdateSwapBarrierList(GLuint barrier,
                                  SwapGroupPtr pOldSwap, SwapGroupPtr pNewSwap);

/************************************************************************
 *
 * Swap Groups
 *
 ************************************************************************/

typedef struct _SwapGroup {
    WindowPtr pWin;
    SwapGroupPtr pNext;

    Bool swapping;
    Bool sleeping;
    GLuint barrier;

    XID drawable;
    GLXContextTag tag;
    __GLXclientState *clState;
} SwapGroupRec;

static void
SwapSwapGroup(SwapGroupPtr pSwap)
{
    SwapGroupPtr pCur;

    /* All drawables in swap group are ready to swap, so just swap all
     * drawables buffers and then wake up those clients that were
     * previously sleeping */

    for (pCur = pSwap; pCur; pCur = pCur->pNext) {
        if (pCur->swapping) {
            /* Swap pCur's buffers */
            __glXDoSwapBuffers(pCur->clState, pCur->drawable, pCur->tag);
            pCur->swapping = FALSE;
        }

        /* Wakeup client */
        if (pCur->sleeping) {
            ClientWakeup(pCur->clState->client);
            pCur->sleeping = FALSE;
        }
    }
}

static Bool
SwapGroupIsReadyToSwap(SwapGroupPtr pSwap)
{
    Bool isReady = TRUE;

    /* The swap group is ready to swap when all drawables are ready to
     * swap.  NOTE: A drawable is also ready to swap if it is not
     * currently mapped */
    for (; pSwap; pSwap = pSwap->pNext) {
        isReady &= (pSwap->swapping || !pSwap->pWin->mapped);
        /* FIXME: Should we use pSwap->pWin->mapped or ...->realized ??? */
    }

    return isReady;
}

static Bool
SGSwapCleanup(ClientPtr client, void *closure)
{
    /* SwapGroupPtr  pSwap = (SwapGroupPtr)closure; */

    /* This should not be called unless the client has died in which
     * case we should remove the buffer from the swap list */

    return TRUE;
}

int
SGSwapBuffers(__GLXclientState * cl, XID drawId, GLXContextTag tag,
              DrawablePtr pDraw)
{
    WindowPtr pWin = (WindowPtr) pDraw;
    dmxWinPrivPtr pWinPriv = DMX_GET_WINDOW_PRIV(pWin);
    SwapGroupPtr pSwap = pWinPriv->swapGroup;
    SwapGroupPtr pCur;

    for (pCur = pSwap; pCur && pCur->pWin != pWin; pCur = pCur->pNext);
    if (!pCur)
        return BadDrawable;

    pCur->clState = cl;
    pCur->drawable = drawId;
    pCur->tag = tag;

    /* We are now in the process of swapping */
    pCur->swapping = TRUE;

    if (pSwap->barrier && SwapBarrierIsReadyToSwap(pSwap->barrier)) {
        /* The swap group is bound to a barrier and the barrier is ready
         * to swap, so swap all the swap groups that are bound to this
         * group's swap barrier */
        SwapSwapBarrier(pSwap->barrier);
    }
    else if (!pSwap->barrier && SwapGroupIsReadyToSwap(pSwap)) {
        /* Do the swap if the entire swap group is ready to swap and the
         * group is not bound to a swap barrier */
        SwapSwapGroup(pSwap);
    }
    else {
        /* The swap group/barrier is not yet ready to swap, so put
         * client to sleep until the rest are ready to swap */
        ClientSleep(cl->client, SGSwapCleanup, (void *) pWin);
        pCur->sleeping = TRUE;
    }

    return Success;
}

static void
SGWindowUnmapped(WindowPtr pWin)
{
    dmxWinPrivPtr pWinPriv = DMX_GET_WINDOW_PRIV(pWin);
    SwapGroupPtr pSwap = pWinPriv->swapGroup;

    /* Now that one of the windows in the swap group has been unmapped,
     * see if the entire swap group/barrier is ready to swap */

    if (pSwap->barrier && SwapBarrierIsReadyToSwap(pSwap->barrier)) {
        SwapSwapBarrier(pSwap->barrier);
    }
    else if (!pSwap->barrier && SwapGroupIsReadyToSwap(pSwap)) {
        SwapSwapGroup(pSwap);
    }
}

static void
SGWindowDestroyed(WindowPtr pWin)
{
    JoinSwapGroupSGIX((DrawablePtr) pWin, NULL);
}

static SwapGroupPtr
CreateSwapEntry(WindowPtr pWin)
{
    SwapGroupPtr pEntry;

    /* Allocate new swap group */
    pEntry = malloc(sizeof(*pEntry));
    if (!pEntry)
        return NULL;

    /* Initialize swap group */
    pEntry->pWin = pWin;
    pEntry->pNext = NULL;
    pEntry->swapping = FALSE;
    pEntry->sleeping = FALSE;
    pEntry->barrier = 0;
    /* The following are not initialized until SwapBuffers is called:
     *     pEntry->drawable
     *     pEntry->tag
     *     pEntry->clState
     */

    return pEntry;
}

static void
FreeSwapEntry(SwapGroupPtr pEntry)
{
    /* Since we have removed the drawable from its previous swap group
     * and it won't be added to another swap group, the only thing that
     * we need to do is to make sure that the drawable's client is not
     * sleeping.  This could happen if one thread is sleeping, while
     * another thread called glxJoinSwapGroup().  Note that all sleeping
     * threads should also be swapping, but there is a small window in
     * the SGSwapBuffer() logic, above, where swapping can be set but
     * sleeping is not.  We check both independently here just to be
     * pedantic. */

    /* Handle swap buffer request */
    if (pEntry->swapping)
        __glXDoSwapBuffers(pEntry->clState, pEntry->drawable, pEntry->tag);

    /* Wake up client */
    if (pEntry->sleeping)
        ClientWakeup(pEntry->clState->client);

    /* We can free the pEntry entry since it has already been removed
     * from the swap group list and it won't be needed any longer */
    free(pEntry);
}

int
JoinSwapGroupSGIX(DrawablePtr pDraw, DrawablePtr pMember)
{
    if (pDraw->type == DRAWABLE_WINDOW) {
        WindowPtr pWin = (WindowPtr) pDraw;
        dmxWinPrivPtr pWinPriv = DMX_GET_WINDOW_PRIV(pWin);
        SwapGroupPtr pOldSwap = NULL;
        SwapGroupPtr pEntry;

        /* If pDraw and pMember are already members of the same swap
         * group, just return Success since there is nothing to do */
        for (pEntry = pWinPriv->swapGroup; pEntry; pEntry = pEntry->pNext)
            if (pEntry->pWin == (WindowPtr) pMember)
                return Success;

        /* Remove pDraw from its current swap group */
        if (pWinPriv->swapGroup) {
            SwapGroupPtr pSwapGroup = pWinPriv->swapGroup;
            SwapGroupPtr pPrev;

            /* Find old swap entry in swap group and save in pOldSwap
             * for later use */
            for (pOldSwap = pWinPriv->swapGroup, pPrev = NULL;
                 pOldSwap && pOldSwap->pWin != pWin;
                 pPrev = pOldSwap, pOldSwap = pOldSwap->pNext);
            if (!pOldSwap)
                return BadDrawable;

            /* Remove pDraw's swap group entry from swap group list */
            if (pPrev) {
                pPrev->pNext = pOldSwap->pNext;
            }
            else {
                /* pWin is at the head of the swap group list, so we
                 * need to update all other members of this swap
                 * group */
                for (pEntry = pOldSwap->pNext; pEntry; pEntry = pEntry->pNext)
                    DMX_GET_WINDOW_PRIV(pEntry->pWin)->swapGroup
                        = pOldSwap->pNext;

                /* Update the barrier list as well */
                if (pOldSwap->barrier)
                    UpdateSwapBarrierList(pOldSwap->barrier,
                                          pOldSwap, pOldSwap->pNext);

                /* Set pSwapGroup to point to the swap group without
                 * pOldSwap */
                pSwapGroup = pOldSwap->pNext;
            }

            /* Check to see if current swap group can now swap since we
             * know at this point that pDraw and pMember are guaranteed
             * to previously be in different swap groups */
            if (pSwapGroup && SwapGroupIsReadyToSwap(pSwapGroup)) {
                SwapSwapGroup(pSwapGroup);
            }

            /* Make the old swap entry a standalone group */
            pOldSwap->pNext = NULL;
            pOldSwap->barrier = 0;

            /* Reset pWin's swap group */
            pWinPriv->swapGroup = NULL;
            pWinPriv->windowDestroyed = NULL;
            pWinPriv->windowUnmapped = NULL;
        }

        if (!pMember || pMember->type != DRAWABLE_WINDOW) {
            /* Free old swap group since it is no longer needed */
            if (pOldSwap)
                FreeSwapEntry(pOldSwap);
        }
        else if (pDraw == pMember && pOldSwap) {
            /* Special case where pDraw was previously created and we
             * are now just putting it to its own swap group */
            pWinPriv->swapGroup = pOldSwap;
            pWinPriv->windowDestroyed = SGWindowDestroyed;
            pWinPriv->windowUnmapped = SGWindowUnmapped;

            /* Check to see if pDraw is ready to swap */
            if (SwapGroupIsReadyToSwap(pOldSwap))
                SwapSwapGroup(pOldSwap);
        }
        else if (pMember->type == DRAWABLE_WINDOW) {
            WindowPtr pMemberWin = (WindowPtr) pMember;
            dmxWinPrivPtr pMemberPriv = DMX_GET_WINDOW_PRIV(pMemberWin);
            SwapGroupPtr pMemberSwapGroup = pMemberPriv->swapGroup;

            /* Finally, how we can add pDraw to pMember's swap group */

            /* If pMember is not currently in a swap group, then create
             * one for it since we are just about to add pDraw to it. */
            if (!pMemberSwapGroup) {
                /* Create new swap group */
                pMemberSwapGroup = CreateSwapEntry(pMemberWin);
                if (!pMemberSwapGroup) {
                    if (pOldSwap)
                        FreeSwapEntry(pOldSwap);
                    return BadAlloc;
                }

                /* Set pMember's swap group */
                pMemberPriv->swapGroup = pMemberSwapGroup;
                pMemberPriv->windowDestroyed = SGWindowDestroyed;
                pMemberPriv->windowUnmapped = SGWindowUnmapped;
            }

            /* If pDraw == pMember, that means pDraw was not a member of
             * a group previously (or it would have been handled by the
             * special case above), so no additional work is required
             * since we just created a new swap group for pMember (i.e.,
             * pDraw). */

            if (pDraw != pMember) {
                /* If pDraw was not previously in a swap group, then create
                 * an entry for it */
                if (!pOldSwap) {
                    /* Create new swap group */
                    pOldSwap = CreateSwapEntry(pWin);
                    if (!pOldSwap) {
                        /* If we just created a swap group for pMember, we
                         * need to free it here */
                        if (pMemberSwapGroup->pNext == NULL) {
                            FreeSwapEntry(pMemberSwapGroup);
                            pMemberPriv->swapGroup = NULL;
                        }
                        return BadAlloc;
                    }
                }

                /* Find last entry in pMember's swap group */
                for (pEntry = pMemberSwapGroup;
                     pEntry->pNext; pEntry = pEntry->pNext);

                /* Add pDraw's swap group entry to pMember's swap group list */
                pEntry->pNext = pOldSwap;

                /* Add pDraw to pMember's swap barrier */
                pOldSwap->barrier = pEntry->barrier;

                /* Set pDraw's swap group */
                pWinPriv->swapGroup = pMemberSwapGroup;
                pWinPriv->windowDestroyed = SGWindowDestroyed;
                pWinPriv->windowUnmapped = SGWindowUnmapped;
            }
        }
    }

    return Success;
}

/************************************************************************
 *
 * Swap Barriers
 *
 ************************************************************************/

#define GLX_MAX_SWAP_BARRIERS 10

typedef struct _SwapBarrier *SwapBarrierPtr;
typedef struct _SwapBarrier {
    SwapGroupPtr pSwap;
    SwapBarrierPtr pNext;
} SwapBarrierRec;

static SwapBarrierPtr SwapBarrierList[GLX_MAX_SWAP_BARRIERS + 1];

void
SwapBarrierInit(void)
{
    int i;

    for (i = 0; i <= GLX_MAX_SWAP_BARRIERS; i++)
        SwapBarrierList[i] = NULL;
}

void
SwapBarrierReset(void)
{
    int i;

    for (i = 0; i <= GLX_MAX_SWAP_BARRIERS; i++) {
        SwapBarrierPtr pBarrier, pNextBarrier;

        for (pBarrier = SwapBarrierList[i]; pBarrier; pBarrier = pNextBarrier) {
            pNextBarrier = pBarrier->pNext;
            free(pBarrier);
        }
        SwapBarrierList[i] = NULL;
    }
}

int
QueryMaxSwapBarriersSGIX(int screen)
{
    return GLX_MAX_SWAP_BARRIERS;
}

static Bool
BindSwapGroupToBarrier(GLuint barrier, SwapGroupPtr pSwapGroup)
{
    SwapBarrierPtr pBarrier;

    pBarrier = malloc(sizeof(*pBarrier));
    if (!pBarrier)
        return FALSE;

    /* Add the swap group to barrier's list */
    pBarrier->pSwap = pSwapGroup;
    pBarrier->pNext = SwapBarrierList[barrier];
    SwapBarrierList[barrier] = pBarrier;

    return TRUE;
}

static Bool
UnbindSwapGroupFromBarrier(GLuint barrier, SwapGroupPtr pSwapGroup)
{
    SwapBarrierPtr pBarrier, pPrevBarrier;

    /* Find the swap group in barrier's list */
    for (pBarrier = SwapBarrierList[barrier], pPrevBarrier = NULL;
         pBarrier && pBarrier->pSwap != pSwapGroup;
         pPrevBarrier = pBarrier, pBarrier = pBarrier->pNext);
    if (!pBarrier)
        return FALSE;

    /* Remove the swap group from barrier's list */
    if (pPrevBarrier)
        pPrevBarrier->pNext = pBarrier->pNext;
    else
        SwapBarrierList[barrier] = pBarrier->pNext;

    /* Free memory */
    free(pBarrier);

    return TRUE;
}

static void
UpdateSwapBarrierList(GLuint barrier,
                      SwapGroupPtr pOldSwap, SwapGroupPtr pNewSwap)
{
    SwapBarrierPtr pBarrier;

    /* If the old swap group is being destroyed, then we need to remove
     * the swap group from the list entirely */
    if (!pNewSwap) {
        UnbindSwapGroupFromBarrier(barrier, pOldSwap);
        return;
    }

    /* Otherwise, find the old swap group in the barrier list and change
     * it to the new swap group */
    for (pBarrier = SwapBarrierList[barrier];
         pBarrier; pBarrier = pBarrier->pNext) {
        if (pBarrier->pSwap == pOldSwap) {
            pBarrier->pSwap = pNewSwap;
            return;
        }
    }
}

static Bool
SwapBarrierIsReadyToSwap(GLuint barrier)
{
    SwapBarrierPtr pBarrier;
    Bool isReady = TRUE;

    /* The swap barier is ready to swap when swap groups that are bound
     * to barrier are ready to swap */
    for (pBarrier = SwapBarrierList[barrier];
         pBarrier; pBarrier = pBarrier->pNext)
        isReady &= SwapGroupIsReadyToSwap(pBarrier->pSwap);

    return isReady;
}

static void
SwapSwapBarrier(GLuint barrier)
{
    SwapBarrierPtr pBarrier;

    /* Swap each group that is a member of this barrier */
    for (pBarrier = SwapBarrierList[barrier];
         pBarrier; pBarrier = pBarrier->pNext)
        SwapSwapGroup(pBarrier->pSwap);
}

int
BindSwapBarrierSGIX(DrawablePtr pDraw, int barrier)
{
    /* FIXME: Check for errors when pDraw->type != DRAWABLE_WINDOW */

    if (barrier < 0 || barrier > GLX_MAX_SWAP_BARRIERS)
        return BadValue;

    if (pDraw->type == DRAWABLE_WINDOW) {
        WindowPtr pWin = (WindowPtr) pDraw;
        dmxWinPrivPtr pWinPriv = DMX_GET_WINDOW_PRIV(pWin);
        SwapGroupPtr pSwapGroup = pWinPriv->swapGroup;
        SwapGroupPtr pCur;

        if (!pSwapGroup)
            return BadDrawable;
        if (barrier && pSwapGroup->barrier)
            return BadValue;

        /* Update the swap barrier list */
        if (barrier) {
            if (!BindSwapGroupToBarrier(barrier, pSwapGroup))
                return BadAlloc;
        }
        else {
            if (!UnbindSwapGroupFromBarrier(pSwapGroup->barrier, pSwapGroup))
                return BadDrawable;
        }

        /* Set the barrier for each member of this swap group */
        for (pCur = pSwapGroup; pCur; pCur = pCur->pNext)
            pCur->barrier = barrier;
    }

    return Success;
}
@


1.5
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d42 1
a42 3

extern int __glXDoSwapBuffers(__GLXclientState * cl, XID drawId,
                              GLXContextTag tag);
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d113 1
a113 1
SGSwapCleanup(ClientPtr client, pointer closure)
d157 1
a157 1
        ClientSleep(cl->client, SGSwapCleanup, (pointer) pWin);
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d43 2
a44 2
extern int __glXDoSwapBuffers(__GLXclientState *cl, XID drawId,
			      GLXContextTag tag);
d51 1
a51 3
				  SwapGroupPtr pOldSwap,
				  SwapGroupPtr pNewSwap);

d60 2
a61 2
    WindowPtr         pWin;
    SwapGroupPtr      pNext;
d63 3
a65 3
    Bool              swapping;
    Bool              sleeping;
    GLuint            barrier;
d67 2
a68 2
    XID               drawable;
    GLXContextTag     tag;
d72 2
a73 2

static void SwapSwapGroup(SwapGroupPtr pSwap)
d75 1
a75 1
    SwapGroupPtr  pCur;
d82 11
a92 11
	if (pCur->swapping) {
	    /* Swap pCur's buffers */
	    __glXDoSwapBuffers(pCur->clState, pCur->drawable, pCur->tag);
	    pCur->swapping = FALSE;
	}

	/* Wakeup client */
	if (pCur->sleeping) {
	    ClientWakeup(pCur->clState->client);
	    pCur->sleeping = FALSE;
	}
d96 2
a97 1
static Bool SwapGroupIsReadyToSwap(SwapGroupPtr pSwap)
d99 1
a99 1
    Bool  isReady = TRUE;
d105 2
a106 2
	isReady &= (pSwap->swapping || !pSwap->pWin->mapped);
	/* FIXME: Should we use pSwap->pWin->mapped or ...->realized ??? */
d112 2
a113 1
static Bool SGSwapCleanup(ClientPtr client, pointer closure)
d123 8
a130 7
int SGSwapBuffers(__GLXclientState *cl, XID drawId, GLXContextTag tag,
		  DrawablePtr pDraw)
{
    WindowPtr      pWin     = (WindowPtr)pDraw;
    dmxWinPrivPtr  pWinPriv = DMX_GET_WINDOW_PRIV(pWin);
    SwapGroupPtr   pSwap    = pWinPriv->swapGroup;
    SwapGroupPtr   pCur;
d134 1
a134 1
	return BadDrawable;
d136 1
a136 1
    pCur->clState  = cl;
d138 1
a138 1
    pCur->tag      = tag;
d144 15
a158 13
	/* The swap group is bound to a barrier and the barrier is ready
	 * to swap, so swap all the swap groups that are bound to this
	 * group's swap barrier */
	SwapSwapBarrier(pSwap->barrier);
    } else if (!pSwap->barrier && SwapGroupIsReadyToSwap(pSwap)) {
	/* Do the swap if the entire swap group is ready to swap and the
	 * group is not bound to a swap barrier */
	SwapSwapGroup(pSwap);
    } else {
	/* The swap group/barrier is not yet ready to swap, so put
	 * client to sleep until the rest are ready to swap */
	ClientSleep(cl->client, SGSwapCleanup, (pointer)pWin);
	pCur->sleeping = TRUE;
d164 2
a165 1
static void SGWindowUnmapped(WindowPtr pWin)
d167 2
a168 2
    dmxWinPrivPtr  pWinPriv = DMX_GET_WINDOW_PRIV(pWin);
    SwapGroupPtr   pSwap    = pWinPriv->swapGroup;
d174 4
a177 3
	SwapSwapBarrier(pSwap->barrier);
    } else if (!pSwap->barrier && SwapGroupIsReadyToSwap(pSwap)) {
	SwapSwapGroup(pSwap);
d181 2
a182 1
static void SGWindowDestroyed(WindowPtr pWin)
d184 1
a184 1
    JoinSwapGroupSGIX((DrawablePtr)pWin, NULL);
d187 2
a188 1
static SwapGroupPtr CreateSwapEntry(WindowPtr pWin)
d190 1
a190 1
    SwapGroupPtr  pEntry;
d194 2
a195 1
    if (!pEntry) return NULL;
d198 2
a199 2
    pEntry->pWin     = pWin;
    pEntry->pNext    = NULL;
d202 1
a202 1
    pEntry->barrier  = 0;
d212 2
a213 1
static void FreeSwapEntry(SwapGroupPtr pEntry)
d227 1
a227 1
	__glXDoSwapBuffers(pEntry->clState, pEntry->drawable, pEntry->tag);
d231 1
a231 1
	ClientWakeup(pEntry->clState->client);
d238 2
a239 1
int JoinSwapGroupSGIX(DrawablePtr pDraw, DrawablePtr pMember)
d242 142
a383 138
	WindowPtr      pWin     = (WindowPtr)pDraw;
	dmxWinPrivPtr  pWinPriv = DMX_GET_WINDOW_PRIV(pWin);
	SwapGroupPtr   pOldSwap = NULL;
	SwapGroupPtr   pEntry;

	/* If pDraw and pMember are already members of the same swap
	 * group, just return Success since there is nothing to do */
	for (pEntry = pWinPriv->swapGroup; pEntry; pEntry = pEntry->pNext)
	    if (pEntry->pWin == (WindowPtr)pMember)
		return Success;

	/* Remove pDraw from its current swap group */
	if (pWinPriv->swapGroup) {
	    SwapGroupPtr  pSwapGroup = pWinPriv->swapGroup;
	    SwapGroupPtr  pPrev;

	    /* Find old swap entry in swap group and save in pOldSwap
	     * for later use */
	    for (pOldSwap = pWinPriv->swapGroup, pPrev = NULL;
		 pOldSwap && pOldSwap->pWin != pWin;
		 pPrev = pOldSwap, pOldSwap = pOldSwap->pNext);
	    if (!pOldSwap)
		return BadDrawable;

	    /* Remove pDraw's swap group entry from swap group list */
	    if (pPrev) {
		pPrev->pNext = pOldSwap->pNext;
	    } else {
		/* pWin is at the head of the swap group list, so we
		 * need to update all other members of this swap
		 * group */
		for (pEntry = pOldSwap->pNext; pEntry; pEntry = pEntry->pNext)
		    DMX_GET_WINDOW_PRIV(pEntry->pWin)->swapGroup
			= pOldSwap->pNext;

		/* Update the barrier list as well */
		if (pOldSwap->barrier)
		    UpdateSwapBarrierList(pOldSwap->barrier,
					  pOldSwap, pOldSwap->pNext);

		/* Set pSwapGroup to point to the swap group without
		 * pOldSwap */
		pSwapGroup = pOldSwap->pNext;
	    }

	    /* Check to see if current swap group can now swap since we
	     * know at this point that pDraw and pMember are guaranteed
	     * to previously be in different swap groups */
	    if (pSwapGroup && SwapGroupIsReadyToSwap(pSwapGroup)) {
		SwapSwapGroup(pSwapGroup);
	    }

	    /* Make the old swap entry a standalone group */
	    pOldSwap->pNext = NULL;
	    pOldSwap->barrier = 0;

	    /* Reset pWin's swap group */
	    pWinPriv->swapGroup = NULL;
	    pWinPriv->windowDestroyed = NULL;
	    pWinPriv->windowUnmapped = NULL;
	}

	if (!pMember || pMember->type != DRAWABLE_WINDOW) {
	    /* Free old swap group since it is no longer needed */
	    if (pOldSwap) FreeSwapEntry(pOldSwap);
	} else if (pDraw == pMember && pOldSwap) {
	    /* Special case where pDraw was previously created and we
	     * are now just putting it to its own swap group */
	    pWinPriv->swapGroup = pOldSwap;
	    pWinPriv->windowDestroyed = SGWindowDestroyed;
	    pWinPriv->windowUnmapped = SGWindowUnmapped;

	    /* Check to see if pDraw is ready to swap */
	    if (SwapGroupIsReadyToSwap(pOldSwap))
		SwapSwapGroup(pOldSwap);
	} else if (pMember->type == DRAWABLE_WINDOW) {
	    WindowPtr      pMemberWin       = (WindowPtr)pMember;
	    dmxWinPrivPtr  pMemberPriv      = DMX_GET_WINDOW_PRIV(pMemberWin);
	    SwapGroupPtr   pMemberSwapGroup = pMemberPriv->swapGroup;

	    /* Finally, how we can add pDraw to pMember's swap group */

	    /* If pMember is not currently in a swap group, then create
	     * one for it since we are just about to add pDraw to it. */
	    if (!pMemberSwapGroup) {
		/* Create new swap group */
		pMemberSwapGroup = CreateSwapEntry(pMemberWin);
		if (!pMemberSwapGroup) {
		    if (pOldSwap) FreeSwapEntry(pOldSwap);
		    return BadAlloc;
		}

		/* Set pMember's swap group */
		pMemberPriv->swapGroup = pMemberSwapGroup;
		pMemberPriv->windowDestroyed = SGWindowDestroyed;
		pMemberPriv->windowUnmapped = SGWindowUnmapped;
	    }

	    /* If pDraw == pMember, that means pDraw was not a member of
	     * a group previously (or it would have been handled by the
	     * special case above), so no additional work is required
	     * since we just created a new swap group for pMember (i.e.,
	     * pDraw). */

	    if (pDraw != pMember) {
		/* If pDraw was not previously in a swap group, then create
		 * an entry for it */
		if (!pOldSwap) {
		    /* Create new swap group */
		    pOldSwap = CreateSwapEntry(pWin);
		    if (!pOldSwap) {
			/* If we just created a swap group for pMember, we
			 * need to free it here */
			if (pMemberSwapGroup->pNext == NULL) {
			    FreeSwapEntry(pMemberSwapGroup);
			    pMemberPriv->swapGroup = NULL;
			}
			return BadAlloc;
		    }
		}

		/* Find last entry in pMember's swap group */
		for (pEntry = pMemberSwapGroup;
		     pEntry->pNext;
		     pEntry = pEntry->pNext);

		/* Add pDraw's swap group entry to pMember's swap group list */
		pEntry->pNext = pOldSwap;

		/* Add pDraw to pMember's swap barrier */
		pOldSwap->barrier = pEntry->barrier;

		/* Set pDraw's swap group */
		pWinPriv->swapGroup = pMemberSwapGroup;
		pWinPriv->windowDestroyed = SGWindowDestroyed;
		pWinPriv->windowUnmapped = SGWindowUnmapped;
	    }
	}
a388 1

d399 2
a400 2
    SwapGroupPtr    pSwap;
    SwapBarrierPtr  pNext;
d403 1
a403 1
static SwapBarrierPtr SwapBarrierList[GLX_MAX_SWAP_BARRIERS+1];
d405 2
a406 1
void SwapBarrierInit(void)
d408 1
a408 1
    int  i;
d411 1
a411 1
	SwapBarrierList[i] = NULL;
d414 2
a415 1
void SwapBarrierReset(void)
d417 1
a417 1
    int  i;
d420 7
a426 8
	SwapBarrierPtr  pBarrier, pNextBarrier;
	for (pBarrier = SwapBarrierList[i];
	     pBarrier;
	     pBarrier = pNextBarrier) {
	    pNextBarrier = pBarrier->pNext;
	    free(pBarrier);
	}
	SwapBarrierList[i] = NULL;
d430 2
a431 1
int QueryMaxSwapBarriersSGIX(int screen)
d436 2
a437 1
static Bool BindSwapGroupToBarrier(GLuint barrier, SwapGroupPtr pSwapGroup)
d439 1
a439 1
    SwapBarrierPtr  pBarrier;
d442 2
a443 1
    if (!pBarrier) return FALSE;
d453 2
a454 1
static Bool UnbindSwapGroupFromBarrier(GLuint barrier, SwapGroupPtr pSwapGroup)
d456 1
a456 1
    SwapBarrierPtr  pBarrier, pPrevBarrier;
d460 4
a463 3
	 pBarrier && pBarrier->pSwap != pSwapGroup;
	 pPrevBarrier = pBarrier, pBarrier = pBarrier->pNext);
    if (!pBarrier) return FALSE;
d466 4
a469 2
    if (pPrevBarrier) pPrevBarrier->pNext = pBarrier->pNext;
    else              SwapBarrierList[barrier] = pBarrier->pNext;
d477 3
a479 3
static void UpdateSwapBarrierList(GLuint barrier,
				  SwapGroupPtr pOldSwap,
				  SwapGroupPtr pNewSwap)
d481 1
a481 1
    SwapBarrierPtr  pBarrier;
d486 2
a487 2
	UnbindSwapGroupFromBarrier(barrier, pOldSwap);
	return;
d493 5
a497 6
	 pBarrier;
	 pBarrier = pBarrier->pNext) {
	if (pBarrier->pSwap == pOldSwap) {
	    pBarrier->pSwap = pNewSwap;
	    return;
	}
d501 2
a502 1
static Bool SwapBarrierIsReadyToSwap(GLuint barrier)
d504 2
a505 2
    SwapBarrierPtr  pBarrier;
    Bool            isReady = TRUE;
d510 2
a511 3
	 pBarrier;
	 pBarrier = pBarrier->pNext)
	isReady &= SwapGroupIsReadyToSwap(pBarrier->pSwap);
d516 2
a517 1
static void SwapSwapBarrier(GLuint barrier)
d519 1
a519 1
    SwapBarrierPtr  pBarrier;
d523 2
a524 3
	 pBarrier;
	 pBarrier = pBarrier->pNext)
	SwapSwapGroup(pBarrier->pSwap);
d527 2
a528 1
int BindSwapBarrierSGIX(DrawablePtr pDraw, int barrier)
d533 1
a533 1
	return BadValue;
d536 23
a558 20
	WindowPtr       pWin       = (WindowPtr)pDraw;
	dmxWinPrivPtr   pWinPriv   = DMX_GET_WINDOW_PRIV(pWin);
	SwapGroupPtr    pSwapGroup = pWinPriv->swapGroup;
	SwapGroupPtr    pCur;

	if (!pSwapGroup) return BadDrawable;
	if (barrier && pSwapGroup->barrier) return BadValue;

	/* Update the swap barrier list */
	if (barrier) {
	    if (!BindSwapGroupToBarrier(barrier, pSwapGroup))
		return BadAlloc;
	} else {
	    if (!UnbindSwapGroupFromBarrier(pSwapGroup->barrier, pSwapGroup))
		return BadDrawable;
	}

	/* Set the barrier for each member of this swap group */
	for (pCur = pSwapGroup; pCur; pCur = pCur->pNext)
	    pCur->barrier = barrier;
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d186 1
a186 1
    pEntry = xalloc(sizeof(*pEntry));
d226 1
a226 1
    xfree(pEntry);
d410 1
a410 1
	    xfree(pBarrier);
d425 1
a425 1
    pBarrier = xalloc(sizeof(*pBarrier));
d451 1
a451 1
    xfree(pBarrier);
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
d405 1
a405 1
	SwapBarrierPtr  pBarrier, pNextBarrier;;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
@

