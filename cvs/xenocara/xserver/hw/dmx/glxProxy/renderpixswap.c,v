head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.6
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.12
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.8
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.05.29.12.02.36;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	s0SI41sEunLdyFfd;

1.6
date	2013.06.07.17.28.48;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.23;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.05;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.29;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.23.37;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.23.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 * SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008)
 * Copyright (C) 1991-2000 Silicon Graphics, Inc. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice including the dates of first publication and
 * either this permission notice or a reference to
 * http://oss.sgi.com/projects/FreeB/
 * shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of Silicon Graphics, Inc.
 * shall not be used in advertising or otherwise to promote the sale, use or
 * other dealings in this Software without prior written authorization from
 * Silicon Graphics, Inc.
 */

#include "glxserver.h"
#include "unpack.h"
#include "g_disptab.h"

void
__glXDispSwap_PolygonStipple(GLbyte * pc)
{
    __GLXpixelHeader *hdr = (__GLXpixelHeader *) pc;

    __GLX_DECLARE_SWAP_VARIABLES;

    __GLX_SWAP_INT((GLbyte *) &hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) &hdr->alignment);

    hdr->swapBytes = !hdr->swapBytes;
}

void
__glXDispSwap_Bitmap(GLbyte * pc)
{
    __GLXdispatchBitmapHeader *hdr = (__GLXdispatchBitmapHeader *) pc;

    __GLX_DECLARE_SWAP_VARIABLES;

    __GLX_SWAP_INT((GLbyte *) &hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) &hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) &hdr->width);
    __GLX_SWAP_INT((GLbyte *) &hdr->height);
    __GLX_SWAP_FLOAT((GLbyte *) &hdr->xorig);
    __GLX_SWAP_FLOAT((GLbyte *) &hdr->yorig);
    __GLX_SWAP_FLOAT((GLbyte *) &hdr->xmove);
    __GLX_SWAP_FLOAT((GLbyte *) &hdr->ymove);

    hdr->swapBytes = !hdr->swapBytes;

}

void
__glXDispSwap_TexImage1D(GLbyte * pc)
{
    __GLXdispatchTexImageHeader *hdr = (__GLXdispatchTexImageHeader *) pc;

    __GLX_DECLARE_SWAP_VARIABLES;

    __GLX_SWAP_INT((GLbyte *) &hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) &hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) &hdr->target);
    __GLX_SWAP_INT((GLbyte *) &hdr->level);
    __GLX_SWAP_INT((GLbyte *) &hdr->components);
    __GLX_SWAP_INT((GLbyte *) &hdr->width);
    __GLX_SWAP_INT((GLbyte *) &hdr->height);
    __GLX_SWAP_INT((GLbyte *) &hdr->border);
    __GLX_SWAP_INT((GLbyte *) &hdr->format);
    __GLX_SWAP_INT((GLbyte *) &hdr->type);

    /*
     ** Just invert swapBytes flag; the GL will figure out if it needs to swap
     ** the pixel data.
     */
    hdr->swapBytes = !hdr->swapBytes;
}

void
__glXDispSwap_TexImage2D(GLbyte * pc)
{
    __GLXdispatchTexImageHeader *hdr = (__GLXdispatchTexImageHeader *) pc;

    __GLX_DECLARE_SWAP_VARIABLES;

    __GLX_SWAP_INT((GLbyte *) &hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) &hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) &hdr->target);
    __GLX_SWAP_INT((GLbyte *) &hdr->level);
    __GLX_SWAP_INT((GLbyte *) &hdr->components);
    __GLX_SWAP_INT((GLbyte *) &hdr->width);
    __GLX_SWAP_INT((GLbyte *) &hdr->height);
    __GLX_SWAP_INT((GLbyte *) &hdr->border);
    __GLX_SWAP_INT((GLbyte *) &hdr->format);
    __GLX_SWAP_INT((GLbyte *) &hdr->type);

    /*
     ** Just invert swapBytes flag; the GL will figure out if it needs to swap
     ** the pixel data.
     */
    hdr->swapBytes = !hdr->swapBytes;
}

void
__glXDispSwap_TexImage3D(GLbyte * pc)
{
    __GLXdispatchTexImage3DHeader *hdr = (__GLXdispatchTexImage3DHeader *) pc;

    __GLX_DECLARE_SWAP_VARIABLES;

    __GLX_SWAP_INT((GLbyte *) &hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) &hdr->imageHeight);
    __GLX_SWAP_INT((GLbyte *) &hdr->imageDepth);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipImages);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipVolumes);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) &hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) &hdr->target);
    __GLX_SWAP_INT((GLbyte *) &hdr->level);
    __GLX_SWAP_INT((GLbyte *) &hdr->internalformat);
    __GLX_SWAP_INT((GLbyte *) &hdr->width);
    __GLX_SWAP_INT((GLbyte *) &hdr->height);
    __GLX_SWAP_INT((GLbyte *) &hdr->depth);
    __GLX_SWAP_INT((GLbyte *) &hdr->size4d);
    __GLX_SWAP_INT((GLbyte *) &hdr->border);
    __GLX_SWAP_INT((GLbyte *) &hdr->format);
    __GLX_SWAP_INT((GLbyte *) &hdr->type);

    /*
     ** Just invert swapBytes flag; the GL will figure out if it needs to swap
     ** the pixel data.
     */
    hdr->swapBytes = !hdr->swapBytes;
}

void
__glXDispSwap_DrawPixels(GLbyte * pc)
{
    __GLXdispatchDrawPixelsHeader *hdr = (__GLXdispatchDrawPixelsHeader *) pc;

    __GLX_DECLARE_SWAP_VARIABLES;

    __GLX_SWAP_INT((GLbyte *) &hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) &hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) &hdr->width);
    __GLX_SWAP_INT((GLbyte *) &hdr->height);
    __GLX_SWAP_INT((GLbyte *) &hdr->format);
    __GLX_SWAP_INT((GLbyte *) &hdr->type);

    /*
     ** Just invert swapBytes flag; the GL will figure out if it needs to swap
     ** the pixel data.
     */
    hdr->swapBytes = !hdr->swapBytes;
}

void
__glXDispSwap_TexSubImage1D(GLbyte * pc)
{
    __GLXdispatchTexSubImageHeader *hdr = (__GLXdispatchTexSubImageHeader *) pc;

    __GLX_DECLARE_SWAP_VARIABLES;

    __GLX_SWAP_INT((GLbyte *) &hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) &hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) &hdr->target);
    __GLX_SWAP_INT((GLbyte *) &hdr->level);
    __GLX_SWAP_INT((GLbyte *) &hdr->xoffset);
    __GLX_SWAP_INT((GLbyte *) &hdr->width);
    __GLX_SWAP_INT((GLbyte *) &hdr->format);
    __GLX_SWAP_INT((GLbyte *) &hdr->type);

    /*
     ** Just invert swapBytes flag; the GL will figure out if it needs to swap
     ** the pixel data.
     */
    hdr->swapBytes = !hdr->swapBytes;
}

void
__glXDispSwap_TexSubImage2D(GLbyte * pc)
{
    __GLXdispatchTexSubImageHeader *hdr = (__GLXdispatchTexSubImageHeader *) pc;

    __GLX_DECLARE_SWAP_VARIABLES;

    __GLX_SWAP_INT((GLbyte *) &hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) &hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) &hdr->target);
    __GLX_SWAP_INT((GLbyte *) &hdr->level);
    __GLX_SWAP_INT((GLbyte *) &hdr->xoffset);
    __GLX_SWAP_INT((GLbyte *) &hdr->yoffset);
    __GLX_SWAP_INT((GLbyte *) &hdr->width);
    __GLX_SWAP_INT((GLbyte *) &hdr->height);
    __GLX_SWAP_INT((GLbyte *) &hdr->format);
    __GLX_SWAP_INT((GLbyte *) &hdr->type);

    /*
     ** Just invert swapBytes flag; the GL will figure out if it needs to swap
     ** the pixel data.
     */
    hdr->swapBytes = !hdr->swapBytes;
}

void
__glXDispSwap_TexSubImage3D(GLbyte * pc)
{
    __GLXdispatchTexSubImage3DHeader *hdr =
        (__GLXdispatchTexSubImage3DHeader *) pc;

    __GLX_DECLARE_SWAP_VARIABLES;

    __GLX_SWAP_INT((GLbyte *) &hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) &hdr->imageHeight);
    __GLX_SWAP_INT((GLbyte *) &hdr->imageDepth);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipImages);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipVolumes);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) &hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) &hdr->target);
    __GLX_SWAP_INT((GLbyte *) &hdr->level);
    __GLX_SWAP_INT((GLbyte *) &hdr->xoffset);
    __GLX_SWAP_INT((GLbyte *) &hdr->yoffset);
    __GLX_SWAP_INT((GLbyte *) &hdr->zoffset);
    __GLX_SWAP_INT((GLbyte *) &hdr->width);
    __GLX_SWAP_INT((GLbyte *) &hdr->height);
    __GLX_SWAP_INT((GLbyte *) &hdr->depth);
    __GLX_SWAP_INT((GLbyte *) &hdr->size4d);
    __GLX_SWAP_INT((GLbyte *) &hdr->format);
    __GLX_SWAP_INT((GLbyte *) &hdr->type);

    /*
     ** Just invert swapBytes flag; the GL will figure out if it needs to swap
     ** the pixel data.
     */
    hdr->swapBytes = !hdr->swapBytes;
}

void
__glXDispSwap_ColorTable(GLbyte * pc)
{
    __GLXdispatchColorTableHeader *hdr = (__GLXdispatchColorTableHeader *) pc;

    __GLX_DECLARE_SWAP_VARIABLES;

    __GLX_SWAP_INT((GLbyte *) &hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) &hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) &hdr->target);
    __GLX_SWAP_INT((GLbyte *) &hdr->internalformat);
    __GLX_SWAP_INT((GLbyte *) &hdr->width);
    __GLX_SWAP_INT((GLbyte *) &hdr->format);
    __GLX_SWAP_INT((GLbyte *) &hdr->type);

    /*
     ** Just invert swapBytes flag; the GL will figure out if it needs to swap
     ** the pixel data.
     */
    hdr->swapBytes = !hdr->swapBytes;
}

void
__glXDispSwap_ColorSubTable(GLbyte * pc)
{
    __GLXdispatchColorSubTableHeader *hdr =
        (__GLXdispatchColorSubTableHeader *) pc;
    __GLX_DECLARE_SWAP_VARIABLES;

    __GLX_SWAP_INT((GLbyte *) &hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) &hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) &hdr->target);
    __GLX_SWAP_INT((GLbyte *) &hdr->start);
    __GLX_SWAP_INT((GLbyte *) &hdr->count);
    __GLX_SWAP_INT((GLbyte *) &hdr->format);
    __GLX_SWAP_INT((GLbyte *) &hdr->type);

    /*
     ** Just invert swapBytes flag; the GL will figure out if it needs to swap
     ** the pixel data.
     */
    hdr->swapBytes = !hdr->swapBytes;
}

void
__glXDispSwap_ConvolutionFilter1D(GLbyte * pc)
{
    __GLXdispatchConvolutionFilterHeader *hdr =
        (__GLXdispatchConvolutionFilterHeader *) pc;
    __GLX_DECLARE_SWAP_VARIABLES;

    __GLX_SWAP_INT((GLbyte *) &hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) &hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) &hdr->target);
    __GLX_SWAP_INT((GLbyte *) &hdr->internalformat);
    __GLX_SWAP_INT((GLbyte *) &hdr->width);
    __GLX_SWAP_INT((GLbyte *) &hdr->format);
    __GLX_SWAP_INT((GLbyte *) &hdr->type);

    /*
     ** Just invert swapBytes flag; the GL will figure out if it needs to swap
     ** the pixel data.
     */
    hdr->swapBytes = !hdr->swapBytes;
}

void
__glXDispSwap_ConvolutionFilter2D(GLbyte * pc)
{
    __GLXdispatchConvolutionFilterHeader *hdr =
        (__GLXdispatchConvolutionFilterHeader *) pc;
    __GLX_DECLARE_SWAP_VARIABLES;

    __GLX_SWAP_INT((GLbyte *) &hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) &hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) &hdr->target);
    __GLX_SWAP_INT((GLbyte *) &hdr->internalformat);
    __GLX_SWAP_INT((GLbyte *) &hdr->width);
    __GLX_SWAP_INT((GLbyte *) &hdr->height);
    __GLX_SWAP_INT((GLbyte *) &hdr->format);
    __GLX_SWAP_INT((GLbyte *) &hdr->type);

    /*
     ** Just invert swapBytes flag; the GL will figure out if it needs to swap
     ** the pixel data.
     */
    hdr->swapBytes = !hdr->swapBytes;
}

void
__glXDispSwap_SeparableFilter2D(GLbyte * pc)
{
    __GLXdispatchConvolutionFilterHeader *hdr =
        (__GLXdispatchConvolutionFilterHeader *) pc;

    __GLX_DECLARE_SWAP_VARIABLES;

    __GLX_SWAP_INT((GLbyte *) &hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) &hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) &hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) &hdr->target);
    __GLX_SWAP_INT((GLbyte *) &hdr->internalformat);
    __GLX_SWAP_INT((GLbyte *) &hdr->width);
    __GLX_SWAP_INT((GLbyte *) &hdr->height);
    __GLX_SWAP_INT((GLbyte *) &hdr->format);
    __GLX_SWAP_INT((GLbyte *) &hdr->type);

    /*
     ** Just invert swapBytes flag; the GL will figure out if it needs to swap
     ** the pixel data.
     */
    hdr->swapBytes = !hdr->swapBytes;
}
@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a382 1
    GLint hdrlen;
a384 2

    hdrlen = __GLX_PAD(__GLX_CONV_FILT_CMD_HDR_SIZE);
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d42 4
a45 4
    __GLX_SWAP_INT((GLbyte *) & hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) & hdr->alignment);
d57 11
a67 11
    __GLX_SWAP_INT((GLbyte *) & hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) & hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) & hdr->width);
    __GLX_SWAP_INT((GLbyte *) & hdr->height);
    __GLX_SWAP_FLOAT((GLbyte *) & hdr->xorig);
    __GLX_SWAP_FLOAT((GLbyte *) & hdr->yorig);
    __GLX_SWAP_FLOAT((GLbyte *) & hdr->xmove);
    __GLX_SWAP_FLOAT((GLbyte *) & hdr->ymove);
d80 13
a92 13
    __GLX_SWAP_INT((GLbyte *) & hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) & hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) & hdr->target);
    __GLX_SWAP_INT((GLbyte *) & hdr->level);
    __GLX_SWAP_INT((GLbyte *) & hdr->components);
    __GLX_SWAP_INT((GLbyte *) & hdr->width);
    __GLX_SWAP_INT((GLbyte *) & hdr->height);
    __GLX_SWAP_INT((GLbyte *) & hdr->border);
    __GLX_SWAP_INT((GLbyte *) & hdr->format);
    __GLX_SWAP_INT((GLbyte *) & hdr->type);
d108 13
a120 13
    __GLX_SWAP_INT((GLbyte *) & hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) & hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) & hdr->target);
    __GLX_SWAP_INT((GLbyte *) & hdr->level);
    __GLX_SWAP_INT((GLbyte *) & hdr->components);
    __GLX_SWAP_INT((GLbyte *) & hdr->width);
    __GLX_SWAP_INT((GLbyte *) & hdr->height);
    __GLX_SWAP_INT((GLbyte *) & hdr->border);
    __GLX_SWAP_INT((GLbyte *) & hdr->format);
    __GLX_SWAP_INT((GLbyte *) & hdr->type);
d136 19
a154 19
    __GLX_SWAP_INT((GLbyte *) & hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) & hdr->imageHeight);
    __GLX_SWAP_INT((GLbyte *) & hdr->imageDepth);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipImages);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipVolumes);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) & hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) & hdr->target);
    __GLX_SWAP_INT((GLbyte *) & hdr->level);
    __GLX_SWAP_INT((GLbyte *) & hdr->internalformat);
    __GLX_SWAP_INT((GLbyte *) & hdr->width);
    __GLX_SWAP_INT((GLbyte *) & hdr->height);
    __GLX_SWAP_INT((GLbyte *) & hdr->depth);
    __GLX_SWAP_INT((GLbyte *) & hdr->size4d);
    __GLX_SWAP_INT((GLbyte *) & hdr->border);
    __GLX_SWAP_INT((GLbyte *) & hdr->format);
    __GLX_SWAP_INT((GLbyte *) & hdr->type);
d170 9
a178 9
    __GLX_SWAP_INT((GLbyte *) & hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) & hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) & hdr->width);
    __GLX_SWAP_INT((GLbyte *) & hdr->height);
    __GLX_SWAP_INT((GLbyte *) & hdr->format);
    __GLX_SWAP_INT((GLbyte *) & hdr->type);
d194 11
a204 11
    __GLX_SWAP_INT((GLbyte *) & hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) & hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) & hdr->target);
    __GLX_SWAP_INT((GLbyte *) & hdr->level);
    __GLX_SWAP_INT((GLbyte *) & hdr->xoffset);
    __GLX_SWAP_INT((GLbyte *) & hdr->width);
    __GLX_SWAP_INT((GLbyte *) & hdr->format);
    __GLX_SWAP_INT((GLbyte *) & hdr->type);
d220 13
a232 13
    __GLX_SWAP_INT((GLbyte *) & hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) & hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) & hdr->target);
    __GLX_SWAP_INT((GLbyte *) & hdr->level);
    __GLX_SWAP_INT((GLbyte *) & hdr->xoffset);
    __GLX_SWAP_INT((GLbyte *) & hdr->yoffset);
    __GLX_SWAP_INT((GLbyte *) & hdr->width);
    __GLX_SWAP_INT((GLbyte *) & hdr->height);
    __GLX_SWAP_INT((GLbyte *) & hdr->format);
    __GLX_SWAP_INT((GLbyte *) & hdr->type);
d249 20
a268 20
    __GLX_SWAP_INT((GLbyte *) & hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) & hdr->imageHeight);
    __GLX_SWAP_INT((GLbyte *) & hdr->imageDepth);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipImages);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipVolumes);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) & hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) & hdr->target);
    __GLX_SWAP_INT((GLbyte *) & hdr->level);
    __GLX_SWAP_INT((GLbyte *) & hdr->xoffset);
    __GLX_SWAP_INT((GLbyte *) & hdr->yoffset);
    __GLX_SWAP_INT((GLbyte *) & hdr->zoffset);
    __GLX_SWAP_INT((GLbyte *) & hdr->width);
    __GLX_SWAP_INT((GLbyte *) & hdr->height);
    __GLX_SWAP_INT((GLbyte *) & hdr->depth);
    __GLX_SWAP_INT((GLbyte *) & hdr->size4d);
    __GLX_SWAP_INT((GLbyte *) & hdr->format);
    __GLX_SWAP_INT((GLbyte *) & hdr->type);
d284 10
a293 10
    __GLX_SWAP_INT((GLbyte *) & hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) & hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) & hdr->target);
    __GLX_SWAP_INT((GLbyte *) & hdr->internalformat);
    __GLX_SWAP_INT((GLbyte *) & hdr->width);
    __GLX_SWAP_INT((GLbyte *) & hdr->format);
    __GLX_SWAP_INT((GLbyte *) & hdr->type);
d309 10
a318 10
    __GLX_SWAP_INT((GLbyte *) & hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) & hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) & hdr->target);
    __GLX_SWAP_INT((GLbyte *) & hdr->start);
    __GLX_SWAP_INT((GLbyte *) & hdr->count);
    __GLX_SWAP_INT((GLbyte *) & hdr->format);
    __GLX_SWAP_INT((GLbyte *) & hdr->type);
d334 10
a343 10
    __GLX_SWAP_INT((GLbyte *) & hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) & hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) & hdr->target);
    __GLX_SWAP_INT((GLbyte *) & hdr->internalformat);
    __GLX_SWAP_INT((GLbyte *) & hdr->width);
    __GLX_SWAP_INT((GLbyte *) & hdr->format);
    __GLX_SWAP_INT((GLbyte *) & hdr->type);
d359 11
a369 11
    __GLX_SWAP_INT((GLbyte *) & hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) & hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) & hdr->target);
    __GLX_SWAP_INT((GLbyte *) & hdr->internalformat);
    __GLX_SWAP_INT((GLbyte *) & hdr->width);
    __GLX_SWAP_INT((GLbyte *) & hdr->height);
    __GLX_SWAP_INT((GLbyte *) & hdr->format);
    __GLX_SWAP_INT((GLbyte *) & hdr->type);
d389 11
a399 11
    __GLX_SWAP_INT((GLbyte *) & hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *) & hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *) & hdr->alignment);

    __GLX_SWAP_INT((GLbyte *) & hdr->target);
    __GLX_SWAP_INT((GLbyte *) & hdr->internalformat);
    __GLX_SWAP_INT((GLbyte *) & hdr->width);
    __GLX_SWAP_INT((GLbyte *) & hdr->height);
    __GLX_SWAP_INT((GLbyte *) & hdr->format);
    __GLX_SWAP_INT((GLbyte *) & hdr->type);
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d35 2
a36 1
void __glXDispSwap_PolygonStipple(GLbyte *pc)
d39 1
d42 4
a45 4
    __GLX_SWAP_INT((GLbyte *)&hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *)&hdr->alignment);
d50 2
a51 1
void __glXDispSwap_Bitmap(GLbyte *pc)
d54 1
d57 4
a60 4
    __GLX_SWAP_INT((GLbyte *)&hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *)&hdr->alignment);
d62 6
a67 6
    __GLX_SWAP_INT((GLbyte *)&hdr->width);
    __GLX_SWAP_INT((GLbyte *)&hdr->height);
    __GLX_SWAP_FLOAT((GLbyte *)&hdr->xorig);
    __GLX_SWAP_FLOAT((GLbyte *)&hdr->yorig);
    __GLX_SWAP_FLOAT((GLbyte *)&hdr->xmove);
    __GLX_SWAP_FLOAT((GLbyte *)&hdr->ymove);
d73 2
a74 1
void __glXDispSwap_TexImage1D(GLbyte *pc)
d77 1
d80 4
a83 4
    __GLX_SWAP_INT((GLbyte *)&hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *)&hdr->alignment);
d85 8
a92 8
    __GLX_SWAP_INT((GLbyte *)&hdr->target);
    __GLX_SWAP_INT((GLbyte *)&hdr->level);
    __GLX_SWAP_INT((GLbyte *)&hdr->components);
    __GLX_SWAP_INT((GLbyte *)&hdr->width);
    __GLX_SWAP_INT((GLbyte *)&hdr->height);
    __GLX_SWAP_INT((GLbyte *)&hdr->border);
    __GLX_SWAP_INT((GLbyte *)&hdr->format);
    __GLX_SWAP_INT((GLbyte *)&hdr->type);
d95 3
a97 3
    ** Just invert swapBytes flag; the GL will figure out if it needs to swap
    ** the pixel data.
    */
d101 2
a102 1
void __glXDispSwap_TexImage2D(GLbyte *pc)
d105 1
d108 4
a111 4
    __GLX_SWAP_INT((GLbyte *)&hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *)&hdr->alignment);
d113 8
a120 8
    __GLX_SWAP_INT((GLbyte *)&hdr->target);
    __GLX_SWAP_INT((GLbyte *)&hdr->level);
    __GLX_SWAP_INT((GLbyte *)&hdr->components);
    __GLX_SWAP_INT((GLbyte *)&hdr->width);
    __GLX_SWAP_INT((GLbyte *)&hdr->height);
    __GLX_SWAP_INT((GLbyte *)&hdr->border);
    __GLX_SWAP_INT((GLbyte *)&hdr->format);
    __GLX_SWAP_INT((GLbyte *)&hdr->type);
d123 3
a125 3
    ** Just invert swapBytes flag; the GL will figure out if it needs to swap
    ** the pixel data.
    */
d129 2
a130 1
void __glXDispSwap_TexImage3D(GLbyte *pc)
d133 1
d136 24
a159 24
    __GLX_SWAP_INT((GLbyte *)&hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *)&hdr->imageHeight);
    __GLX_SWAP_INT((GLbyte *)&hdr->imageDepth);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipImages);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipVolumes);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *)&hdr->alignment);

    __GLX_SWAP_INT((GLbyte *)&hdr->target);
    __GLX_SWAP_INT((GLbyte *)&hdr->level);
    __GLX_SWAP_INT((GLbyte *)&hdr->internalformat);
    __GLX_SWAP_INT((GLbyte *)&hdr->width);
    __GLX_SWAP_INT((GLbyte *)&hdr->height);
    __GLX_SWAP_INT((GLbyte *)&hdr->depth);
    __GLX_SWAP_INT((GLbyte *)&hdr->size4d);
    __GLX_SWAP_INT((GLbyte *)&hdr->border);
    __GLX_SWAP_INT((GLbyte *)&hdr->format);
    __GLX_SWAP_INT((GLbyte *)&hdr->type);

    /*
    ** Just invert swapBytes flag; the GL will figure out if it needs to swap
    ** the pixel data.
    */
d163 2
a164 1
void __glXDispSwap_DrawPixels(GLbyte *pc)
d167 1
d170 4
a173 4
    __GLX_SWAP_INT((GLbyte *)&hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *)&hdr->alignment);
d175 4
a178 4
    __GLX_SWAP_INT((GLbyte *)&hdr->width);
    __GLX_SWAP_INT((GLbyte *)&hdr->height);
    __GLX_SWAP_INT((GLbyte *)&hdr->format);
    __GLX_SWAP_INT((GLbyte *)&hdr->type);
d181 3
a183 3
    ** Just invert swapBytes flag; the GL will figure out if it needs to swap
    ** the pixel data.
    */
d187 2
a188 1
void __glXDispSwap_TexSubImage1D(GLbyte *pc)
d191 1
d194 4
a197 4
    __GLX_SWAP_INT((GLbyte *)&hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *)&hdr->alignment);
d199 6
a204 6
    __GLX_SWAP_INT((GLbyte *)&hdr->target);
    __GLX_SWAP_INT((GLbyte *)&hdr->level);
    __GLX_SWAP_INT((GLbyte *)&hdr->xoffset);
    __GLX_SWAP_INT((GLbyte *)&hdr->width);
    __GLX_SWAP_INT((GLbyte *)&hdr->format);
    __GLX_SWAP_INT((GLbyte *)&hdr->type);
d207 3
a209 3
    ** Just invert swapBytes flag; the GL will figure out if it needs to swap
    ** the pixel data.
    */
d213 2
a214 1
void __glXDispSwap_TexSubImage2D(GLbyte *pc)
d217 1
d220 4
a223 4
    __GLX_SWAP_INT((GLbyte *)&hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *)&hdr->alignment);
d225 8
a232 8
    __GLX_SWAP_INT((GLbyte *)&hdr->target);
    __GLX_SWAP_INT((GLbyte *)&hdr->level);
    __GLX_SWAP_INT((GLbyte *)&hdr->xoffset);
    __GLX_SWAP_INT((GLbyte *)&hdr->yoffset);
    __GLX_SWAP_INT((GLbyte *)&hdr->width);
    __GLX_SWAP_INT((GLbyte *)&hdr->height);
    __GLX_SWAP_INT((GLbyte *)&hdr->format);
    __GLX_SWAP_INT((GLbyte *)&hdr->type);
d235 3
a237 3
    ** Just invert swapBytes flag; the GL will figure out if it needs to swap
    ** the pixel data.
    */
d241 2
a242 1
void __glXDispSwap_TexSubImage3D(GLbyte *pc)
d245 1
a245 1
				(__GLXdispatchTexSubImage3DHeader *) pc;
d249 8
a256 8
    __GLX_SWAP_INT((GLbyte *)&hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *)&hdr->imageHeight);
    __GLX_SWAP_INT((GLbyte *)&hdr->imageDepth);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipImages);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipVolumes);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *)&hdr->alignment);
d258 11
a268 11
    __GLX_SWAP_INT((GLbyte *)&hdr->target);
    __GLX_SWAP_INT((GLbyte *)&hdr->level);
    __GLX_SWAP_INT((GLbyte *)&hdr->xoffset);
    __GLX_SWAP_INT((GLbyte *)&hdr->yoffset);
    __GLX_SWAP_INT((GLbyte *)&hdr->zoffset);
    __GLX_SWAP_INT((GLbyte *)&hdr->width);
    __GLX_SWAP_INT((GLbyte *)&hdr->height);
    __GLX_SWAP_INT((GLbyte *)&hdr->depth);
    __GLX_SWAP_INT((GLbyte *)&hdr->size4d);
    __GLX_SWAP_INT((GLbyte *)&hdr->format);
    __GLX_SWAP_INT((GLbyte *)&hdr->type);
d271 3
a273 3
    ** Just invert swapBytes flag; the GL will figure out if it needs to swap
    ** the pixel data.
    */
d277 2
a278 1
void __glXDispSwap_ColorTable(GLbyte *pc)
d280 2
a281 2
    __GLXdispatchColorTableHeader *hdr =
				(__GLXdispatchColorTableHeader *) pc;
d284 4
a287 4
    __GLX_SWAP_INT((GLbyte *)&hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *)&hdr->alignment);
d289 5
a293 5
    __GLX_SWAP_INT((GLbyte *)&hdr->target);
    __GLX_SWAP_INT((GLbyte *)&hdr->internalformat);
    __GLX_SWAP_INT((GLbyte *)&hdr->width);
    __GLX_SWAP_INT((GLbyte *)&hdr->format);
    __GLX_SWAP_INT((GLbyte *)&hdr->type);
d296 3
a298 3
    ** Just invert swapBytes flag; the GL will figure out if it needs to swap
    ** the pixel data.
    */
d302 2
a303 1
void __glXDispSwap_ColorSubTable(GLbyte *pc)
d306 1
a306 1
				(__GLXdispatchColorSubTableHeader *) pc;
d309 4
a312 4
    __GLX_SWAP_INT((GLbyte *)&hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *)&hdr->alignment);
d314 5
a318 5
    __GLX_SWAP_INT((GLbyte *)&hdr->target);
    __GLX_SWAP_INT((GLbyte *)&hdr->start);
    __GLX_SWAP_INT((GLbyte *)&hdr->count);
    __GLX_SWAP_INT((GLbyte *)&hdr->format);
    __GLX_SWAP_INT((GLbyte *)&hdr->type);
d321 3
a323 3
    ** Just invert swapBytes flag; the GL will figure out if it needs to swap
    ** the pixel data.
    */
d327 2
a328 1
void __glXDispSwap_ConvolutionFilter1D(GLbyte *pc)
d331 1
a331 1
				(__GLXdispatchConvolutionFilterHeader *) pc;
d334 4
a337 4
    __GLX_SWAP_INT((GLbyte *)&hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *)&hdr->alignment);
d339 5
a343 5
    __GLX_SWAP_INT((GLbyte *)&hdr->target);
    __GLX_SWAP_INT((GLbyte *)&hdr->internalformat);
    __GLX_SWAP_INT((GLbyte *)&hdr->width);
    __GLX_SWAP_INT((GLbyte *)&hdr->format);
    __GLX_SWAP_INT((GLbyte *)&hdr->type);
d346 3
a348 3
    ** Just invert swapBytes flag; the GL will figure out if it needs to swap
    ** the pixel data.
    */
d352 2
a353 1
void __glXDispSwap_ConvolutionFilter2D(GLbyte *pc)
d356 1
a356 1
				(__GLXdispatchConvolutionFilterHeader *) pc;
d359 4
a362 4
    __GLX_SWAP_INT((GLbyte *)&hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *)&hdr->alignment);
d364 6
a369 6
    __GLX_SWAP_INT((GLbyte *)&hdr->target);
    __GLX_SWAP_INT((GLbyte *)&hdr->internalformat);
    __GLX_SWAP_INT((GLbyte *)&hdr->width);
    __GLX_SWAP_INT((GLbyte *)&hdr->height);
    __GLX_SWAP_INT((GLbyte *)&hdr->format);
    __GLX_SWAP_INT((GLbyte *)&hdr->type);
d372 3
a374 3
    ** Just invert swapBytes flag; the GL will figure out if it needs to swap
    ** the pixel data.
    */
d378 2
a379 1
void __glXDispSwap_SeparableFilter2D(GLbyte *pc)
d382 1
a382 1
				(__GLXdispatchConvolutionFilterHeader *) pc;
d384 1
d389 16
a404 16
    __GLX_SWAP_INT((GLbyte *)&hdr->rowLength);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipRows);
    __GLX_SWAP_INT((GLbyte *)&hdr->skipPixels);
    __GLX_SWAP_INT((GLbyte *)&hdr->alignment);

    __GLX_SWAP_INT((GLbyte *)&hdr->target);
    __GLX_SWAP_INT((GLbyte *)&hdr->internalformat);
    __GLX_SWAP_INT((GLbyte *)&hdr->width);
    __GLX_SWAP_INT((GLbyte *)&hdr->height);
    __GLX_SWAP_INT((GLbyte *)&hdr->format);
    __GLX_SWAP_INT((GLbyte *)&hdr->type);

    /*
    ** Just invert swapBytes flag; the GL will figure out if it needs to swap
    ** the pixel data.
    */
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d361 1
a361 1
    GLint hdrlen, image1len;
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a30 1
#define NEED_REPLIES
@


1.1
log
@Initial revision
@
text
@d2 28
a29 33
** License Applicability. Except to the extent portions of this file are
** made subject to an alternative license as permitted in the SGI Free
** Software License B, Version 1.1 (the "License"), the contents of this
** file are subject only to the provisions of the License. You may not use
** this file except in compliance with the License. You may obtain a copy
** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
** 
** http://oss.sgi.com/projects/FreeB
** 
** Note that, as provided in the License, the Software is distributed on an
** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
** 
** Original Code. The Original Code is: OpenGL Sample Implementation,
** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
** Copyright in any portions created by third parties is as indicated
** elsewhere herein. All Rights Reserved.
** 
** Additional Notice Provisions: The application programming interfaces
** established by SGI in conjunction with the Original Code are The
** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
** Window System(R) (Version 1.3), released October 19, 1998. This software
** was created using the OpenGL(R) version 1.2.1 Sample Implementation
** published by SGI, but has not been independently verified as being
** compliant with the OpenGL(R) version 1.2.1 Specification.
**
*/
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
