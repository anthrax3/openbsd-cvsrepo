head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.20
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.16
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.16;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.40;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.40;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.02.23;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * Copyright 2001-2004 Red Hat Inc., Durham, North Carolina.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL RED HAT AND/OR THEIR SUPPLIERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * Authors:
 *   Kevin E. Martin <kem@@redhat.com>
 *
 */

/** \file
 * Provides pixmap support. */

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#endif

#include "dmx.h"
#include "dmxsync.h"
#include "dmxpixmap.h"

#include "pixmapstr.h"
#include "servermd.h"
#include "privates.h"

/** Initialize a private area in \a pScreen for pixmap information. */
Bool
dmxInitPixmap(ScreenPtr pScreen)
{
    if (!dixRegisterPrivateKey
        (&dmxPixPrivateKeyRec, PRIVATE_PIXMAP, sizeof(dmxPixPrivRec)))
        return FALSE;

    return TRUE;
}

/** Create a pixmap on the back-end server. */
void
dmxBECreatePixmap(PixmapPtr pPixmap)
{
    ScreenPtr pScreen = pPixmap->drawable.pScreen;
    DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
    dmxPixPrivPtr pPixPriv = DMX_GET_PIXMAP_PRIV(pPixmap);

    /* Make sure we haven't already created this pixmap.  This can
     * happen when the pixmap is used elsewhere (e.g., as a background
     * or border for a window) and the refcnt > 1.
     */
    if (pPixPriv->pixmap)
        return;

    if (pPixmap->drawable.width && pPixmap->drawable.height) {
        pPixPriv->pixmap = XCreatePixmap(dmxScreen->beDisplay,
                                         dmxScreen->scrnWin,
                                         pPixmap->drawable.width,
                                         pPixmap->drawable.height,
                                         pPixmap->drawable.depth);
        dmxSync(dmxScreen, FALSE);
    }
}

/** Create a pixmap for \a pScreen with the specified \a width, \a
 *  height, and \a depth. */
PixmapPtr
dmxCreatePixmap(ScreenPtr pScreen, int width, int height, int depth,
                unsigned usage_hint)
{
    DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
    PixmapPtr pPixmap;
    int bpp;
    dmxPixPrivPtr pPixPriv;

#if 0
    DMX_UNWRAP(CreatePixmap, dmxScreen, pScreen);
    if (pScreen->CreatePixmap)
        ret = pScreen->CreatePixmap(pPixmap);
#endif

    /* Create pixmap on back-end server */
    if (depth == 24)
        bpp = 32;
    else
        bpp = depth;

    pPixmap = AllocatePixmap(pScreen, 0);
    if (!pPixmap)
        return NullPixmap;

    pPixmap->drawable.type = DRAWABLE_PIXMAP;
    pPixmap->drawable.class = 0;
    pPixmap->drawable.pScreen = pScreen;
    pPixmap->drawable.depth = depth;
    pPixmap->drawable.bitsPerPixel = bpp;
    pPixmap->drawable.id = 0;
    pPixmap->drawable.serialNumber = NEXT_SERIAL_NUMBER;
    pPixmap->drawable.x = 0;
    pPixmap->drawable.y = 0;
    pPixmap->drawable.width = width;
    pPixmap->drawable.height = height;
    pPixmap->devKind = PixmapBytePad(width, bpp);
    pPixmap->refcnt = 1;
    pPixmap->usage_hint = usage_hint;

    pPixPriv = DMX_GET_PIXMAP_PRIV(pPixmap);
    pPixPriv->pixmap = (Pixmap) 0;
    pPixPriv->detachedImage = NULL;

    /* Create the pixmap on the back-end server */
    if (dmxScreen->beDisplay) {
        dmxBECreatePixmap(pPixmap);
    }

#if 0
    DMX_WRAP(CreatePixmap, dmxCreatePixmap, dmxScreen, pScreen);
#endif

    return pPixmap;
}

/** Destroy the pixmap on the back-end server. */
Bool
dmxBEFreePixmap(PixmapPtr pPixmap)
{
    ScreenPtr pScreen = pPixmap->drawable.pScreen;
    DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
    dmxPixPrivPtr pPixPriv = DMX_GET_PIXMAP_PRIV(pPixmap);

    if (pPixPriv->pixmap) {
        XFreePixmap(dmxScreen->beDisplay, pPixPriv->pixmap);
        pPixPriv->pixmap = (Pixmap) 0;
        return TRUE;
    }

    return FALSE;
}

/** Destroy the pixmap pointed to by \a pPixmap. */
Bool
dmxDestroyPixmap(PixmapPtr pPixmap)
{
    ScreenPtr pScreen = pPixmap->drawable.pScreen;
    DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
    Bool ret = TRUE;

#if 0
    DMX_UNWRAP(DestroyPixmap, dmxScreen, pScreen);
#endif

    if (--pPixmap->refcnt)
        return TRUE;

    /* Destroy pixmap on back-end server */
    if (dmxScreen->beDisplay) {
        if (dmxBEFreePixmap(pPixmap)) {
            /* Also make sure that we destroy any detached image */
            dmxPixPrivPtr pPixPriv = DMX_GET_PIXMAP_PRIV(pPixmap);

            if (pPixPriv->detachedImage)
                XDestroyImage(pPixPriv->detachedImage);
            dmxSync(dmxScreen, FALSE);
        }
    }
    FreePixmap(pPixmap);

#if 0
    if (pScreen->DestroyPixmap)
        ret = pScreen->DestroyPixmap(pPixmap);
    DMX_WRAP(DestroyPixmap, dmxDestroyPixmap, dmxScreen, pScreen);
#endif

    return ret;
}

/** Create and return a region based on the pixmap pointed to by \a
 *  pPixmap. */
RegionPtr
dmxBitmapToRegion(PixmapPtr pPixmap)
{
    DMXScreenInfo *dmxScreen = &dmxScreens[pPixmap->drawable.pScreen->myNum];
    dmxPixPrivPtr pPixPriv = DMX_GET_PIXMAP_PRIV(pPixmap);
    XImage *ximage;
    RegionPtr pReg, pTmpReg;
    int x, y;
    unsigned long previousPixel, currentPixel;
    BoxRec Box;
    Bool overlap;

    if (!dmxScreen->beDisplay) {
        pReg = RegionCreate(NullBox, 1);
        return pReg;
    }

    ximage = XGetImage(dmxScreen->beDisplay, pPixPriv->pixmap, 0, 0,
                       pPixmap->drawable.width, pPixmap->drawable.height,
                       1, XYPixmap);

    pReg = RegionCreate(NullBox, 1);
    pTmpReg = RegionCreate(NullBox, 1);
    if (!pReg || !pTmpReg) {
        XDestroyImage(ximage);
        return NullRegion;
    }

    for (y = 0; y < pPixmap->drawable.height; y++) {
        Box.y1 = y;
        Box.y2 = y + 1;
        previousPixel = 0L;
        for (x = 0; x < pPixmap->drawable.width; x++) {
            currentPixel = XGetPixel(ximage, x, y);
            if (previousPixel != currentPixel) {
                if (previousPixel == 0L) {
                    /* left edge */
                    Box.x1 = x;
                }
                else if (currentPixel == 0L) {
                    /* right edge */
                    Box.x2 = x;
                    RegionReset(pTmpReg, &Box);
                    RegionAppend(pReg, pTmpReg);
                }
                previousPixel = currentPixel;
            }
        }
        if (previousPixel != 0L) {
            /* right edge because of the end of pixmap */
            Box.x2 = pPixmap->drawable.width;
            RegionReset(pTmpReg, &Box);
            RegionAppend(pReg, pTmpReg);
        }
    }

    RegionDestroy(pTmpReg);
    XDestroyImage(ximage);

    RegionValidate(pReg, &overlap);

    dmxSync(dmxScreen, FALSE);
    return pReg;
}
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d50 2
a51 1
Bool dmxInitPixmap(ScreenPtr pScreen)
d53 3
a55 2
    if (!dixRegisterPrivateKey(&dmxPixPrivateKeyRec, PRIVATE_PIXMAP, sizeof(dmxPixPrivRec)))
	return FALSE;
d61 2
a62 1
void dmxBECreatePixmap(PixmapPtr pPixmap)
d64 1
a64 1
    ScreenPtr      pScreen   = pPixmap->drawable.pScreen;
d66 1
a66 1
    dmxPixPrivPtr  pPixPriv  = DMX_GET_PIXMAP_PRIV(pPixmap);
d73 1
a73 1
	return;
d76 6
a81 6
	pPixPriv->pixmap = XCreatePixmap(dmxScreen->beDisplay,
					 dmxScreen->scrnWin,
					 pPixmap->drawable.width,
					 pPixmap->drawable.height,
					 pPixmap->drawable.depth);
	dmxSync(dmxScreen, FALSE);
d87 3
a89 2
PixmapPtr dmxCreatePixmap(ScreenPtr pScreen, int width, int height, int depth,
			  unsigned usage_hint)
d92 3
a94 3
    PixmapPtr      pPixmap;
    int            bpp;
    dmxPixPrivPtr  pPixPriv;
d99 1
a99 1
	ret = pScreen->CreatePixmap(pPixmap);
d103 4
a106 2
    if (depth == 24) bpp = 32;
    else             bpp = depth;
d110 1
a110 1
	return NullPixmap;
d128 1
a128 1
    pPixPriv->pixmap = (Pixmap)0;
d133 1
a133 1
	dmxBECreatePixmap(pPixmap);
d144 2
a145 1
Bool dmxBEFreePixmap(PixmapPtr pPixmap)
d147 1
a147 1
    ScreenPtr      pScreen = pPixmap->drawable.pScreen;
d149 1
a149 1
    dmxPixPrivPtr  pPixPriv = DMX_GET_PIXMAP_PRIV(pPixmap);
d152 3
a154 3
	XFreePixmap(dmxScreen->beDisplay, pPixPriv->pixmap);
	pPixPriv->pixmap = (Pixmap)0;
	return TRUE;
d161 2
a162 1
Bool dmxDestroyPixmap(PixmapPtr pPixmap)
d164 1
a164 1
    ScreenPtr      pScreen = pPixmap->drawable.pScreen;
d166 1
a166 1
    Bool           ret = TRUE;
d173 1
a173 1
	return TRUE;
d177 8
a184 7
	if (dmxBEFreePixmap(pPixmap)) {
	    /* Also make sure that we destroy any detached image */
	    dmxPixPrivPtr  pPixPriv = DMX_GET_PIXMAP_PRIV(pPixmap);
	    if (pPixPriv->detachedImage)
		XDestroyImage(pPixPriv->detachedImage);
	    dmxSync(dmxScreen, FALSE);
	}
d190 1
a190 1
	ret = pScreen->DestroyPixmap(pPixmap);
d199 2
a200 1
RegionPtr dmxBitmapToRegion(PixmapPtr pPixmap)
d203 8
a210 8
    dmxPixPrivPtr  pPixPriv = DMX_GET_PIXMAP_PRIV(pPixmap);
    XImage        *ximage;
    RegionPtr      pReg, pTmpReg;
    int            x, y;
    unsigned long  previousPixel, currentPixel;
    BoxRec         Box;
    Bool           overlap;
  
d212 2
a213 2
	pReg = RegionCreate(NullBox, 1);
	return pReg;
d217 2
a218 2
		       pPixmap->drawable.width, pPixmap->drawable.height,
		       1, XYPixmap);
d222 3
a224 3
    if(!pReg || !pTmpReg) {
	XDestroyImage(ximage);
	return NullRegion;
d228 25
a252 24
	Box.y1 = y;
	Box.y2 = y + 1;
	previousPixel = 0L;
	for (x = 0; x < pPixmap->drawable.width; x++) {
	    currentPixel = XGetPixel(ximage, x, y);
	    if (previousPixel != currentPixel) {
		if (previousPixel == 0L) { 
		    /* left edge */
		    Box.x1 = x;
		} else if (currentPixel == 0L) {
		    /* right edge */
		    Box.x2 = x;
		    RegionReset(pTmpReg, &Box);
		    RegionAppend(pReg, pTmpReg);
		}
		previousPixel = currentPixel;
	    }
	}
	if (previousPixel != 0L) {
	    /* right edge because of the end of pixmap */
	    Box.x2 = pPixmap->drawable.width;
	    RegionReset(pTmpReg, &Box);
	    RegionAppend(pReg, pTmpReg);
	}
d254 1
a254 1
  
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d52 1
a52 1
    if (!dixRequestPrivate(dmxPixPrivateKey, sizeof(dmxPixPrivRec)))
d177 1
a177 2
    dixFreePrivates(pPixmap->devPrivates);
    xfree(pPixmap);
d192 1
a192 2
    ScreenPtr      pScreen = pPixmap->drawable.pScreen;
    DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
d202 1
a202 1
	pReg = REGION_CREATE(pScreen, NullBox, 1);
d210 2
a211 2
    pReg = REGION_CREATE(pScreen, NullBox, 1);
    pTmpReg = REGION_CREATE(pScreen, NullBox, 1);
d230 2
a231 2
		    REGION_RESET(pScreen, pTmpReg, &Box);
		    REGION_APPEND(pScreen, pReg, pTmpReg);
d239 2
a240 2
	    REGION_RESET(pScreen, pTmpReg, &Box);
	    REGION_APPEND(pScreen, pReg, pTmpReg);
d244 1
a244 1
    REGION_DESTROY(pScreen, pTmpReg);
d247 1
a247 1
    REGION_VALIDATE(pScreen, pReg, &overlap);
d250 1
a250 1
    return(pReg);
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86$ */
d47 1
d52 1
a52 3
#ifdef PIXPRIV
    if (!AllocatePixmapPrivate(pScreen, dmxPixPrivateIndex,
			       sizeof(dmxPixPrivRec)))
a55 3
#else
#error Must define PIXPRIV to compile DMX X server
#endif
d84 2
a85 1
PixmapPtr dmxCreatePixmap(ScreenPtr pScreen, int width, int height, int depth)
d119 1
d177 1
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
d52 1
d58 3
@

