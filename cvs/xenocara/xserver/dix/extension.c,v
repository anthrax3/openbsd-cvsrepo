head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.6
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.2
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.4
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.2
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2016.05.29.12.02.35;	author matthieu;	state Exp;
branches;
next	1.13;
commitid	s0SI41sEunLdyFfd;

1.13
date	2015.09.16.19.10.20;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	Te1daavkBLskZ8gc;

1.12
date	2014.09.27.17.53.00;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	cVXoV5PxI8YrEaVA;

1.11
date	2013.06.07.17.28.47;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2012.06.10.13.21.21;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2012.01.31.07.52.35;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.05.13.32.49;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.27.19.02.26;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2009.09.06.19.44.21;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.02.15.26.13;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.24.19.04.01;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.28.20.29.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.14.20;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.14.20;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.22;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/***********************************************************

Copyright 1987, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <X11/X.h>
#include <X11/Xproto.h>
#include "misc.h"
#include "dixstruct.h"
#include "extnsionst.h"
#include "gcstruct.h"
#include "scrnintstr.h"
#include "dispatch.h"
#include "privates.h"
#include "registry.h"
#include "xace.h"

#define LAST_ERROR 255

static ExtensionEntry **extensions = (ExtensionEntry **) NULL;

int lastEvent = EXTENSION_EVENT_BASE;
static int lastError = FirstExtensionError;
static unsigned int NumExtensions = 0;

ExtensionEntry *
AddExtension(const char *name, int NumEvents, int NumErrors,
             int (*MainProc) (ClientPtr c1),
             int (*SwappedMainProc) (ClientPtr c2),
             void (*CloseDownProc) (ExtensionEntry * e),
             unsigned short (*MinorOpcodeProc) (ClientPtr c3))
{
    int i;
    ExtensionEntry *ext, **newexts;

    if (!MainProc || !SwappedMainProc || !MinorOpcodeProc)
        return ((ExtensionEntry *) NULL);
    if ((lastEvent + NumEvents > MAXEVENTS) ||
        (unsigned) (lastError + NumErrors > LAST_ERROR)) {
        LogMessage(X_ERROR, "Not enabling extension %s: maximum number of "
                   "events or errors exceeded.\n", name);
        return ((ExtensionEntry *) NULL);
    }

    ext = calloc(sizeof(ExtensionEntry), 1);
    if (!ext)
        return NULL;
    if (!dixAllocatePrivates(&ext->devPrivates, PRIVATE_EXTENSION)) {
        free(ext);
        return NULL;
    }
    ext->name = strdup(name);
    ext->num_aliases = 0;
    ext->aliases = (const char **) NULL;
    if (!ext->name) {
        dixFreePrivates(ext->devPrivates, PRIVATE_EXTENSION);
        free(ext);
        return ((ExtensionEntry *) NULL);
    }
    i = NumExtensions;
    newexts = reallocarray(extensions, i + 1, sizeof(ExtensionEntry *));
    if (!newexts) {
        free((void *) ext->name);
        dixFreePrivates(ext->devPrivates, PRIVATE_EXTENSION);
        free(ext);
        return ((ExtensionEntry *) NULL);
    }
    NumExtensions++;
    extensions = newexts;
    extensions[i] = ext;
    ext->index = i;
    ext->base = i + EXTENSION_BASE;
    ext->CloseDown = CloseDownProc;
    ext->MinorOpcode = MinorOpcodeProc;
    ProcVector[i + EXTENSION_BASE] = MainProc;
    SwappedProcVector[i + EXTENSION_BASE] = SwappedMainProc;
    if (NumEvents) {
        ext->eventBase = lastEvent;
        ext->eventLast = lastEvent + NumEvents;
        lastEvent += NumEvents;
    }
    else {
        ext->eventBase = 0;
        ext->eventLast = 0;
    }
    if (NumErrors) {
        ext->errorBase = lastError;
        ext->errorLast = lastError + NumErrors;
        lastError += NumErrors;
    }
    else {
        ext->errorBase = 0;
        ext->errorLast = 0;
    }

#ifdef X_REGISTRY_REQUEST
    RegisterExtensionNames(ext);
#endif
    return ext;
}

Bool
AddExtensionAlias(const char *alias, ExtensionEntry * ext)
{
    char *name;
    const char **aliases;

    if (!ext)
        return FALSE;
    aliases = reallocarray(ext->aliases, ext->num_aliases + 1, sizeof(char *));
    if (!aliases)
        return FALSE;
    ext->aliases = aliases;
    name = strdup(alias);
    if (!name)
        return FALSE;
    ext->aliases[ext->num_aliases] = name;
    ext->num_aliases++;
    return TRUE;
}

static int
FindExtension(const char *extname, int len)
{
    int i, j;

    for (i = 0; i < NumExtensions; i++) {
        if ((strlen(extensions[i]->name) == len) &&
            !strncmp(extname, extensions[i]->name, len))
            break;
        for (j = extensions[i]->num_aliases; --j >= 0;) {
            if ((strlen(extensions[i]->aliases[j]) == len) &&
                !strncmp(extname, extensions[i]->aliases[j], len))
                break;
        }
        if (j >= 0)
            break;
    }
    return ((i == NumExtensions) ? -1 : i);
}

/*
 * CheckExtension returns the extensions[] entry for the requested
 * extension name.  Maybe this could just return a Bool instead?
 */
ExtensionEntry *
CheckExtension(const char *extname)
{
    int n;

    n = FindExtension(extname, strlen(extname));
    if (n != -1)
        return extensions[n];
    else
        return NULL;
}

/*
 * Added as part of Xace.
 */
ExtensionEntry *
GetExtensionEntry(int major)
{
    if (major < EXTENSION_BASE)
        return NULL;
    major -= EXTENSION_BASE;
    if (major >= NumExtensions)
        return NULL;
    return extensions[major];
}

unsigned short
StandardMinorOpcode(ClientPtr client)
{
    return ((xReq *) client->requestBuffer)->data;
}

void
CloseDownExtensions(void)
{
    int i, j;

    for (i = NumExtensions - 1; i >= 0; i--) {
        if (extensions[i]->CloseDown)
            extensions[i]->CloseDown(extensions[i]);
        NumExtensions = i;
        free((void *) extensions[i]->name);
        for (j = extensions[i]->num_aliases; --j >= 0;)
            free((void *) extensions[i]->aliases[j]);
        free(extensions[i]->aliases);
        dixFreePrivates(extensions[i]->devPrivates, PRIVATE_EXTENSION);
        free(extensions[i]);
    }
    free(extensions);
    extensions = (ExtensionEntry **) NULL;
    lastEvent = EXTENSION_EVENT_BASE;
    lastError = FirstExtensionError;
}

int
ProcQueryExtension(ClientPtr client)
{
    xQueryExtensionReply reply;
    int i;

    REQUEST(xQueryExtensionReq);

    REQUEST_FIXED_SIZE(xQueryExtensionReq, stuff->nbytes);

    reply = (xQueryExtensionReply) {
        .type = X_Reply,
        .sequenceNumber = client->sequence,
        .length = 0,
        .major_opcode = 0
    };

    if (!NumExtensions)
        reply.present = xFalse;
    else {
        i = FindExtension((char *) &stuff[1], stuff->nbytes);
        if (i < 0 || XaceHook(XACE_EXT_ACCESS, client, extensions[i]))
            reply.present = xFalse;
        else {
            reply.present = xTrue;
            reply.major_opcode = extensions[i]->base;
            reply.first_event = extensions[i]->eventBase;
            reply.first_error = extensions[i]->errorBase;
        }
    }
    WriteReplyToClient(client, sizeof(xQueryExtensionReply), &reply);
    return Success;
}

int
ProcListExtensions(ClientPtr client)
{
    xListExtensionsReply reply;
    char *bufptr, *buffer;
    int total_length = 0;

    REQUEST_SIZE_MATCH(xReq);

    reply = (xListExtensionsReply) {
        .type = X_Reply,
        .nExtensions = 0,
        .sequenceNumber = client->sequence,
        .length = 0
    };
    buffer = NULL;

    if (NumExtensions) {
        int i, j;

        for (i = 0; i < NumExtensions; i++) {
            /* call callbacks to find out whether to show extension */
            if (XaceHook(XACE_EXT_ACCESS, client, extensions[i]) != Success)
                continue;

            total_length += strlen(extensions[i]->name) + 1;
            reply.nExtensions += 1 + extensions[i]->num_aliases;
            for (j = extensions[i]->num_aliases; --j >= 0;)
                total_length += strlen(extensions[i]->aliases[j]) + 1;
        }
        reply.length = bytes_to_int32(total_length);
        buffer = bufptr = malloc(total_length);
        if (!buffer)
            return BadAlloc;
        for (i = 0; i < NumExtensions; i++) {
            int len;

            if (XaceHook(XACE_EXT_ACCESS, client, extensions[i]) != Success)
                continue;

            *bufptr++ = len = strlen(extensions[i]->name);
            memmove(bufptr, extensions[i]->name, len);
            bufptr += len;
            for (j = extensions[i]->num_aliases; --j >= 0;) {
                *bufptr++ = len = strlen(extensions[i]->aliases[j]);
                memmove(bufptr, extensions[i]->aliases[j], len);
                bufptr += len;
            }
        }
    }
    WriteReplyToClient(client, sizeof(xListExtensionsReply), &reply);
    if (reply.length)
        WriteToClient(client, total_length, buffer);

    free(buffer);
    return Success;
}
@


1.13
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d106 1
a106 2
    newexts = (ExtensionEntry **) realloc(extensions,
                                          (i + 1) * sizeof(ExtensionEntry *));
d155 1
a155 2
    aliases = realloc(ext->aliases,
                      (ext->num_aliases + 1) * sizeof(char *));
@


1.12
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d29 2
a30 2
Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
d32 1
a32 1
both that copyright notice and this permission notice appear in 
d35 1
a35 1
software without specific, written prior permission.  
d142 1
d144 1
@


1.11
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a79 1
    size_t buflen;
d99 1
a99 1
    ext->aliases = (char **) NULL;
d109 1
a109 1
        free(ext->name);
d150 1
a150 2
    char **aliases;
    size_t buflen;
d154 2
a155 2
    aliases = (char **) realloc(ext->aliases,
                                (ext->num_aliases + 1) * sizeof(char *));
d232 1
a232 1
        free(extensions[i]->name);
d234 1
a234 1
            free(extensions[i]->aliases[j]);
@


1.10
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d257 6
a262 5
    memset(&reply, 0, sizeof(xQueryExtensionReply));
    reply.type = X_Reply;
    reply.length = 0;
    reply.major_opcode = 0;
    reply.sequenceNumber = client->sequence;
d290 6
a295 5
    memset(&reply, 0, sizeof(xListExtensionsReply));
    reply.type = X_Reply;
    reply.nExtensions = 0;
    reply.length = 0;
    reply.sequenceNumber = client->sequence;
@


1.9
log
@Update to xserver 1.11.4. tested by krw@@, shadchin@@.
@
text
@a24 1

a62 1
#define LAST_EVENT  128
d65 1
a65 1
static ExtensionEntry **extensions = (ExtensionEntry **)NULL;
d72 5
a76 5
AddExtension(char *name, int NumEvents, int NumErrors, 
	     int (*MainProc)(ClientPtr c1), 
	     int (*SwappedMainProc)(ClientPtr c2), 
	     void (*CloseDownProc)(ExtensionEntry *e), 
	     unsigned short (*MinorOpcodeProc)(ClientPtr c3))
d83 3
a85 3
        return((ExtensionEntry *) NULL);
    if ((lastEvent + NumEvents > LAST_EVENT) || 
	        (unsigned)(lastError + NumErrors > LAST_ERROR)) {
d88 1
a88 1
        return((ExtensionEntry *) NULL);
d91 1
a91 1
    ext = calloc(sizeof (ExtensionEntry), 1);
d93 1
a93 1
	return NULL;
d95 2
a96 2
	free(ext);
	return NULL;
d100 5
a104 6
    ext->aliases = (char **)NULL;
    if (!ext->name)
    {
	dixFreePrivates(ext->devPrivates, PRIVATE_EXTENSION);
	free(ext);
	return((ExtensionEntry *) NULL);
d108 6
a113 7
					   (i + 1) * sizeof(ExtensionEntry *));
    if (!newexts)
    {
	free(ext->name);
	dixFreePrivates(ext->devPrivates, PRIVATE_EXTENSION);
	free(ext);
	return((ExtensionEntry *) NULL);
d124 1
a124 2
    if (NumEvents)
    {
d126 2
a127 2
	ext->eventLast = lastEvent + NumEvents;
	lastEvent += NumEvents;
d129 1
a129 2
    else
    {
d133 1
a133 2
    if (NumErrors)
    {
d135 2
a136 2
	ext->errorLast = lastError + NumErrors;
	lastError += NumErrors;
d138 1
a138 2
    else
    {
d147 2
a148 1
Bool AddExtensionAlias(char *alias, ExtensionEntry *ext)
d155 3
a157 3
        return FALSE ;
    aliases = (char **)realloc(ext->aliases,
				(ext->num_aliases + 1) * sizeof(char *));
d159 1
a159 1
	return FALSE;
d163 1
a163 1
	return FALSE;
d170 1
a170 1
FindExtension(char *extname, int len)
d174 11
a184 12
    for (i=0; i<NumExtensions; i++)
    {
	if ((strlen(extensions[i]->name) == len) &&
	    !strncmp(extname, extensions[i]->name, len))
	    break;
	for (j = extensions[i]->num_aliases; --j >= 0;)
	{
	    if ((strlen(extensions[i]->aliases[j]) == len) &&
		!strncmp(extname, extensions[i]->aliases[j], len))
		break;
	}
	if (j >= 0) break;
d198 1
a198 1
    n = FindExtension((char*)extname, strlen(extname));
d200 1
a200 1
	return extensions[n];
d202 1
a202 1
	return NULL;
d210 1
a210 1
{    
d212 1
a212 1
	return NULL;
d215 1
a215 1
	return NULL;
d222 1
a222 1
    return ((xReq *)client->requestBuffer)->data;
d228 1
a228 1
    int i,j;
d230 10
a239 11
    for (i = NumExtensions - 1; i >= 0; i--)
    {
	if (extensions[i]->CloseDown)
	    extensions[i]->CloseDown(extensions[i]);
	NumExtensions = i;
	free(extensions[i]->name);
	for (j = extensions[i]->num_aliases; --j >= 0;)
	    free(extensions[i]->aliases[j]);
	free(extensions[i]->aliases);
	dixFreePrivates(extensions[i]->devPrivates, PRIVATE_EXTENSION);
	free(extensions[i]);
d242 1
a242 1
    extensions = (ExtensionEntry **)NULL;
d252 1
d263 1
a263 1
    if ( ! NumExtensions )
d265 2
a266 3
    else
    {
	i = FindExtension((char *)&stuff[1], stuff->nbytes);
d269 1
a269 2
        else
        {            
d271 4
a274 4
	    reply.major_opcode = extensions[i]->base;
	    reply.first_event = extensions[i]->eventBase;
	    reply.first_error = extensions[i]->errorBase;
	}
d296 1
a296 2
    if ( NumExtensions )
    {
d299 10
a308 11
        for (i=0;  i<NumExtensions; i++)
	{
	    /* call callbacks to find out whether to show extension */
	    if (XaceHook(XACE_EXT_ACCESS, client, extensions[i]) != Success)
		continue;

	    total_length += strlen(extensions[i]->name) + 1;
	    reply.nExtensions += 1 + extensions[i]->num_aliases;
	    for (j = extensions[i]->num_aliases; --j >= 0;)
		total_length += strlen(extensions[i]->aliases[j]) + 1;
	}
d310 8
a317 8
	buffer = bufptr = malloc(total_length);
	if (!buffer)
	    return BadAlloc;
        for (i=0;  i<NumExtensions; i++)
        {
	    int len;
	    if (XaceHook(XACE_EXT_ACCESS, client, extensions[i]) != Success)
		continue;
d320 8
a327 9
	    memmove(bufptr, extensions[i]->name,  len);
	    bufptr += len;
	    for (j = extensions[i]->num_aliases; --j >= 0;)
	    {
		*bufptr++ = len = strlen(extensions[i]->aliases[j]);
		memmove(bufptr, extensions[i]->aliases[j],  len);
		bufptr += len;
	    }
	}
@


1.8
log
@Update to xserver 1.11.2
@
text
@a232 14
unsigned short
MinorOpcodeOfRequest(ClientPtr client)
{
    unsigned char major;

    major = ((xReq *)client->requestBuffer)->reqType;
    if (major < EXTENSION_BASE)
	return 0;
    major -= EXTENSION_BASE;
    if (major >= NumExtensions)
	return 0;
    return (*extensions[major]->MinorOpcode)(client);
}

@


1.7
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d100 1
a100 2
    buflen = strlen(name) + 1;
    ext->name = malloc(buflen);
a108 1
    strlcpy(ext->name,  name, buflen);
d168 1
a168 2
    buflen = strlen(alias) + 1;
    name = malloc(buflen);
a170 1
    strlcpy(name,  alias, buflen);
a357 1
    {
d359 2
a360 2
        free(buffer);
    }
@


1.6
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d93 1
a93 1
    ext = xalloc(sizeof(ExtensionEntry));
d95 5
a99 1
	return(NULL);
d101 1
a101 1
    ext->name = xalloc(buflen);
a103 1
    ext->devPrivates = NULL;
d106 2
a107 1
	xfree(ext);
d112 1
a112 1
    newexts = (ExtensionEntry **) xrealloc(extensions,
d116 3
a118 2
	xfree(ext->name);
	xfree(ext);
d154 1
a154 1
    return(ext);
d165 1
a165 1
    aliases = (char **)xrealloc(ext->aliases,
d171 1
a171 1
    name = xalloc(buflen);
d261 1
a261 1
	xfree(extensions[i]->name);
d263 4
a266 4
	    xfree(extensions[i]->aliases[j]);
	xfree(extensions[i]->aliases);
	dixFreePrivates(extensions[i]->devPrivates);
	xfree(extensions[i]);
d268 1
a268 1
    xfree(extensions);
d305 1
a305 1
    return(client->noClientException);
d340 1
a340 1
	buffer = bufptr = xalloc(total_length);
d342 1
a342 1
	    return(BadAlloc);
d364 1
a364 1
    	xfree(buffer);
d366 1
a366 1
    return(client->noClientException);
@


1.5
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a52 2
#define NEED_EVENTS
#define NEED_REPLIES
d73 1
a73 1
_X_EXPORT ExtensionEntry *
d87 3
a89 1
	        (unsigned)(lastError + NumErrors > LAST_ERROR))
d91 1
d93 1
a93 1
    ext = (ExtensionEntry *) xalloc(sizeof(ExtensionEntry));
d95 1
a95 1
	return((ExtensionEntry *) NULL);
d97 1
a97 1
    ext->name = (char *)xalloc(buflen);
d152 1
a152 1
_X_EXPORT Bool AddExtensionAlias(char *alias, ExtensionEntry *ext)
d166 1
a166 1
    name = (char *)xalloc(buflen);
d200 1
a200 1
_X_EXPORT ExtensionEntry *
d226 1
a226 1
_X_EXPORT unsigned short
d232 1
a232 1
_X_EXPORT unsigned short
d277 2
a278 1
    
d312 1
d334 2
a335 2
        reply.length = (total_length + 3) >> 2;
	buffer = bufptr = (char *)xalloc(total_length);
@


1.4
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a65 2
#define EXTENSION_BASE  128
#define EXTENSION_EVENT_BASE  64
d86 1
a86 1
    if (!MainProc || !SwappedMainProc || !CloseDownProc || !MinorOpcodeProc)
d95 2
a99 2
    buflen = strlen(name) + 1;
    ext->name = (char *)xalloc(buflen);
d252 2
a253 1
	(* extensions[i]->CloseDown)(extensions[i]);
@


1.3
log
@merge xserver 1.4, 1st pass
@
text
@d62 2
a76 33
extern int extensionPrivateLen;
extern unsigned *extensionPrivateSizes;
extern unsigned totalExtensionSize;

static void
InitExtensionPrivates(ExtensionEntry *ext)
{
    char *ptr;
    DevUnion *ppriv;
    unsigned *sizes;
    unsigned size;
    int i;

    if (totalExtensionSize == sizeof(ExtensionEntry))
	ppriv = (DevUnion *)NULL;
    else
	ppriv = (DevUnion *)(ext + 1);

    ext->devPrivates = ppriv;
    sizes = extensionPrivateSizes;
    ptr = (char *)(ppriv + extensionPrivateLen);
    for (i = extensionPrivateLen; --i >= 0; ppriv++, sizes++)
    {
	if ( (size = *sizes) )
	{
	    ppriv->ptr = (pointer)ptr;
	    ptr += size;
	}
	else
	    ppriv->ptr = (pointer)NULL;
    }
}

d94 1
a94 1
    ext = (ExtensionEntry *) xalloc(totalExtensionSize);
d97 3
a99 2
    bzero(ext, totalExtensionSize);
    InitExtensionPrivates(ext);
a101 2
    ext->num_aliases = 0;
    ext->aliases = (char **)NULL;
d149 1
d159 2
a226 8
_X_EXPORT void
DeclareExtensionSecurity(char *extname, Bool secure)
{
    int i = FindExtension(extname, strlen(extname));
    if (i >= 0)
	XaceHook(XACE_DECLARE_EXT_SECURE, extensions[i], secure);
}

d260 1
d288 1
a288 1
        if (i < 0 || !XaceHook(XACE_EXT_ACCESS, client, extensions[i]))
d324 1
a324 1
	    if (!XaceHook(XACE_EXT_ACCESS, client, extensions[i]))
d333 1
a333 1
	buffer = bufptr = (char *)ALLOCATE_LOCAL(total_length);
d339 1
a339 1
	    if (!XaceHook(XACE_EXT_ACCESS, client, extensions[i]))
d357 1
a357 1
    	DEALLOCATE_LOCAL(buffer);
a360 14

#ifdef XSERVER_DTRACE
void LoadExtensionNames(char **RequestNames) {
    int i;

    for (i=0; i<NumExtensions; i++) {
	int r = extensions[i]->base;

	if (RequestNames[r] == NULL) {
	    RequestNames[r] = strdup(extensions[i]->name);
	}
    }
}
#endif
@


1.2
log
@OpenBSD local modifications:
- privilege separation
- some snprintf/strlc{at,py} conversions
- support for more architectures
- signal handler fixes
- default mouse wheel support in config tools
- sunmouse protocol
@
text
@a61 1
#ifdef XACE
a62 1
#endif
a68 2
ScreenProcEntry AuxillaryScreenProcs[MAXSCREENS];

d82 1
a82 1
    register char *ptr;
d84 3
a86 3
    register unsigned *sizes;
    register unsigned size;
    register int i;
d116 1
a116 1
    register ExtensionEntry *ext, **newexts;
a258 1
#ifdef XACE
a261 1
#endif
d285 1
a285 1
CloseDownExtensions()
d287 1
a287 1
    register int i,j;
a302 12
    for (i=0; i<MAXSCREENS; i++)
    {
	register ScreenProcEntry *spentry = &AuxillaryScreenProcs[i];

	while (spentry->num)
	{
	    spentry->num--;
	    xfree(spentry->procList[spentry->num].name);
	}
	xfree(spentry->procList);
	spentry->procList = (ProcEntryPtr)NULL;
    }
a304 1

d324 1
a324 6
        if (i < 0
#ifdef XACE
	    /* call callbacks to find out whether to show extension */
	    || !XaceHook(XACE_EXT_ACCESS, client, extensions[i])
#endif
	    )
d355 1
a355 1
        register int i, j;
a358 1
#ifdef XACE
d362 1
a362 1
#endif
a374 1
#ifdef XACE
d377 1
a377 1
#endif
d398 3
d402 2
a403 29
ExtensionLookupProc 
LookupProc(char *name, GCPtr pGC)
{
    register int i;
    register ScreenProcEntry *spentry;
    spentry  = &AuxillaryScreenProcs[pGC->pScreen->myNum];
    if (spentry->num)    
    {
        for (i = 0; i < spentry->num; i++)
            if (strcmp(name, spentry->procList[i].name) == 0)
                return(spentry->procList[i].proc);
    }
    return (ExtensionLookupProc)NULL;
}

Bool
RegisterProc(char *name, GC *pGC, ExtensionLookupProc proc)
{
    return RegisterScreenProc(name, pGC->pScreen, proc);
}

Bool
RegisterScreenProc(char *name, ScreenPtr pScreen, ExtensionLookupProc proc)
{
    register ScreenProcEntry *spentry;
    register ProcEntryPtr procEntry = (ProcEntryPtr)NULL;
    char *newname;
    size_t buflen;
    int i;
d405 2
a406 26
    spentry = &AuxillaryScreenProcs[pScreen->myNum];
    /* first replace duplicates */
    if (spentry->num)
    {
        for (i = 0; i < spentry->num; i++)
            if (strcmp(name, spentry->procList[i].name) == 0)
	    {
                procEntry = &spentry->procList[i];
		break;
	    }
    }
    if (procEntry)
        procEntry->proc = proc;
    else
    {
	buflen = strlen(name)+1;
	newname = (char *)xalloc(buflen);
	if (!newname)
	    return FALSE;
	procEntry = (ProcEntryPtr)
			    xrealloc(spentry->procList,
				     sizeof(ProcEntryRec) * (spentry->num+1));
	if (!procEntry)
	{
	    xfree(newname);
	    return FALSE;
a407 6
	spentry->procList = procEntry;
        procEntry += spentry->num;
        procEntry->name = newname;
        strlcpy(newname, name, buflen);
        procEntry->proc = proc;
        spentry->num++;        
a408 1
    return TRUE;
d410 1
@


1.1
log
@Initial revision
@
text
@d121 1
d134 2
a135 1
    ext->name = (char *)xalloc(strlen(name) + 1);
d143 1
a143 1
    strcpy(ext->name,  name);
d192 1
d199 2
a200 1
    name = (char *)xalloc(strlen(alias) + 1);
d203 1
a203 1
    strcpy(name,  alias);
d452 1
d470 2
a471 1
	newname = (char *)xalloc(strlen(name)+1);
d485 1
a485 1
        strcpy(newname, name);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d62 1
d64 1
d71 2
d86 1
a86 1
    char *ptr;
d88 3
a90 3
    unsigned *sizes;
    unsigned size;
    int i;
d120 1
a120 1
    ExtensionEntry *ext, **newexts;
d259 1
d263 1
d287 1
a287 1
CloseDownExtensions(void)
d289 1
a289 1
    int i,j;
d305 12
d319 1
d339 6
a344 1
        if (i < 0 || !XaceHook(XACE_EXT_ACCESS, client, extensions[i]))
d375 1
a375 1
        int i, j;
d379 1
d383 1
a383 1

d396 1
d399 1
a399 1

d420 28
a447 2
#ifdef XSERVER_DTRACE
void LoadExtensionNames(char **RequestNames) {
d450 25
a474 5
    for (i=0; i<NumExtensions; i++) {
	int r = extensions[i]->base;

	if (RequestNames[r] == NULL) {
	    RequestNames[r] = strdup(extensions[i]->name);
d476 6
d483 1
a484 1
#endif
@

