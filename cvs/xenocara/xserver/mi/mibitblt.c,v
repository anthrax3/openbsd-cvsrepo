head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.6
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.05.29.12.02.39;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	s0SI41sEunLdyFfd;

1.10
date	2015.09.16.19.10.25;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	Te1daavkBLskZ8gc;

1.9
date	2014.09.27.17.53.04;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	cVXoV5PxI8YrEaVA;

1.8
date	2013.06.07.17.28.55;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.10.13.21.30;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.01.31.07.52.36;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.37;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.14.14;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.14.14;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.39;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/***********************************************************

Copyright 1987, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/
/* Author: Todd Newman  (aided and abetted by Mr. Drewry) */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <X11/X.h>
#include <X11/Xprotostr.h>

#include "misc.h"
#include "gcstruct.h"
#include "pixmapstr.h"
#include "windowstr.h"
#include "scrnintstr.h"
#include "mi.h"
#include "regionstr.h"
#include <X11/Xmd.h>
#include "servermd.h"

#ifndef HAVE_FFS
extern int ffs(int);
#endif

/* MICOPYAREA -- public entry for the CopyArea request
 * For each rectangle in the source region
 *     get the pixels with GetSpans
 *     set them in the destination with SetSpans
 * We let SetSpans worry about clipping to the destination.
 */
_X_COLD RegionPtr
miCopyArea(DrawablePtr pSrcDrawable,
           DrawablePtr pDstDrawable,
           GCPtr pGC,
           int xIn, int yIn, int widthSrc, int heightSrc, int xOut, int yOut)
{
    DDXPointPtr ppt, pptFirst;
    unsigned int *pwidthFirst, *pwidth, *pbits;
    BoxRec srcBox, *prect;

    /* may be a new region, or just a copy */
    RegionPtr prgnSrcClip;

    /* non-0 if we've created a src clip */
    RegionPtr prgnExposed;
    int realSrcClip = 0;
    int srcx, srcy, dstx, dsty, i, j, y, width, height, xMin, xMax, yMin, yMax;
    unsigned int *ordering;
    int numRects;
    BoxPtr boxes;

    srcx = xIn + pSrcDrawable->x;
    srcy = yIn + pSrcDrawable->y;

    /* If the destination isn't realized, this is easy */
    if (pDstDrawable->type == DRAWABLE_WINDOW &&
        !((WindowPtr) pDstDrawable)->realized)
        return NULL;

    /* clip the source */
    if (pSrcDrawable->type == DRAWABLE_PIXMAP) {
        BoxRec box;

        box.x1 = pSrcDrawable->x;
        box.y1 = pSrcDrawable->y;
        box.x2 = pSrcDrawable->x + (int) pSrcDrawable->width;
        box.y2 = pSrcDrawable->y + (int) pSrcDrawable->height;

        prgnSrcClip = RegionCreate(&box, 1);
        realSrcClip = 1;
    }
    else {
        if (pGC->subWindowMode == IncludeInferiors) {
            prgnSrcClip = NotClippedByChildren((WindowPtr) pSrcDrawable);
            realSrcClip = 1;
        }
        else
            prgnSrcClip = &((WindowPtr) pSrcDrawable)->clipList;
    }

    /* If the src drawable is a window, we need to translate the srcBox so
     * that we can compare it with the window's clip region later on. */
    srcBox.x1 = srcx;
    srcBox.y1 = srcy;
    srcBox.x2 = srcx + widthSrc;
    srcBox.y2 = srcy + heightSrc;

    dstx = xOut;
    dsty = yOut;
    if (pGC->miTranslate) {
        dstx += pDstDrawable->x;
        dsty += pDstDrawable->y;
    }

    pptFirst = ppt = xallocarray(heightSrc, sizeof(DDXPointRec));
    pwidthFirst = pwidth = xallocarray(heightSrc, sizeof(unsigned int));
    numRects = RegionNumRects(prgnSrcClip);
    boxes = RegionRects(prgnSrcClip);
    ordering = xallocarray(numRects, sizeof(unsigned int));
    if (!pptFirst || !pwidthFirst || !ordering) {
        free(ordering);
        free(pwidthFirst);
        free(pptFirst);
        return NULL;
    }

    /* If not the same drawable then order of move doesn't matter.
       Following assumes that boxes are sorted from top
       to bottom and left to right.
     */
    if ((pSrcDrawable != pDstDrawable) &&
        ((pGC->subWindowMode != IncludeInferiors) ||
         (pSrcDrawable->type == DRAWABLE_PIXMAP) ||
         (pDstDrawable->type == DRAWABLE_PIXMAP)))
        for (i = 0; i < numRects; i++)
            ordering[i] = i;
    else {                      /* within same drawable, must sequence moves carefully! */
        if (dsty <= srcBox.y1) {        /* Scroll up or stationary vertical.
                                           Vertical order OK */
            if (dstx <= srcBox.x1)      /* Scroll left or stationary horizontal.
                                           Horizontal order OK as well */
                for (i = 0; i < numRects; i++)
                    ordering[i] = i;
            else {              /* scroll right. must reverse horizontal banding of rects. */
                for (i = 0, j = 1, xMax = 0; i < numRects; j = i + 1, xMax = i) {
                    /* find extent of current horizontal band */
                    y = boxes[i].y1;    /* band has this y coordinate */
                    while ((j < numRects) && (boxes[j].y1 == y))
                        j++;
                    /* reverse the horizontal band in the output ordering */
                    for (j--; j >= xMax; j--, i++)
                        ordering[i] = j;
                }
            }
        }
        else {                  /* Scroll down. Must reverse vertical banding. */
            if (dstx < srcBox.x1) {     /* Scroll left. Horizontal order OK. */
                for (i = numRects - 1, j = i - 1, yMin = i, yMax = 0;
                     i >= 0; j = i - 1, yMin = i) {
                    /* find extent of current horizontal band */
                    y = boxes[i].y1;    /* band has this y coordinate */
                    while ((j >= 0) && (boxes[j].y1 == y))
                        j--;
                    /* reverse the horizontal band in the output ordering */
                    for (j++; j <= yMin; j++, i--, yMax++)
                        ordering[yMax] = j;
                }
            }
            else                /* Scroll right or horizontal stationary.
                                   Reverse horizontal order as well (if stationary, horizontal
                                   order can be swapped without penalty and this is faster
                                   to compute). */
                for (i = 0, j = numRects - 1; i < numRects; i++, j--)
                    ordering[i] = j;
        }
    }

    for (i = 0; i < numRects; i++) {
        prect = &boxes[ordering[i]];
        xMin = max(prect->x1, srcBox.x1);
        xMax = min(prect->x2, srcBox.x2);
        yMin = max(prect->y1, srcBox.y1);
        yMax = min(prect->y2, srcBox.y2);
        /* is there anything visible here? */
        if (xMax <= xMin || yMax <= yMin)
            continue;

        ppt = pptFirst;
        pwidth = pwidthFirst;
        y = yMin;
        height = yMax - yMin;
        width = xMax - xMin;

        for (j = 0; j < height; j++) {
            /* We must untranslate before calling GetSpans */
            ppt->x = xMin;
            ppt++->y = y++;
            *pwidth++ = width;
        }
        pbits = xallocarray(height, PixmapBytePad(width, pSrcDrawable->depth));
        if (pbits) {
            (*pSrcDrawable->pScreen->GetSpans) (pSrcDrawable, width, pptFirst,
                                                (int *) pwidthFirst, height,
                                                (char *) pbits);
            ppt = pptFirst;
            pwidth = pwidthFirst;
            xMin -= (srcx - dstx);
            y = yMin - (srcy - dsty);
            for (j = 0; j < height; j++) {
                ppt->x = xMin;
                ppt++->y = y++;
                *pwidth++ = width;
            }

            (*pGC->ops->SetSpans) (pDstDrawable, pGC, (char *) pbits, pptFirst,
                                   (int *) pwidthFirst, height, TRUE);
            free(pbits);
        }
    }
    prgnExposed = miHandleExposures(pSrcDrawable, pDstDrawable, pGC, xIn, yIn,
                                    widthSrc, heightSrc, xOut, yOut);
    if (realSrcClip)
        RegionDestroy(prgnSrcClip);

    free(ordering);
    free(pwidthFirst);
    free(pptFirst);
    return prgnExposed;
}

/* MIGETPLANE -- gets a bitmap representing one plane of pDraw
 * A helper used for CopyPlane and XY format GetImage
 * No clever strategy here, we grab a scanline at a time, pull out the
 * bits and then stuff them in a 1 bit deep map.
 */
/*
 * This should be replaced with something more general.  mi shouldn't have to
 * care about such things as scanline padding et alia.
 */
_X_COLD static MiBits *
miGetPlane(DrawablePtr pDraw, int planeNum,     /* number of the bitPlane */
           int sx, int sy, int w, int h, MiBits * result)
{
    int i, j, k, width, bitsPerPixel, widthInBytes;
    DDXPointRec pt = { 0, 0 };
    MiBits pixel;
    MiBits bit;
    unsigned char *pCharsOut = NULL;

#if BITMAP_SCANLINE_UNIT == 8
#define OUT_TYPE unsigned char
#endif
#if BITMAP_SCANLINE_UNIT == 16
#define OUT_TYPE CARD16
#endif
#if BITMAP_SCANLINE_UNIT == 32
#define OUT_TYPE CARD32
#endif
#if BITMAP_SCANLINE_UNIT == 64
#define OUT_TYPE CARD64
#endif

    OUT_TYPE *pOut;
    int delta = 0;

    sx += pDraw->x;
    sy += pDraw->y;
    widthInBytes = BitmapBytePad(w);
    if (!result)
        result = calloc(h, widthInBytes);
    if (!result)
        return NULL;
    bitsPerPixel = pDraw->bitsPerPixel;
    pOut = (OUT_TYPE *) result;
    if (bitsPerPixel == 1) {
        pCharsOut = (unsigned char *) result;
        width = w;
    }
    else {
        delta = (widthInBytes / (BITMAP_SCANLINE_UNIT / 8)) -
            (w / BITMAP_SCANLINE_UNIT);
        width = 1;
#if IMAGE_BYTE_ORDER == MSBFirst
        planeNum += (32 - bitsPerPixel);
#endif
    }
    pt.y = sy;
    for (i = h; --i >= 0; pt.y++) {
        pt.x = sx;
        if (bitsPerPixel == 1) {
            (*pDraw->pScreen->GetSpans) (pDraw, width, &pt, &width, 1,
                                         (char *) pCharsOut);
            pCharsOut += widthInBytes;
        }
        else {
            k = 0;
            for (j = w; --j >= 0; pt.x++) {
                /* Fetch the next pixel */
                (*pDraw->pScreen->GetSpans) (pDraw, width, &pt, &width, 1,
                                             (char *) &pixel);
                /*
                 * Now get the bit and insert into a bitmap in XY format.
                 */
                bit = (pixel >> planeNum) & 1;
#if 0
                /* XXX assuming bit order == byte order */
#if BITMAP_BIT_ORDER == LSBFirst
                bit <<= k;
#else
                bit <<= ((BITMAP_SCANLINE_UNIT - 1) - k);
#endif
#else
                /* XXX assuming byte order == LSBFirst */
                if (screenInfo.bitmapBitOrder == LSBFirst)
                    bit <<= k;
                else
                    bit <<= ((screenInfo.bitmapScanlineUnit - 1) -
                             (k % screenInfo.bitmapScanlineUnit)) +
                        ((k / screenInfo.bitmapScanlineUnit) *
                         screenInfo.bitmapScanlineUnit);
#endif
                *pOut |= (OUT_TYPE) bit;
                k++;
                if (k == BITMAP_SCANLINE_UNIT) {
                    pOut++;
                    k = 0;
                }
            }
            pOut += delta;
        }
    }
    return result;

}

/* MIOPQSTIPDRAWABLE -- use pbits as an opaque stipple for pDraw.
 * Drawing through the clip mask we SetSpans() the bits into a
 * bitmap and stipple those bits onto the destination drawable by doing a
 * PolyFillRect over the whole drawable,
 * then we invert the bitmap by copying it onto itself with an alu of
 * GXinvert, invert the foreground/background colors of the gc, and draw
 * the background bits.
 * Note how the clipped out bits of the bitmap are always the background
 * color so that the stipple never causes FillRect to draw them.
 */
_X_COLD static void
miOpqStipDrawable(DrawablePtr pDraw, GCPtr pGC, RegionPtr prgnSrc,
                  MiBits * pbits, int srcx, int w, int h, int dstx, int dsty)
{
    int oldfill, i;
    unsigned long oldfg;
    int *pwidth, *pwidthFirst;
    ChangeGCVal gcv[6];
    PixmapPtr pStipple, pPixmap;
    DDXPointRec oldOrg;
    GCPtr pGCT;
    DDXPointPtr ppt, pptFirst;
    xRectangle rect;
    RegionPtr prgnSrcClip;

    pPixmap = (*pDraw->pScreen->CreatePixmap)
        (pDraw->pScreen, w + srcx, h, 1, CREATE_PIXMAP_USAGE_SCRATCH);
    if (!pPixmap)
        return;

    /* Put the image into a 1 bit deep pixmap */
    pGCT = GetScratchGC(1, pDraw->pScreen);
    if (!pGCT) {
        (*pDraw->pScreen->DestroyPixmap) (pPixmap);
        return;
    }
    /* First set the whole pixmap to 0 */
    gcv[0].val = 0;
    ChangeGC(NullClient, pGCT, GCBackground, gcv);
    ValidateGC((DrawablePtr) pPixmap, pGCT);
    miClearDrawable((DrawablePtr) pPixmap, pGCT);
    ppt = pptFirst = xallocarray(h, sizeof(DDXPointRec));
    pwidth = pwidthFirst = xallocarray(h, sizeof(int));
    if (!pptFirst || !pwidthFirst) {
        free(pwidthFirst);
        free(pptFirst);
        FreeScratchGC(pGCT);
        return;
    }

    /* we need a temporary region because ChangeClip must be assumed
       to destroy what it's sent.  note that this means we don't
       have to free prgnSrcClip ourselves.
     */
    prgnSrcClip = RegionCreate(NULL, 0);
    RegionCopy(prgnSrcClip, prgnSrc);
    RegionTranslate(prgnSrcClip, srcx, 0);
    (*pGCT->funcs->ChangeClip) (pGCT, CT_REGION, prgnSrcClip, 0);
    ValidateGC((DrawablePtr) pPixmap, pGCT);

    /* Since we know pDraw is always a pixmap, we never need to think
     * about translation here */
    for (i = 0; i < h; i++) {
        ppt->x = 0;
        ppt++->y = i;
        *pwidth++ = w + srcx;
    }

    (*pGCT->ops->SetSpans) ((DrawablePtr) pPixmap, pGCT, (char *) pbits,
                            pptFirst, pwidthFirst, h, TRUE);
    free(pwidthFirst);
    free(pptFirst);

    /* Save current values from the client GC */
    oldfill = pGC->fillStyle;
    pStipple = pGC->stipple;
    if (pStipple)
        pStipple->refcnt++;
    oldOrg = pGC->patOrg;

    /* Set a new stipple in the drawable */
    gcv[0].val = FillStippled;
    gcv[1].ptr = pPixmap;
    gcv[2].val = dstx - srcx;
    gcv[3].val = dsty;

    ChangeGC(NullClient, pGC,
             GCFillStyle | GCStipple | GCTileStipXOrigin | GCTileStipYOrigin,
             gcv);
    ValidateGC(pDraw, pGC);

    /* Fill the drawable with the stipple.  This will draw the
     * foreground color whereever 1 bits are set, leaving everything
     * with 0 bits untouched.  Note that the part outside the clip
     * region is all 0s.  */
    rect.x = dstx;
    rect.y = dsty;
    rect.width = w;
    rect.height = h;
    (*pGC->ops->PolyFillRect) (pDraw, pGC, 1, &rect);

    /* Invert the tiling pixmap. This sets 0s for 1s and 1s for 0s, only
     * within the clipping region, the part outside is still all 0s */
    gcv[0].val = GXinvert;
    ChangeGC(NullClient, pGCT, GCFunction, gcv);
    ValidateGC((DrawablePtr) pPixmap, pGCT);
    (*pGCT->ops->CopyArea) ((DrawablePtr) pPixmap, (DrawablePtr) pPixmap,
                            pGCT, 0, 0, w + srcx, h, 0, 0);

    /* Swap foreground and background colors on the GC for the drawable.
     * Now when we fill the drawable, we will fill in the "Background"
     * values */
    oldfg = pGC->fgPixel;
    gcv[0].val = pGC->bgPixel;
    gcv[1].val = oldfg;
    gcv[2].ptr = pPixmap;
    ChangeGC(NullClient, pGC, GCForeground | GCBackground | GCStipple, gcv);
    ValidateGC(pDraw, pGC);
    /* PolyFillRect might have bashed the rectangle */
    rect.x = dstx;
    rect.y = dsty;
    rect.width = w;
    rect.height = h;
    (*pGC->ops->PolyFillRect) (pDraw, pGC, 1, &rect);

    /* Now put things back */
    if (pStipple)
        pStipple->refcnt--;
    gcv[0].val = oldfg;
    gcv[1].val = pGC->fgPixel;
    gcv[2].val = oldfill;
    gcv[3].ptr = pStipple;
    gcv[4].val = oldOrg.x;
    gcv[5].val = oldOrg.y;
    ChangeGC(NullClient, pGC,
             GCForeground | GCBackground | GCFillStyle | GCStipple |
             GCTileStipXOrigin | GCTileStipYOrigin, gcv);

    ValidateGC(pDraw, pGC);
    /* put what we hope is a smaller clip region back in the scratch gc */
    (*pGCT->funcs->ChangeClip) (pGCT, CT_NONE, NULL, 0);
    FreeScratchGC(pGCT);
    (*pDraw->pScreen->DestroyPixmap) (pPixmap);

}

/* MICOPYPLANE -- public entry for the CopyPlane request.
 * strategy:
 * First build up a bitmap out of the bits requested
 * build a source clip
 * Use the bitmap we've built up as a Stipple for the destination
 */
_X_COLD RegionPtr
miCopyPlane(DrawablePtr pSrcDrawable,
            DrawablePtr pDstDrawable,
            GCPtr pGC,
            int srcx,
            int srcy,
            int width, int height, int dstx, int dsty, unsigned long bitPlane)
{
    MiBits *ptile;
    BoxRec box;
    RegionPtr prgnSrc, prgnExposed;

    /* incorporate the source clip */

    box.x1 = srcx + pSrcDrawable->x;
    box.y1 = srcy + pSrcDrawable->y;
    box.x2 = box.x1 + width;
    box.y2 = box.y1 + height;
    /* clip to visible drawable */
    if (box.x1 < pSrcDrawable->x)
        box.x1 = pSrcDrawable->x;
    if (box.y1 < pSrcDrawable->y)
        box.y1 = pSrcDrawable->y;
    if (box.x2 > pSrcDrawable->x + (int) pSrcDrawable->width)
        box.x2 = pSrcDrawable->x + (int) pSrcDrawable->width;
    if (box.y2 > pSrcDrawable->y + (int) pSrcDrawable->height)
        box.y2 = pSrcDrawable->y + (int) pSrcDrawable->height;
    if (box.x1 > box.x2)
        box.x2 = box.x1;
    if (box.y1 > box.y2)
        box.y2 = box.y1;
    prgnSrc = RegionCreate(&box, 1);

    if (pSrcDrawable->type != DRAWABLE_PIXMAP) {
        /* clip to visible drawable */

        if (pGC->subWindowMode == IncludeInferiors) {
            RegionPtr clipList = NotClippedByChildren((WindowPtr) pSrcDrawable);

            RegionIntersect(prgnSrc, prgnSrc, clipList);
            RegionDestroy(clipList);
        }
        else
            RegionIntersect(prgnSrc, prgnSrc,
                            &((WindowPtr) pSrcDrawable)->clipList);
    }

    box = *RegionExtents(prgnSrc);
    RegionTranslate(prgnSrc, -box.x1, -box.y1);

    if ((box.x2 > box.x1) && (box.y2 > box.y1)) {
        /* minimize the size of the data extracted */
        /* note that we convert the plane mask bitPlane into a plane number */
        box.x1 -= pSrcDrawable->x;
        box.x2 -= pSrcDrawable->x;
        box.y1 -= pSrcDrawable->y;
        box.y2 -= pSrcDrawable->y;
        ptile = miGetPlane(pSrcDrawable, ffs(bitPlane) - 1,
                           box.x1, box.y1,
                           box.x2 - box.x1, box.y2 - box.y1, (MiBits *) NULL);
        if (ptile) {
            miOpqStipDrawable(pDstDrawable, pGC, prgnSrc, ptile, 0,
                              box.x2 - box.x1, box.y2 - box.y1,
                              dstx + box.x1 - srcx, dsty + box.y1 - srcy);
            free(ptile);
        }
    }
    prgnExposed = miHandleExposures(pSrcDrawable, pDstDrawable, pGC, srcx, srcy,
                                    width, height, dstx, dsty);
    RegionDestroy(prgnSrc);
    return prgnExposed;
}

/* MIGETIMAGE -- public entry for the GetImage Request
 * We're getting the image into a memory buffer. While we have to use GetSpans
 * to read a line from the device (since we don't know what that looks like),
 * we can just write into the destination buffer
 *
 * two different strategies are used, depending on whether we're getting the
 * image in Z format or XY format
 * Z format:
 * Line at a time, GetSpans a line into the destination buffer, then if the
 * planemask is not all ones, we do a SetSpans into a temporary buffer (to get
 * bits turned off) and then another GetSpans to get stuff back (because
 * pixmaps are opaque, and we are passed in the memory to write into).  This is
 * pretty ugly and slow but works.  Life is hard.
 * XY format:
 * get the single plane specified in planemask
 */
_X_COLD void
miGetImage(DrawablePtr pDraw, int sx, int sy, int w, int h,
           unsigned int format, unsigned long planeMask, char *pDst)
{
    unsigned char depth;
    int i, linelength, width, srcx, srcy;
    DDXPointRec pt = { 0, 0 };
    PixmapPtr pPixmap = NULL;
    GCPtr pGC = NULL;

    depth = pDraw->depth;
    if (format == ZPixmap) {
        if ((((1LL << depth) - 1) & planeMask) != (1LL << depth) - 1) {
            ChangeGCVal gcv;
            xPoint xpt;

            pGC = GetScratchGC(depth, pDraw->pScreen);
            if (!pGC)
                return;
            pPixmap = (*pDraw->pScreen->CreatePixmap)
                (pDraw->pScreen, w, 1, depth, CREATE_PIXMAP_USAGE_SCRATCH);
            if (!pPixmap) {
                FreeScratchGC(pGC);
                return;
            }
            /*
             * Clear the pixmap before doing anything else
             */
            ValidateGC((DrawablePtr) pPixmap, pGC);
            xpt.x = xpt.y = 0;
            width = w;
            (*pGC->ops->FillSpans) ((DrawablePtr) pPixmap, pGC, 1, &xpt, &width,
                                    TRUE);

            /* alu is already GXCopy */
            gcv.val = (XID) planeMask;
            ChangeGC(NullClient, pGC, GCPlaneMask, &gcv);
            ValidateGC((DrawablePtr) pPixmap, pGC);
        }

        linelength = PixmapBytePad(w, depth);
        srcx = sx + pDraw->x;
        srcy = sy + pDraw->y;
        for (i = 0; i < h; i++) {
            pt.x = srcx;
            pt.y = srcy + i;
            width = w;
            (*pDraw->pScreen->GetSpans) (pDraw, w, &pt, &width, 1, pDst);
            if (pPixmap) {
                pt.x = 0;
                pt.y = 0;
                width = w;
                (*pGC->ops->SetSpans) ((DrawablePtr) pPixmap, pGC, pDst,
                                       &pt, &width, 1, TRUE);
                (*pDraw->pScreen->GetSpans) ((DrawablePtr) pPixmap, w, &pt,
                                             &width, 1, pDst);
            }
            pDst += linelength;
        }
        if (pPixmap) {
            (*pGC->pScreen->DestroyPixmap) (pPixmap);
            FreeScratchGC(pGC);
        }
    }
    else {
        (void) miGetPlane(pDraw, ffs(planeMask) - 1, sx, sy, w, h,
                          (MiBits *) pDst);
    }
}

/* MIPUTIMAGE -- public entry for the PutImage request
 * Here we benefit from knowing the format of the bits pointed to by pImage,
 * even if we don't know how pDraw represents them.
 * Three different strategies are used depending on the format
 * XYBitmap Format:
 * 	we just use the Opaque Stipple helper function to cover the destination
 * 	Note that this covers all the planes of the drawable with the
 *	foreground color (masked with the GC planemask) where there are 1 bits
 *	and the background color (masked with the GC planemask) where there are
 *	0 bits
 * XYPixmap format:
 *	what we're called with is a series of XYBitmaps, but we only want
 *	each XYPixmap to update 1 plane, instead of updating all of them.
 * 	we set the foreground color to be all 1s and the background to all 0s
 *	then for each plane, we set the plane mask to only effect that one
 *	plane and recursive call ourself with the format set to XYBitmap
 *	(This clever idea courtesy of RGD.)
 * ZPixmap format:
 *	This part is simple, just call SetSpans
 */
_X_COLD void
miPutImage(DrawablePtr pDraw, GCPtr pGC, int depth,
           int x, int y, int w, int h, int leftPad, int format, char *pImage)
{
    DDXPointPtr pptFirst, ppt;
    int *pwidthFirst, *pwidth;
    RegionPtr prgnSrc;
    BoxRec box;
    unsigned long oldFg, oldBg;
    ChangeGCVal gcv[3];
    unsigned long oldPlanemask;
    unsigned long i;
    long bytesPer;

    if (!w || !h)
        return;
    switch (format) {
    case XYBitmap:

        box.x1 = 0;
        box.y1 = 0;
        box.x2 = w;
        box.y2 = h;
        prgnSrc = RegionCreate(&box, 1);

        miOpqStipDrawable(pDraw, pGC, prgnSrc, (MiBits *) pImage,
                          leftPad, w, h, x, y);
        RegionDestroy(prgnSrc);
        break;

    case XYPixmap:
        depth = pGC->depth;
        oldPlanemask = pGC->planemask;
        oldFg = pGC->fgPixel;
        oldBg = pGC->bgPixel;
        gcv[0].val = (XID) ~0;
        gcv[1].val = (XID) 0;
        ChangeGC(NullClient, pGC, GCForeground | GCBackground, gcv);
        bytesPer = (long) h *BitmapBytePad(w + leftPad);

        for (i = (unsigned long) 1 << (depth - 1); i != 0; i >>= 1, pImage += bytesPer) {
            if (i & oldPlanemask) {
                gcv[0].val = (XID) i;
                ChangeGC(NullClient, pGC, GCPlaneMask, gcv);
                ValidateGC(pDraw, pGC);
                (*pGC->ops->PutImage) (pDraw, pGC, 1, x, y, w, h, leftPad,
                                       XYBitmap, (char *) pImage);
            }
        }
        gcv[0].val = (XID) oldPlanemask;
        gcv[1].val = (XID) oldFg;
        gcv[2].val = (XID) oldBg;
        ChangeGC(NullClient, pGC, GCPlaneMask | GCForeground | GCBackground,
                 gcv);
        ValidateGC(pDraw, pGC);
        break;

    case ZPixmap:
        ppt = pptFirst = xallocarray(h, sizeof(DDXPointRec));
        pwidth = pwidthFirst = xallocarray(h, sizeof(int));
        if (!pptFirst || !pwidthFirst) {
            free(pwidthFirst);
            free(pptFirst);
            return;
        }
        if (pGC->miTranslate) {
            x += pDraw->x;
            y += pDraw->y;
        }

        for (i = 0; i < h; i++) {
            ppt->x = x;
            ppt->y = y + i;
            ppt++;
            *pwidth++ = w;
        }

        (*pGC->ops->SetSpans) (pDraw, pGC, (char *) pImage, pptFirst,
                               pwidthFirst, h, TRUE);
        free(pwidthFirst);
        free(pptFirst);
        break;
    }
}
@


1.10
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d139 2
a140 2
    pptFirst = ppt = malloc(heightSrc * sizeof(DDXPointRec));
    pwidthFirst = pwidth = malloc(heightSrc * sizeof(unsigned int));
d143 1
a143 1
    ordering = malloc(numRects * sizeof(unsigned int));
d224 1
a224 1
        pbits = malloc(height * PixmapBytePad(width, pSrcDrawable->depth));
d401 2
a402 2
    ppt = pptFirst = malloc(h * sizeof(DDXPointRec));
    pwidth = pwidthFirst = malloc(h * sizeof(int));
d749 2
a750 2
        ppt = pptFirst = malloc(h * sizeof(DDXPointRec));
        pwidth = pwidthFirst = malloc(h * sizeof(int));
@


1.9
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d29 2
a30 2
Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
d32 1
a32 1
both that copyright notice and this permission notice appear in 
d35 1
a35 1
software without specific, written prior permission.  
d69 1
a69 1
/* MICOPYAREA -- public entry for the CopyArea request 
d75 1
a75 1
RegionPtr
d245 1
a245 2
                                    widthSrc, heightSrc, xOut, yOut,
                                    (unsigned long) 0);
d256 1
a256 1
 * A helper used for CopyPlane and XY format GetImage 
d264 1
a264 2
static
MiBits *
d361 1
a361 1
 * Drawing through the clip mask we SetSpans() the bits into a 
d363 1
a363 1
 * PolyFillRect over the whole drawable, 
d370 1
a370 1
static void
d507 2
a508 2
 * strategy: 
 * First build up a bitmap out of the bits requested 
d510 1
a510 1
 * Use the bitmap we've built up as a Stipple for the destination 
d512 1
a512 1
RegionPtr
d580 1
a580 1
                                    width, height, dstx, dsty, bitPlane);
d601 1
a601 1
void
d673 2
a674 2
 * even if we don't know how pDraw represents them.  
 * Three different strategies are used depending on the format 
d677 1
a677 1
 * 	Note that this covers all the planes of the drawable with the 
d682 1
a682 1
 *	what we're called with is a series of XYBitmaps, but we only want 
d691 1
a691 1
void
@


1.8
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d733 1
a733 1
        for (i = 1 << (depth - 1); i != 0; i >>= 1, pImage += bytesPer) {
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d617 1
a617 1
            xPoint pt;
d632 1
a632 1
            pt.x = pt.y = 0;
d634 1
a634 1
            (*pGC->ops->FillSpans) ((DrawablePtr) pPixmap, pGC, 1, &pt, &width,
@


1.6
log
@Update to xserver 1.11.4. tested by krw@@, shadchin@@.
@
text
@a24 1

d65 1
a65 1
#ifndef HAS_FFS
d76 4
a79 9
miCopyArea(DrawablePtr  pSrcDrawable,
           DrawablePtr  pDstDrawable,
           GCPtr        pGC,
           int          xIn,
           int          yIn,
           int          widthSrc,
           int          heightSrc,
           int          xOut,
           int          yOut)
d81 14
a94 13
    DDXPointPtr		ppt, pptFirst;
    unsigned int	*pwidthFirst, *pwidth, *pbits;
    BoxRec 		srcBox, *prect;
    			/* may be a new region, or just a copy */
    RegionPtr 		prgnSrcClip;
    			/* non-0 if we've created a src clip */
    RegionPtr		prgnExposed;
    int 		realSrcClip = 0;
    int			srcx, srcy, dstx, dsty, i, j, y, width, height,
    			xMin, xMax, yMin, yMax;
    unsigned int	*ordering;
    int			numRects;
    BoxPtr		boxes;
d101 2
a102 2
	!((WindowPtr)pDstDrawable)->realized)
	return NULL;
d105 18
a122 19
    if (pSrcDrawable->type == DRAWABLE_PIXMAP)
    {
	BoxRec box;

	box.x1 = pSrcDrawable->x;
	box.y1 = pSrcDrawable->y;
	box.x2 = pSrcDrawable->x + (int) pSrcDrawable->width;
	box.y2 = pSrcDrawable->y + (int) pSrcDrawable->height;

	prgnSrcClip = RegionCreate(&box, 1);
	realSrcClip = 1;
    }
    else
    {
	if (pGC->subWindowMode == IncludeInferiors) {
	    prgnSrcClip = NotClippedByChildren ((WindowPtr) pSrcDrawable);
	    realSrcClip = 1;
	} else
	    prgnSrcClip = &((WindowPtr)pSrcDrawable)->clipList;
d129 2
a130 2
    srcBox.x2 = srcx  + widthSrc;
    srcBox.y2 = srcy  + heightSrc;
d134 3
a136 4
    if (pGC->miTranslate)
    {
	dstx += pDstDrawable->x;
	dsty += pDstDrawable->y;
d144 5
a148 6
    if(!pptFirst || !pwidthFirst || !ordering)
    {
       free(ordering);
       free(pwidthFirst);
       free(pptFirst);
       return NULL;
d154 1
a154 1
    */
d156 4
a159 11
	((pGC->subWindowMode != IncludeInferiors) ||
	 (pSrcDrawable->type == DRAWABLE_PIXMAP) ||
	 (pDstDrawable->type == DRAWABLE_PIXMAP)))
      for (i=0; i < numRects; i++)
        ordering[i] = i;
    else { /* within same drawable, must sequence moves carefully! */
      if (dsty <= srcBox.y1) { /* Scroll up or stationary vertical.
                                  Vertical order OK */
        if (dstx <= srcBox.x1) /* Scroll left or stationary horizontal.
                                  Horizontal order OK as well */
          for (i=0; i < numRects; i++)
d161 42
a202 37
        else { /* scroll right. must reverse horizontal banding of rects. */
          for (i=0, j=1, xMax=0; i < numRects; j=i+1, xMax=i) {
            /* find extent of current horizontal band */
            y=boxes[i].y1; /* band has this y coordinate */
            while ((j < numRects) && (boxes[j].y1 == y))
              j++;
            /* reverse the horizontal band in the output ordering */
            for (j-- ; j >= xMax; j--, i++)
              ordering[i] = j;
          }
        }
      }
      else { /* Scroll down. Must reverse vertical banding. */
        if (dstx < srcBox.x1) { /* Scroll left. Horizontal order OK. */
          for (i=numRects-1, j=i-1, yMin=i, yMax=0;
              i >= 0;
              j=i-1, yMin=i) {
            /* find extent of current horizontal band */
            y=boxes[i].y1; /* band has this y coordinate */
            while ((j >= 0) && (boxes[j].y1 == y))
              j--;
            /* reverse the horizontal band in the output ordering */
            for (j++ ; j <= yMin; j++, i--, yMax++)
              ordering[yMax] = j;
          }
        }
        else /* Scroll right or horizontal stationary.
                Reverse horizontal order as well (if stationary, horizontal
                order can be swapped without penalty and this is faster
                to compute). */
          for (i=0, j=numRects-1; i < numRects; i++, j--)
              ordering[i] = j;
      }
    }
 
     for(i = 0; i < numRects; i++)
     {
d204 7
a210 7
  	xMin = max(prect->x1, srcBox.x1);
  	xMax = min(prect->x2, srcBox.x2);
  	yMin = max(prect->y1, srcBox.y1);
	yMax = min(prect->y2, srcBox.y2);
	/* is there anything visible here? */
	if(xMax <= xMin || yMax <= yMin)
	    continue;
d213 30
a242 32
	pwidth = pwidthFirst;
	y = yMin;
	height = yMax - yMin;
	width = xMax - xMin;

	for(j = 0; j < height; j++)
	{
	    /* We must untranslate before calling GetSpans */
	    ppt->x = xMin;
	    ppt++->y = y++;
	    *pwidth++ = width;
	}
	pbits = malloc(height * PixmapBytePad(width, pSrcDrawable->depth));
	if (pbits)
	{
	    (*pSrcDrawable->pScreen->GetSpans)(pSrcDrawable, width, pptFirst,
			(int *)pwidthFirst, height, (char *)pbits);
	    ppt = pptFirst;
	    pwidth = pwidthFirst;
	    xMin -= (srcx - dstx);
	    y = yMin - (srcy - dsty);
	    for(j = 0; j < height; j++)
	    {
		ppt->x = xMin;
		ppt++->y = y++;
		*pwidth++ = width;
	    }

	    (*pGC->ops->SetSpans)(pDstDrawable, pGC, (char *)pbits, pptFirst,
				  (int *)pwidthFirst, height, TRUE);
	    free(pbits);
	}
d245 5
a249 4
		      widthSrc, heightSrc, xOut, yOut, (unsigned long)0);
    if(realSrcClip)
	RegionDestroy(prgnSrcClip);
		
d266 3
a268 9
MiBits	*
miGetPlane(
    DrawablePtr		pDraw,
    int			planeNum,	/* number of the bitPlane */
    int			sx,
    int			sy,
    int			w,
    int			h,
    MiBits	*result)
d270 5
a274 5
    int			i, j, k, width, bitsPerPixel, widthInBytes;
    DDXPointRec 	pt = {0, 0};
    MiBits	pixel;
    MiBits	bit;
    unsigned char	*pCharsOut = NULL;
d289 2
a290 2
    OUT_TYPE		*pOut;
    int			delta = 0;
d295 1
a295 1
    if(!result)
d298 1
a298 1
	return NULL;
d301 8
a308 10
    if(bitsPerPixel == 1)
    {
	pCharsOut = (unsigned char *) result;
    	width = w;
    }
    else
    {
	delta = (widthInBytes / (BITMAP_SCANLINE_UNIT / 8)) -
	    (w / BITMAP_SCANLINE_UNIT);
	width = 1;
d310 1
a310 1
	planeNum += (32 - bitsPerPixel);
d314 17
a330 21
    for (i = h; --i >= 0; pt.y++)
    {
	pt.x = sx;
	if(bitsPerPixel == 1)
	{
	    (*pDraw->pScreen->GetSpans)(pDraw, width, &pt, &width, 1,
					(char *)pCharsOut);
	    pCharsOut += widthInBytes;
	}
	else
	{
	    k = 0;
	    for(j = w; --j >= 0; pt.x++)
	    {
		/* Fetch the next pixel */
		(*pDraw->pScreen->GetSpans)(pDraw, width, &pt, &width, 1,
					    (char *)&pixel);
		/*
		 * Now get the bit and insert into a bitmap in XY format.
		 */
		bit = (pixel >> planeNum) & 1;
d332 1
a332 1
		/* XXX assuming bit order == byte order */
d334 1
a334 1
		bit <<= k;
d336 1
a336 1
		bit <<= ((BITMAP_SCANLINE_UNIT - 1) - k);
d339 8
a346 8
		/* XXX assuming byte order == LSBFirst */
		if (screenInfo.bitmapBitOrder == LSBFirst)
			bit <<= k;
		else
			bit <<= ((screenInfo.bitmapScanlineUnit - 1) -
				 (k % screenInfo.bitmapScanlineUnit)) +
				((k / screenInfo.bitmapScanlineUnit) *
				 screenInfo.bitmapScanlineUnit);
d348 9
a356 10
		*pOut |= (OUT_TYPE) bit;
		k++;
		if (k == BITMAP_SCANLINE_UNIT)
		{
		    pOut++;
		    k = 0;
		}
	    }
	    pOut += delta;
	}
d374 1
a374 1
		  MiBits *pbits, int srcx, int w, int h, int dstx, int dsty)
d376 1
a376 1
    int		oldfill, i;
d378 5
a382 5
    int		*pwidth, *pwidthFirst;
    ChangeGCVal	gcv[6];
    PixmapPtr	pStipple, pPixmap;
    DDXPointRec	oldOrg;
    GCPtr	pGCT;
d385 1
a385 1
    RegionPtr	prgnSrcClip;
d388 1
a388 2
			   (pDraw->pScreen, w + srcx, h, 1,
			    CREATE_PIXMAP_USAGE_SCRATCH);
d390 1
a390 1
	return;
d394 3
a396 4
    if (!pGCT)
    {
	(*pDraw->pScreen->DestroyPixmap)(pPixmap);
	return;
d401 2
a402 2
    ValidateGC((DrawablePtr)pPixmap, pGCT);
    miClearDrawable((DrawablePtr)pPixmap, pGCT);
d405 5
a409 6
    if(!pptFirst || !pwidthFirst)
    {
	free(pwidthFirst);
	free(pptFirst);
	FreeScratchGC(pGCT);
	return;
d415 1
a415 1
    */
d419 2
a420 2
    (*pGCT->funcs->ChangeClip)(pGCT, CT_REGION, prgnSrcClip, 0);
    ValidateGC((DrawablePtr)pPixmap, pGCT);
d424 4
a427 5
    for(i = 0; i < h; i++)
    {
	ppt->x = 0;
	ppt++->y = i;
	*pwidth++ = w + srcx;
d430 2
a431 2
    (*pGCT->ops->SetSpans)((DrawablePtr)pPixmap, pGCT, (char *)pbits,
			   pptFirst, pwidthFirst, h, TRUE);
a434 1

d438 1
a438 1
    if(pStipple)
d450 1
a450 1
	     gcv);
d461 1
a461 1
    (*pGC->ops->PolyFillRect)(pDraw, pGC, 1, &rect);
d467 3
a469 3
    ValidateGC((DrawablePtr)pPixmap, pGCT);
    (*pGCT->ops->CopyArea)((DrawablePtr)pPixmap, (DrawablePtr)pPixmap,
			   pGCT, 0, 0, w + srcx, h, 0, 0);
d485 1
a485 1
    (*pGC->ops->PolyFillRect)(pDraw, pGC, 1, &rect);
d488 1
a488 1
    if(pStipple)
d497 2
a498 2
        GCForeground | GCBackground | GCFillStyle | GCStipple | 
	GCTileStipXOrigin | GCTileStipYOrigin, gcv);
d502 1
a502 1
    (*pGCT->funcs->ChangeClip)(pGCT, CT_NONE, NULL, 0);
d504 1
a504 1
    (*pDraw->pScreen->DestroyPixmap)(pPixmap);
d515 6
a520 10
miCopyPlane( DrawablePtr pSrcDrawable,
             DrawablePtr pDstDrawable,
             GCPtr pGC,
             int srcx,
             int srcy,
             int width,
             int height,
             int dstx,
             int dsty,
             unsigned long bitPlane)
d522 3
a524 3
    MiBits	*ptile;
    BoxRec 		box;
    RegionPtr		prgnSrc, prgnExposed;
d534 1
a534 1
	box.x1 = pSrcDrawable->x;
d536 1
a536 1
	box.y1 = pSrcDrawable->y;
d538 1
a538 1
	box.x2 = pSrcDrawable->x + (int) pSrcDrawable->width;
d540 1
a540 1
	box.y2 = pSrcDrawable->y + (int) pSrcDrawable->height;
d542 1
a542 1
	box.x2 = box.x1;
d544 1
a544 1
	box.y2 = box.y1;
d548 4
a551 1
	/* clip to visible drawable */
d553 6
a558 8
	if (pGC->subWindowMode == IncludeInferiors)
	{
	    RegionPtr	clipList = NotClippedByChildren ((WindowPtr) pSrcDrawable);
	    RegionIntersect(prgnSrc, prgnSrc, clipList);
	    RegionDestroy(clipList);
	} else
	    RegionIntersect(prgnSrc, prgnSrc,
				       &((WindowPtr)pSrcDrawable)->clipList);
d564 16
a579 19
    if ((box.x2 > box.x1) && (box.y2 > box.y1))
    {
	/* minimize the size of the data extracted */
	/* note that we convert the plane mask bitPlane into a plane number */
	box.x1 -= pSrcDrawable->x;
	box.x2 -= pSrcDrawable->x;
	box.y1 -= pSrcDrawable->y;
	box.y2 -= pSrcDrawable->y;
	ptile = miGetPlane(pSrcDrawable, ffs(bitPlane) - 1,
			   box.x1, box.y1,
			   box.x2 - box.x1, box.y2 - box.y1,
			   (MiBits *) NULL);
	if (ptile)
	{
	    miOpqStipDrawable(pDstDrawable, pGC, prgnSrc, ptile, 0,
			      box.x2 - box.x1, box.y2 - box.y1,
			      dstx + box.x1 - srcx, dsty + box.y1 - srcy);
	    free(ptile);
	}
d582 1
a582 1
		      width, height, dstx, dsty, bitPlane);
d604 2
a605 2
miGetImage( DrawablePtr pDraw, int sx, int sy, int w, int h,
            unsigned int format, unsigned long planeMask, char *pDst)
d607 5
a611 5
    unsigned char	depth;
    int			i, linelength, width, srcx, srcy;
    DDXPointRec		pt = {0, 0};
    PixmapPtr		pPixmap = NULL;
    GCPtr		pGC = NULL;
d614 8
a621 10
    if(format == ZPixmap)
    {
	if ( (((1LL<<depth)-1)&planeMask) != (1LL<<depth)-1 )
	{
	    ChangeGCVal gcv;
	    xPoint pt;

	    pGC = GetScratchGC(depth, pDraw->pScreen);
	    if (!pGC)
		return;
d623 10
a632 12
			       (pDraw->pScreen, w, 1, depth,
			        CREATE_PIXMAP_USAGE_SCRATCH);
	    if (!pPixmap)
	    {
		FreeScratchGC(pGC);
		return;
	    }
 	    /*
 	     * Clear the pixmap before doing anything else
 	     */
 	    ValidateGC((DrawablePtr)pPixmap, pGC);
 	    pt.x = pt.y = 0;
d634 8
a641 8
	    (*pGC->ops->FillSpans)((DrawablePtr)pPixmap, pGC, 1, &pt, &width,
				   TRUE);
 
	    /* alu is already GXCopy */
	    gcv.val = (XID)planeMask;
	    ChangeGC(NullClient, pGC, GCPlaneMask, &gcv);
	    ValidateGC((DrawablePtr)pPixmap, pGC);
	}
d644 26
a669 30
	srcx = sx + pDraw->x;
	srcy = sy + pDraw->y;
	for(i = 0; i < h; i++)
	{
	    pt.x = srcx;
	    pt.y = srcy + i;
	    width = w;
	    (*pDraw->pScreen->GetSpans)(pDraw, w, &pt, &width, 1, pDst);
	    if (pPixmap)
	    {
	       pt.x = 0;
	       pt.y = 0;
	       width = w;
	       (*pGC->ops->SetSpans)((DrawablePtr)pPixmap, pGC, pDst,
				     &pt, &width, 1, TRUE);
	       (*pDraw->pScreen->GetSpans)((DrawablePtr)pPixmap, w, &pt,
					   &width, 1, pDst);
	    }
	    pDst += linelength;
	}
	if (pPixmap)
	{
	    (*pGC->pScreen->DestroyPixmap)(pPixmap);
	    FreeScratchGC(pGC);
	}
    }
    else
    {
	(void) miGetPlane(pDraw, ffs(planeMask) - 1, sx, sy, w, h,
			  (MiBits *)pDst);
d694 2
a695 3
miPutImage( DrawablePtr pDraw, GCPtr pGC, int depth,
            int x, int y, int w, int h,
            int leftPad, int format, char *pImage)
d697 9
a705 9
    DDXPointPtr		pptFirst, ppt;
    int			*pwidthFirst, *pwidth;
    RegionPtr		prgnSrc;
    BoxRec		box;
    unsigned long	oldFg, oldBg;
    ChangeGCVal		gcv[3];
    unsigned long	oldPlanemask;
    unsigned long	i;
    long		bytesPer;
d708 9
a716 10
	return;
    switch(format)
    {
      case XYBitmap:

	box.x1 = 0;
	box.y1 = 0;
	box.x2 = w;
	box.y2 = h;
	prgnSrc = RegionCreate(&box, 1);
d719 30
a748 31
			  leftPad, w, h, x, y);
	RegionDestroy(prgnSrc);
	break;

      case XYPixmap:
	depth = pGC->depth;
	oldPlanemask = pGC->planemask;
	oldFg = pGC->fgPixel;
	oldBg = pGC->bgPixel;
	gcv[0].val = (XID)~0;
	gcv[1].val = (XID)0;
	ChangeGC(NullClient, pGC, GCForeground | GCBackground, gcv);
	bytesPer = (long)h * BitmapBytePad(w + leftPad);

	for (i = 1 << (depth-1); i != 0; i >>= 1, pImage += bytesPer)
	{
	    if (i & oldPlanemask)
	    {
	        gcv[0].val = (XID)i;
	        ChangeGC(NullClient, pGC, GCPlaneMask, gcv);
	        ValidateGC(pDraw, pGC);
	        (*pGC->ops->PutImage)(pDraw, pGC, 1, x, y, w, h, leftPad,
			         XYBitmap, (char *)pImage);
	    }
	}
	gcv[0].val = (XID)oldPlanemask;
	gcv[1].val = (XID)oldFg;
	gcv[2].val = (XID)oldBg;
	ChangeGC(NullClient, pGC, GCPlaneMask | GCForeground | GCBackground, gcv);
	ValidateGC(pDraw, pGC);
	break;
d750 1
a750 1
      case ZPixmap:
d753 22
a774 25
	if(!pptFirst || !pwidthFirst)
        {
	   free(pwidthFirst);
           free(pptFirst);
           return;
        }
	if (pGC->miTranslate)
	{
	    x += pDraw->x;
	    y += pDraw->y;
	}

	for(i = 0; i < h; i++)
	{
	    ppt->x = x;
	    ppt->y = y + i;
	    ppt++;
	    *pwidth++ = w;
	}

	(*pGC->ops->SetSpans)(pDraw, pGC, (char *)pImage, pptFirst,
			      pwidthFirst, h, TRUE);
	free(pwidthFirst);
	free(pptFirst);
	break;
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d651 1
a651 1
	if ( (((1<<depth)-1)&planeMask) != (1<<depth)-1 )
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d119 1
a119 1
	prgnSrcClip = REGION_CREATE(pGC->pScreen, &box, 1);
d146 5
a150 5
    pptFirst = ppt = xalloc(heightSrc * sizeof(DDXPointRec));
    pwidthFirst = pwidth = xalloc(heightSrc * sizeof(unsigned int));
    numRects = REGION_NUM_RECTS(prgnSrcClip);
    boxes = REGION_RECTS(prgnSrcClip);
    ordering = xalloc(numRects * sizeof(unsigned int));
d153 3
a155 6
       if (ordering)
	   xfree(ordering);
       if (pwidthFirst)
           xfree(pwidthFirst);
       if (pptFirst)
           xfree(pptFirst);
d235 1
a235 1
	pbits = xalloc(height * PixmapBytePad(width, pSrcDrawable->depth));
d253 1
a253 1
	    xfree(pbits);
d259 1
a259 1
	REGION_DESTROY(pGC->pScreen, prgnSrcClip);
d261 3
a263 3
    xfree(ordering);
    xfree(pwidthFirst);
    xfree(pptFirst);
d313 1
a313 1
        result = xcalloc(h, widthInBytes);
d382 1
a382 1
    return(result);    
d426 1
a426 1
    dixChangeGC(NullClient, pGCT, GCBackground, NULL, gcv);
d429 2
a430 2
    ppt = pptFirst = xalloc(h * sizeof(DDXPointRec));
    pwidth = pwidthFirst = xalloc(h * sizeof(int));
d433 2
a434 2
	if (pwidthFirst) xfree(pwidthFirst);
	if (pptFirst) xfree(pptFirst);
d443 3
a445 3
    prgnSrcClip = REGION_CREATE(pGCT->pScreen, NULL, 0);
    REGION_COPY(pGCT->pScreen, prgnSrcClip, prgnSrc);
    REGION_TRANSLATE(pGCT->pScreen, prgnSrcClip, srcx, 0);
d460 2
a461 2
    xfree(pwidthFirst);
    xfree(pptFirst);
d477 1
a477 1
    dixChangeGC(NullClient, pGC,
d479 1
a479 1
	     NULL, gcv);
d495 1
a495 1
    dixChangeGC(NullClient, pGCT, GCFunction, NULL, gcv);
d507 1
a507 2
    dixChangeGC(NullClient, pGC, GCForeground | GCBackground | GCStipple,
		NULL, gcv);
d525 1
a525 1
    dixChangeGC(NullClient, pGC, 
d527 1
a527 1
	GCTileStipXOrigin | GCTileStipYOrigin, NULL, gcv);
d578 1
a578 1
    prgnSrc = REGION_CREATE(pGC->pScreen, &box, 1);
d586 2
a587 2
	    REGION_INTERSECT(pGC->pScreen, prgnSrc, prgnSrc, clipList);
	    REGION_DESTROY(pGC->pScreen, clipList);
d589 1
a589 1
	    REGION_INTERSECT(pGC->pScreen, prgnSrc, prgnSrc,
d593 2
a594 2
    box = *REGION_EXTENTS(pGC->pScreen, prgnSrc);
    REGION_TRANSLATE(pGC->pScreen, prgnSrc, -box.x1, -box.y1);
d613 1
a613 1
	    xfree(ptile);
d618 1
a618 1
    REGION_DESTROY(pGC->pScreen, prgnSrc);
a644 1
    XID			gcv[2];
d653 1
d677 2
a678 2
	    gcv[0] = (XID)planeMask;
	    DoChangeGC(pGC, GCPlaneMask, gcv, 0);
d746 1
a746 1
    XID			gcv[3];
d761 1
a761 1
	prgnSrc = REGION_CREATE(pGC->pScreen, &box, 1);
d765 1
a765 1
	REGION_DESTROY(pGC->pScreen, prgnSrc);
d773 3
a775 3
	gcv[0] = (XID)~0;
	gcv[1] = (XID)0;
	DoChangeGC(pGC, GCForeground | GCBackground, gcv, 0);
d782 2
a783 2
	        gcv[0] = (XID)i;
	        DoChangeGC(pGC, GCPlaneMask, gcv, 0);
d789 4
a792 4
	gcv[0] = (XID)oldPlanemask;
	gcv[1] = (XID)oldFg;
	gcv[2] = (XID)oldBg;
	DoChangeGC(pGC, GCPlaneMask | GCForeground | GCBackground, gcv, 0);
d797 2
a798 2
    	ppt = pptFirst = xalloc(h * sizeof(DDXPointRec));
    	pwidth = pwidthFirst = xalloc(h * sizeof(int));
d801 2
a802 4
	   if (pwidthFirst)
               xfree(pwidthFirst);
           if (pptFirst)
               xfree(pptFirst);
d821 2
a822 2
	xfree(pwidthFirst);
	xfree(pptFirst);
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d107 1
a107 1
	return (RegionPtr)NULL;
d146 2
a147 4
    pptFirst = ppt = (DDXPointPtr)
        xalloc(heightSrc * sizeof(DDXPointRec));
    pwidthFirst = pwidth = (unsigned int *)
        xalloc(heightSrc * sizeof(unsigned int));
d150 1
a150 2
    ordering = (unsigned int *)
        xalloc(numRects * sizeof(unsigned int));
d159 1
a159 1
       return (RegionPtr)NULL;
d238 1
a238 2
	pbits = (unsigned int *)xalloc(height * PixmapBytePad(width,
					     pSrcDrawable->depth));
d318 1
a318 1
	return (MiBits *)NULL;
d432 2
a433 2
    ppt = pptFirst = (DDXPointPtr)xalloc(h * sizeof(DDXPointRec));
    pwidth = pwidthFirst = (int *)xalloc(h * sizeof(int));
d642 1
a642 1
_X_EXPORT void
d650 1
a650 1
    PixmapPtr		pPixmap = (PixmapPtr)NULL;
d740 1
a740 1
_X_EXPORT void
d801 2
a802 2
    	ppt = pptFirst = (DDXPointPtr)xalloc(h * sizeof(DDXPointRec));
    	pwidth = pwidthFirst = (int *)xalloc(h * sizeof(int));
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d76 10
a85 9
_X_EXPORT RegionPtr
miCopyArea(pSrcDrawable, pDstDrawable,
	    pGC, xIn, yIn, widthSrc, heightSrc, xOut, yOut)
    DrawablePtr 	pSrcDrawable;
    DrawablePtr 	pDstDrawable;
    GCPtr 		pGC;
    int 		xIn, yIn;
    int 		widthSrc, heightSrc;
    int 		xOut, yOut;
d320 1
a320 1
        result = (MiBits *)xalloc(h * widthInBytes);
a323 1
    bzero((char *)result, h * widthInBytes);
d551 11
a561 10
_X_EXPORT RegionPtr
miCopyPlane(pSrcDrawable, pDstDrawable,
	    pGC, srcx, srcy, width, height, dstx, dsty, bitPlane)
    DrawablePtr 	pSrcDrawable;
    DrawablePtr		pDstDrawable;
    GCPtr		pGC;
    int 		srcx, srcy;
    int 		width, height;
    int 		dstx, dsty;
    unsigned long	bitPlane;
d647 2
a648 6
miGetImage(pDraw, sx, sy, w, h, format, planeMask, pDst)
    DrawablePtr 	pDraw;
    int			sx, sy, w, h;
    unsigned int 	format;
    unsigned long 	planeMask;
    char *              pDst;
d745 3
a747 6
miPutImage(pDraw, pGC, depth, x, y, w, h, leftPad, format, pImage)
    DrawablePtr		pDraw;
    GCPtr		pGC;
    int 		depth, x, y, w, h, leftPad;
    int			format;
    char		*pImage;
@


1.1
log
@Initial revision
@
text
@d79 6
a84 6
    register DrawablePtr 	pSrcDrawable;
    register DrawablePtr 	pDstDrawable;
    GCPtr 			pGC;
    int 			xIn, yIn;
    int 			widthSrc, heightSrc;
    int 			xOut, yOut;
d146 1
a146 1
        ALLOCATE_LOCAL(heightSrc * sizeof(DDXPointRec));
d148 1
a148 1
        ALLOCATE_LOCAL(heightSrc * sizeof(unsigned int));
d152 1
a152 1
        ALLOCATE_LOCAL(numRects * sizeof(unsigned int));
d156 1
a156 1
	   DEALLOCATE_LOCAL(ordering);
d158 1
a158 1
           DEALLOCATE_LOCAL(pwidthFirst);
d160 1
a160 1
           DEALLOCATE_LOCAL(pptFirst);
d267 3
a269 3
    DEALLOCATE_LOCAL(ordering);
    DEALLOCATE_LOCAL(pwidthFirst);
    DEALLOCATE_LOCAL(pptFirst);
d403 3
a405 7
void
miOpqStipDrawable(pDraw, pGC, prgnSrc, pbits, srcx, w, h, dstx, dsty)
    DrawablePtr pDraw;
    GCPtr	pGC;
    RegionPtr	prgnSrc;
    MiBits	*pbits;
    int		srcx, w, h, dstx, dsty;
d419 2
a420 1
			   (pDraw->pScreen, w + srcx, h, 1);
d436 2
a437 2
    ppt = pptFirst = (DDXPointPtr)ALLOCATE_LOCAL(h * sizeof(DDXPointRec));
    pwidth = pwidthFirst = (int *)ALLOCATE_LOCAL(h * sizeof(int));
d440 2
a441 2
	if (pwidthFirst) DEALLOCATE_LOCAL(pwidthFirst);
	if (pptFirst) DEALLOCATE_LOCAL(pptFirst);
d467 2
a468 2
    DEALLOCATE_LOCAL(pwidthFirst);
    DEALLOCATE_LOCAL(pptFirst);
d671 2
a672 1
			       (pDraw->pScreen, w, 1, depth);
d811 2
a812 2
    	ppt = pptFirst = (DDXPointPtr)ALLOCATE_LOCAL(h * sizeof(DDXPointRec));
    	pwidth = pwidthFirst = (int *)ALLOCATE_LOCAL(h * sizeof(int));
d816 1
a816 1
               DEALLOCATE_LOCAL(pwidthFirst);
d818 1
a818 1
               DEALLOCATE_LOCAL(pptFirst);
d837 2
a838 2
	DEALLOCATE_LOCAL(pwidthFirst);
	DEALLOCATE_LOCAL(pptFirst);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d79 6
a84 6
    DrawablePtr 	pSrcDrawable;
    DrawablePtr 	pDstDrawable;
    GCPtr 		pGC;
    int 		xIn, yIn;
    int 		widthSrc, heightSrc;
    int 		xOut, yOut;
d403 7
a409 3
static void
miOpqStipDrawable(DrawablePtr pDraw, GCPtr pGC, RegionPtr prgnSrc,
		  MiBits *pbits, int srcx, int w, int h, int dstx, int dsty)
@

