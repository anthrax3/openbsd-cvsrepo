head	1.15;
access;
symbols
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.2
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.2
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.4
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2016.05.29.12.02.39;	author matthieu;	state Exp;
branches;
next	1.14;
commitid	s0SI41sEunLdyFfd;

1.14
date	2015.09.16.19.10.25;	author matthieu;	state Exp;
branches;
next	1.13;
commitid	Te1daavkBLskZ8gc;

1.13
date	2014.09.27.17.53.04;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	cVXoV5PxI8YrEaVA;

1.12
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches;
next	1.11;

1.11
date	2013.12.08.10.53.02;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2013.06.07.17.28.55;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2012.06.10.13.21.30;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.04.13.19.54.46;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.06.19.44.37;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.12.20.17.47;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.14.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.14.05;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.49;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/***********************************************************

Copyright 1987, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

/*
 * Copyright (c) 2000 by The XFree86 Project, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the copyright holder(s)
 * and author(s) shall not be used in advertising or otherwise to promote
 * the sale, use or other dealings in this Software without prior written
 * authorization from the copyright holder(s) and author(s).
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#include "xf86Extensions.h"
#endif

#ifdef HAVE_DMX_CONFIG_H
#include <dmx-config.h>
#undef XV
#undef DBE
#undef SCREENSAVER
#undef RANDR
#undef DAMAGE
#undef COMPOSITE
#undef MITSHM
#endif

#ifdef HAVE_XNEST_CONFIG_H
#include <xnest-config.h>
#undef COMPOSITE
#undef DPMSExtension
#endif

#ifdef HAVE_KDRIVE_CONFIG_H
#include <kdrive-config.h>
#endif

#ifdef HAVE_XGL_CONFIG_H
#include <xgl-config.h>
#endif

#include "misc.h"
#include "extension.h"
#include "extinit.h"
#ifdef INXQUARTZ
#include "nonsdk_extinit.h"
#endif
#include "micmap.h"
#include "globals.h"

/* The following is only a small first step towards run-time
 * configurable extensions.
 */
typedef struct {
    const char *name;
    Bool *disablePtr;
} ExtensionToggle;

static ExtensionToggle ExtensionToggleList[] = {
    /* sort order is extension name string as shown in xdpyinfo */
    {"Generic Events", &noGEExtension},
#ifdef COMPOSITE
    {"Composite", &noCompositeExtension},
#endif
#ifdef DAMAGE
    {"DAMAGE", &noDamageExtension},
#endif
#ifdef DBE
    {"DOUBLE-BUFFER", &noDbeExtension},
#endif
#ifdef DPMSExtension
    {"DPMS", &noDPMSExtension},
#endif
#ifdef GLXEXT
    {"GLX", &noGlxExtension},
#endif
#ifdef SCREENSAVER
    {"MIT-SCREEN-SAVER", &noScreenSaverExtension},
#endif
#ifdef MITSHM
    {SHMNAME, &noMITShmExtension},
#endif
#ifdef RANDR
    {"RANDR", &noRRExtension},
#endif
    {"RENDER", &noRenderExtension},
#ifdef XCSECURITY
    {"SECURITY", &noSecurityExtension},
#endif
#ifdef RES
    {"X-Resource", &noResExtension},
#endif
#ifdef XF86BIGFONT
    {"XFree86-Bigfont", &noXFree86BigfontExtension},
#endif
#ifdef XORGSERVER
#ifdef XFreeXDGA
    {"XFree86-DGA", &noXFree86DGAExtension},
#endif
#ifdef XF86DRI
    {"XFree86-DRI", &noXFree86DRIExtension},
#endif
#ifdef XF86VIDMODE
    {"XFree86-VidModeExtension", &noXFree86VidModeExtension},
#endif
#endif
    {"XFIXES", &noXFixesExtension},
#ifdef PANORAMIX
    {"XINERAMA", &noPanoramiXExtension},
#endif
    {"XInputExtension", NULL},
    {"XKEYBOARD", NULL},
#ifdef XSELINUX
    {"SELinux", &noSELinuxExtension},
#endif
    {"XTEST", &noTestExtensions},
#ifdef XV
    {"XVideo", &noXvExtension},
#endif
};

Bool
EnableDisableExtension(const char *name, Bool enable)
{
    ExtensionToggle *ext;
    int i;

    for (i = 0; i < ARRAY_SIZE(ExtensionToggleList); i++) {
        ext = &ExtensionToggleList[i];
        if (strcmp(name, ext->name) == 0) {
            if (ext->disablePtr != NULL) {
                *ext->disablePtr = !enable;
                return TRUE;
            }
            else {
                /* Extension is always on, impossible to disable */
                return enable;  /* okay if they wanted to enable,
                                   fail if they tried to disable */
            }
        }
    }

    return FALSE;
}

void
EnableDisableExtensionError(const char *name, Bool enable)
{
    ExtensionToggle *ext;
    int i;
    Bool found = FALSE;

    for (i = 0; i < ARRAY_SIZE(ExtensionToggleList); i++) {
        ext = &ExtensionToggleList[i];
        if ((strcmp(name, ext->name) == 0) && (ext->disablePtr == NULL)) {
            ErrorF("[mi] Extension \"%s\" can not be disabled\n", name);
            found = TRUE;
            break;
        }
    }
    if (found == FALSE)
        ErrorF("[mi] Extension \"%s\" is not recognized\n", name);
    ErrorF("[mi] Only the following extensions can be run-time %s:\n",
           enable ? "enabled" : "disabled");
    for (i = 0; i < ARRAY_SIZE(ExtensionToggleList); i++) {
        ext = &ExtensionToggleList[i];
        if (ext->disablePtr != NULL) {
            ErrorF("[mi]    %s\n", ext->name);
        }
    }
}

/* List of built-in (statically linked) extensions */
static const ExtensionModule staticExtensions[] = {
    {GEExtensionInit, "Generic Event Extension", &noGEExtension},
    {ShapeExtensionInit, "SHAPE", NULL},
#ifdef MITSHM
    {ShmExtensionInit, SHMNAME, &noMITShmExtension},
#endif
    {XInputExtensionInit, "XInputExtension", NULL},
#ifdef XTEST
    {XTestExtensionInit, XTestExtensionName, &noTestExtensions},
#endif
    {BigReqExtensionInit, "BIG-REQUESTS", NULL},
    {SyncExtensionInit, "SYNC", NULL},
    {XkbExtensionInit, XkbName, NULL},
    {XCMiscExtensionInit, "XC-MISC", NULL},
#ifdef XCSECURITY
    {SecurityExtensionInit, SECURITY_EXTENSION_NAME, &noSecurityExtension},
#endif
#ifdef PANORAMIX
    {PanoramiXExtensionInit, PANORAMIX_PROTOCOL_NAME, &noPanoramiXExtension},
#endif
#ifdef INXQUARTZ
    /* PseudoramiXExtensionInit must be done before RRExtensionInit, or
     * XQuartz will render windows offscreen.
     */
    {PseudoramiXExtensionInit, "PseudoramiX", &noPseudoramiXExtension},
#endif
    /* must be before Render to layer DisplayCursor correctly */
    {XFixesExtensionInit, "XFIXES", &noXFixesExtension},
#ifdef XF86BIGFONT
    {XFree86BigfontExtensionInit, XF86BIGFONTNAME, &noXFree86BigfontExtension},
#endif
    {RenderExtensionInit, "RENDER", &noRenderExtension},
#ifdef RANDR
    {RRExtensionInit, "RANDR", &noRRExtension},
#endif
#ifdef COMPOSITE
    {CompositeExtensionInit, "COMPOSITE", &noCompositeExtension},
#endif
#ifdef DAMAGE
    {DamageExtensionInit, "DAMAGE", &noDamageExtension},
#endif
#ifdef SCREENSAVER
    {ScreenSaverExtensionInit, ScreenSaverName, &noScreenSaverExtension},
#endif
#ifdef DBE
    {DbeExtensionInit, "DOUBLE-BUFFER", &noDbeExtension},
#endif
#ifdef XRECORD
    {RecordExtensionInit, "RECORD", &noTestExtensions},
#endif
#ifdef DPMSExtension
    {DPMSExtensionInit, DPMSExtensionName, &noDPMSExtension},
#endif
#ifdef PRESENT
    {present_extension_init, PRESENT_NAME, NULL},
#endif
#ifdef DRI3
    {dri3_extension_init, DRI3_NAME, NULL},
#endif
#ifdef RES
    {ResExtensionInit, XRES_NAME, &noResExtension},
#endif
#ifdef XV
    {XvExtensionInit, XvName, &noXvExtension},
    {XvMCExtensionInit, XvMCName, &noXvExtension},
#endif
#ifdef XSELINUX
    {SELinuxExtensionInit, SELINUX_EXTENSION_NAME, &noSELinuxExtension},
#endif
};

static ExtensionModule *ExtensionModuleList = NULL;
static int numExtensionModules = 0;

static void
AddStaticExtensions(void)
{
    static Bool listInitialised = FALSE;

    if (listInitialised)
        return;
    listInitialised = TRUE;

    /* Add built-in extensions to the list. */
    LoadExtensionList(staticExtensions, ARRAY_SIZE(staticExtensions), TRUE);
}

void
InitExtensions(int argc, char *argv[])
{
    int i;
    ExtensionModule *ext;

    AddStaticExtensions();

    for (i = 0; i < numExtensionModules; i++) {
        ext = &ExtensionModuleList[i];
        if (ext->initFunc != NULL &&
            (ext->disablePtr == NULL || !*ext->disablePtr)) {
            (ext->initFunc) ();
        }
    }
}

static ExtensionModule *
NewExtensionModuleList(int size)
{
    ExtensionModule *save = ExtensionModuleList;
    int n;

    /* Sanity check */
    if (!ExtensionModuleList)
        numExtensionModules = 0;

    n = numExtensionModules + size;
    ExtensionModuleList = reallocarray(ExtensionModuleList, n,
                                       sizeof(ExtensionModule));
    if (ExtensionModuleList == NULL) {
        ExtensionModuleList = save;
        return NULL;
    }
    else {
        numExtensionModules += size;
        return ExtensionModuleList + (numExtensionModules - size);
    }
}

void
LoadExtensionList(const ExtensionModule ext[], int size, Bool builtin)
{
    ExtensionModule *newext;
    int i;

    /* Make sure built-in extensions get added to the list before those
     * in modules. */
    AddStaticExtensions();

    if (!(newext = NewExtensionModuleList(size)))
        return;

    for (i = 0; i < size; i++, newext++) {
        newext->name = ext[i].name;
        newext->initFunc = ext[i].initFunc;
        newext->disablePtr = ext[i].disablePtr;
    }
}
@


1.14
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d111 3
d355 2
a356 2
    ExtensionModuleList = realloc(ExtensionModuleList,
                                  n * sizeof(ExtensionModule));
@


1.13
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d29 2
a30 2
Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
d32 1
a32 1
both that copyright notice and this permission notice appear in 
d35 1
a35 1
software without specific, written prior permission.  
@


1.12
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d237 1
a237 1
static ExtensionModule staticExtensions[] = {
a314 1
    int i;
d321 1
a321 2
    for (i = 0; i < ARRAY_SIZE(staticExtensions); i++)
        LoadExtension(&staticExtensions[i], TRUE);
d332 1
a332 1
    for (i = 0; ExtensionModuleList[i].name != NULL; i++) {
d342 1
a342 1
NewExtensionModule(void)
a346 4
    /* Make sure built-in extensions get added to the list before those
     * in modules. */
    AddStaticExtensions();

d351 1
a351 1
    n = numExtensionModules + 1;
d353 1
a353 1
                                  (n + 1) * sizeof(ExtensionModule));
d359 2
a360 3
        numExtensionModules++;
        ExtensionModuleList[numExtensionModules].name = NULL;
        return ExtensionModuleList + (numExtensionModules - 1);
d365 1
a365 1
LoadExtension(const ExtensionModule * e, Bool builtin)
d368 1
d370 3
a372 2
    if (e == NULL || e->name == NULL)
        return;
d374 1
a374 1
    if (!(newext = NewExtensionModule()))
d377 5
a381 8
    if (builtin)
        ErrorF("Initializing built-in extension %s\n", e->name);
    else
        ErrorF("Loading extension %s\n", e->name);

    newext->name = e->name;
    newext->initFunc = e->initFunc;
    newext->disablePtr = e->disablePtr;
@


1.11
log
@Update to xserver 1.14.4
@
text
@a88 1
#undef XFIXES
a169 1
#ifdef XFIXES
a170 1
#endif
a262 1
#ifdef XFIXES
a264 1
#endif
d289 6
@


1.10
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d160 1
a160 1
#ifdef XorgLoader
@


1.9
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d47 27
d80 1
a86 3
#undef XF86VIDMODE
#undef XFreeXDGA
#undef XF86DRI
a102 4
/* there must be a better way... */
#undef XFreeXDGA
#undef XF86DRI
#undef XF86VIDMODE
a106 3
#undef XFreeXDGA
#undef XF86DRI
#undef XF86VIDMODE
d111 1
a114 174
extern Bool noTestExtensions;

#ifdef COMPOSITE
extern Bool noCompositeExtension;
#endif
#ifdef DBE
extern Bool noDbeExtension;
#endif
#ifdef DPMSExtension
extern Bool noDPMSExtension;
#endif
#ifdef GLXEXT
extern Bool noGlxExtension;
#endif
#ifdef SCREENSAVER
extern Bool noScreenSaverExtension;
#endif
#ifdef MITSHM
extern Bool noMITShmExtension;
#endif
#ifdef RANDR
extern Bool noRRExtension;
#endif
extern Bool noRenderExtension;

#ifdef XCSECURITY
extern Bool noSecurityExtension;
#endif
#ifdef RES
extern Bool noResExtension;
#endif
#ifdef XF86BIGFONT
extern Bool noXFree86BigfontExtension;
#endif
#ifdef XFreeXDGA
extern Bool noXFree86DGAExtension;
#endif
#ifdef XF86DRI
extern Bool noXFree86DRIExtension;
#endif
#ifdef XF86VIDMODE
extern Bool noXFree86VidModeExtension;
#endif
#ifdef XFIXES
extern Bool noXFixesExtension;
#endif
#ifdef PANORAMIX
extern Bool noPanoramiXExtension;
#endif
#ifdef INXQUARTZ
extern Bool noPseudoramiXExtension;
#endif
#ifdef XSELINUX
extern Bool noSELinuxExtension;
#endif
#ifdef XV
extern Bool noXvExtension;
#endif
extern Bool noGEExtension;

#ifndef XFree86LOADER
#define INITARGS void
typedef void (*InitExtension) (INITARGS);
#else                           /* XFree86Loader */
#include "loaderProcs.h"
#endif

#ifdef MITSHM
#include <X11/extensions/shm.h>
#endif
#ifdef XTEST
#include <X11/extensions/xtestconst.h>
#endif
#include <X11/extensions/XKB.h>
#ifdef XCSECURITY
#include "securitysrv.h"
#include <X11/extensions/secur.h>
#endif
#ifdef XSELINUX
#include "xselinux.h"
#endif
#ifdef PANORAMIX
#include <X11/extensions/panoramiXproto.h>
#endif
#ifdef XF86BIGFONT
#include <X11/extensions/xf86bigfproto.h>
#endif
#ifdef RES
#include <X11/extensions/XResproto.h>
#endif

/* FIXME: this whole block of externs should be from the appropriate headers */
#ifdef MITSHM
extern void ShmExtensionInit(INITARGS);
#endif
#ifdef PANORAMIX
extern void PanoramiXExtensionInit(INITARGS);
#endif
#ifdef INXQUARTZ
extern void PseudoramiXExtensionInit(INITARGS);
#endif
extern void XInputExtensionInit(INITARGS);

#ifdef XTEST
extern void XTestExtensionInit(INITARGS);
#endif
extern void BigReqExtensionInit(INITARGS);

#ifdef SCREENSAVER
extern void ScreenSaverExtensionInit(INITARGS);
#endif
#ifdef XV
extern void XvExtensionInit(INITARGS);
extern void XvMCExtensionInit(INITARGS);
#endif
extern void SyncExtensionInit(INITARGS);
extern void XkbExtensionInit(INITARGS);
extern void XCMiscExtensionInit(INITARGS);

#ifdef XRECORD
extern void RecordExtensionInit(INITARGS);
#endif
#ifdef DBE
extern void DbeExtensionInit(INITARGS);
#endif
#ifdef XCSECURITY
extern void SecurityExtensionInit(INITARGS);
#endif
#ifdef XSELINUX
extern void SELinuxExtensionInit(INITARGS);
#endif
#ifdef XF86BIGFONT
extern void XFree86BigfontExtensionInit(INITARGS);
#endif
#ifdef XF86VIDMODE
extern void XFree86VidModeExtensionInit(INITARGS);
#endif
#ifdef XFreeXDGA
extern void XFree86DGAExtensionInit(INITARGS);
#endif
#ifdef GLXEXT
typedef struct __GLXprovider __GLXprovider;
extern __GLXprovider __glXDRISWRastProvider;
extern void GlxPushProvider(__GLXprovider * impl);
extern void GlxExtensionInit(INITARGS);
#endif
#ifdef XF86DRI
extern void XFree86DRIExtensionInit(INITARGS);
#endif
#ifdef DPMSExtension
extern void DPMSExtensionInit(INITARGS);
#endif
extern void RenderExtensionInit(INITARGS);

#ifdef RANDR
extern void RRExtensionInit(INITARGS);
#endif
#ifdef RES
extern void ResExtensionInit(INITARGS);
#endif
#ifdef DMXEXT
extern void DMXExtensionInit(INITARGS);
#endif
#ifdef XFIXES
extern void XFixesExtensionInit(INITARGS);
#endif
#ifdef DAMAGE
extern void DamageExtensionInit(INITARGS);
#endif
#ifdef COMPOSITE
extern void CompositeExtensionInit(INITARGS);
#endif
extern void GEExtensionInit(INITARGS);

d160 1
d170 1
a185 1
    {NULL, NULL}
d191 2
a192 1
    ExtensionToggle *ext = &ExtensionToggleList[0];
d194 2
a195 1
    for (ext = &ExtensionToggleList[0]; ext->name != NULL; ext++) {
d215 2
a216 1
    ExtensionToggle *ext = &ExtensionToggleList[0];
d219 2
a220 1
    for (ext = &ExtensionToggleList[0]; ext->name != NULL; ext++) {
d231 2
a232 1
    for (ext = &ExtensionToggleList[0]; ext->name != NULL; ext++) {
d239 4
a242 17
#ifndef XFree86LOADER

 /*ARGSUSED*/ void
InitExtensions(int argc, char *argv[])
{
    if (!noGEExtension)
        GEExtensionInit();

#ifdef PANORAMIX
    if (!noPanoramiXExtension)
        PanoramiXExtensionInit();
#endif
#ifdef INXQUARTZ
    if (!noPseudoramiXExtension)
        PseudoramiXExtensionInit();
#endif
    ShapeExtensionInit();
d244 1
a244 2
    if (!noMITShmExtension)
        ShmExtensionInit();
d246 1
a246 1
    XInputExtensionInit();
d248 1
a248 24
    if (!noTestExtensions)
        XTestExtensionInit();
#endif
    BigReqExtensionInit();
#if defined(SCREENSAVER)
    if (!noScreenSaverExtension)
        ScreenSaverExtensionInit();
#endif
#ifdef XV
    if (!noXvExtension) {
        XvExtensionInit();
        XvMCExtensionInit();
    }
#endif
    SyncExtensionInit();
    XkbExtensionInit();
    XCMiscExtensionInit();
#ifdef XRECORD
    if (!noTestExtensions)
        RecordExtensionInit();
#endif
#ifdef DBE
    if (!noDbeExtension)
        DbeExtensionInit();
d250 4
d255 1
a255 2
    if (!noSecurityExtension)
        SecurityExtensionInit();
d257 2
a258 24
#ifdef XSELINUX
    if (!noSELinuxExtension)
        SELinuxExtensionInit();
#endif
#if defined(DPMSExtension) && !defined(NO_HW_ONLY_EXTS)
    if (!noDPMSExtension)
        DPMSExtensionInit();
#endif
#ifdef XF86BIGFONT
    if (!noXFree86BigfontExtension)
        XFree86BigfontExtensionInit();
#endif
#if !defined(NO_HW_ONLY_EXTS)
#if defined(XF86VIDMODE)
    if (!noXFree86VidModeExtension)
        XFree86VidModeExtensionInit();
#endif
#if defined(XFreeXDGA)
    if (!noXFree86DGAExtension)
        XFree86DGAExtensionInit();
#endif
#ifdef XF86DRI
    if (!noXFree86DRIExtension)
        XFree86DRIExtensionInit();
d260 5
d268 1
a268 2
    if (!noXFixesExtension)
        XFixesExtensionInit();
d270 4
a273 2
    if (!noRenderExtension)
        RenderExtensionInit();
d275 1
a275 9
    if (!noRRExtension)
        RRExtensionInit();
#endif
#ifdef RES
    if (!noResExtension)
        ResExtensionInit();
#endif
#ifdef DMXEXT
    DMXExtensionInit();         /* server-specific extension, cannot be disabled */
d278 1
a278 2
    if (!noCompositeExtension)
        CompositeExtensionInit();
d281 1
a281 2
    if (!noDamageExtension)
        DamageExtensionInit();
d283 2
a284 6

#ifdef GLXEXT
    if (serverGeneration == 1)
        GlxPushProvider(&__glXDRISWRastProvider);
    if (!noGlxExtension)
        GlxExtensionInit();
d286 2
a287 9
}

#else                           /* XFree86LOADER */
/* List of built-in (statically linked) extensions */
static ExtensionModule staticExtensions[] = {
    {GEExtensionInit, "Generic Event Extension", &noGEExtension, NULL, NULL},
    {ShapeExtensionInit, "SHAPE", NULL, NULL, NULL},
#ifdef MITSHM
    {ShmExtensionInit, SHMNAME, &noMITShmExtension, NULL, NULL},
d289 2
a290 3
    {XInputExtensionInit, "XInputExtension", NULL, NULL, NULL},
#ifdef XTEST
    {XTestExtensionInit, XTestExtensionName, &noTestExtensions, NULL, NULL},
d292 2
a293 7
    {BigReqExtensionInit, "BIG-REQUESTS", NULL, NULL, NULL},
    {SyncExtensionInit, "SYNC", NULL, NULL, NULL},
    {XkbExtensionInit, XkbName, NULL, NULL, NULL},
    {XCMiscExtensionInit, "XC-MISC", NULL, NULL, NULL},
#ifdef XCSECURITY
    {SecurityExtensionInit, SECURITY_EXTENSION_NAME, &noSecurityExtension, NULL,
     NULL},
d295 2
a296 3
#ifdef PANORAMIX
    {PanoramiXExtensionInit, PANORAMIX_PROTOCOL_NAME, &noPanoramiXExtension,
     NULL, NULL},
d298 3
a300 3
#ifdef XFIXES
    /* must be before Render to layer DisplayCursor correctly */
    {XFixesExtensionInit, "XFIXES", &noXFixesExtension, NULL, NULL},
d302 2
a303 7
#ifdef XF86BIGFONT
    {XFree86BigfontExtensionInit, XF86BIGFONTNAME, &noXFree86BigfontExtension,
     NULL, NULL},
#endif
    {RenderExtensionInit, "RENDER", &noRenderExtension, NULL, NULL},
#ifdef RANDR
    {RRExtensionInit, "RANDR", &noRRExtension, NULL, NULL},
a304 7
#ifdef COMPOSITE
    {CompositeExtensionInit, "COMPOSITE", &noCompositeExtension, NULL},
#endif
#ifdef DAMAGE
    {DamageExtensionInit, "DAMAGE", &noDamageExtension, NULL},
#endif
    {NULL, NULL, NULL, NULL, NULL}
d307 19
a325 1
 /*ARGSUSED*/ void
a329 1
    static Bool listInitialised = FALSE;
d331 1
a331 9
    if (!listInitialised) {
        /* Add built-in extensions to the list. */
        for (i = 0; staticExtensions[i].name; i++)
            LoadExtension(&staticExtensions[i], TRUE);

        /* Sort the extensions according the init dependencies. */
        LoaderSortExtensions();
        listInitialised = TRUE;
    }
d342 48
a389 1
#endif                          /* XFree86LOADER */
@


1.8
log
@Update to xserver 1.11.2
@
text
@a24 1

a95 1

d120 1
d158 2
a159 2
typedef void (*InitExtension)(INITARGS);
#else /* XFree86Loader */
d198 1
d203 1
d205 1
a205 1
extern void ScreenSaverExtensionInit (INITARGS);
d214 1
d239 1
a239 1
extern void GlxPushProvider(__GLXprovider *impl);
d249 1
d274 1
a274 1
    char *name;
d278 1
a278 2
static ExtensionToggle ExtensionToggleList[] =
{
d280 1
a280 1
    { "Generic Events", &noGEExtension },
d282 1
a282 1
    { "Composite", &noCompositeExtension },
d285 1
a285 1
    { "DAMAGE", &noDamageExtension },
d288 1
a288 1
    { "DOUBLE-BUFFER", &noDbeExtension },
d291 1
a291 1
    { "DPMS", &noDPMSExtension },
d294 1
a294 1
    { "GLX", &noGlxExtension },
d297 1
a297 1
    { "MIT-SCREEN-SAVER", &noScreenSaverExtension },
d300 1
a300 1
    { SHMNAME, &noMITShmExtension },
d303 1
a303 1
    { "RANDR", &noRRExtension },
d305 1
a305 1
    { "RENDER", &noRenderExtension },
d307 1
a307 1
    { "SECURITY", &noSecurityExtension },
d310 1
a310 1
    { "X-Resource", &noResExtension },
d313 1
a313 1
    { "XFree86-Bigfont", &noXFree86BigfontExtension },
d316 1
a316 1
    { "XFree86-DGA", &noXFree86DGAExtension },
d319 1
a319 1
    { "XFree86-DRI", &noXFree86DRIExtension },
d322 1
a322 1
    { "XFree86-VidModeExtension", &noXFree86VidModeExtension },
d325 1
a325 1
    { "XFIXES", &noXFixesExtension },
d328 1
a328 1
    { "XINERAMA", &noPanoramiXExtension },
d330 2
a331 2
    { "XInputExtension", NULL },
    { "XKEYBOARD", NULL },
d333 1
a333 1
    { "SELinux", &noSELinuxExtension },
d335 1
a335 1
    { "XTEST", &noTestExtensions },
d337 1
a337 1
    { "XVideo", &noXvExtension },
d339 1
a339 1
    { NULL, NULL }
d342 2
a343 1
Bool EnableDisableExtension(char *name, Bool enable)
d348 11
a358 10
	if (strcmp(name, ext->name) == 0) {
	    if (ext->disablePtr != NULL) {
		*ext->disablePtr = !enable;
		return TRUE;
	    } else {
		/* Extension is always on, impossible to disable */
		return enable; /* okay if they wanted to enable,
				  fail if they tried to disable */
	    }
	}
d364 2
a365 1
void EnableDisableExtensionError(char *name, Bool enable)
d371 5
a375 5
	if ((strcmp(name, ext->name) == 0) && (ext->disablePtr == NULL)) {
	    ErrorF("[mi] Extension \"%s\" can not be disabled\n", name);
	    found = TRUE;
	    break;
	}
d378 1
a378 1
	ErrorF("[mi] Extension \"%s\" is not recognized\n", name);
d380 1
a380 1
	   enable ? "enabled" : "disabled");
d382 3
a384 3
	if (ext->disablePtr != NULL) {
	    ErrorF("[mi]    %s\n", ext->name);
	}
d390 1
a390 2
/*ARGSUSED*/
void
d393 2
a394 1
    if (!noGEExtension) GEExtensionInit();
d397 2
a398 1
  if (!noPanoramiXExtension) PanoramiXExtensionInit();
d401 2
a402 1
    if(!noPseudoramiXExtension) PseudoramiXExtensionInit();
d406 2
a407 1
    if (!noMITShmExtension) ShmExtensionInit();
d411 2
a412 1
    if (!noTestExtensions) XTestExtensionInit();
d416 2
a417 1
    if (!noScreenSaverExtension) ScreenSaverExtensionInit ();
d421 2
a422 2
      XvExtensionInit();
      XvMCExtensionInit();
d429 2
a430 1
    if (!noTestExtensions) RecordExtensionInit(); 
d433 2
a434 1
    if (!noDbeExtension) DbeExtensionInit();
d437 2
a438 1
    if (!noSecurityExtension) SecurityExtensionInit();
d441 2
a442 1
    if (!noSELinuxExtension) SELinuxExtensionInit();
d445 2
a446 1
    if (!noDPMSExtension) DPMSExtensionInit();
d449 2
a450 1
    if (!noXFree86BigfontExtension) XFree86BigfontExtensionInit();
d454 2
a455 1
    if (!noXFree86VidModeExtension) XFree86VidModeExtensionInit();
d458 2
a459 1
    if (!noXFree86DGAExtension) XFree86DGAExtensionInit();
d462 2
a463 1
    if (!noXFree86DRIExtension) XFree86DRIExtensionInit();
d468 2
a469 1
    if (!noXFixesExtension) XFixesExtensionInit();
d471 2
a472 1
    if (!noRenderExtension) RenderExtensionInit();
d474 2
a475 1
    if (!noRRExtension) RRExtensionInit();
d478 2
a479 1
    if (!noResExtension) ResExtensionInit();
d482 1
a482 1
    DMXExtensionInit(); /* server-specific extension, cannot be disabled */
d485 2
a486 1
    if (!noCompositeExtension) CompositeExtensionInit();
d489 2
a490 1
    if (!noDamageExtension) DamageExtensionInit();
d495 3
a497 2
	GlxPushProvider(&__glXDRISWRastProvider);
    if (!noGlxExtension) GlxExtensionInit();
d501 1
a501 1
#else /* XFree86LOADER */
d504 2
a505 2
    { GEExtensionInit, "Generic Event Extension", &noGEExtension, NULL, NULL},
    { ShapeExtensionInit, "SHAPE", NULL, NULL, NULL },
d507 1
a507 1
    { ShmExtensionInit, SHMNAME, &noMITShmExtension, NULL, NULL },
d509 1
a509 1
    { XInputExtensionInit, "XInputExtension", NULL, NULL, NULL },
d511 1
a511 1
    { XTestExtensionInit, XTestExtensionName, &noTestExtensions, NULL, NULL },
d513 4
a516 4
    { BigReqExtensionInit, "BIG-REQUESTS", NULL, NULL, NULL },
    { SyncExtensionInit, "SYNC", NULL, NULL, NULL },
    { XkbExtensionInit, XkbName, NULL, NULL, NULL },
    { XCMiscExtensionInit, "XC-MISC", NULL, NULL, NULL },
d518 2
a519 1
    { SecurityExtensionInit, SECURITY_EXTENSION_NAME, &noSecurityExtension, NULL, NULL },
d522 2
a523 1
    { PanoramiXExtensionInit, PANORAMIX_PROTOCOL_NAME, &noPanoramiXExtension, NULL, NULL },
d527 1
a527 1
    { XFixesExtensionInit, "XFIXES", &noXFixesExtension, NULL, NULL },
d530 2
a531 1
    { XFree86BigfontExtensionInit, XF86BIGFONTNAME, &noXFree86BigfontExtension, NULL, NULL },
d533 1
a533 1
    { RenderExtensionInit, "RENDER", &noRenderExtension, NULL, NULL },
d535 1
a535 1
    { RRExtensionInit, "RANDR", &noRRExtension, NULL, NULL },
d538 1
a538 1
    { CompositeExtensionInit, "COMPOSITE", &noCompositeExtension, NULL },
d541 1
a541 1
    { DamageExtensionInit, "DAMAGE", &noDamageExtension, NULL },
d543 1
a543 1
    { NULL, NULL, NULL, NULL, NULL }
d545 2
a546 3
    
/*ARGSUSED*/
void
d554 7
a560 7
	/* Add built-in extensions to the list. */
	for (i = 0; staticExtensions[i].name; i++)
	    LoadExtension(&staticExtensions[i], TRUE);

	/* Sort the extensions according the init dependencies. */
	LoaderSortExtensions();
	listInitialised = TRUE;
d564 5
a568 5
	ext = &ExtensionModuleList[i];
	if (ext->initFunc != NULL && 
	    (ext->disablePtr == NULL || !*ext->disablePtr)) {
	    (ext->initFunc)();
	}
d572 1
a572 1
#endif /* XFree86LOADER */
@


1.7
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a391 1
# if !defined(NO_PANORAMIX)
a392 1
# endif
@


1.6
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a57 1
#undef MULTIBUFFER
a117 3
#ifdef MULTIBUFFER
extern Bool noMultibufferExtension;
#endif
a120 1
#ifdef RENDER
a121 1
#endif
a191 3
#ifdef MULTIBUFFER
extern void MultibufferExtensionInit(INITARGS);
#endif
a245 1
#ifdef RENDER
a246 1
#endif
a299 3
#ifdef MULTIBUFFER
    { "Multi-Buffering", &noMultibufferExtension },
#endif
a302 1
#ifdef RENDER
a303 1
#endif
a402 3
#ifdef MULTIBUFFER
    if (!noMultibufferExtension) MultibufferExtensionInit();
#endif
a452 1
#ifdef RENDER
a453 1
#endif
a505 1
#ifdef RENDER
a506 1
#endif
d540 1
a540 2
	    (ext->disablePtr == NULL || 
	     (ext->disablePtr != NULL && !*ext->disablePtr))) {
@


1.5
log
@Add a configure test for newer proto headers and use it to enable
building xserver 1.6 with those headers. ok oga@@.
@
text
@d58 12
a148 4
#ifdef XKB
/* |noXkbExtension| is defined in xc/programs/Xserver/xkb/xkbInit.c */
extern Bool noXkbExtension;
#endif
d171 1
a171 6
#ifdef HAVE_X11_EXTENSIONS_SHMPROTO_H
#include <X11/extensions/shmproto.h>
#else
#define _XSHM_SERVER_
#include <X11/extensions/shmstr.h>
#endif
d174 1
a174 6
#ifdef HAVE_X11_EXTENSIONS_XTESTPROTO_H
#include <X11/extensions/xtestproto.h>
#else
#define _XTEST_SERVER_
#include <X11/extensions/XTest.h>
#endif
a175 1
#ifdef XKB
a176 1
#endif
d179 1
a179 1
#include <X11/extensions/securstr.h>
d188 1
a188 1
#include <X11/extensions/xf86bigfstr.h>
a219 1
#ifdef XKB
a220 1
#endif
d345 1
a345 3
#ifdef XKB
    { "XKEYBOARD", &noXkbExtension },
#endif
d362 8
a369 2
	    *ext->disablePtr = !enable;
	    return TRUE;
d379 1
d381 9
a389 1
    ErrorF("[mi] Extension \"%s\" is not recognized\n", name);
d392 5
a396 2
    for (ext = &ExtensionToggleList[0]; ext->name != NULL; ext++)
	ErrorF("[mi]    %s\n", ext->name);
d437 1
a437 3
#if defined(XKB)
    if (!noXkbExtension) XkbExtensionInit();
#endif
d512 1
a512 3
#ifdef XKB
    { XkbExtensionInit, XkbName, &noXkbExtension, NULL, NULL },
#endif
@


1.4
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d163 3
d169 1
d171 3
d176 1
@


1.3
log
@Update to xserver 1.5.3 + latests commits on server-1.5-branch.
tested by stsp@@, david@@, form@@, ckuethe@@, oga@@. thanks.
@
text
@d62 1
a68 1
#undef XF86MISC
a75 1
#undef XF86MISC
a85 31
#if defined(QNX4) /* sleaze for Watcom on QNX4 ... */
#undef GLXEXT
#endif

/* Make sure Xprt only announces extensions it supports */
#ifdef PRINT_ONLY_SERVER
#undef MITSHM /* this is incompatible to the vector-based Xprint DDX */
#undef XKB
#undef PANORAMIX
#undef RES
#undef XINPUT
#undef XV
#undef SCREENSAVER
#undef XIDLE
#undef XRECORD
#undef XF86VIDMODE
#undef XF86MISC
#undef XFreeXDGA
#undef XF86DRI
#undef DPMSExtension
#undef FONTCACHE
#undef COMPOSITE
#undef DAMAGE
#undef XFIXES
#undef XEVIE
#else
#ifndef LOADABLEPRINTDDX
#undef XPRINT
#endif /* LOADABLEPRINTDDX */
#endif /* PRINT_ONLY_SERVER */

a88 3
#ifdef BIGREQS
extern Bool noBigReqExtension;
#endif
a97 6
#ifdef EVI
extern Bool noEVIExtension;
#endif
#ifdef FONTCACHE
extern Bool noFontCacheExtension;
#endif
a106 3
#ifdef MITMISC
extern Bool noMITMiscExtension;
#endif
a115 3
#ifdef SHAPE
extern Bool noShapeExtension;
#endif
a118 6
#ifdef XSYNC
extern Bool noSyncExtension;
#endif
#ifdef TOGCUP
extern Bool noXcupExtension;
#endif
a121 9
#ifdef XAPPGROUP
extern Bool noXagExtension;
#endif
#ifdef XCMISC
extern Bool noXCMiscExtension;
#endif
#ifdef XEVIE
extern Bool noXevieExtension;
#endif
a130 3
#ifdef XF86MISC
extern Bool noXFree86MiscExtension;
#endif
a146 6
#ifdef XINPUT
extern Bool noXInputExtension;
#endif
#ifdef XIDLE
extern Bool noXIdleExtension;
#endif
d153 1
a172 7
#ifdef XPRINT
#include <X11/extensions/Print.h>
#endif
#ifdef XAPPGROUP
#define _XAG_SERVER_
#include <X11/extensions/Xagstr.h>
#endif
a190 3
#ifdef EVI
extern void EVIExtensionInit(INITARGS);
#endif
a202 1
#ifdef XINPUT
a203 1
#endif
a206 1
#ifdef BIGREQS
a207 10
#endif
#ifdef MITMISC
extern void MITMiscExtensionInit(INITARGS);
#endif
#ifdef XIDLE
extern void XIdleExtensionInit(INITARGS);
#endif
#ifdef XTRAP
extern void DEC_XTRAPInit(INITARGS);
#endif
a214 1
#ifdef XSYNC
a215 1
#endif
a218 1
#ifdef XCMISC
a219 1
#endif
a225 3
#ifdef XAPPGROUP
extern void XagExtensionInit(INITARGS);
#endif
a231 3
#ifdef XPRINT
extern void XpExtensionInit(INITARGS);
#endif
a237 3
#ifdef XF86MISC
extern void XFree86MiscExtensionInit(INITARGS);
#endif
a249 3
#ifdef TOGCUP
extern void XcupExtensionInit(INITARGS);
#endif
a252 3
#ifdef FONTCACHE
extern void FontCacheExtensionInit(INITARGS);
#endif
a264 3
#ifdef XEVIE
extern void XevieExtensionInit(INITARGS);
#endif
d274 1
d287 1
a287 3
#ifdef BIGREQS
    { "BIG-REQUESTS", &noBigReqExtension },
#endif
a299 6
#ifdef EVI
    { "Extended-Visual-Information", &noEVIExtension },
#endif
#ifdef FONTCACHE
    { "FontCache", &noFontCacheExtension },
#endif
a308 3
#ifdef MITMISC
    { "MIT-SUNDRY-NONSTANDARD", &noMITMiscExtension },
#endif
a317 3
#ifdef SHAPE
    { "SHAPE", &noShapeExtension },
#endif
a320 6
#ifdef XSYNC
    { "SYNC", &noSyncExtension },
#endif
#ifdef TOGCUP
    { "TOG-CUP", &noXcupExtension },
#endif
a323 9
#ifdef XAPPGROUP
    { "XC-APPGROUP", &noXagExtension },
#endif
#ifdef XCMISC
    { "XC-MISC", &noXCMiscExtension },
#endif
#ifdef XEVIE
    { "XEVIE", &noXevieExtension },
#endif
a332 3
#ifdef XF86MISC
    { "XFree86-Misc", &noXFree86MiscExtension },
#endif
d342 1
a342 3
#ifdef XINPUT
    { "XInputExtension", &noXInputExtension },
#endif
d374 2
a375 2
    ErrorF("Extension \"%s\" is not recognized\n", name);
    ErrorF("Only the following extensions can be run-time %s:\n",
d378 1
a378 1
	ErrorF("    %s\n", ext->name);
d385 1
a385 3
InitExtensions(argc, argv)
    int		argc;
    char	*argv[];
d387 2
d390 1
a390 1
# if !defined(PRINT_ONLY_SERVER) && !defined(NO_PANORAMIX)
d397 1
a397 3
#ifdef SHAPE
    if (!noShapeExtension) ShapeExtensionInit();
#endif
a400 3
#ifdef EVI
    if (!noEVIExtension) EVIExtensionInit();
#endif
d404 1
a404 3
#if defined(XINPUT)
    if (!noXInputExtension) XInputExtensionInit();
#endif
d408 2
a409 13
#ifdef BIGREQS
    if (!noBigReqExtension) BigReqExtensionInit();
#endif
#ifdef MITMISC
    if (!noMITMiscExtension) MITMiscExtensionInit();
#endif
#ifdef XIDLE
    if (!noXIdleExtension) XIdleExtensionInit();
#endif
#ifdef XTRAP
    if (!noTestExtensions) DEC_XTRAPInit();
#endif
#if defined(SCREENSAVER) && !defined(PRINT_ONLY_SERVER)
d418 2
a419 4
#ifdef XSYNC
    if (!noSyncExtension) SyncExtensionInit();
#endif
#if defined(XKB) && !defined(PRINT_ONLY_SERVER)
d422 1
a422 3
#ifdef XCMISC
    if (!noXCMiscExtension) XCMiscExtensionInit();
#endif
a428 3
#ifdef XAPPGROUP
    if (!noXagExtension) XagExtensionInit();
#endif
a434 6
#ifdef XPRINT
    XpExtensionInit(); /* server-specific extension, cannot be disabled */
#endif
#ifdef TOGCUP
    if (!noXcupExtension) XcupExtensionInit();
#endif
a437 3
#ifdef FONTCACHE
    if (!noFontCacheExtension) FontCacheExtensionInit();
#endif
d441 1
a441 1
#if !defined(PRINT_ONLY_SERVER) && !defined(NO_HW_ONLY_EXTS)
a444 3
#if defined(XF86MISC)
    if (!noXFree86MiscExtension) XFree86MiscExtensionInit();
#endif
a467 3
#ifdef XEVIE
    if (!noXevieExtension) XevieExtensionInit();
#endif
a481 6
void
InitVisualWrap()
{
    miResetInitVisuals();
}

d485 2
d490 1
a490 3
#ifdef XINPUT
    { XInputExtensionInit, "XInputExtension", &noXInputExtension, NULL, NULL },
#endif
d494 2
a495 3
#ifdef XIDLE
    { XIdleExtensionInit, "XIDLE", &noXIdleExtension, NULL, NULL },
#endif
d499 1
a499 3
#ifdef XAPPGROUP
    { XagExtensionInit, XAGNAME, &noXagExtension, NULL, NULL },
#endif
a502 3
#ifdef XPRINT
    { XpExtensionInit, XP_PRINTNAME, NULL, NULL, NULL },
#endif
a524 3
#ifdef XEVIE
    { XevieExtensionInit, "XEVIE", &noXevieExtension, NULL },
#endif 
d530 1
a530 3
InitExtensions(argc, argv)
    int		argc;
    char	*argv[];
a553 19
}

static void (*__miHookInitVisualsFunction)(miInitVisualsProcPtr *);

void
InitVisualWrap()
{
    miResetInitVisuals();
    if (__miHookInitVisualsFunction)
	(*__miHookInitVisualsFunction)(&miInitVisualsProc);
}

_X_EXPORT void
miHookInitVisuals(void (**old)(miInitVisualsProcPtr *),
		  void (*new)(miInitVisualsProcPtr *))
{
    if (old)
	*old = __miHookInitVisualsFunction;
    __miHookInitVisualsFunction = new;
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d664 2
a665 1
    GlxPushProvider(&__glXDRISWRastProvider);
@


1.1
log
@Initial revision
@
text
@d209 3
d218 3
a249 3
#ifdef XACE
#include "xace.h"
#endif
d254 3
d280 3
a325 3
#ifdef XACE
extern void XaceExtensionInit(INITARGS);
#endif
a326 1
extern void SecurityExtensionSetup(INITARGS);
d329 3
d349 1
a349 1
extern __GLXprovider __glXMesaProvider;
a350 1
#ifndef __DARWIN__
a351 5
extern void GlxWrapInitVisuals(miInitVisualsProcPtr *);
#else
extern void DarwinGlxExtensionInit(INITARGS);
extern void DarwinGlxWrapInitVisuals(miInitVisualsProcPtr *);
#endif
d494 3
a536 3
#ifdef XCSECURITY
    SecurityExtensionSetup();
#endif
d542 3
d557 1
a557 1
#if defined(XINPUT) && !defined(NO_HW_ONLY_EXTS)
d587 1
a587 1
#if defined(XKB) && !defined(PRINT_ONLY_SERVER) && !defined(NO_HW_ONLY_EXTS)
a601 3
#ifdef XACE
    XaceExtensionInit();
#endif
d605 3
a636 9
#ifdef GLXEXT

    GlxPushProvider(&__glXMesaProvider);
#ifndef __DARWIN__
    if (!noGlxExtension) GlxExtensionInit();
#else
    if (!noGlxExtension) DarwinGlxExtensionInit();
#endif
#endif
d662 5
a672 7
#ifdef GLXEXT
#ifndef __DARWIN__
    GlxWrapInitVisuals(&miInitVisualsProc);
#else
    DarwinGlxWrapInitVisuals(&miInitVisualsProc);
#endif
#endif
a695 3
#ifdef XACE
    { XaceExtensionInit, XACE_EXTENSION_NAME, NULL, NULL, NULL },
#endif
d697 1
a697 1
    { SecurityExtensionInit, SECURITY_EXTENSION_NAME, &noSecurityExtension, SecurityExtensionSetup, NULL },
a747 10
    } else {
	/* Call the setup functions on subsequent server resets as well */
	for (i = 0; ExtensionModuleList[i].name != NULL; i++) {
	    ext = &ExtensionModuleList[i];
	    if (ext->setupFunc != NULL &&
		(ext->disablePtr == NULL ||
		 (ext->disablePtr != NULL && !*ext->disablePtr))) {
		(ext->setupFunc)();
	    }
	}
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@a340 6
#ifdef INXDARWINAPP
extern __GLXprovider* __DarwinglXMesaProvider;
extern void DarwinGlxPushProvider(__GLXprovider *impl);
extern void DarwinGlxExtensionInit(INITARGS);
extern void DarwinGlxWrapInitVisuals(miInitVisualsProcPtr *);
#else
d343 1
d346 5
a350 2
#endif // INXDARWINAPP
#endif // GLXEXT
d552 1
a552 1
#if defined(XINPUT)
d582 1
a582 1
#if defined(XKB) && !defined(PRINT_ONLY_SERVER)
d632 1
a633 5
#ifdef GLXEXT
#ifdef INXDARWINAPP
    DarwinGlxPushProvider(__DarwinglXMesaProvider);
    if (!noGlxExtension) DarwinGlxExtensionInit();
#else
d635 1
d637 4
a640 2
#endif // INXDARWINAPP
#endif // GLXEXT
@

