head	1.4;
access;
symbols
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2010.12.05.15.36.10;	author matthieu;	state dead;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.37;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.14.13;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.14.13;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@/*
 * Copyright 1997 through 2004 by Marc Aurele La France (TSI @@ UQV), tsi@@xfree86.org
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that copyright
 * notice and this permission notice appear in supporting documentation, and
 * that the name of Marc Aurele La France not be used in advertising or
 * publicity pertaining to distribution of the software without specific,
 * written prior permission.  Marc Aurele La France makes no representations
 * about the suitability of this software for any purpose.  It is provided
 * "as-is" without express or implied warranty.
 *
 * MARC AURELE LA FRANCE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO
 * EVENT SHALL MARC AURELE LA FRANCE BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */


#ifndef __MIBANK_H__
#define __MIBANK_H__ 1

#include "scrnintstr.h"

/*
 * Banking external interface.
 */

/*
 * This is the banking function type.  The return value is normally zero.
 * Non-zero returns can be used to implement the likes of scanline interleave,
 * etc.
 */
typedef int miBankProc(
    ScreenPtr /*pScreen*/,
    unsigned int /*iBank*/
);

typedef miBankProc *miBankProcPtr;

typedef struct _miBankInfo
{
    /*
     * Banking refers to the use of one or more apertures (in the server's
     * address space) to access various parts of a potentially larger hardware
     * frame buffer.
     *
     * Three different banking schemes are supported:
     *
     * Single banking is indicated when pBankA and pBankB are equal and all
     * three miBankProcPtr's point to the same function.  Here, both reads and
     * writes through the aperture access the same hardware location.
     *
     * Shared banking is indicated when pBankA and pBankB are equal but the
     * source and destination functions differ.  Here reads through the
     * aperture do not necessarily access the same hardware location as writes.
     *
     * Double banking is indicated when pBankA and pBankB differ.  Here two
     * independent apertures are used to provide read/write access to
     * potentially different hardware locations.
     *
     * Any other combination will result in no banking.
     */
    miBankProcPtr SetSourceBank;                /* Set pBankA bank number */
    miBankProcPtr SetDestinationBank;           /* Set pBankB bank number */
    miBankProcPtr SetSourceAndDestinationBanks; /* Set both bank numbers */

    pointer pBankA;     /* First aperture location */
    pointer pBankB;     /* First or second aperture location */

    /*
     * BankSize is in units of sizeof(char) and is the size of each bank.
     */
    unsigned long BankSize;

    /*
     * nBankDepth is the colour depth associated with the maximum number of a
     * pixel's bits that are simultaneously accessible through the frame buffer
     * aperture.
     */
    unsigned int nBankDepth;
} miBankInfoRec, *miBankInfoPtr;

extern _X_EXPORT Bool
miInitializeBanking(
    ScreenPtr /*pScreen*/,
    unsigned int /*xsize*/,
    unsigned int /*ysize*/,
    unsigned int /*width*/,
    miBankInfoPtr /*pBankInfo*/
);

/*
 * This function determines the minimum screen width, given a initial estimate
 * and various screen attributes.  DDX needs to determine this width before
 * initializing the screen.
 */
extern _X_EXPORT int
miScanLineWidth(
    unsigned int /*xsize*/,
    unsigned int /*ysize*/,
    unsigned int /*width*/,
    unsigned long /*BankSize*/,
    PixmapFormatRec * /*pBankFormat*/,
    unsigned int /*nWidthUnit*/
);

#endif /* __MIBANK_H__ */
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d88 1
a88 1
Bool
d102 1
a102 1
int
@


1.1
log
@Initial revision
@
text
@a96 6
Bool
miModifyBanking(
    ScreenPtr /*pScreen*/,
    miBankInfoPtr /*pBankInfo*/
);

@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
