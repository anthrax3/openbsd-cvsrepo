head	1.9;
access;
symbols
	OPENBSD_6_0:1.9.0.10
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.8
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.4
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2013.06.07.17.28.55;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.10.13.21.30;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.37;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.14.12;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.14.12;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.35;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@/*

Copyright 1989, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.
*/

#ifndef MIPOINTER_H
#define MIPOINTER_H

#include "cursor.h"
#include "input.h"
#include "privates.h"

typedef struct _miPointerSpriteFuncRec {
    Bool (*RealizeCursor) (DeviceIntPtr /* pDev */ ,
                           ScreenPtr /* pScr */ ,
                           CursorPtr    /* pCurs */
        );
    Bool (*UnrealizeCursor) (DeviceIntPtr /* pDev */ ,
                             ScreenPtr /* pScr */ ,
                             CursorPtr  /* pCurs */
        );
    void (*SetCursor) (DeviceIntPtr /* pDev */ ,
                       ScreenPtr /* pScr */ ,
                       CursorPtr /* pCurs */ ,
                       int /* x */ ,
                       int      /* y */
        );
    void (*MoveCursor) (DeviceIntPtr /* pDev */ ,
                        ScreenPtr /* pScr */ ,
                        int /* x */ ,
                        int     /* y */
        );
    Bool (*DeviceCursorInitialize) (DeviceIntPtr /* pDev */ ,
                                    ScreenPtr   /* pScr */
        );
    void (*DeviceCursorCleanup) (DeviceIntPtr /* pDev */ ,
                                 ScreenPtr      /* pScr */
        );
} miPointerSpriteFuncRec, *miPointerSpriteFuncPtr;

typedef struct _miPointerScreenFuncRec {
    Bool (*CursorOffScreen) (ScreenPtr * /* ppScr */ ,
                             int * /* px */ ,
                             int *      /* py */
        );
    void (*CrossScreen) (ScreenPtr /* pScr */ ,
                         int    /* entering */
        );
    void (*WarpCursor) (DeviceIntPtr /*pDev */ ,
                        ScreenPtr /* pScr */ ,
                        int /* x */ ,
                        int     /* y */
        );
} miPointerScreenFuncRec, *miPointerScreenFuncPtr;

extern _X_EXPORT Bool miDCInitialize(ScreenPtr /*pScreen */ ,
                                     miPointerScreenFuncPtr     /*screenFuncs */
    );

extern _X_EXPORT Bool miPointerInitialize(ScreenPtr /*pScreen */ ,
                                          miPointerSpriteFuncPtr
                                          /*spriteFuncs */ ,
                                          miPointerScreenFuncPtr
                                          /*screenFuncs */ ,
                                          Bool  /*waitForUpdate */
    );

extern _X_EXPORT void miPointerWarpCursor(DeviceIntPtr /*pDev */ ,
                                          ScreenPtr /*pScreen */ ,
                                          int /*x */ ,
                                          int   /*y */
    );

extern _X_EXPORT ScreenPtr
miPointerGetScreen(DeviceIntPtr pDev);
extern _X_EXPORT void
miPointerSetScreen(DeviceIntPtr pDev, int screen_num, int x, int y);

/* Returns the current cursor position. */
extern _X_EXPORT void
miPointerGetPosition(DeviceIntPtr pDev, int *x, int *y);

/* Moves the cursor to the specified position.  May clip the co-ordinates:
 * x and y are modified in-place. */
extern _X_EXPORT ScreenPtr
miPointerSetPosition(DeviceIntPtr pDev, int mode, double *x, double *y,
                     int *nevents, InternalEvent *events);

extern _X_EXPORT void
miPointerUpdateSprite(DeviceIntPtr pDev);

/* Sets whether the sprite should be updated immediately on pointer moves */
extern _X_EXPORT Bool
miPointerSetWaitForUpdate(ScreenPtr pScreen, Bool wait);

extern _X_EXPORT DevPrivateKeyRec miPointerPrivKeyRec;

#define miPointerPrivKey (&miPointerPrivKeyRec)

extern _X_EXPORT DevPrivateKeyRec miPointerScreenKeyRec;

#define miPointerScreenKey (&miPointerScreenKeyRec)

#endif                          /* MIPOINTER_H */
@


1.8
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a73 7
    void (*EnqueueEvent) (DeviceIntPtr /* pDev */ ,
                          InternalEvent *       /* event */
        );
    void (*NewEventScreen) (DeviceIntPtr /* pDev */ ,
                            ScreenPtr /* pScr */ ,
                            Bool        /* set_dequeue_screen */
        );
a92 5

/* Deprecated in favour of miPointerGetScreen. */
extern _X_EXPORT ScreenPtr
miPointerCurrentScreen(void
) _X_DEPRECATED;
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d118 2
a119 1
miPointerSetPosition(DeviceIntPtr pDev, int mode, double *x, double *y);
@


1.6
log
@Update to xserver 1.11.2
@
text
@d34 25
a58 31
    Bool	(*RealizeCursor)(
                    DeviceIntPtr /* pDev */,
                    ScreenPtr /* pScr */,
                    CursorPtr /* pCurs */
                    );
    Bool	(*UnrealizeCursor)(
                    DeviceIntPtr /* pDev */,
                    ScreenPtr /* pScr */,
                    CursorPtr /* pCurs */
                    );
    void	(*SetCursor)(
                    DeviceIntPtr /* pDev */,
                    ScreenPtr /* pScr */,
                    CursorPtr /* pCurs */,
                    int  /* x */,
                    int  /* y */
                    );
    void	(*MoveCursor)(
                    DeviceIntPtr /* pDev */,
                    ScreenPtr /* pScr */,
                    int  /* x */,
                    int  /* y */
                    );
    Bool        (*DeviceCursorInitialize)(
                    DeviceIntPtr /* pDev */,
                    ScreenPtr /* pScr */
                    );
    void        (*DeviceCursorCleanup)(
                    DeviceIntPtr /* pDev */,
                    ScreenPtr /* pScr */
                    );
d62 19
a80 24
    Bool	(*CursorOffScreen)(
                    ScreenPtr* /* ppScr */,
                    int*  /* px */,
                    int*  /* py */
                    );
    void	(*CrossScreen)(
                    ScreenPtr /* pScr */,
                    int  /* entering */
                    );
    void	(*WarpCursor)(
                    DeviceIntPtr /*pDev*/, 
                    ScreenPtr /* pScr */,
                    int  /* x */,
                    int  /* y */
                    );
    void	(*EnqueueEvent)(
                    DeviceIntPtr /* pDev */,
                    InternalEvent* /* event */
                    );
    void	(*NewEventScreen)(
		    DeviceIntPtr /* pDev */,
                    ScreenPtr /* pScr */,
		    Bool /* fromDIX */
                    );
d83 17
a99 18
extern _X_EXPORT Bool miDCInitialize(
    ScreenPtr /*pScreen*/,
    miPointerScreenFuncPtr /*screenFuncs*/
);

extern _X_EXPORT Bool miPointerInitialize(
    ScreenPtr /*pScreen*/,
    miPointerSpriteFuncPtr /*spriteFuncs*/,
    miPointerScreenFuncPtr /*screenFuncs*/,
    Bool /*waitForUpdate*/
);

extern _X_EXPORT void miPointerWarpCursor(
    DeviceIntPtr /*pDev*/,
    ScreenPtr /*pScreen*/,
    int /*x*/,
    int /*y*/
);
d102 2
a103 2
extern _X_EXPORT ScreenPtr miPointerCurrentScreen(
    void
d106 4
a109 7
extern _X_EXPORT ScreenPtr miPointerGetScreen(
    DeviceIntPtr pDev);
extern _X_EXPORT void miPointerSetScreen(
    DeviceIntPtr pDev,
    int screen_num,
    int x,
    int y);
d112 2
a113 4
extern _X_EXPORT void miPointerGetPosition(
    DeviceIntPtr pDev,
    int *x,
    int *y);
d117 2
a118 5
extern _X_EXPORT void miPointerSetPosition(
    DeviceIntPtr pDev,
    int mode,
    int *x,
    int *y);
d120 2
a121 2
extern _X_EXPORT void miPointerUpdateSprite(
    DeviceIntPtr pDev);
d124 2
a125 3
extern _X_EXPORT Bool miPointerSetWaitForUpdate(
    ScreenPtr pScreen,
    Bool wait);
d128 1
d132 1
d135 1
a135 1
#endif /* MIPOINTER_H */
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d136 1
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d142 10
a151 1
extern _X_EXPORT DevPrivateKey miPointerScreenKey;
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d85 1
a85 1
                    xEventPtr /* event */
d94 1
a94 1
extern Bool miDCInitialize(
d99 1
a99 1
extern Bool miPointerInitialize(
d106 1
a106 1
extern void miPointerWarpCursor(
a110 8
) _X_DEPRECATED;

extern int miPointerGetMotionEvents(
    DeviceIntPtr /*pPtr*/,
    xTimecoord * /*coords*/,
    unsigned long /*start*/,
    unsigned long /*stop*/,
    ScreenPtr /*pScreen*/
a112 7
/* Deprecated in favour of miPointerSetPosition. */
extern void miPointerAbsoluteCursor(
    int /*x*/,
    int /*y*/,
    unsigned long /*time*/
) _X_DEPRECATED;

d114 1
a114 1
extern ScreenPtr miPointerCurrentScreen(
d118 1
a118 1
extern ScreenPtr miPointerGetScreen(
d120 1
a120 1
extern void miPointerSetScreen(
d127 1
a127 1
extern void miPointerGetPosition(
d134 1
a134 1
extern void miPointerSetPosition(
d139 1
a139 1
extern void miPointerUpdateSprite(
d142 1
a142 1
extern DevPrivateKey miPointerScreenKey;
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d35 1
d40 1
d45 1
d52 1
d57 8
d78 1
d88 1
d107 1
a112 4
extern int miPointerGetMotionBufferSize(
    void
) _X_DEPRECATED;

d121 1
a121 11
/* Deprecated in favour of miPointerUpdateSprite. */
extern void miPointerUpdate(
    void
) _X_DEPRECATED;

/* Deprecated in favour of miSetPointerPosition. */
extern void miPointerDeltaCursor(
    int /*dx*/,
    int /*dy*/,
    unsigned long /*time*/
) _X_DEPRECATED;
a127 13
/* Deprecated in favour of miGetPointerPosition. */
extern void miPointerPosition(
    int * /*x*/,
    int * /*y*/
) _X_DEPRECATED;

/* Deprecated in favour of miPointerSetScreen. */
extern void miPointerSetNewScreen(
    int, /*screen_no*/
    int, /*x*/
    int /*y*/
) _X_DEPRECATED;

d152 1
a152 2
    int *y,
    unsigned long time);
@


1.1
log
@Initial revision
@
text
@a1 6
 * mipointer.h
 *
 */


/*
d31 1
d71 1
d96 1
a96 1
);
d100 1
a100 1
);
d110 1
d113 1
a113 1
);
d115 1
d120 1
a120 2
);

d125 1
a125 1
);
d127 1
d131 1
a131 1
);
d133 1
d136 5
a140 3
	int, /*x*/
	int /*y*/
);
d143 23
a165 1
);
d167 2
a168 4
extern void miRegisterPointerDevice(
    ScreenPtr /*pScreen*/,
    DeviceIntPtr /*pDevice*/
);
d170 1
a170 1
extern int miPointerScreenIndex;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 6
a75 1
                    DeviceIntPtr /* pDev */,
d100 1
a100 1
) _X_DEPRECATED;
d104 1
a104 1
) _X_DEPRECATED;
a113 1
/* Deprecated in favour of miPointerUpdateSprite. */
d116 1
a116 1
) _X_DEPRECATED;
a117 1
/* Deprecated in favour of miSetPointerPosition. */
d122 2
a123 1
) _X_DEPRECATED;
d128 1
a128 1
) _X_DEPRECATED;
a129 1
/* Deprecated in favour of miGetPointerPosition. */
d133 1
a133 1
) _X_DEPRECATED;
a134 1
/* Deprecated in favour of miPointerSetScreen. */
d137 3
a139 5
    int, /*x*/
    int /*y*/
) _X_DEPRECATED;

/* Deprecated in favour of miPointerGetScreen. */
d142 1
a142 1
) _X_DEPRECATED;
d144 4
a147 24
extern ScreenPtr miPointerGetScreen(
    DeviceIntPtr pDev);
extern void miPointerSetScreen(
    DeviceIntPtr pDev,
    int screen_num,
    int x,
    int y);

/* Returns the current cursor position. */
extern void miPointerGetPosition(
    DeviceIntPtr pDev,
    int *x,
    int *y);

/* Moves the cursor to the specified position.  May clip the co-ordinates:
 * x and y are modified in-place. */
extern void miPointerSetPosition(
    DeviceIntPtr pDev,
    int *x,
    int *y,
    unsigned long time);

extern void miPointerUpdateSprite(
    DeviceIntPtr pDev);
@

