head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.05.29.12.02.39;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	s0SI41sEunLdyFfd;

1.11
date	2015.09.16.19.10.25;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	Te1daavkBLskZ8gc;

1.10
date	2014.09.27.17.53.04;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	cVXoV5PxI8YrEaVA;

1.9
date	2013.06.07.17.28.55;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.10.13.21.30;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.13.19.54.46;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.37;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.14.16;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.14.16;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.45;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*

Copyright 1990, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.

*/

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <X11/X.h>
#include "servermd.h"
#include "misc.h"
#include "mi.h"
#include "scrnintstr.h"
#include "pixmapstr.h"
#include "dix.h"
#include "miline.h"
#ifdef MITSHM
#include <X11/extensions/shm.h>
#include "shmint.h"
#endif

/* We use this structure to propogate some information from miScreenInit to
 * miCreateScreenResources.  miScreenInit allocates the structure, fills it
 * in, and puts it into pScreen->devPrivate.  miCreateScreenResources
 * extracts the info and frees the structure.  We could've accomplished the
 * same thing by adding fields to the screen structure, but they would have
 * ended up being redundant, and would have exposed this mi implementation
 * detail to the whole server.
 */

typedef struct {
    void *pbits;                /* pointer to framebuffer */
    int width;                  /* delta to add to a framebuffer addr to move one row down */
} miScreenInitParmsRec, *miScreenInitParmsPtr;

/* this plugs into pScreen->ModifyPixmapHeader */
Bool
miModifyPixmapHeader(PixmapPtr pPixmap, int width, int height, int depth,
                     int bitsPerPixel, int devKind, void *pPixData)
{
    if (!pPixmap)
        return FALSE;

    /*
     * If all arguments are specified, reinitialize everything (including
     * validated state).
     */
    if ((width > 0) && (height > 0) && (depth > 0) && (bitsPerPixel > 0) &&
        (devKind > 0) && pPixData) {
        pPixmap->drawable.depth = depth;
        pPixmap->drawable.bitsPerPixel = bitsPerPixel;
        pPixmap->drawable.id = 0;
        pPixmap->drawable.x = 0;
        pPixmap->drawable.y = 0;
        pPixmap->drawable.width = width;
        pPixmap->drawable.height = height;
        pPixmap->devKind = devKind;
        pPixmap->refcnt = 1;
        pPixmap->devPrivate.ptr = pPixData;
    }
    else {
        /*
         * Only modify specified fields, keeping all others intact.
         */

        if (width > 0)
            pPixmap->drawable.width = width;

        if (height > 0)
            pPixmap->drawable.height = height;

        if (depth > 0)
            pPixmap->drawable.depth = depth;

        if (bitsPerPixel > 0)
            pPixmap->drawable.bitsPerPixel = bitsPerPixel;
        else if ((bitsPerPixel < 0) && (depth > 0))
            pPixmap->drawable.bitsPerPixel = BitsPerPixel(depth);

        /*
         * CAVEAT:  Non-SI DDXen may use devKind and devPrivate fields for
         *          other purposes.
         */
        if (devKind > 0)
            pPixmap->devKind = devKind;
        else if ((devKind < 0) && ((width > 0) || (depth > 0)))
            pPixmap->devKind = PixmapBytePad(pPixmap->drawable.width,
                                             pPixmap->drawable.depth);

        if (pPixData)
            pPixmap->devPrivate.ptr = pPixData;
    }
    pPixmap->drawable.serialNumber = NEXT_SERIAL_NUMBER;
    return TRUE;
}

static Bool
miCloseScreen(ScreenPtr pScreen)
{
    return ((*pScreen->DestroyPixmap) ((PixmapPtr) pScreen->devPrivate));
}

/* With the introduction of pixmap privates, the "screen pixmap" can no
 * longer be created in miScreenInit, since all the modules that could
 * possibly ask for pixmap private space have not been initialized at
 * that time.  pScreen->CreateScreenResources is called after all
 * possible private-requesting modules have been inited; we create the
 * screen pixmap here.
 */
Bool
miCreateScreenResources(ScreenPtr pScreen)
{
    miScreenInitParmsPtr pScrInitParms;
    void *value;

    pScrInitParms = (miScreenInitParmsPtr) pScreen->devPrivate;

    /* if width is non-zero, pScreen->devPrivate will be a pixmap
     * else it will just take the value pbits
     */
    if (pScrInitParms->width) {
        PixmapPtr pPixmap;

        /* create a pixmap with no data, then redirect it to point to
         * the screen
         */
        pPixmap =
            (*pScreen->CreatePixmap) (pScreen, 0, 0, pScreen->rootDepth, 0);
        if (!pPixmap)
            return FALSE;

        if (!(*pScreen->ModifyPixmapHeader) (pPixmap, pScreen->width,
                                             pScreen->height,
                                             pScreen->rootDepth,
                                             BitsPerPixel(pScreen->rootDepth),
                                             PixmapBytePad(pScrInitParms->width,
                                                           pScreen->rootDepth),
                                             pScrInitParms->pbits))
            return FALSE;
        value = (void *) pPixmap;
    }
    else {
        value = pScrInitParms->pbits;
    }
    free(pScreen->devPrivate);  /* freeing miScreenInitParmsRec */
    pScreen->devPrivate = value;        /* pPixmap or pbits */
    return TRUE;
}

Bool
miScreenDevPrivateInit(ScreenPtr pScreen, int width, void *pbits)
{
    miScreenInitParmsPtr pScrInitParms;

    /* Stash pbits and width in a short-lived miScreenInitParmsRec attached
     * to the screen, until CreateScreenResources can put them in the
     * screen pixmap.
     */
    pScrInitParms = malloc(sizeof(miScreenInitParmsRec));
    if (!pScrInitParms)
        return FALSE;
    pScrInitParms->pbits = pbits;
    pScrInitParms->width = width;
    pScreen->devPrivate = (void *) pScrInitParms;
    return TRUE;
}

static PixmapPtr
miGetScreenPixmap(ScreenPtr pScreen)
{
    return (PixmapPtr) (pScreen->devPrivate);
}

static void
miSetScreenPixmap(PixmapPtr pPix)
{
    if (pPix)
        pPix->drawable.pScreen->devPrivate = (void *) pPix;
}

Bool
miScreenInit(ScreenPtr pScreen, void *pbits,  /* pointer to screen bits */
             int xsize, int ysize,      /* in pixels */
             int dpix, int dpiy,        /* dots per inch */
             int width,         /* pixel width of frame buffer */
             int rootDepth,     /* depth of root window */
             int numDepths,     /* number of depths supported */
             DepthRec * depths, /* supported depths */
             VisualID rootVisual,       /* root visual */
             int numVisuals,    /* number of visuals supported */
             VisualRec * visuals        /* supported visuals */
    )
{
    pScreen->width = xsize;
    pScreen->height = ysize;
    pScreen->mmWidth = (xsize * 254 + dpix * 5) / (dpix * 10);
    pScreen->mmHeight = (ysize * 254 + dpiy * 5) / (dpiy * 10);
    pScreen->numDepths = numDepths;
    pScreen->rootDepth = rootDepth;
    pScreen->allowedDepths = depths;
    pScreen->rootVisual = rootVisual;
    /* defColormap */
    pScreen->minInstalledCmaps = 1;
    pScreen->maxInstalledCmaps = 1;
    pScreen->backingStoreSupport = NotUseful;
    pScreen->saveUnderSupport = NotUseful;
    /* whitePixel, blackPixel */
    pScreen->ModifyPixmapHeader = miModifyPixmapHeader;
    pScreen->CreateScreenResources = miCreateScreenResources;
    pScreen->GetScreenPixmap = miGetScreenPixmap;
    pScreen->SetScreenPixmap = miSetScreenPixmap;
    pScreen->numVisuals = numVisuals;
    pScreen->visuals = visuals;
    if (width) {
#ifdef MITSHM
        ShmRegisterFbFuncs(pScreen);
#endif
        pScreen->CloseScreen = miCloseScreen;
    }
    /* else CloseScreen */
    /* QueryBestSize, SaveScreen, GetImage, GetSpans */
    pScreen->SourceValidate = (SourceValidateProcPtr) 0;
    /* CreateWindow, DestroyWindow, PositionWindow, ChangeWindowAttributes */
    /* RealizeWindow, UnrealizeWindow */
    pScreen->ValidateTree = miValidateTree;
    pScreen->PostValidateTree = (PostValidateTreeProcPtr) 0;
    pScreen->WindowExposures = miWindowExposures;
    /* CopyWindow */
    pScreen->ClearToBackground = miClearToBackground;
    pScreen->ClipNotify = (ClipNotifyProcPtr) 0;
    pScreen->RestackWindow = (RestackWindowProcPtr) 0;
    pScreen->PaintWindow = miPaintWindow;
    /* CreatePixmap, DestroyPixmap */
    /* RealizeFont, UnrealizeFont */
    /* CreateGC */
    /* CreateColormap, DestroyColormap, InstallColormap, UninstallColormap */
    /* ListInstalledColormaps, StoreColors, ResolveColor */
    /* BitmapToRegion */
    pScreen->BlockHandler = (ScreenBlockHandlerProcPtr) NoopDDA;
    pScreen->WakeupHandler = (ScreenWakeupHandlerProcPtr) NoopDDA;
    pScreen->MarkWindow = miMarkWindow;
    pScreen->MarkOverlappedWindows = miMarkOverlappedWindows;
    pScreen->MoveWindow = miMoveWindow;
    pScreen->ResizeWindow = miResizeWindow;
    pScreen->GetLayerWindow = miGetLayerWindow;
    pScreen->HandleExposures = miHandleValidateExposures;
    pScreen->ReparentWindow = (ReparentWindowProcPtr) 0;
    pScreen->ChangeBorderWidth = miChangeBorderWidth;
    pScreen->SetShape = miSetShape;
    pScreen->MarkUnrealizedWindow = miMarkUnrealizedWindow;
    pScreen->XYToWindow = miXYToWindow;

    miSetZeroLineBias(pScreen, DEFAULTZEROLINEBIAS);

    return miScreenDevPrivateInit(pScreen, width, pbits);
}

DevPrivateKeyRec miZeroLineScreenKeyRec;

void
miSetZeroLineBias(ScreenPtr pScreen, unsigned int bias)
{
    if (!dixRegisterPrivateKey(&miZeroLineScreenKeyRec, PRIVATE_SCREEN, 0))
        return;

    dixSetPrivate(&pScreen->devPrivates, miZeroLineScreenKey,
                  (unsigned long *) (unsigned long) bias);
}
@


1.11
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d256 1
@


1.10
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d48 1
a48 1
 * in, and puts it into pScreen->devPrivate.  miCreateScreenResources 
a261 1
    pScreen->SendGraphicsExpose = miSendGraphicsExpose;
d267 1
a267 1
    pScreen->ResizeWindow = miSlideAndSizeWindow;
@


1.9
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d56 1
a56 1
    pointer pbits;              /* pointer to framebuffer */
d63 1
a63 1
                     int bitsPerPixel, int devKind, pointer pPixData)
d138 1
a138 1
    pointer value;
d164 1
a164 1
        value = (pointer) pPixmap;
d175 1
a175 1
miScreenDevPrivateInit(ScreenPtr pScreen, int width, pointer pbits)
d188 1
a188 1
    pScreen->devPrivate = (pointer) pScrInitParms;
d202 1
a202 1
        pPix->drawable.pScreen->devPrivate = (pointer) pPix;
d206 1
a206 1
miScreenInit(ScreenPtr pScreen, pointer pbits,  /* pointer to screen bits */
d275 1
@


1.8
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d122 1
a122 1
miCloseScreen(int iScreen, ScreenPtr pScreen)
a264 2
    pScreen->blockData = (pointer) 0;
    pScreen->wakeupData = (pointer) 0;
@


1.7
log
@Update to xserver 1.11.2
@
text
@d55 3
a57 4
typedef struct
{
    pointer pbits; /* pointer to framebuffer */
    int width;    /* delta to add to a framebuffer addr to move one row down */
a59 1

d66 1
a66 1
	return FALSE;
d73 40
a112 39
	(devKind > 0) && pPixData) {
	pPixmap->drawable.depth = depth;
	pPixmap->drawable.bitsPerPixel = bitsPerPixel;
	pPixmap->drawable.id = 0;
	pPixmap->drawable.x = 0;
	pPixmap->drawable.y = 0;
	pPixmap->drawable.width = width;
	pPixmap->drawable.height = height;
	pPixmap->devKind = devKind;
	pPixmap->refcnt = 1;
	pPixmap->devPrivate.ptr = pPixData;
    } else {
	/*
	 * Only modify specified fields, keeping all others intact.
	 */

	if (width > 0)
	    pPixmap->drawable.width = width;

	if (height > 0)
	    pPixmap->drawable.height = height;

	if (depth > 0)
	    pPixmap->drawable.depth = depth;

	if (bitsPerPixel > 0)
	    pPixmap->drawable.bitsPerPixel = bitsPerPixel;
	else if ((bitsPerPixel < 0) && (depth > 0))
	    pPixmap->drawable.bitsPerPixel = BitsPerPixel(depth);

	/*
	 * CAVEAT:  Non-SI DDXen may use devKind and devPrivate fields for
	 *          other purposes.
	 */
	if (devKind > 0)
	    pPixmap->devKind = devKind;
	else if ((devKind < 0) && ((width > 0) || (depth > 0)))
	    pPixmap->devKind = PixmapBytePad(pPixmap->drawable.width,
		pPixmap->drawable.depth);
d114 2
a115 2
	if (pPixData)
	    pPixmap->devPrivate.ptr = pPixData;
d122 1
a122 1
miCloseScreen (int iScreen, ScreenPtr pScreen)
d124 1
a124 1
    return ((*pScreen->DestroyPixmap)((PixmapPtr)pScreen->devPrivate));
d140 1
a140 1
    pScrInitParms = (miScreenInitParmsPtr)pScreen->devPrivate;
d145 20
a164 18
    if (pScrInitParms->width)
    {
	PixmapPtr pPixmap;

	/* create a pixmap with no data, then redirect it to point to
	 * the screen
	 */
	pPixmap = (*pScreen->CreatePixmap)(pScreen, 0, 0, pScreen->rootDepth, 0);
	if (!pPixmap)
	    return FALSE;

	if (!(*pScreen->ModifyPixmapHeader)(pPixmap, pScreen->width,
		    pScreen->height, pScreen->rootDepth,
		    BitsPerPixel(pScreen->rootDepth),
		    PixmapBytePad(pScrInitParms->width, pScreen->rootDepth),
		    pScrInitParms->pbits))
	    return FALSE;
	value = (pointer)pPixmap;
d166 2
a167 3
    else
    {
	value = pScrInitParms->pbits;
d169 2
a170 2
    free(pScreen->devPrivate); /* freeing miScreenInitParmsRec */
    pScreen->devPrivate = value; /* pPixmap or pbits */
d185 1
a185 1
	return FALSE;
d188 1
a188 1
    pScreen->devPrivate = (pointer)pScrInitParms;
d195 1
a195 1
    return (PixmapPtr)(pScreen->devPrivate);
d202 1
a202 1
	pPix->drawable.pScreen->devPrivate = (pointer)pPix;
d206 10
a215 12
miScreenInit(
    ScreenPtr pScreen,
    pointer pbits,		/* pointer to screen bits */
    int xsize, int ysize,	/* in pixels */
    int dpix, int dpiy,		/* dots per inch */
    int width,			/* pixel width of frame buffer */
    int rootDepth,		/* depth of root window */
    int numDepths,		/* number of depths supported */
    DepthRec *depths,		/* supported depths */
    VisualID rootVisual,	/* root visual */
    int numVisuals,		/* number of visuals supported */
    VisualRec *visuals		/* supported visuals */
d238 1
a238 2
    if (width)
    {
d240 1
a240 1
	ShmRegisterFbFuncs(pScreen);
d242 1
a242 1
	pScreen->CloseScreen = miCloseScreen;
d263 4
a266 4
    pScreen->BlockHandler = (ScreenBlockHandlerProcPtr)NoopDDA;
    pScreen->WakeupHandler = (ScreenWakeupHandlerProcPtr)NoopDDA;
    pScreen->blockData = (pointer)0;
    pScreen->wakeupData = (pointer)0;
d289 1
a289 1
	return;
d291 2
a292 2
    dixSetPrivate(&pScreen->devPrivates, miZeroLineScreenKey, 
					(unsigned long *)(unsigned long)bias);
@


1.6
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a271 2
    pScreen->ChangeSaveUnder = NULL;
    pScreen->PostChangeSaveUnder = NULL;
a280 7
    pScreen->SaveDoomedAreas = 0;
    pScreen->RestoreAreas = 0;
    pScreen->ExposeCopy = 0;
    pScreen->TranslateBackingStore = 0;
    pScreen->ClearBackingStore = 0;
    pScreen->DrawGuarantee = 0;

a283 11
}

static DevPrivateKeyRec privateKeyRec;
#define privateKey (&privateKeyRec)

DevPrivateKey
miAllocateGCPrivateIndex(void)
{
    if (!dixRegisterPrivateKey(&privateKeyRec, PRIVATE_GC, 0))
	return NULL;
    return privateKey;
@


1.5
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a78 1
	pPixmap->drawable.serialNumber = NEXT_SERIAL_NUMBER;
d118 1
d169 1
a169 1
    xfree(pScreen->devPrivate); /* freeing miScreenInitParmsRec */
d183 1
a183 1
    pScrInitParms = xalloc(sizeof(miScreenInitParmsRec));
a248 1
    pScreen->PointerNonInterestBox = (PointerNonInterestBoxProcPtr) 0;
d295 2
a296 2
static int privateKeyIndex;
static DevPrivateKey privateKey = &privateKeyIndex;
d301 2
d306 1
a306 2
static int miZeroLineScreenKeyIndex;
DevPrivateKey miZeroLineScreenKey = &miZeroLineScreenKeyIndex;
d311 3
@


1.4
log
@Add a configure test for newer proto headers and use it to enable
building xserver 1.6 with those headers. ok oga@@.
@
text
@d42 1
a42 2
#ifdef HAVE_X11_EXTENSIONS_SHMPROTO_H
#include <X11/extensions/shmproto.h>
a43 4
#else
#define _XSHM_SERVER_
#include <X11/extensions/XShm.h>
#endif
d63 1
a63 1
_X_EXPORT Bool
d135 1
a135 1
_X_EXPORT Bool
d183 1
a183 1
    pScrInitParms = (miScreenInitParmsPtr)xalloc(sizeof(miScreenInitParmsRec));
d205 1
a205 1
_X_EXPORT Bool
d300 1
a300 1
miAllocateGCPrivateIndex()
d306 1
a306 1
_X_EXPORT DevPrivateKey miZeroLineScreenKey = &miZeroLineScreenKeyIndex;
d308 1
a308 1
_X_EXPORT void
d311 2
a312 1
    dixSetPrivate(&pScreen->devPrivates, miZeroLineScreenKey, (pointer)bias);
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d42 4
d48 1
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d64 2
a65 9
miModifyPixmapHeader(pPixmap, width, height, depth, bitsPerPixel, devKind,
		     pPixData)
    PixmapPtr   pPixmap;
    int		width;
    int		height;
    int		depth;
    int		bitsPerPixel;
    int		devKind;
    pointer     pPixData;
d136 1
a136 2
miCreateScreenResources(pScreen)
    ScreenPtr pScreen;
d175 1
a175 4
miScreenDevPrivateInit(pScreen, width, pbits)
    ScreenPtr pScreen;
    int width;
    pointer pbits;
d192 13
d206 13
a218 13
miScreenInit(pScreen, pbits, xsize, ysize, dpix, dpiy, width,
	     rootDepth, numDepths, depths, rootVisual, numVisuals, visuals)
    ScreenPtr pScreen;
    pointer pbits;		/* pointer to screen bits */
    int xsize, ysize;		/* in pixels */
    int dpix, dpiy;		/* dots per inch */
    int width;			/* pixel width of frame buffer */
    int rootDepth;		/* depth of root window */
    int numDepths;		/* number of depths supported */
    DepthRec *depths;		/* supported depths */
    VisualID rootVisual;	/* root visual */
    int numVisuals;		/* number of visuals supported */
    VisualRec *visuals;		/* supported visuals */
d273 2
a274 2
    pScreen->ChangeSaveUnder = miChangeSaveUnder;
    pScreen->PostChangeSaveUnder = miPostChangeSaveUnder;
a280 1
#ifdef SHAPE
a281 1
#endif
d296 2
a297 1
static DevPrivateKey privateKey = &privateKey;
d299 1
a299 1
_X_EXPORT DevPrivateKey
d305 2
a306 1
_X_EXPORT DevPrivateKey miZeroLineScreenKey = &miZeroLineScreenKey;
d309 1
a309 3
miSetZeroLineBias(pScreen, bias)
    ScreenPtr pScreen;
    unsigned int bias;
a311 15
}

_X_EXPORT PixmapPtr
miGetScreenPixmap(pScreen)
    ScreenPtr pScreen;
{
    return (PixmapPtr)(pScreen->devPrivate);
}

_X_EXPORT void
miSetScreenPixmap(pPix)
    PixmapPtr pPix;
{
    if (pPix)
	pPix->drawable.pScreen->devPrivate = (pointer)pPix;
@


1.1
log
@Initial revision
@
text
@d129 2
a130 6

/*ARGSUSED*/
Bool
miCloseScreen (iScreen, pScreen)
    int		iScreen;
    ScreenPtr	pScreen;
d161 1
a161 1
	pPixmap = (*pScreen->CreatePixmap)(pScreen, 0, 0, pScreen->rootDepth);
d184 1
a184 1
    register ScreenPtr pScreen;
d206 1
a206 1
    register ScreenPtr pScreen;
d254 1
a254 1
    /* PaintWindowBackground, PaintWindowBorder, CopyWindow */
d296 3
a298 1
_X_EXPORT int
d301 1
a301 9
    static int privateIndex = -1;
    static unsigned long miGeneration = 0;

    if (miGeneration != serverGeneration)
    {
	privateIndex = AllocateGCPrivateIndex();
	miGeneration = serverGeneration;
    }
    return privateIndex;
d304 1
a304 2
_X_EXPORT int miZeroLineScreenIndex;
unsigned int miZeroLineGeneration = 0;
d311 1
a311 7
    if (miZeroLineGeneration != serverGeneration)
    {
	miZeroLineScreenIndex = AllocateScreenPrivateIndex();
	miZeroLineGeneration = serverGeneration;
    }
    if (miZeroLineScreenIndex >= 0)
	pScreen->devPrivates[miZeroLineScreenIndex].uval = bias;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d129 6
a134 2
static Bool
miCloseScreen (int iScreen, ScreenPtr pScreen)
d188 1
a188 1
    ScreenPtr pScreen;
d210 1
a210 1
    ScreenPtr pScreen;
d315 1
a315 1
static unsigned int miZeroLineGeneration = 0;
@

