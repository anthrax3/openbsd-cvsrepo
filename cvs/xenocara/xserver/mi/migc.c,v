head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.6
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.09.16.19.10.25;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	Te1daavkBLskZ8gc;

1.6
date	2014.09.27.17.53.04;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	cVXoV5PxI8YrEaVA;

1.5
date	2012.06.10.13.21.30;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.37;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.14.09;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.14.09;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*

Copyright 1993, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.

*/

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "scrnintstr.h"
#include "gcstruct.h"
#include "pixmapstr.h"
#include "windowstr.h"
#include "migc.h"

/* ARGSUSED */
void
miChangeGC(GCPtr pGC, unsigned long mask)
{
    return;
}

void
miDestroyGC(GCPtr pGC)
{
    if (pGC->pRotatedPixmap)
        (*pGC->pScreen->DestroyPixmap) (pGC->pRotatedPixmap);
    if (pGC->freeCompClip)
        RegionDestroy(pGC->pCompositeClip);
}

void
miDestroyClip(GCPtr pGC)
{
    if (pGC->clientClip)
        RegionDestroy(pGC->clientClip);
    pGC->clientClip = NULL;
}

void
miChangeClip(GCPtr pGC, int type, void *pvalue, int nrects)
{
    (*pGC->funcs->DestroyClip) (pGC);
    if (type == CT_PIXMAP) {
        /* convert the pixmap to a region */
        pGC->clientClip = BitmapToRegion(pGC->pScreen, (PixmapPtr) pvalue);
        (*pGC->pScreen->DestroyPixmap) (pvalue);
    }
    else if (type == CT_REGION) {
        /* stuff the region in the GC */
        pGC->clientClip = pvalue;
    }
    else if (type != CT_NONE) {
        pGC->clientClip = RegionFromRects(nrects, (xRectangle *) pvalue, type);
        free(pvalue);
    }
    pGC->stateChanges |= GCClipMask;
}

void
miCopyClip(GCPtr pgcDst, GCPtr pgcSrc)
{
    if (pgcSrc->clientClip) {
        RegionPtr prgnNew = RegionCreate(NULL, 1);
        RegionCopy(prgnNew, (RegionPtr) (pgcSrc->clientClip));
        (*pgcDst->funcs->ChangeClip) (pgcDst, CT_REGION, prgnNew, 0);
    } else {
        (*pgcDst->funcs->ChangeClip) (pgcDst, CT_NONE, NULL, 0);
    }
}

/* ARGSUSED */
void
miCopyGC(GCPtr pGCSrc, unsigned long changes, GCPtr pGCDst)
{
    return;
}

void
miComputeCompositeClip(GCPtr pGC, DrawablePtr pDrawable)
{
    if (pDrawable->type == DRAWABLE_WINDOW) {
        WindowPtr pWin = (WindowPtr) pDrawable;
        RegionPtr pregWin;
        Bool freeTmpClip, freeCompClip;

        if (pGC->subWindowMode == IncludeInferiors) {
            pregWin = NotClippedByChildren(pWin);
            freeTmpClip = TRUE;
        }
        else {
            pregWin = &pWin->clipList;
            freeTmpClip = FALSE;
        }
        freeCompClip = pGC->freeCompClip;

        /*
         * if there is no client clip, we can get by with just keeping the
         * pointer we got, and remembering whether or not should destroy (or
         * maybe re-use) it later.  this way, we avoid unnecessary copying of
         * regions.  (this wins especially if many clients clip by children
         * and have no client clip.)
         */
        if (!pGC->clientClip) {
            if (freeCompClip)
                RegionDestroy(pGC->pCompositeClip);
            pGC->pCompositeClip = pregWin;
            pGC->freeCompClip = freeTmpClip;
        }
        else {
            /*
             * we need one 'real' region to put into the composite clip. if
             * pregWin the current composite clip are real, we can get rid of
             * one. if pregWin is real and the current composite clip isn't,
             * use pregWin for the composite clip. if the current composite
             * clip is real and pregWin isn't, use the current composite
             * clip. if neither is real, create a new region.
             */

            RegionTranslate(pGC->clientClip,
                            pDrawable->x + pGC->clipOrg.x,
                            pDrawable->y + pGC->clipOrg.y);

            if (freeCompClip) {
                RegionIntersect(pGC->pCompositeClip, pregWin, pGC->clientClip);
                if (freeTmpClip)
                    RegionDestroy(pregWin);
            }
            else if (freeTmpClip) {
                RegionIntersect(pregWin, pregWin, pGC->clientClip);
                pGC->pCompositeClip = pregWin;
            }
            else {
                pGC->pCompositeClip = RegionCreate(NullBox, 0);
                RegionIntersect(pGC->pCompositeClip, pregWin, pGC->clientClip);
            }
            pGC->freeCompClip = TRUE;
            RegionTranslate(pGC->clientClip,
                            -(pDrawable->x + pGC->clipOrg.x),
                            -(pDrawable->y + pGC->clipOrg.y));
        }
    }                           /* end of composite clip for a window */
    else {
        BoxRec pixbounds;

        /* XXX should we translate by drawable.x/y here ? */
        /* If you want pixmaps in offscreen memory, yes */
        pixbounds.x1 = pDrawable->x;
        pixbounds.y1 = pDrawable->y;
        pixbounds.x2 = pDrawable->x + pDrawable->width;
        pixbounds.y2 = pDrawable->y + pDrawable->height;

        if (pGC->freeCompClip) {
            RegionReset(pGC->pCompositeClip, &pixbounds);
        }
        else {
            pGC->freeCompClip = TRUE;
            pGC->pCompositeClip = RegionCreate(&pixbounds, 1);
        }

        if (pGC->clientClip) {
            if (pDrawable->x || pDrawable->y) {
                RegionTranslate(pGC->clientClip,
                                pDrawable->x + pGC->clipOrg.x,
                                pDrawable->y + pGC->clipOrg.y);
                RegionIntersect(pGC->pCompositeClip,
                                pGC->pCompositeClip, pGC->clientClip);
                RegionTranslate(pGC->clientClip,
                                -(pDrawable->x + pGC->clipOrg.x),
                                -(pDrawable->y + pGC->clipOrg.y));
            }
            else {
                RegionTranslate(pGC->pCompositeClip,
                                -pGC->clipOrg.x, -pGC->clipOrg.y);
                RegionIntersect(pGC->pCompositeClip,
                                pGC->pCompositeClip, pGC->clientClip);
                RegionTranslate(pGC->pCompositeClip,
                                pGC->clipOrg.x, pGC->clipOrg.y);
            }
        }
    }                           /* end of composite clip for pixmap */
}                               /* end miComputeCompositeClip */
@


1.6
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d58 1
a58 10
    if (pGC->clientClipType == CT_NONE)
        return;
    else if (pGC->clientClipType == CT_PIXMAP) {
        (*pGC->pScreen->DestroyPixmap) ((PixmapPtr) (pGC->clientClip));
    }
    else {
        /*
         * we know we'll never have a list of rectangles, since ChangeClip
         * immediately turns them into a region
         */
a59 1
    }
a60 1
    pGC->clientClipType = CT_NONE;
d69 1
a69 2
        pGC->clientClip = (void *) BitmapToRegion(pGC->pScreen,
                                                   (PixmapPtr) pvalue);
d77 1
a77 3
        pGC->clientClip = (void *) RegionFromRects(nrects,
                                                    (xRectangle *) pvalue,
                                                    type);
a79 2
    pGC->clientClipType = (type != CT_NONE &&
                           pGC->clientClip) ? CT_REGION : CT_NONE;
d86 2
a87 12
    RegionPtr prgnNew;

    switch (pgcSrc->clientClipType) {
    case CT_PIXMAP:
        ((PixmapPtr) pgcSrc->clientClip)->refcnt++;
        /* Fall through !! */
    case CT_NONE:
        (*pgcDst->funcs->ChangeClip) (pgcDst, (int) pgcSrc->clientClipType,
                                      pgcSrc->clientClip, 0);
        break;
    case CT_REGION:
        prgnNew = RegionCreate(NULL, 1);
d89 3
a91 2
        (*pgcDst->funcs->ChangeClip) (pgcDst, CT_REGION, (void *) prgnNew, 0);
        break;
d127 1
a127 1
        if (pGC->clientClipType == CT_NONE) {
d184 1
a184 1
        if (pGC->clientClipType == CT_REGION) {
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d75 1
a75 1
miChangeClip(GCPtr pGC, int type, pointer pvalue, int nrects)
d80 1
a80 1
        pGC->clientClip = (pointer) BitmapToRegion(pGC->pScreen,
d89 1
a89 1
        pGC->clientClip = (pointer) RegionFromRects(nrects,
d115 1
a115 1
        (*pgcDst->funcs->ChangeClip) (pgcDst, CT_REGION, (pointer) prgnNew, 0);
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a28 1

d50 1
a50 1
	(*pGC->pScreen->DestroyPixmap) (pGC->pRotatedPixmap);
d52 1
a52 1
	RegionDestroy(pGC->pCompositeClip);
d59 10
a68 12
	return;
    else if (pGC->clientClipType == CT_PIXMAP)
    {
	(*pGC->pScreen->DestroyPixmap) ((PixmapPtr) (pGC->clientClip));
    }
    else
    {
	/*
	 * we know we'll never have a list of rectangles, since ChangeClip
	 * immediately turns them into a region
	 */
	RegionDestroy(pGC->clientClip);
d75 1
a75 1
miChangeClip( GCPtr pGC, int type, pointer pvalue, int nrects)
d78 15
a92 18
    if (type == CT_PIXMAP)
    {
	/* convert the pixmap to a region */
	pGC->clientClip = (pointer) BitmapToRegion(pGC->pScreen,
							(PixmapPtr) pvalue);
	(*pGC->pScreen->DestroyPixmap) (pvalue);
    }
    else if (type == CT_REGION)
    {
	/* stuff the region in the GC */
	pGC->clientClip = pvalue;
    }
    else if (type != CT_NONE)
    {
	pGC->clientClip = (pointer) RegionFromRects(nrects,
						      (xRectangle *) pvalue,
								    type);
	free(pvalue);
d94 2
a95 1
    pGC->clientClipType = (type != CT_NONE && pGC->clientClip) ? CT_REGION : CT_NONE;
d102 1
a102 1
    RegionPtr       prgnNew;
d104 13
a116 14
    switch (pgcSrc->clientClipType)
    {
      case CT_PIXMAP:
	((PixmapPtr) pgcSrc->clientClip)->refcnt++;
	/* Fall through !! */
      case CT_NONE:
	(*pgcDst->funcs->ChangeClip) (pgcDst, (int) pgcSrc->clientClipType,
				   pgcSrc->clientClip, 0);
	break;
      case CT_REGION:
	prgnNew = RegionCreate(NULL, 1);
	RegionCopy(prgnNew, (RegionPtr) (pgcSrc->clientClip));
	(*pgcDst->funcs->ChangeClip) (pgcDst, CT_REGION, (pointer) prgnNew, 0);
	break;
d128 1
a128 1
miComputeCompositeClip( GCPtr pGC, DrawablePtr pDrawable)
d130 101
a230 114
    if (pDrawable->type == DRAWABLE_WINDOW)
    {
	WindowPtr       pWin = (WindowPtr) pDrawable;
	RegionPtr       pregWin;
	Bool            freeTmpClip, freeCompClip;

	if (pGC->subWindowMode == IncludeInferiors)
	{
	    pregWin = NotClippedByChildren(pWin);
	    freeTmpClip = TRUE;
	}
	else
	{
	    pregWin = &pWin->clipList;
	    freeTmpClip = FALSE;
	}
	freeCompClip = pGC->freeCompClip;

	/*
	 * if there is no client clip, we can get by with just keeping the
	 * pointer we got, and remembering whether or not should destroy (or
	 * maybe re-use) it later.  this way, we avoid unnecessary copying of
	 * regions.  (this wins especially if many clients clip by children
	 * and have no client clip.)
	 */
	if (pGC->clientClipType == CT_NONE)
	{
	    if (freeCompClip)
		RegionDestroy(pGC->pCompositeClip);
	    pGC->pCompositeClip = pregWin;
	    pGC->freeCompClip = freeTmpClip;
	}
	else
	{
	    /*
	     * we need one 'real' region to put into the composite clip. if
	     * pregWin the current composite clip are real, we can get rid of
	     * one. if pregWin is real and the current composite clip isn't,
	     * use pregWin for the composite clip. if the current composite
	     * clip is real and pregWin isn't, use the current composite
	     * clip. if neither is real, create a new region.
	     */

	    RegionTranslate(pGC->clientClip,
					 pDrawable->x + pGC->clipOrg.x,
					 pDrawable->y + pGC->clipOrg.y);

	    if (freeCompClip)
	    {
		RegionIntersect(pGC->pCompositeClip,
					    pregWin, pGC->clientClip);
		if (freeTmpClip)
		    RegionDestroy(pregWin);
	    }
	    else if (freeTmpClip)
	    {
		RegionIntersect(pregWin, pregWin, pGC->clientClip);
		pGC->pCompositeClip = pregWin;
	    }
	    else
	    {
		pGC->pCompositeClip = RegionCreate(NullBox, 0);
		RegionIntersect(pGC->pCompositeClip,
				       pregWin, pGC->clientClip);
	    }
	    pGC->freeCompClip = TRUE;
	    RegionTranslate(pGC->clientClip,
					 -(pDrawable->x + pGC->clipOrg.x),
					 -(pDrawable->y + pGC->clipOrg.y));
	}
    }	/* end of composite clip for a window */
    else
    {
	BoxRec          pixbounds;

	/* XXX should we translate by drawable.x/y here ? */
	/* If you want pixmaps in offscreen memory, yes */
	pixbounds.x1 = pDrawable->x;
	pixbounds.y1 = pDrawable->y;
	pixbounds.x2 = pDrawable->x + pDrawable->width;
	pixbounds.y2 = pDrawable->y + pDrawable->height;

	if (pGC->freeCompClip)
	{
	    RegionReset(pGC->pCompositeClip, &pixbounds);
	}
	else
	{
	    pGC->freeCompClip = TRUE;
	    pGC->pCompositeClip = RegionCreate(&pixbounds, 1);
	}

	if (pGC->clientClipType == CT_REGION)
	{
	    if(pDrawable->x || pDrawable->y) {
	        RegionTranslate(pGC->clientClip,
					  pDrawable->x + pGC->clipOrg.x, 
					  pDrawable->y + pGC->clipOrg.y);
	        RegionIntersect(pGC->pCompositeClip,
				pGC->pCompositeClip, pGC->clientClip);
	        RegionTranslate(pGC->clientClip,
					  -(pDrawable->x + pGC->clipOrg.x), 
					  -(pDrawable->y + pGC->clipOrg.y));
	    } else {
	        RegionTranslate(pGC->pCompositeClip,
					 -pGC->clipOrg.x, -pGC->clipOrg.y);
	        RegionIntersect(pGC->pCompositeClip,
				pGC->pCompositeClip, pGC->clientClip);
	        RegionTranslate(pGC->pCompositeClip,
					 pGC->clipOrg.x, pGC->clipOrg.y);
	    }
	}
    }	/* end of composite clip for pixmap */
} /* end miComputeCompositeClip */
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d53 1
a53 1
	REGION_DESTROY(pGC->pScreen, pGC->pCompositeClip);
d71 1
a71 1
	REGION_DESTROY(pGC->pScreen, pGC->clientClip);
d84 1
a84 1
	pGC->clientClip = (pointer) BITMAP_TO_REGION(pGC->pScreen,
d95 1
a95 1
	pGC->clientClip = (pointer) RECTS_TO_REGION(pGC->pScreen, nrects,
d98 1
a98 1
	xfree(pvalue);
d119 2
a120 3
	prgnNew = REGION_CREATE(pgcSrc->pScreen, NULL, 1);
	REGION_COPY(pgcDst->pScreen, prgnNew,
					(RegionPtr) (pgcSrc->clientClip));
a135 5
    ScreenPtr       pScreen;

    /* This prevents warnings about pScreen not being used. */
    pGC->pScreen = pScreen = pGC->pScreen;

d164 1
a164 1
		REGION_DESTROY(pScreen, pGC->pCompositeClip);
d179 1
a179 1
	    REGION_TRANSLATE(pScreen, pGC->clientClip,
d185 1
a185 1
		REGION_INTERSECT(pGC->pScreen, pGC->pCompositeClip,
d188 1
a188 1
		    REGION_DESTROY(pScreen, pregWin);
d192 1
a192 1
		REGION_INTERSECT(pScreen, pregWin, pregWin, pGC->clientClip);
d197 2
a198 2
		pGC->pCompositeClip = REGION_CREATE(pScreen, NullBox, 0);
		REGION_INTERSECT(pScreen, pGC->pCompositeClip,
d202 1
a202 1
	    REGION_TRANSLATE(pScreen, pGC->clientClip,
d220 1
a220 1
	    REGION_RESET(pScreen, pGC->pCompositeClip, &pixbounds);
d225 1
a225 1
	    pGC->pCompositeClip = REGION_CREATE(pScreen, &pixbounds, 1);
d231 1
a231 1
	        REGION_TRANSLATE(pScreen, pGC->clientClip,
d234 1
a234 1
	        REGION_INTERSECT(pScreen, pGC->pCompositeClip,
d236 1
a236 1
	        REGION_TRANSLATE(pScreen, pGC->clientClip,
d240 1
a240 1
	        REGION_TRANSLATE(pScreen, pGC->pCompositeClip,
d242 1
a242 1
	        REGION_INTERSECT(pScreen, pGC->pCompositeClip,
d244 1
a244 1
	        REGION_TRANSLATE(pScreen, pGC->pCompositeClip,
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d41 1
a41 1
_X_EXPORT void
d47 1
a47 1
_X_EXPORT void
d56 1
a56 1
_X_EXPORT void
d77 1
a77 1
_X_EXPORT void
d104 1
a104 1
_X_EXPORT void
d128 1
a128 1
_X_EXPORT void
d134 1
a134 1
_X_EXPORT void
@


1.1
log
@Initial revision
@
text
@d42 1
a42 3
miChangeGC(pGC, mask)
    GCPtr           pGC;
    unsigned long   mask;
d48 1
a48 2
miDestroyGC(pGC)
    GCPtr           pGC;
a53 1
    miDestroyGCOps(pGC->ops);
a55 29
/*
 * create a private op array for a gc
 */

_X_EXPORT GCOpsPtr
miCreateGCOps(prototype)
    GCOpsPtr        prototype;
{
    GCOpsPtr        ret;

     /* XXX */ Must_have_memory = TRUE;
    ret = (GCOpsPtr) xalloc(sizeof(GCOps));
     /* XXX */ Must_have_memory = FALSE;
    if (!ret)
	return 0;
    *ret = *prototype;
    ret->devPrivate.val = 1;
    return ret;
}

_X_EXPORT void
miDestroyGCOps(ops)
    GCOpsPtr        ops;
{
    if (ops->devPrivate.val)
	xfree(ops);
}


d57 1
a57 2
miDestroyClip(pGC)
    GCPtr           pGC;
d78 1
a78 5
miChangeClip(pGC, type, pvalue, nrects)
    GCPtr           pGC;
    int             type;
    pointer         pvalue;
    int             nrects;
d105 1
a105 2
miCopyClip(pgcDst, pgcSrc)
    GCPtr           pgcDst, pgcSrc;
d129 1
a129 4
miCopyGC(pGCSrc, changes, pGCDst)
    GCPtr           pGCSrc;
    unsigned long   changes;
    GCPtr           pGCDst;
d135 1
a135 3
miComputeCompositeClip(pGC, pDrawable)
    GCPtr           pGC;
    DrawablePtr     pDrawable;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
