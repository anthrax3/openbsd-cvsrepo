head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.8
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.6
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.10
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.8
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.6
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.09.16.19.10.25;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	Te1daavkBLskZ8gc;

1.8
date	2014.09.27.17.53.04;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	cVXoV5PxI8YrEaVA;

1.7
date	2012.06.10.13.21.30;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.37;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.14.15;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.14.15;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.35;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/***********************************************************

Copyright 1987, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

#ifndef MI_H
#define MI_H
#include <X11/X.h>
#include "region.h"
#include "validate.h"
#include "window.h"
#include "gc.h"
#include <X11/fonts/font.h>
#include "input.h"
#include "cursor.h"
#include "privates.h"
#include "colormap.h"
#include "events.h"

#define MiBits	CARD32

typedef struct _miDash *miDashPtr;

#define EVEN_DASH	0
#define ODD_DASH	~0

/* miarc.c */

extern _X_EXPORT void miWideArc(DrawablePtr pDraw,
                                GCPtr pGC,
                                int narcs,
                                xArc * parcs);

extern _X_EXPORT void miPolyArc(DrawablePtr /*pDraw */ ,
                                GCPtr /*pGC */ ,
                                int /*narcs */ ,
                                xArc *  /*parcs */
    );

/* mibitblt.c */

extern _X_EXPORT RegionPtr miCopyArea(DrawablePtr /*pSrcDrawable */ ,
                                      DrawablePtr /*pDstDrawable */ ,
                                      GCPtr /*pGC */ ,
                                      int /*xIn */ ,
                                      int /*yIn */ ,
                                      int /*widthSrc */ ,
                                      int /*heightSrc */ ,
                                      int /*xOut */ ,
                                      int       /*yOut */
    );

extern _X_EXPORT RegionPtr miCopyPlane(DrawablePtr /*pSrcDrawable */ ,
                                       DrawablePtr /*pDstDrawable */ ,
                                       GCPtr /*pGC */ ,
                                       int /*srcx */ ,
                                       int /*srcy */ ,
                                       int /*width */ ,
                                       int /*height */ ,
                                       int /*dstx */ ,
                                       int /*dsty */ ,
                                       unsigned long    /*bitPlane */
    );

extern _X_EXPORT void miGetImage(DrawablePtr /*pDraw */ ,
                                 int /*sx */ ,
                                 int /*sy */ ,
                                 int /*w */ ,
                                 int /*h */ ,
                                 unsigned int /*format */ ,
                                 unsigned long /*planeMask */ ,
                                 char * /*pdstLine */
    );

extern _X_EXPORT void miPutImage(DrawablePtr /*pDraw */ ,
                                 GCPtr /*pGC */ ,
                                 int /*depth */ ,
                                 int /*x */ ,
                                 int /*y */ ,
                                 int /*w */ ,
                                 int /*h */ ,
                                 int /*leftPad */ ,
                                 int /*format */ ,
                                 char * /*pImage */
    );

/* micopy.c  */

#define miGetCompositeClip(pGC) ((pGC)->pCompositeClip)

typedef void (*miCopyProc) (DrawablePtr pSrcDrawable,
                            DrawablePtr pDstDrawable,
                            GCPtr pGC,
                            BoxPtr pDstBox,
                            int nbox,
                            int dx,
                            int dy,
                            Bool reverse,
                            Bool upsidedown, Pixel bitplane, void *closure);

extern _X_EXPORT void

miCopyRegion(DrawablePtr pSrcDrawable,
             DrawablePtr pDstDrawable,
             GCPtr pGC,
             RegionPtr pDstRegion,
             int dx,
             int dy, miCopyProc copyProc, Pixel bitPlane, void *closure);

extern _X_EXPORT RegionPtr

miDoCopy(DrawablePtr pSrcDrawable,
         DrawablePtr pDstDrawable,
         GCPtr pGC,
         int xIn,
         int yIn,
         int widthSrc,
         int heightSrc,
         int xOut,
         int yOut, miCopyProc copyProc, Pixel bitplane, void *closure);

/* micursor.c */

extern _X_EXPORT void miRecolorCursor(DeviceIntPtr /* pDev */ ,
                                      ScreenPtr /*pScr */ ,
                                      CursorPtr /*pCurs */ ,
                                      Bool      /*displayed */
    );

/* midash.c */

extern _X_EXPORT void miStepDash(int /*dist */ ,
                                 int * /*pDashIndex */ ,
                                 unsigned char * /*pDash */ ,
                                 int /*numInDashList */ ,
                                 int *  /*pDashOffset */
    );

/* mieq.c */

#ifndef INPUT_H
typedef struct _DeviceRec *DevicePtr;
#endif

extern _X_EXPORT Bool mieqInit(void
    );

extern _X_EXPORT void mieqFini(void);

extern _X_EXPORT void mieqEnqueue(DeviceIntPtr /*pDev */ ,
                                  InternalEvent *       /*e */
    );

extern _X_EXPORT void mieqSwitchScreen(DeviceIntPtr /* pDev */ ,
                                       ScreenPtr /*pScreen */ ,
                                       Bool     /*set_dequeue_screen */
    );

extern _X_EXPORT void mieqProcessDeviceEvent(DeviceIntPtr /* dev */ ,
                                             InternalEvent * /* event */ ,
                                             ScreenPtr  /* screen */
    );

extern _X_EXPORT void mieqProcessInputEvents(void
    );

extern DeviceIntPtr CopyGetMasterEvent(DeviceIntPtr /* sdev */ ,
                                       InternalEvent * /* original */ ,
                                       InternalEvent *  /* copy */
    );

/**
 * Custom input event handler. If you need to process input events in some
 * other way than the default path, register an input event handler for the
 * given internal event type.
 */
typedef void (*mieqHandler) (int screen, InternalEvent *event,
                             DeviceIntPtr dev);
void _X_EXPORT mieqSetHandler(int event, mieqHandler handler);

/* miexpose.c */

extern _X_EXPORT RegionPtr miHandleExposures(DrawablePtr /*pSrcDrawable */ ,
                                             DrawablePtr /*pDstDrawable */ ,
                                             GCPtr /*pGC */ ,
                                             int /*srcx */ ,
                                             int /*srcy */ ,
                                             int /*width */ ,
                                             int /*height */ ,
                                             int /*dstx */ ,
                                             int /*dsty */
    );

extern _X_EXPORT void miSendExposures(WindowPtr /*pWin */ ,
                                      RegionPtr /*pRgn */ ,
                                      int /*dx */ ,
                                      int       /*dy */
    );

extern _X_EXPORT void miWindowExposures(WindowPtr /*pWin */ ,
                                        RegionPtr /*prgn */);

extern _X_EXPORT void miPaintWindow(WindowPtr /*pWin */ ,
                                    RegionPtr /*prgn */ ,
                                    int /*what */
    );

extern _X_EXPORT void miClearDrawable(DrawablePtr /*pDraw */ ,
                                      GCPtr     /*pGC */
    );

/* mifillrct.c */

extern _X_EXPORT void miPolyFillRect(DrawablePtr /*pDrawable */ ,
                                     GCPtr /*pGC */ ,
                                     int /*nrectFill */ ,
                                     xRectangle *       /*prectInit */
    );

/* miglblt.c */

extern _X_EXPORT void miPolyGlyphBlt(DrawablePtr pDrawable,
                                     GCPtr pGC,
                                     int x,
                                     int y,
                                     unsigned int nglyph,
                                     CharInfoPtr *ppci,
                                     void *pglyphBase
    );

extern _X_EXPORT void miImageGlyphBlt(DrawablePtr pDrawable,
                                      GCPtr pGC,
                                      int x,
                                      int y,
                                      unsigned int nglyph,
                                      CharInfoPtr *ppci,
                                      void *pglyphBase
    );

/* mipoly.c */

extern _X_EXPORT void miFillPolygon(DrawablePtr /*dst */ ,
                                    GCPtr /*pgc */ ,
                                    int /*shape */ ,
                                    int /*mode */ ,
                                    int /*count */ ,
                                    DDXPointPtr /*pPts */
    );

/* mipolypnt.c */

extern _X_EXPORT void miPolyPoint(DrawablePtr /*pDrawable */ ,
                                  GCPtr /*pGC */ ,
                                  int /*mode */ ,
                                  int /*npt */ ,
                                  xPoint *      /*pptInit */
    );

/* mipolyrect.c */

extern _X_EXPORT void miPolyRectangle(DrawablePtr /*pDraw */ ,
                                      GCPtr /*pGC */ ,
                                      int /*nrects */ ,
                                      xRectangle *      /*pRects */
    );

/* mipolyseg.c */

extern _X_EXPORT void miPolySegment(DrawablePtr /*pDraw */ ,
                                    GCPtr /*pGC */ ,
                                    int /*nseg */ ,
                                    xSegment *  /*pSegs */
    );

/* mipolytext.c */

extern _X_EXPORT int miPolyText8(DrawablePtr /*pDraw */ ,
                                 GCPtr /*pGC */ ,
                                 int /*x */ ,
                                 int /*y */ ,
                                 int /*count */ ,
                                 char * /*chars */
    );

extern _X_EXPORT int miPolyText16(DrawablePtr /*pDraw */ ,
                                  GCPtr /*pGC */ ,
                                  int /*x */ ,
                                  int /*y */ ,
                                  int /*count */ ,
                                  unsigned short *      /*chars */
    );

extern _X_EXPORT void miImageText8(DrawablePtr /*pDraw */ ,
                                   GCPtr /*pGC */ ,
                                   int /*x */ ,
                                   int /*y */ ,
                                   int /*count */ ,
                                   char *       /*chars */
    );

extern _X_EXPORT void miImageText16(DrawablePtr /*pDraw */ ,
                                    GCPtr /*pGC */ ,
                                    int /*x */ ,
                                    int /*y */ ,
                                    int /*count */ ,
                                    unsigned short *    /*chars */
    );

/* mipushpxl.c */

extern _X_EXPORT void miPushPixels(GCPtr /*pGC */ ,
                                   PixmapPtr /*pBitMap */ ,
                                   DrawablePtr /*pDrawable */ ,
                                   int /*dx */ ,
                                   int /*dy */ ,
                                   int /*xOrg */ ,
                                   int  /*yOrg */
    );

/* miscrinit.c */

extern _X_EXPORT Bool miModifyPixmapHeader(PixmapPtr pPixmap,
                                           int width,
                                           int height,
                                           int depth,
                                           int bitsPerPixel,
                                           int devKind,
                                           void *pPixData
    );

extern _X_EXPORT Bool miCreateScreenResources(ScreenPtr /*pScreen */
    );

extern _X_EXPORT Bool miScreenDevPrivateInit(ScreenPtr pScreen,
                                             int width,
                                             void *pbits
    );

extern _X_EXPORT Bool miScreenInit(ScreenPtr pScreen,
                                   void *pbits,
                                   int xsize,
                                   int ysize,
                                   int dpix,
                                   int dpiy,
                                   int width,
                                   int rootDepth,
                                   int numDepths,
                                   DepthPtr depths,
                                   VisualID rootVisual,
                                   int numVisuals,
                                   VisualPtr visuals
    );

/* mivaltree.c */

extern _X_EXPORT int miShapedWindowIn(RegionPtr /*universe */ ,
                                      RegionPtr /*bounding */ ,
                                      BoxPtr /*rect */ ,
                                      int /*x */ ,
                                      int       /*y */
    );

extern _X_EXPORT int miValidateTree(WindowPtr /*pParent */ ,
                                    WindowPtr /*pChild */ ,
                                    VTKind      /*kind */
    );

extern _X_EXPORT void miWideLine(DrawablePtr /*pDrawable */ ,
                                 GCPtr /*pGC */ ,
                                 int /*mode */ ,
                                 int /*npt */ ,
                                 DDXPointPtr    /*pPts */
    );

extern _X_EXPORT void miWideDash(DrawablePtr /*pDrawable */ ,
                                 GCPtr /*pGC */ ,
                                 int /*mode */ ,
                                 int /*npt */ ,
                                 DDXPointPtr    /*pPts */
    );

extern _X_EXPORT void miPolylines(DrawablePtr pDrawable,
                                  GCPtr pGC,
                                  int mode,
                                  int npt,
                                  DDXPointPtr pPts);

/* miwindow.c */

extern _X_EXPORT void miClearToBackground(WindowPtr /*pWin */ ,
                                          int /*x */ ,
                                          int /*y */ ,
                                          int /*w */ ,
                                          int /*h */ ,
                                          Bool  /*generateExposures */
    );

extern _X_EXPORT void miMarkWindow(WindowPtr    /*pWin */
    );

extern _X_EXPORT Bool miMarkOverlappedWindows(WindowPtr /*pWin */ ,
                                              WindowPtr /*pFirst */ ,
                                              WindowPtr *       /*ppLayerWin */
    );

extern _X_EXPORT void miHandleValidateExposures(WindowPtr       /*pWin */
    );

extern _X_EXPORT void miMoveWindow(WindowPtr /*pWin */ ,
                                   int /*x */ ,
                                   int /*y */ ,
                                   WindowPtr /*pNextSib */ ,
                                   VTKind       /*kind */
    );

extern _X_EXPORT void miResizeWindow(WindowPtr /*pWin */ ,
                                     int /*x */ ,
                                     int /*y */ ,
                                     unsigned int /*w */ ,
                                     unsigned int /*h */ ,
                                     WindowPtr    /*pSib */
    );

extern _X_EXPORT WindowPtr miGetLayerWindow(WindowPtr   /*pWin */
    );

extern _X_EXPORT void miSetShape(WindowPtr /*pWin */ ,
                                 int    /*kind */
    );

extern _X_EXPORT void miChangeBorderWidth(WindowPtr /*pWin */ ,
                                          unsigned int  /*width */
    );

extern _X_EXPORT void miMarkUnrealizedWindow(WindowPtr /*pChild */ ,
                                             WindowPtr /*pWin */ ,
                                             Bool       /*fromConfigure */
    );

extern _X_EXPORT WindowPtr miSpriteTrace(SpritePtr pSprite, int x, int y);

extern _X_EXPORT WindowPtr miXYToWindow(ScreenPtr pScreen, SpritePtr pSprite, int x, int y);

/* mizerarc.c */

extern _X_EXPORT void miZeroPolyArc(DrawablePtr /*pDraw */ ,
                                    GCPtr /*pGC */ ,
                                    int /*narcs */ ,
                                    xArc *      /*parcs */
    );

/* mizerline.c */

extern _X_EXPORT void miZeroLine(DrawablePtr /*dst */ ,
                                 GCPtr /*pgc */ ,
                                 int /*mode */ ,
                                 int /*nptInit */ ,
                                 DDXPointRec *  /*pptInit */
    );

extern _X_EXPORT void miZeroDashLine(DrawablePtr /*dst */ ,
                                     GCPtr /*pgc */ ,
                                     int /*mode */ ,
                                     int /*nptInit */ ,
                                     DDXPointRec *      /*pptInit */
    );

extern _X_EXPORT void miPolyFillArc(DrawablePtr /*pDraw */ ,
                                    GCPtr /*pGC */ ,
                                    int /*narcs */ ,
                                    xArc *      /*parcs */
    );

#endif                          /* MI_H */
@


1.8
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d29 2
a30 2
Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
d32 1
a32 1
both that copyright notice and this permission notice appear in 
d35 1
a35 1
software without specific, written prior permission.  
d70 5
d232 1
a232 9
                                             int /*dsty */ ,
                                             unsigned long      /*plane */
    );

extern _X_EXPORT void miSendGraphicsExpose(ClientPtr /*client */ ,
                                           RegionPtr /*pRgn */ ,
                                           XID /*drawable */ ,
                                           int /*major */ ,
                                           int  /*minor */
d242 1
a242 3
                                        RegionPtr /*prgn */ ,
                                        RegionPtr       /*other_exposed */
    );
d263 16
a278 16
extern _X_EXPORT void miPolyGlyphBlt(DrawablePtr /*pDrawable */ ,
                                     GCPtr /*pGC */ ,
                                     int /*x */ ,
                                     int /*y */ ,
                                     unsigned int /*nglyph */ ,
                                     CharInfoPtr * /*ppci */ ,
                                     void */*pglyphBase */
    );

extern _X_EXPORT void miImageGlyphBlt(DrawablePtr /*pDrawable */ ,
                                      GCPtr /*pGC */ ,
                                      int /*x */ ,
                                      int /*y */ ,
                                      unsigned int /*nglyph */ ,
                                      CharInfoPtr * /*ppci */ ,
                                      void */*pglyphBase */
a290 16
/* mipolycon.c */

extern _X_EXPORT Bool miFillConvexPoly(DrawablePtr /*dst */ ,
                                       GCPtr /*pgc */ ,
                                       int /*count */ ,
                                       DDXPointPtr      /*ptsIn */
    );

/* mipolygen.c */

extern _X_EXPORT Bool miFillGeneralPoly(DrawablePtr /*dst */ ,
                                        GCPtr /*pgc */ ,
                                        int /*count */ ,
                                        DDXPointPtr     /*ptsIn */
    );

d363 7
a369 7
extern _X_EXPORT Bool miModifyPixmapHeader(PixmapPtr /*pPixmap */ ,
                                           int /*width */ ,
                                           int /*height */ ,
                                           int /*depth */ ,
                                           int /*bitsPerPixel */ ,
                                           int /*devKind */ ,
                                           void */*pPixData */
d375 18
a392 18
extern _X_EXPORT Bool miScreenDevPrivateInit(ScreenPtr /*pScreen */ ,
                                             int /*width */ ,
                                             void */*pbits */
    );

extern _X_EXPORT Bool miScreenInit(ScreenPtr /*pScreen */ ,
                                   void */*pbits */ ,
                                   int /*xsize */ ,
                                   int /*ysize */ ,
                                   int /*dpix */ ,
                                   int /*dpiy */ ,
                                   int /*width */ ,
                                   int /*rootDepth */ ,
                                   int /*numDepths */ ,
                                   DepthPtr /*depths */ ,
                                   VisualID /*rootVisual */ ,
                                   int /*numVisuals */ ,
                                   VisualPtr    /*visuals */
a403 11
typedef void
 (*SetRedirectBorderClipProcPtr) (WindowPtr pWindow, RegionPtr pRegion);

typedef RegionPtr
 (*GetRedirectBorderClipProcPtr) (WindowPtr pWindow);

extern _X_EXPORT void

miRegisterRedirectBorderClipProc(SetRedirectBorderClipProcPtr setBorderClip,
                                 GetRedirectBorderClipProcPtr getBorderClip);

d423 6
d457 6
a462 6
extern _X_EXPORT void miSlideAndSizeWindow(WindowPtr /*pWin */ ,
                                           int /*x */ ,
                                           int /*y */ ,
                                           unsigned int /*w */ ,
                                           unsigned int /*h */ ,
                                           WindowPtr    /*pSib */
a479 3

extern _X_EXPORT void miSegregateChildren(WindowPtr pWin, RegionPtr pReg,
                                          int depth);
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d274 1
a274 1
                                     pointer    /*pglyphBase */
d283 1
a283 1
                                      pointer   /*pglyphBase */
d390 1
a390 1
                                           pointer      /*pPixData */
d398 1
a398 1
                                             pointer    /*pbits */
d402 1
a402 1
                                   pointer /*pbits */ ,
d509 4
@


1.6
log
@Update to xserver 1.11.2
@
text
@a24 1

d64 1
d70 5
a74 6
extern _X_EXPORT void miPolyArc(
    DrawablePtr /*pDraw*/,
    GCPtr /*pGC*/,
    int /*narcs*/,
    xArc * /*parcs*/
);
d78 44
a121 48
extern _X_EXPORT RegionPtr miCopyArea(
    DrawablePtr /*pSrcDrawable*/,
    DrawablePtr /*pDstDrawable*/,
    GCPtr /*pGC*/,
    int /*xIn*/,
    int /*yIn*/,
    int /*widthSrc*/,
    int /*heightSrc*/,
    int /*xOut*/,
    int /*yOut*/
);

extern _X_EXPORT RegionPtr miCopyPlane(
    DrawablePtr /*pSrcDrawable*/,
    DrawablePtr /*pDstDrawable*/,
    GCPtr /*pGC*/,
    int /*srcx*/,
    int /*srcy*/,
    int /*width*/,
    int /*height*/,
    int /*dstx*/,
    int /*dsty*/,
    unsigned long /*bitPlane*/
);

extern _X_EXPORT void miGetImage(
    DrawablePtr /*pDraw*/,
    int /*sx*/,
    int /*sy*/,
    int /*w*/,
    int /*h*/,
    unsigned int /*format*/,
    unsigned long /*planeMask*/,
    char * /*pdstLine*/
);

extern _X_EXPORT void miPutImage(
    DrawablePtr /*pDraw*/,
    GCPtr /*pGC*/,
    int /*depth*/,
    int /*x*/,
    int /*y*/,
    int /*w*/,
    int /*h*/,
    int /*leftPad*/,
    int /*format*/,
    char * /*pImage*/
);
d127 9
a135 11
typedef void	(*miCopyProc) (DrawablePtr  pSrcDrawable,
			       DrawablePtr  pDstDrawable,
			       GCPtr	    pGC,
			       BoxPtr	    pDstBox,
			       int	    nbox,
			       int	    dx,
			       int	    dy,
			       Bool	    reverse,
			       Bool	    upsidedown,
			       Pixel	    bitplane,
			       void	    *closure);
d138 7
a144 9
miCopyRegion (DrawablePtr   pSrcDrawable,
	      DrawablePtr   pDstDrawable,
	      GCPtr	    pGC,
	      RegionPtr	    pDstRegion,
	      int	    dx,
	      int	    dy,
	      miCopyProc    copyProc,
	      Pixel	    bitPlane,
	      void	    *closure);
d147 10
a156 12
miDoCopy (DrawablePtr	pSrcDrawable,
	  DrawablePtr	pDstDrawable,
	  GCPtr		pGC,
	  int		xIn, 
	  int		yIn,
	  int		widthSrc, 
	  int		heightSrc,
	  int		xOut, 
	  int		yOut,
	  miCopyProc	copyProc,
	  Pixel		bitplane,
	  void		*closure);
d160 5
a164 6
extern _X_EXPORT void miRecolorCursor(
    DeviceIntPtr /* pDev */,
    ScreenPtr /*pScr*/,
    CursorPtr /*pCurs*/,
    Bool /*displayed*/
);
d168 6
a173 7
extern _X_EXPORT void miStepDash(
    int /*dist*/,
    int * /*pDashIndex*/,
    unsigned char * /*pDash*/,
    int /*numInDashList*/,
    int * /*pDashOffset*/
);
a176 1

d181 2
a182 3
extern _X_EXPORT Bool mieqInit(
    void
);
d186 21
a206 26
extern _X_EXPORT void mieqEnqueue(
    DeviceIntPtr /*pDev*/,
    InternalEvent* /*e*/
);

extern _X_EXPORT void mieqSwitchScreen(
    DeviceIntPtr /* pDev */,
    ScreenPtr /*pScreen*/,
    Bool /*fromDIX*/
);

extern _X_EXPORT void mieqProcessDeviceEvent(
    DeviceIntPtr /* dev*/,
    InternalEvent* /* event */,
    ScreenPtr /* screen*/
);

extern _X_EXPORT void mieqProcessInputEvents(
    void
);

extern DeviceIntPtr CopyGetMasterEvent(
    DeviceIntPtr /* sdev */,
    InternalEvent* /* original */,
    InternalEvent* /* copy */
);
d213 2
a214 1
typedef void (*mieqHandler)(int screen, InternalEvent* event, DeviceIntPtr dev);
d219 38
a256 44
extern _X_EXPORT RegionPtr miHandleExposures(
    DrawablePtr /*pSrcDrawable*/,
    DrawablePtr /*pDstDrawable*/,
    GCPtr /*pGC*/,
    int /*srcx*/,
    int /*srcy*/,
    int /*width*/,
    int /*height*/,
    int /*dstx*/,
    int /*dsty*/,
    unsigned long /*plane*/
);

extern _X_EXPORT void miSendGraphicsExpose(
    ClientPtr /*client*/,
    RegionPtr /*pRgn*/,
    XID /*drawable*/,
    int /*major*/,
    int /*minor*/
);

extern _X_EXPORT void miSendExposures(
    WindowPtr /*pWin*/,
    RegionPtr /*pRgn*/,
    int /*dx*/,
    int /*dy*/
);

extern _X_EXPORT void miWindowExposures(
    WindowPtr /*pWin*/,
    RegionPtr /*prgn*/,
    RegionPtr /*other_exposed*/
);

extern _X_EXPORT void miPaintWindow(
    WindowPtr /*pWin*/,
    RegionPtr /*prgn*/,
    int /*what*/
);

extern _X_EXPORT void miClearDrawable(
    DrawablePtr /*pDraw*/,
    GCPtr /*pGC*/
);
d260 5
a264 6
extern _X_EXPORT void miPolyFillRect(
    DrawablePtr /*pDrawable*/,
    GCPtr /*pGC*/,
    int /*nrectFill*/,
    xRectangle * /*prectInit*/
);
d268 17
a284 19
extern _X_EXPORT void miPolyGlyphBlt(
    DrawablePtr /*pDrawable*/,
    GCPtr /*pGC*/,
    int /*x*/,
    int /*y*/,
    unsigned int /*nglyph*/,
    CharInfoPtr * /*ppci*/,
    pointer /*pglyphBase*/
);

extern _X_EXPORT void miImageGlyphBlt(
    DrawablePtr /*pDrawable*/,
    GCPtr /*pGC*/,
    int /*x*/,
    int /*y*/,
    unsigned int /*nglyph*/,
    CharInfoPtr * /*ppci*/,
    pointer /*pglyphBase*/
);
d288 7
a294 8
extern _X_EXPORT void miFillPolygon(
    DrawablePtr /*dst*/,
    GCPtr /*pgc*/,
    int /*shape*/,
    int /*mode*/,
    int /*count*/,
    DDXPointPtr /*pPts*/
);
d298 5
a302 6
extern _X_EXPORT Bool miFillConvexPoly(
    DrawablePtr /*dst*/,
    GCPtr /*pgc*/,
    int /*count*/,
    DDXPointPtr /*ptsIn*/
);
d306 5
a310 6
extern _X_EXPORT Bool miFillGeneralPoly(
    DrawablePtr /*dst*/,
    GCPtr /*pgc*/,
    int /*count*/,
    DDXPointPtr /*ptsIn*/
);
d314 6
a319 7
extern _X_EXPORT void miPolyPoint(
    DrawablePtr /*pDrawable*/,
    GCPtr /*pGC*/,
    int /*mode*/,
    int /*npt*/,
    xPoint * /*pptInit*/
);
d323 5
a327 6
extern _X_EXPORT void miPolyRectangle(
    DrawablePtr /*pDraw*/,
    GCPtr /*pGC*/,
    int /*nrects*/,
    xRectangle * /*pRects*/
);
d331 5
a335 6
extern _X_EXPORT void miPolySegment(
    DrawablePtr /*pDraw*/,
    GCPtr /*pGC*/,
    int /*nseg*/,
    xSegment * /*pSegs*/
);
d339 31
a369 35
extern _X_EXPORT int miPolyText8(
    DrawablePtr /*pDraw*/,
    GCPtr /*pGC*/,
    int /*x*/,
    int /*y*/,
    int /*count*/,
    char * /*chars*/
);

extern _X_EXPORT int miPolyText16(
    DrawablePtr /*pDraw*/,
    GCPtr /*pGC*/,
    int /*x*/,
    int /*y*/,
    int /*count*/,
    unsigned short * /*chars*/
);

extern _X_EXPORT void miImageText8(
    DrawablePtr /*pDraw*/,
    GCPtr /*pGC*/,
    int /*x*/,
    int /*y*/,
    int /*count*/,
    char * /*chars*/
);

extern _X_EXPORT void miImageText16(
    DrawablePtr /*pDraw*/,
    GCPtr /*pGC*/,
    int /*x*/,
    int /*y*/,
    int /*count*/,
    unsigned short * /*chars*/
);
d373 8
a380 9
extern _X_EXPORT void miPushPixels(
    GCPtr /*pGC*/,
    PixmapPtr /*pBitMap*/,
    DrawablePtr /*pDrawable*/,
    int /*dx*/,
    int /*dy*/,
    int /*xOrg*/,
    int /*yOrg*/
);
d384 31
a414 35
extern _X_EXPORT Bool miModifyPixmapHeader(
    PixmapPtr /*pPixmap*/,
    int /*width*/,
    int /*height*/,
    int /*depth*/,
    int /*bitsPerPixel*/,
    int /*devKind*/,
    pointer /*pPixData*/
);

extern _X_EXPORT Bool miCreateScreenResources(
    ScreenPtr /*pScreen*/
);

extern _X_EXPORT Bool miScreenDevPrivateInit(
    ScreenPtr /*pScreen*/,
    int /*width*/,
    pointer /*pbits*/
);

extern _X_EXPORT Bool miScreenInit(
    ScreenPtr /*pScreen*/,
    pointer /*pbits*/,
    int /*xsize*/,
    int /*ysize*/,
    int /*dpix*/,
    int /*dpiy*/,
    int /*width*/,
    int /*rootDepth*/,
    int /*numDepths*/,
    DepthPtr /*depths*/,
    VisualID /*rootVisual*/,
    int /*numVisuals*/,
    VisualPtr /*visuals*/
);
d418 6
a423 7
extern _X_EXPORT int miShapedWindowIn(
    RegionPtr /*universe*/,
    RegionPtr /*bounding*/,
    BoxPtr /*rect*/,
    int /*x*/,
    int /*y*/
);
d425 2
a426 2
typedef void 
(*SetRedirectBorderClipProcPtr) (WindowPtr pWindow, RegionPtr pRegion);
d429 1
a429 1
(*GetRedirectBorderClipProcPtr) (WindowPtr pWindow);
a431 2
miRegisterRedirectBorderClipProc (SetRedirectBorderClipProcPtr setBorderClip,
				  GetRedirectBorderClipProcPtr getBorderClip);
d433 21
a453 21
extern _X_EXPORT int miValidateTree(
    WindowPtr /*pParent*/,
    WindowPtr /*pChild*/,
    VTKind /*kind*/
);

extern _X_EXPORT void miWideLine(
    DrawablePtr /*pDrawable*/,
    GCPtr /*pGC*/,
    int /*mode*/,
    int /*npt*/,
    DDXPointPtr /*pPts*/
);

extern _X_EXPORT void miWideDash(
    DrawablePtr /*pDrawable*/,
    GCPtr /*pGC*/,
    int /*mode*/,
    int /*npt*/,
    DDXPointPtr /*pPts*/
);
d457 49
a505 59
extern _X_EXPORT void miClearToBackground(
    WindowPtr /*pWin*/,
    int /*x*/,
    int /*y*/,
    int /*w*/,
    int /*h*/,
    Bool /*generateExposures*/
);

extern _X_EXPORT void miMarkWindow(
    WindowPtr /*pWin*/
);

extern _X_EXPORT Bool miMarkOverlappedWindows(
    WindowPtr /*pWin*/,
    WindowPtr /*pFirst*/,
    WindowPtr * /*ppLayerWin*/
);

extern _X_EXPORT void miHandleValidateExposures(
    WindowPtr /*pWin*/
);

extern _X_EXPORT void miMoveWindow(
    WindowPtr /*pWin*/,
    int /*x*/,
    int /*y*/,
    WindowPtr /*pNextSib*/,
    VTKind /*kind*/
);

extern _X_EXPORT void miSlideAndSizeWindow(
    WindowPtr /*pWin*/,
    int /*x*/,
    int /*y*/,
    unsigned int /*w*/,
    unsigned int /*h*/,
    WindowPtr /*pSib*/
);

extern _X_EXPORT WindowPtr miGetLayerWindow(
    WindowPtr /*pWin*/
);

extern _X_EXPORT void miSetShape(
    WindowPtr /*pWin*/,
    int /*kind*/
);

extern _X_EXPORT void miChangeBorderWidth(
    WindowPtr /*pWin*/,
    unsigned int /*width*/
);

extern _X_EXPORT void miMarkUnrealizedWindow(
    WindowPtr /*pChild*/,
    WindowPtr /*pWin*/,
    Bool /*fromConfigure*/
);
d507 2
a508 1
extern _X_EXPORT void miSegregateChildren(WindowPtr pWin, RegionPtr pReg, int depth);
d512 5
a516 6
extern _X_EXPORT void miZeroPolyArc(
    DrawablePtr /*pDraw*/,
    GCPtr /*pGC*/,
    int /*narcs*/,
    xArc * /*parcs*/
);
d520 19
a538 22
extern _X_EXPORT void miZeroLine(
    DrawablePtr /*dst*/,
    GCPtr /*pgc*/,
    int /*mode*/,
    int /*nptInit*/,
    DDXPointRec * /*pptInit*/
);

extern _X_EXPORT void miZeroDashLine(
    DrawablePtr /*dst*/,
    GCPtr /*pgc*/,
    int /*mode*/,
    int /*nptInit*/,
    DDXPointRec * /*pptInit*/
);

extern _X_EXPORT void miPolyFillArc(
    DrawablePtr /*pDraw*/,
    GCPtr /*pGC*/,
    int /*narcs*/,
    xArc * /*parcs*/
);
d540 1
a540 1
#endif /* MI_H */
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a458 4
extern _X_EXPORT DevPrivateKey miAllocateGCPrivateIndex(
    void
);

@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a420 17
/* miregion.c */

/* see also region.h */

extern _X_EXPORT Bool miRectAlloc(
    RegionPtr /*pRgn*/,
    int /*n*/
);

#ifdef DEBUG
extern _X_EXPORT Bool miValidRegion(
    RegionPtr /*prgn*/
);
#endif

extern _X_EXPORT Bool miRegionBroken(RegionPtr pReg);

a465 1
    ScreenPtr /*pScreen*/,
d552 2
a553 1
    WindowPtr /*pWin*/
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d59 2
d70 1
a70 1
extern void miPolyArc(
d79 1
a79 1
extern RegionPtr miCopyArea(
d91 1
a91 1
extern RegionPtr miCopyPlane(
d104 1
a104 1
extern void miGetImage(
d115 1
a115 1
extern void miPutImage(
d128 41
d171 1
a171 1
extern void miRecolorCursor(
d180 1
a180 1
extern void miStepDash(
d195 1
a195 1
extern Bool mieqInit(
d199 1
a199 3
extern void mieqResizeEvents(
    int /* min_size */
);
d201 1
a201 1
extern void mieqEnqueue(
d203 1
a203 1
    xEventPtr /*e*/
d206 1
a206 1
extern void mieqSwitchScreen(
d212 7
a218 1
extern void mieqProcessInputEvents(
d222 5
a226 2
typedef void (*mieqHandler)(int, xEventPtr, DeviceIntPtr, int);
void mieqSetHandler(int event, mieqHandler handler);
d228 7
a234 3
void
CopyGetMasterEvent(DeviceIntPtr mdev, DeviceIntPtr sdev, xEvent* original,
                   EventListPtr master, int count);
d238 1
a238 1
extern RegionPtr miHandleExposures(
d251 1
a251 1
extern void miSendGraphicsExpose(
d259 1
a259 1
extern void miSendExposures(
d266 1
a266 1
extern void miWindowExposures(
d272 1
a272 1
extern void miPaintWindow(
d278 1
a278 1
extern void miClearDrawable(
d285 1
a285 1
extern void miPolyFillRect(
d294 1
a294 1
extern void miPolyGlyphBlt(
d304 1
a304 1
extern void miImageGlyphBlt(
d316 1
a316 1
extern void miFillPolygon(
d327 1
a327 1
extern Bool miFillConvexPoly(
d336 1
a336 1
extern Bool miFillGeneralPoly(
d345 1
a345 1
extern void miPolyPoint(
d355 1
a355 1
extern void miPolyRectangle(
d364 1
a364 1
extern void miPolySegment(
d373 1
a373 1
extern int miPolyText8(
d382 1
a382 1
extern int miPolyText16(
d391 1
a391 1
extern void miImageText8(
d400 1
a400 1
extern void miImageText16(
d411 1
a411 1
extern void miPushPixels(
d425 1
a425 1
extern Bool miRectAlloc(
d431 1
a431 1
extern Bool miValidRegion(
d436 1
a436 1
extern Bool miRegionBroken(RegionPtr pReg);
d440 1
a440 1
extern Bool miModifyPixmapHeader(
d450 1
a450 1
extern Bool miCreateScreenResources(
d454 1
a454 1
extern Bool miScreenDevPrivateInit(
d460 1
a460 1
extern Bool miScreenInit(
d476 1
a476 1
extern DevPrivateKey miAllocateGCPrivateIndex(
d482 1
a482 1
extern int miShapedWindowIn(
d497 1
a497 1
void
d501 1
a501 1
extern int miValidateTree(
d507 1
a507 1
extern void miWideLine(
d515 1
a515 1
extern void miWideDash(
d525 1
a525 1
extern void miClearToBackground(
d534 1
a534 1
extern void miMarkWindow(
d538 1
a538 1
extern Bool miMarkOverlappedWindows(
d544 1
a544 1
extern void miHandleValidateExposures(
d548 1
a548 1
extern void miMoveWindow(
d556 1
a556 1
extern void miSlideAndSizeWindow(
d565 1
a565 1
extern WindowPtr miGetLayerWindow(
d569 1
a569 1
extern void miSetShape(
d573 1
a573 1
extern void miChangeBorderWidth(
d578 1
a578 1
extern void miMarkUnrealizedWindow(
d584 1
a584 1
extern void miSegregateChildren(WindowPtr pWin, RegionPtr pReg, int depth);
d588 1
a588 1
extern void miZeroPolyArc(
d597 1
a597 1
extern void miZeroLine(
d605 1
a605 1
extern void miZeroDashLine(
d613 1
a613 1
extern void miPolyFillArc(
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d129 1
d156 4
d166 1
d178 4
a375 4
extern int miFindMaxBand(
    RegionPtr /*prgn*/
);

a425 8
extern PixmapPtr miGetScreenPixmap(
    ScreenPtr pScreen
);

extern void miSetScreenPixmap(
    PixmapPtr pPix
);

a477 10
);

extern Bool miChangeSaveUnder(
    WindowPtr /*pWin*/,
    WindowPtr /*first*/
);

extern void miPostChangeSaveUnder(
    WindowPtr /*pWin*/,
    WindowPtr /*pFirst*/
@


1.1
log
@Initial revision
@
text
@d58 1
a88 12
extern void miOpqStipDrawable(
    DrawablePtr /*pDraw*/,
    GCPtr /*pGC*/,
    RegionPtr /*prgnSrc*/,
    MiBits * /*pbits*/,
    int /*srcx*/,
    int /*w*/,
    int /*h*/,
    int /*dstx*/,
    int /*dsty*/
);

a135 9
extern miDashPtr miDashLine(
    int /*npt*/,
    DDXPointPtr /*ppt*/,
    unsigned int /*nDash*/,
    unsigned char * /*pDash*/,
    unsigned int /*offset*/,
    int * /*pnseg*/
);

d152 1
a152 2
    DevicePtr /*pKbd*/,
    DevicePtr /*pPtr*/
d156 1
d169 3
a308 10
extern int miPolyText(
    DrawablePtr /*pDraw*/,
    GCPtr /*pGC*/,
    int /*x*/,
    int /*y*/,
    int /*count*/,
    char * /*chars*/,
    FontEncoding /*fontEncoding*/
);

a326 10
extern int miImageText(
    DrawablePtr /*pDraw*/,
    GCPtr /*pGC*/,
    int /*x*/,
    int /*y*/,
    int /*count*/,
    char * /*chars*/,
    FontEncoding /*fontEncoding*/
);

a365 4
extern void miSetExtents(
    RegionPtr /*pReg*/
);

a375 1
extern Bool miRegionDataCopy(RegionPtr dst, RegionPtr src);
a389 5
extern Bool miCloseScreen(
    int /*index*/,
    ScreenPtr /*pScreen*/
);

d416 1
a416 1
extern int miAllocateGCPrivateIndex(
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d88 12
d147 9
d172 2
a173 1
    void
a176 1
    DeviceIntPtr /*pDev*/,
a188 3
typedef void (*mieqHandler)(int, xEventPtr, DeviceIntPtr, int);
void mieqSetHandler(int event, mieqHandler handler);

d326 10
d354 10
d403 4
d417 1
d430 5
@

