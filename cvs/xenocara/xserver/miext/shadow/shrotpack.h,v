head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.20
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.16
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.06;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 *
 * Copyright Â© 2000 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Thanks to Daniel Chemko <dchemko@@intrinsyc.com> for making the 90 and 180
 * orientations work.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <stdlib.h>

#include    <X11/X.h>
#include    "scrnintstr.h"
#include    "windowstr.h"
#include    <X11/fonts/font.h>
#include    "dixfontstr.h"
#include    <X11/fonts/fontstruct.h>
#include    "mi.h"
#include    "regionstr.h"
#include    "globals.h"
#include    "gcstruct.h"
#include    "shadow.h"
#include    "fb.h"

#define DANDEBUG         0

#if ROTATE == 270

#define SCRLEFT(x,y,w,h)    (pScreen->height - ((y) + (h)))
#define SCRY(x,y,w,h)	    (x)
#define SCRWIDTH(x,y,w,h)   (h)
#define FIRSTSHA(x,y,w,h)   (((y) + (h) - 1) * shaStride + (x))
#define STEPDOWN(x,y,w,h)   ((w)--)
#define NEXTY(x,y,w,h)	    ((x)++)
#define SHASTEPX(stride)    -(stride)
#define SHASTEPY(stride)    (1)

#elif ROTATE == 90

#define SCRLEFT(x,y,w,h)    (y)
#define SCRY(x,y,w,h)	    (pScreen->width - ((x) + (w)) - 1)
#define SCRWIDTH(x,y,w,h)   (h)
#define FIRSTSHA(x,y,w,h)   ((y) * shaStride + (x + w - 1))
#define STEPDOWN(x,y,w,h)   ((w)--)
#define NEXTY(x,y,w,h)	    ((void)(x))
#define SHASTEPX(stride)    (stride)
#define SHASTEPY(stride)    (-1)

#elif ROTATE == 180

#define SCRLEFT(x,y,w,h)    (pScreen->width - ((x) + (w)))
#define SCRY(x,y,w,h)	    (pScreen->height - ((y) + (h)) - 1)
#define SCRWIDTH(x,y,w,h)   (w)
#define FIRSTSHA(x,y,w,h)   ((y + h - 1) * shaStride + (x + w - 1))
#define STEPDOWN(x,y,w,h)   ((h)--)
#define NEXTY(x,y,w,h)	    ((void)(y))
#define SHASTEPX(stride)    (-1)
#define SHASTEPY(stride)    -(stride)

#else

#define SCRLEFT(x,y,w,h)    (x)
#define SCRY(x,y,w,h)	    (y)
#define SCRWIDTH(x,y,w,h)   (w)
#define FIRSTSHA(x,y,w,h)   ((y) * shaStride + (x))
#define STEPDOWN(x,y,w,h)   ((h)--)
#define NEXTY(x,y,w,h)	    ((y)++)
#define SHASTEPX(stride)    (1)
#define SHASTEPY(stride)    (stride)

#endif

void
FUNC(ScreenPtr pScreen, shadowBufPtr pBuf)
{
    RegionPtr damage = shadowDamage(pBuf);
    PixmapPtr pShadow = pBuf->pPixmap;
    int nbox = RegionNumRects(damage);
    BoxPtr pbox = RegionRects(damage);
    FbBits *shaBits;
    Data *shaBase, *shaLine, *sha;
    FbStride shaStride;
    int scrBase, scrLine, scr;
    int shaBpp;
    _X_UNUSED int shaXoff, shaYoff;
    int x, y, w, h, width;
    int i;
    Data *winBase = NULL, *win;
    CARD32 winSize;

    fbGetDrawable(&pShadow->drawable, shaBits, shaStride, shaBpp, shaXoff,
                  shaYoff);
    shaBase = (Data *) shaBits;
    shaStride = shaStride * sizeof(FbBits) / sizeof(Data);
#if (DANDEBUG > 1)
    ErrorF
        ("-> Entering Shadow Update:\r\n   |- Origins: pShadow=%x, pScreen=%x, damage=%x\r\n   |- Metrics: shaStride=%d, shaBase=%x, shaBpp=%d\r\n   |                                                     \n",
         pShadow, pScreen, damage, shaStride, shaBase, shaBpp);
#endif
    while (nbox--) {
        x = pbox->x1;
        y = pbox->y1;
        w = (pbox->x2 - pbox->x1);
        h = pbox->y2 - pbox->y1;

#if (DANDEBUG > 2)
        ErrorF
            ("   |-> Redrawing box - Metrics: X=%d, Y=%d, Width=%d, Height=%d\n",
             x, y, w, h);
#endif
        scrLine = SCRLEFT(x, y, w, h);
        shaLine = shaBase + FIRSTSHA(x, y, w, h);

        while (STEPDOWN(x, y, w, h)) {
            winSize = 0;
            scrBase = 0;
            width = SCRWIDTH(x, y, w, h);
            scr = scrLine;
            sha = shaLine;
#if (DANDEBUG > 3)
            ErrorF("   |   |-> StepDown - Metrics: width=%d, scr=%x, sha=%x\n",
                   width, scr, sha);
#endif
            while (width) {
                /*  how much remains in this window */
                i = scrBase + winSize - scr;
                if (i <= 0 || scr < scrBase) {
                    winBase = (Data *) (*pBuf->window) (pScreen,
                                                        SCRY(x, y, w, h),
                                                        scr * sizeof(Data),
                                                        SHADOW_WINDOW_WRITE,
                                                        &winSize,
                                                        pBuf->closure);
                    if (!winBase)
                        return;
                    scrBase = scr;
                    winSize /= sizeof(Data);
                    i = winSize;
#if(DANDEBUG > 4)
                    ErrorF
                        ("   |   |   |-> Starting New Line - Metrics: winBase=%x, scrBase=%x, winSize=%d\r\n   |   |   |   Xstride=%d, Ystride=%d, w=%d h=%d\n",
                         winBase, scrBase, winSize, SHASTEPX(shaStride),
                         SHASTEPY(shaStride), w, h);
#endif
                }
                win = winBase + (scr - scrBase);
                if (i > width)
                    i = width;
                width -= i;
                scr += i;
#if(DANDEBUG > 5)
                ErrorF
                    ("   |   |   |-> Writing Line - Metrics: win=%x, sha=%x\n",
                     win, sha);
#endif
                while (i--) {
#if(DANDEBUG > 6)
                    ErrorF
                        ("   |   |   |-> Writing Pixel - Metrics: win=%x, sha=%d, remaining=%d\n",
                         win, sha, i);
#endif
                    *win++ = *sha;
                    sha += SHASTEPX(shaStride);
                }               /*  i */
            }                   /*  width */
            shaLine += SHASTEPY(shaStride);
            NEXTY(x, y, w, h);
        }                       /*  STEPDOWN */
        pbox++;
    }                           /*  nbox */
}
@


1.3
log
@Update to xserver 1.11.2
@
text
@d97 1
a97 2
FUNC (ScreenPtr	    pScreen,
      shadowBufPtr  pBuf)
d99 14
a112 14
    RegionPtr	damage = shadowDamage (pBuf);
    PixmapPtr	pShadow = pBuf->pPixmap;
    int		nbox = RegionNumRects (damage);
    BoxPtr	pbox = RegionRects (damage);
    FbBits	*shaBits;
    Data	*shaBase, *shaLine, *sha;
    FbStride	shaStride;
    int		scrBase, scrLine, scr;
    int		shaBpp;
    _X_UNUSED int	shaXoff, shaYoff;
    int		x, y, w, h, width;
    int         i;
    Data	*winBase = NULL, *win;
    CARD32	winSize;
d114 2
a115 1
    fbGetDrawable (&pShadow->drawable, shaBits, shaStride, shaBpp, shaXoff, shaYoff);
d117 1
a117 1
    shaStride = shaStride * sizeof (FbBits) / sizeof (Data);
d119 3
a121 1
    ErrorF ("-> Entering Shadow Update:\r\n   |- Origins: pShadow=%x, pScreen=%x, damage=%x\r\n   |- Metrics: shaStride=%d, shaBase=%x, shaBpp=%d\r\n   |                                                     \n", pShadow, pScreen, damage, shaStride, shaBase, shaBpp);
d123 1
a123 2
    while (nbox--)
    {
d128 1
a128 1
        
d130 3
a132 1
        ErrorF ("   |-> Redrawing box - Metrics: X=%d, Y=%d, Width=%d, Height=%d\n", x, y, w, h);
d134 4
a137 5
        scrLine = SCRLEFT(x,y,w,h);
        shaLine = shaBase + FIRSTSHA(x,y,w,h);
        
        while (STEPDOWN(x,y,w,h))
        {
d140 1
a140 1
            width = SCRWIDTH(x,y,w,h);
d144 2
a145 1
            ErrorF ("   |   |-> StepDown - Metrics: width=%d, scr=%x, sha=%x\n", width, scr, sha);
d147 1
a147 2
            while (width)
            {
d150 1
a150 2
                if (i <= 0 || scr < scrBase)
                {
d152 6
a157 6
							SCRY(x,y,w,h),
							scr * sizeof (Data),
							SHADOW_WINDOW_WRITE,
							&winSize,
							pBuf->closure);
                    if(!winBase)
d160 1
a160 1
                    winSize /= sizeof (Data);
d163 4
a166 1
                    ErrorF ("   |   |   |-> Starting New Line - Metrics: winBase=%x, scrBase=%x, winSize=%d\r\n   |   |   |   Xstride=%d, Ystride=%d, w=%d h=%d\n", winBase, scrBase, winSize, SHASTEPX(shaStride), SHASTEPY(shaStride), w, h);
d175 3
a177 1
		ErrorF ("   |   |   |-> Writing Line - Metrics: win=%x, sha=%x\n", win, sha);
d179 1
a179 2
                while (i--)
                {
d181 3
a183 1
		    ErrorF ("   |   |   |-> Writing Pixel - Metrics: win=%x, sha=%d, remaining=%d\n", win, sha, i);
d187 2
a188 2
                } /*  i */
            } /*  width */
d190 2
a191 2
            NEXTY(x,y,w,h);
        } /*  STEPDOWN */
d193 1
a193 1
    } /*  nbox */
@


1.2
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d109 1
a109 1
    int		shaXoff, shaYoff;   /* XXX assumed to be zero */
@


1.1
log
@Initial revision
@
text
@d102 2
a103 2
    int		nbox = REGION_NUM_RECTS (damage);
    BoxPtr	pbox = REGION_RECTS (damage);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
