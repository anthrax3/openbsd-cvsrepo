head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.8
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.6
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.09.16.19.10.25;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	Te1daavkBLskZ8gc;

1.10
date	2014.09.27.17.53.04;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	cVXoV5PxI8YrEaVA;

1.9
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2013.06.07.17.28.55;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.37;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.06;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.57.03;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright Â© 2000 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <stdlib.h>

#include    <X11/X.h>
#include    "scrnintstr.h"
#include    "windowstr.h"
#include    "dixfontstr.h"
#include    "mi.h"
#include    "regionstr.h"
#include    "globals.h"
#include    "gcstruct.h"
#include    "shadow.h"

static DevPrivateKeyRec shadowScrPrivateKeyRec;

#define shadowScrPrivateKey (&shadowScrPrivateKeyRec)

#define wrap(priv, real, mem) {\
    priv->mem = real->mem; \
    real->mem = shadow##mem; \
}

#define unwrap(priv, real, mem) {\
    real->mem = priv->mem; \
}

static void
shadowRedisplay(ScreenPtr pScreen)
{
    shadowBuf(pScreen);
    RegionPtr pRegion;

    if (!pBuf || !pBuf->pDamage || !pBuf->update)
        return;
    pRegion = DamageRegion(pBuf->pDamage);
    if (RegionNotEmpty(pRegion)) {
        (*pBuf->update) (pScreen, pBuf);
        DamageEmpty(pBuf->pDamage);
    }
}

static void
shadowBlockHandler(void *data, OSTimePtr pTimeout, void *pRead)
{
    ScreenPtr pScreen = (ScreenPtr) data;

    shadowRedisplay(pScreen);
}

static void
shadowWakeupHandler(void *data, int i, void *LastSelectMask)
{
}

static void
shadowGetImage(DrawablePtr pDrawable, int sx, int sy, int w, int h,
               unsigned int format, unsigned long planeMask, char *pdstLine)
{
    ScreenPtr pScreen = pDrawable->pScreen;

    shadowBuf(pScreen);

    /* Many apps use GetImage to sync with the visable frame buffer */
    if (pDrawable->type == DRAWABLE_WINDOW)
        shadowRedisplay(pScreen);
    unwrap(pBuf, pScreen, GetImage);
    pScreen->GetImage(pDrawable, sx, sy, w, h, format, planeMask, pdstLine);
    wrap(pBuf, pScreen, GetImage);
}

static Bool
shadowCloseScreen(ScreenPtr pScreen)
{
    shadowBuf(pScreen);

    unwrap(pBuf, pScreen, GetImage);
    unwrap(pBuf, pScreen, CloseScreen);
    shadowRemove(pScreen, pBuf->pPixmap);
    DamageDestroy(pBuf->pDamage);
    if (pBuf->pPixmap)
        pScreen->DestroyPixmap(pBuf->pPixmap);
    free(pBuf);
    return pScreen->CloseScreen(pScreen);
}

Bool
shadowSetup(ScreenPtr pScreen)
{
    shadowBufPtr pBuf;

    if (!dixRegisterPrivateKey(&shadowScrPrivateKeyRec, PRIVATE_SCREEN, 0))
        return FALSE;

    if (!DamageSetup(pScreen))
        return FALSE;

    pBuf = malloc(sizeof(shadowBufRec));
    if (!pBuf)
        return FALSE;
    pBuf->pDamage = DamageCreate((DamageReportFunc) NULL,
                                 (DamageDestroyFunc) NULL,
                                 DamageReportNone, TRUE, pScreen, pScreen);
    if (!pBuf->pDamage) {
        free(pBuf);
        return FALSE;
    }

    wrap(pBuf, pScreen, CloseScreen);
    wrap(pBuf, pScreen, GetImage);
    pBuf->update = 0;
    pBuf->window = 0;
    pBuf->pPixmap = 0;
    pBuf->closure = 0;
    pBuf->randr = 0;

    dixSetPrivate(&pScreen->devPrivates, shadowScrPrivateKey, pBuf);
    return TRUE;
}

Bool
shadowAdd(ScreenPtr pScreen, PixmapPtr pPixmap, ShadowUpdateProc update,
          ShadowWindowProc window, int randr, void *closure)
{
    shadowBuf(pScreen);

    if (!RegisterBlockAndWakeupHandlers(shadowBlockHandler, shadowWakeupHandler,
                                        (void *) pScreen))
        return FALSE;

    /*
     * Map simple rotation values to bitmasks; fortunately,
     * these are all unique
     */
    switch (randr) {
    case 0:
        randr = SHADOW_ROTATE_0;
        break;
    case 90:
        randr = SHADOW_ROTATE_90;
        break;
    case 180:
        randr = SHADOW_ROTATE_180;
        break;
    case 270:
        randr = SHADOW_ROTATE_270;
        break;
    }
    pBuf->update = update;
    pBuf->window = window;
    pBuf->randr = randr;
    pBuf->closure = closure;
    pBuf->pPixmap = pPixmap;
    DamageRegister(&pPixmap->drawable, pBuf->pDamage);
    return TRUE;
}

void
shadowRemove(ScreenPtr pScreen, PixmapPtr pPixmap)
{
    shadowBuf(pScreen);

    if (pBuf->pPixmap) {
        DamageUnregister(pBuf->pDamage);
        pBuf->update = 0;
        pBuf->window = 0;
        pBuf->randr = 0;
        pBuf->closure = 0;
        pBuf->pPixmap = 0;
    }

    RemoveBlockAndWakeupHandlers(shadowBlockHandler, shadowWakeupHandler,
                                 (void *) pScreen);
}
@


1.10
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@a95 2
#define BACKWARDS_COMPATIBILITY

a104 3
#ifdef BACKWARDS_COMPATIBILITY
    RegionUninit(&pBuf->damage);        /* bc */
#endif
a110 20
#ifdef BACKWARDS_COMPATIBILITY
static void
shadowReportFunc(DamagePtr pDamage, RegionPtr pRegion, void *closure)
{
    ScreenPtr pScreen = closure;
    shadowBufPtr pBuf = (shadowBufPtr)
        dixLookupPrivate(&pScreen->devPrivates, shadowScrPrivateKey);

    /* Register the damaged region, use DamageReportNone below when we
     * want to break BC below... */
    RegionUnion(&pDamage->damage, &pDamage->damage, pRegion);

    /*
     * BC hack.  In 7.0 and earlier several drivers would inspect the
     * 'damage' member directly, so we have to keep it existing.
     */
    RegionCopy(&pBuf->damage, pRegion);
}
#endif

a124 5
#ifdef BACKWARDS_COMPATIBILITY
    pBuf->pDamage = DamageCreate((DamageReportFunc) shadowReportFunc,
                                 (DamageDestroyFunc) NULL,
                                 DamageReportRawRegion, TRUE, pScreen, pScreen);
#else
a127 1
#endif
a139 3
#ifdef BACKWARDS_COMPATIBILITY
    RegionNull(&pBuf->damage);  /* bc */
#endif
a197 20
}

Bool
shadowInit(ScreenPtr pScreen, ShadowUpdateProc update, ShadowWindowProc window)
{
    PixmapPtr pPixmap;

    pPixmap = pScreen->CreatePixmap(pScreen, pScreen->width, pScreen->height,
                                    pScreen->rootDepth, 0);
    if (!pPixmap)
        return FALSE;

    if (!shadowSetup(pScreen)) {
        pScreen->DestroyPixmap(pPixmap);
        return FALSE;
    }

    shadowAdd(pScreen, pPixmap, update, window, SHADOW_ROTATE_0, 0);

    return TRUE;
@


1.9
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d68 1
a68 1
shadowBlockHandler(pointer data, OSTimePtr pTimeout, pointer pRead)
d76 1
a76 1
shadowWakeupHandler(pointer data, int i, pointer LastSelectMask)
d186 1
a186 1
                                        (pointer) pScreen))
d231 1
a231 1
                                 (pointer) pScreen);
@


1.8
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d222 1
a222 1
        DamageUnregister(&pBuf->pPixmap->drawable, pBuf->pDamage);
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d99 1
a99 1
shadowCloseScreen(int i, ScreenPtr pScreen)
d113 1
a113 1
    return pScreen->CloseScreen(i, pScreen);
@


1.6
log
@Update to xserver 1.11.2
@
text
@d40 1
d59 1
a59 1
	return;
d62 2
a63 2
	(*pBuf->update)(pScreen, pBuf);
	DamageEmpty(pBuf->pDamage);
d82 1
a82 1
	       unsigned int format, unsigned long planeMask, char *pdstLine)
d85 1
d90 1
a90 1
	shadowRedisplay(pScreen);
d108 1
a108 1
    RegionUninit(&pBuf->damage); /* bc */
d111 1
a111 1
	pScreen->DestroyPixmap(pBuf->pPixmap);
d122 1
a122 1
	dixLookupPrivate(&pScreen->devPrivates, shadowScrPrivateKey);
d142 1
a142 1
	return FALSE;
d145 1
a145 1
	return FALSE;
d149 1
a149 1
	return FALSE;
d151 3
a153 4
    pBuf->pDamage = DamageCreate((DamageReportFunc)shadowReportFunc, 
		    		 (DamageDestroyFunc)NULL,
				 DamageReportRawRegion,
				 TRUE, pScreen, pScreen);
d155 3
a157 4
    pBuf->pDamage = DamageCreate((DamageReportFunc)NULL, 
		    		 (DamageDestroyFunc)NULL,
				 DamageReportNone,
				 TRUE, pScreen, pScreen);
d160 2
a161 2
	free(pBuf);
	return FALSE;
d172 1
a172 1
    RegionNull(&pBuf->damage); /* bc */
d181 1
a181 1
	  ShadowWindowProc window, int randr, void *closure)
d186 2
a187 2
					(pointer)pScreen))
	return FALSE;
d195 2
a196 2
	randr = SHADOW_ROTATE_0;
	break;
d198 2
a199 2
	randr = SHADOW_ROTATE_90;
	break;
d201 2
a202 2
	randr = SHADOW_ROTATE_180;
	break;
d204 2
a205 2
	randr = SHADOW_ROTATE_270;
	break;
d222 6
a227 6
	DamageUnregister(&pBuf->pPixmap->drawable, pBuf->pDamage);
	pBuf->update = 0;
	pBuf->window = 0;
	pBuf->randr = 0;
	pBuf->closure = 0;
	pBuf->pPixmap = 0;
d231 1
a231 1
				 (pointer) pScreen);
d238 1
a238 1
    
d240 1
a240 1
				    pScreen->rootDepth, 0);
d242 2
a243 2
	return FALSE;
    
d245 2
a246 2
	pScreen->DestroyPixmap(pPixmap);
	return FALSE;
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d2 1
a2 1
 * Copyright © 2000 Keith Packard
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d39 2
a40 2
static int shadowScrPrivateKeyIndex;
DevPrivateKey shadowScrPrivateKey = &shadowScrPrivateKeyIndex;
d60 1
a60 1
    if (REGION_NOTEMPTY(pScreen, pRegion)) {
d106 1
a106 1
    REGION_UNINIT(pScreen, &pBuf->damage); /* bc */
d110 1
a110 1
    xfree(pBuf);
d124 1
a124 1
    REGION_UNION(pScreen, &pDamage->damage, &pDamage->damage, pRegion);
d130 1
a130 1
    REGION_COPY(pScreen, &pBuf->damage, pRegion);
d139 3
d145 1
a145 1
    pBuf = xalloc(sizeof(shadowBufRec));
d160 1
a160 1
	xfree(pBuf);
d172 1
a172 1
    REGION_NULL(pScreen, &pBuf->damage); /* bc */
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d142 1
a142 1
    pBuf = (shadowBufPtr) xalloc(sizeof(shadowBufRec));
d207 1
a207 1
    pBuf->closure = 0;
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d39 2
a40 1
DevPrivateKey shadowScrPrivateKey = &shadowScrPrivateKey;
@


1.1
log
@Initial revision
@
text
@a1 2
 * $Id$
 *
d39 1
a39 2
int shadowScrPrivateIndex;
int shadowGeneration;
d118 2
a119 1
    shadowBufPtr pBuf = pScreen->devPrivates[shadowScrPrivateIndex].ptr;
a140 7
    if (shadowGeneration != serverGeneration) {
	shadowScrPrivateIndex = AllocateScreenPrivateIndex();
	if (shadowScrPrivateIndex == -1)
	    return FALSE;
	shadowGeneration = serverGeneration;
    }

d171 1
a171 1
    pScreen->devPrivates[shadowScrPrivateIndex].ptr = (pointer) pBuf;
d236 1
a236 1
				    pScreen->rootDepth);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 2
@

