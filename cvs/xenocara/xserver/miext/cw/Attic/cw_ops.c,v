head	1.3;
access;
symbols
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.18
	OPENBSD_5_0:1.1.1.2.0.16
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.12
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.14
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.06.07.17.28.55;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2012.06.10.13.21.30;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.05;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.57.05;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@/*
 * Copyright Â© 2004 Eric Anholt
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Eric Anholt not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Eric Anholt makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * ERIC ANHOLT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL ERIC ANHOLT BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <stdlib.h>

#include "gcstruct.h"
#include "pixmapstr.h"
#include "cw.h"
#include "mi.h"

#define SETUP_BACKING_DST(_pDst, _pGC) \
    cwGCPtr pGCPrivate = getCwGC (_pGC); \
    int dst_off_x, dst_off_y; \
    DrawablePtr pBackingDst = cwGetBackingDrawable(pDst, &dst_off_x, \
	&dst_off_y); \
    GCPtr pBackingGC = pGCPrivate->pBackingGC ? pGCPrivate->pBackingGC : _pGC

#define SETUP_BACKING_SRC(pSrc, pGC) \
    int src_off_x, src_off_y; \
    DrawablePtr pBackingSrc = cwGetBackingDrawable(pSrc, &src_off_x, \
	&src_off_y)

#define PROLOGUE(pGC) do { \
    if (pBackingGC->serialNumber != pBackingDst->serialNumber) { \
	ValidateGC(pBackingDst, pBackingGC); \
    } \
    pGC->funcs = pGCPrivate->wrapFuncs;\
    pGC->ops = pGCPrivate->wrapOps;\
} while (0)

#define EPILOGUE(pGC) do { \
    pGCPrivate->wrapFuncs = (pGC)->funcs; \
    pGCPrivate->wrapOps = (pGC)->ops; \
    (pGC)->funcs = &cwGCFuncs; \
    (pGC)->ops = &cwGCOps; \
} while (0)

extern GCFuncs cwGCFuncs;

/*
 * GC ops -- wrap each GC operation with our own function
 */

static void cwFillSpans(DrawablePtr pDst, GCPtr pGC, int nInit,
                        DDXPointPtr pptInit, int *pwidthInit, int fSorted);
static void cwSetSpans(DrawablePtr pDst, GCPtr pGC, char *psrc,
                       DDXPointPtr ppt, int *pwidth, int nspans, int fSorted);
static void cwPutImage(DrawablePtr pDst, GCPtr pGC, int depth,
                       int x, int y, int w, int h, int leftPad, int format,
                       char *pBits);
static RegionPtr cwCopyArea(DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
                            int srcx, int srcy, int w, int h,
                            int dstx, int dsty);
static RegionPtr cwCopyPlane(DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
                             int srcx, int srcy, int w, int h,
                             int dstx, int dsty, unsigned long plane);
static void cwPolyPoint(DrawablePtr pDst, GCPtr pGC, int mode, int npt,
                        xPoint * pptInit);
static void cwPolylines(DrawablePtr pDst, GCPtr pGC, int mode, int npt,
                        DDXPointPtr pptInit);
static void cwPolySegment(DrawablePtr pDst, GCPtr pGC, int nseg,
                          xSegment * pSegs);
static void cwPolyRectangle(DrawablePtr pDst, GCPtr pGC,
                            int nrects, xRectangle *pRects);
static void cwPolyArc(DrawablePtr pDst, GCPtr pGC, int narcs, xArc * parcs);
static void cwFillPolygon(DrawablePtr pDst, GCPtr pGC, int shape, int mode,
                          int count, DDXPointPtr pPts);
static void cwPolyFillRect(DrawablePtr pDst, GCPtr pGC,
                           int nrectFill, xRectangle *prectInit);
static void cwPolyFillArc(DrawablePtr pDst, GCPtr pGC, int narcs, xArc * parcs);
static int cwPolyText8(DrawablePtr pDrawable, GCPtr pGC, int x, int y,
                       int count, char *chars);
static int cwPolyText16(DrawablePtr pDst, GCPtr pGC, int x, int y,
                        int count, unsigned short *chars);
static void cwImageText8(DrawablePtr pDst, GCPtr pGC, int x, int y,
                         int count, char *chars);
static void cwImageText16(DrawablePtr pDst, GCPtr pGC, int x, int y,
                          int count, unsigned short *chars);
static void cwImageGlyphBlt(DrawablePtr pDst, GCPtr pGC, int x, int y,
                            unsigned int nglyph, CharInfoPtr * ppci,
                            pointer pglyphBase);
static void cwPolyGlyphBlt(DrawablePtr pDst, GCPtr pGC, int x, int y,
                           unsigned int nglyph, CharInfoPtr * ppci,
                           pointer pglyphBase);
static void cwPushPixels(GCPtr pGC, PixmapPtr pBitMap, DrawablePtr pDst,
                         int w, int h, int x, int y);

GCOps cwGCOps = {
    cwFillSpans,
    cwSetSpans,
    cwPutImage,
    cwCopyArea,
    cwCopyPlane,
    cwPolyPoint,
    cwPolylines,
    cwPolySegment,
    cwPolyRectangle,
    cwPolyArc,
    cwFillPolygon,
    cwPolyFillRect,
    cwPolyFillArc,
    cwPolyText8,
    cwPolyText16,
    cwImageText8,
    cwImageText16,
    cwImageGlyphBlt,
    cwPolyGlyphBlt,
    cwPushPixels
};

static void
cwFillSpans(DrawablePtr pDst, GCPtr pGC, int nspans, DDXPointPtr ppt,
            int *pwidth, int fSorted)
{
    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    CW_OFFSET_XYPOINTS(ppt, nspans);

    (*pBackingGC->ops->FillSpans) (pBackingDst, pBackingGC, nspans, ppt,
                                   pwidth, fSorted);

    EPILOGUE(pGC);
}

static void
cwSetSpans(DrawablePtr pDst, GCPtr pGC, char *psrc, DDXPointPtr ppt,
           int *pwidth, int nspans, int fSorted)
{
    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    CW_OFFSET_XYPOINTS(ppt, nspans);

    (*pBackingGC->ops->SetSpans) (pBackingDst, pBackingGC, psrc, ppt, pwidth,
                                  nspans, fSorted);

    EPILOGUE(pGC);
}

static void
cwPutImage(DrawablePtr pDst, GCPtr pGC, int depth, int x, int y, int w, int h,
           int leftPad, int format, char *pBits)
{
    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    CW_OFFSET_XY_DST(x, y);

    (*pBackingGC->ops->PutImage) (pBackingDst, pBackingGC, depth, x, y, w, h,
                                  leftPad, format, pBits);

    EPILOGUE(pGC);
}

static RegionPtr
cwCopyArea(DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC, int srcx, int srcy,
           int w, int h, int dstx, int dsty)
{
    int odstx, odsty;
    int osrcx, osrcy;

    SETUP_BACKING_DST(pDst, pGC);
    SETUP_BACKING_SRC(pSrc, pGC);

    PROLOGUE(pGC);

    odstx = dstx;
    odsty = dsty;
    osrcx = srcx;
    osrcy = srcy;
    CW_OFFSET_XY_DST(dstx, dsty);
    CW_OFFSET_XY_SRC(srcx, srcy);

    (*pBackingGC->ops->CopyArea) (pBackingSrc, pBackingDst,
                                  pBackingGC, srcx, srcy, w, h, dstx, dsty);

    EPILOGUE(pGC);

    return miHandleExposures(pSrc, pDst, pGC,
                             osrcx, osrcy, w, h, odstx, odsty, 0);
}

static RegionPtr
cwCopyPlane(DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC, int srcx, int srcy,
            int w, int h, int dstx, int dsty, unsigned long plane)
{
    int odstx, odsty;
    int osrcx, osrcy;

    SETUP_BACKING_DST(pDst, pGC);
    SETUP_BACKING_SRC(pSrc, pGC);

    PROLOGUE(pGC);

    odstx = dstx;
    odsty = dsty;
    osrcx = srcx;
    osrcy = srcy;
    CW_OFFSET_XY_DST(dstx, dsty);
    CW_OFFSET_XY_SRC(srcx, srcy);

    (*pBackingGC->ops->CopyPlane) (pBackingSrc, pBackingDst,
                                   pBackingGC, srcx, srcy, w, h,
                                   dstx, dsty, plane);

    EPILOGUE(pGC);

    return miHandleExposures(pSrc, pDst, pGC,
                             osrcx, osrcy, w, h, odstx, odsty, plane);
}

static void
cwPolyPoint(DrawablePtr pDst, GCPtr pGC, int mode, int npt, xPoint * ppt)
{
    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    if (mode == CoordModeOrigin)
        CW_OFFSET_XYPOINTS(ppt, npt);
    else
        CW_OFFSET_XYPOINTS(ppt, 1);

    (*pBackingGC->ops->PolyPoint) (pBackingDst, pBackingGC, mode, npt, ppt);

    EPILOGUE(pGC);
}

static void
cwPolylines(DrawablePtr pDst, GCPtr pGC, int mode, int npt, DDXPointPtr ppt)
{
    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    if (mode == CoordModeOrigin)
        CW_OFFSET_XYPOINTS(ppt, npt);
    else
        CW_OFFSET_XYPOINTS(ppt, 1);

    (*pBackingGC->ops->Polylines) (pBackingDst, pBackingGC, mode, npt, ppt);

    EPILOGUE(pGC);
}

static void
cwPolySegment(DrawablePtr pDst, GCPtr pGC, int nseg, xSegment * pSegs)
{
    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    CW_OFFSET_XYPOINTS(pSegs, nseg * 2);

    (*pBackingGC->ops->PolySegment) (pBackingDst, pBackingGC, nseg, pSegs);

    EPILOGUE(pGC);
}

static void
cwPolyRectangle(DrawablePtr pDst, GCPtr pGC, int nrects, xRectangle *pRects)
{
    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    CW_OFFSET_RECTS(pRects, nrects);

    (*pBackingGC->ops->PolyRectangle) (pBackingDst, pBackingGC, nrects, pRects);

    EPILOGUE(pGC);
}

static void
cwPolyArc(DrawablePtr pDst, GCPtr pGC, int narcs, xArc * pArcs)
{
    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    CW_OFFSET_RECTS(pArcs, narcs);

    (*pBackingGC->ops->PolyArc) (pBackingDst, pBackingGC, narcs, pArcs);

    EPILOGUE(pGC);
}

static void
cwFillPolygon(DrawablePtr pDst, GCPtr pGC, int shape, int mode, int npt,
              DDXPointPtr ppt)
{
    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    if (mode == CoordModeOrigin)
        CW_OFFSET_XYPOINTS(ppt, npt);
    else
        CW_OFFSET_XYPOINTS(ppt, 1);

    (*pBackingGC->ops->FillPolygon) (pBackingDst, pBackingGC, shape, mode, npt,
                                     ppt);

    EPILOGUE(pGC);
}

static void
cwPolyFillRect(DrawablePtr pDst, GCPtr pGC, int nrects, xRectangle *pRects)
{
    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    CW_OFFSET_RECTS(pRects, nrects);

    (*pBackingGC->ops->PolyFillRect) (pBackingDst, pBackingGC, nrects, pRects);

    EPILOGUE(pGC);
}

static void
cwPolyFillArc(DrawablePtr pDst, GCPtr pGC, int narcs, xArc * parcs)
{
    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    CW_OFFSET_RECTS(parcs, narcs);

    (*pBackingGC->ops->PolyFillArc) (pBackingDst, pBackingGC, narcs, parcs);

    EPILOGUE(pGC);
}

static int
cwPolyText8(DrawablePtr pDst, GCPtr pGC, int x, int y, int count, char *chars)
{
    int result;

    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    CW_OFFSET_XY_DST(x, y);

    result = (*pBackingGC->ops->PolyText8) (pBackingDst, pBackingGC, x, y,
                                            count, chars);

    EPILOGUE(pGC);

    return result;
}

static int
cwPolyText16(DrawablePtr pDst, GCPtr pGC, int x, int y, int count,
             unsigned short *chars)
{
    int result;

    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    CW_OFFSET_XY_DST(x, y);

    result = (*pBackingGC->ops->PolyText16) (pBackingDst, pBackingGC, x, y,
                                             count, chars);

    EPILOGUE(pGC);
    return result;
}

static void
cwImageText8(DrawablePtr pDst, GCPtr pGC, int x, int y, int count, char *chars)
{
    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    CW_OFFSET_XY_DST(x, y);

    (*pBackingGC->ops->ImageText8) (pBackingDst, pBackingGC, x, y, count,
                                    chars);

    EPILOGUE(pGC);
}

static void
cwImageText16(DrawablePtr pDst, GCPtr pGC, int x, int y, int count,
              unsigned short *chars)
{
    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    CW_OFFSET_XY_DST(x, y);

    (*pBackingGC->ops->ImageText16) (pBackingDst, pBackingGC, x, y, count,
                                     chars);

    EPILOGUE(pGC);
}

static void
cwImageGlyphBlt(DrawablePtr pDst, GCPtr pGC, int x, int y, unsigned int nglyph,
                CharInfoPtr * ppci, pointer pglyphBase)
{
    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    CW_OFFSET_XY_DST(x, y);

    (*pBackingGC->ops->ImageGlyphBlt) (pBackingDst, pBackingGC, x, y, nglyph,
                                       ppci, pglyphBase);

    EPILOGUE(pGC);
}

static void
cwPolyGlyphBlt(DrawablePtr pDst, GCPtr pGC, int x, int y, unsigned int nglyph,
               CharInfoPtr * ppci, pointer pglyphBase)
{
    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    CW_OFFSET_XY_DST(x, y);

    (*pBackingGC->ops->PolyGlyphBlt) (pBackingDst, pBackingGC, x, y, nglyph,
                                      ppci, pglyphBase);

    EPILOGUE(pGC);
}

static void
cwPushPixels(GCPtr pGC, PixmapPtr pBitMap, DrawablePtr pDst, int w, int h,
             int x, int y)
{
    SETUP_BACKING_DST(pDst, pGC);

    PROLOGUE(pGC);

    CW_OFFSET_XY_DST(x, y);

    (*pBackingGC->ops->PushPixels) (pBackingGC, pBitMap, pBackingDst, w, h,
                                    x, y);

    EPILOGUE(pGC);
}
@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.1
log
@Initial revision
@
text
@a21 1
/* $Header$ */
d32 1
d68 1
a68 1
			DDXPointPtr pptInit, int *pwidthInit, int fSorted);
d70 1
a70 1
		       DDXPointPtr ppt, int *pwidth, int nspans, int fSorted);
d72 2
a73 2
		       int x, int y, int w, int h, int leftPad, int format,
		       char *pBits);
d75 2
a76 2
			    int srcx, int srcy, int w, int h,
			    int dstx, int dsty);
d78 2
a79 2
			     int srcx, int srcy, int w, int h,
			     int dstx, int dsty, unsigned long plane);
d81 1
a81 1
			xPoint *pptInit);
d83 1
a83 1
			DDXPointPtr pptInit);
d85 1
a85 1
			  xSegment *pSegs);
d87 2
a88 2
			    int nrects, xRectangle *pRects);
static void cwPolyArc(DrawablePtr pDst, GCPtr pGC, int narcs, xArc *parcs);
d90 1
a90 1
			  int count, DDXPointPtr pPts);
d92 2
a93 3
			   int nrectFill, xRectangle *prectInit);
static void cwPolyFillArc(DrawablePtr pDst, GCPtr pGC,
			  int narcs, xArc *parcs);
d95 1
a95 1
		       int count, char *chars);
d97 1
a97 1
			int count, unsigned short *chars);
d99 1
a99 1
			 int count, char *chars);
d101 1
a101 1
			  int count, unsigned short *chars);
d103 2
a104 2
			    unsigned int nglyph, CharInfoPtr *ppci,
			    pointer pglyphBase);
d106 2
a107 2
			   unsigned int nglyph, CharInfoPtr *ppci,
			   pointer pglyphBase);
d109 1
a109 1
			 int w, int h, int x, int y);
d112 20
a131 20
	cwFillSpans,
	cwSetSpans,
	cwPutImage,
	cwCopyArea,
	cwCopyPlane,
	cwPolyPoint,
	cwPolylines,
	cwPolySegment,
	cwPolyRectangle,
	cwPolyArc,
	cwFillPolygon,
	cwPolyFillRect,
	cwPolyFillArc,
	cwPolyText8,
	cwPolyText16,
	cwImageText8,
	cwImageText16,
	cwImageGlyphBlt,
	cwPolyGlyphBlt,
	cwPushPixels
d136 1
a136 1
	    int *pwidth, int fSorted)
d144 2
a145 2
    (*pBackingGC->ops->FillSpans)(pBackingDst, pBackingGC, nspans, ppt,
				  pwidth, fSorted);
d152 1
a152 1
	   int *pwidth, int nspans, int fSorted)
d160 2
a161 2
    (*pBackingGC->ops->SetSpans)(pBackingDst, pBackingGC, psrc, ppt, pwidth,
				 nspans, fSorted);
d168 1
a168 1
	   int leftPad, int format, char *pBits)
d176 2
a177 2
    (*pBackingGC->ops->PutImage)(pBackingDst, pBackingGC, depth, x, y, w, h,
				 leftPad, format, pBits);
d184 1
a184 1
	   int w, int h, int dstx, int dsty)
d186 3
a188 2
    int		odstx, odsty;
    RegionPtr	exposed = NULL;
d196 2
d201 2
a202 6
    exposed = (*pBackingGC->ops->CopyArea)(pBackingSrc, pBackingDst,
					   pBackingGC, srcx, srcy, w, h,
					   dstx, dsty);

    if (exposed != NULL)
	REGION_TRANSLATE(pDst->pScreen, exposed, odstx - dstx, odsty - dsty);
d206 2
a207 1
    return exposed;
d212 1
a212 1
	    int w, int h, int dstx, int dsty, unsigned long plane)
d214 3
a216 2
    int		odstx, odsty;
    RegionPtr	exposed = NULL;
d224 2
d229 3
a231 6
    exposed = (*pBackingGC->ops->CopyPlane)(pBackingSrc, pBackingDst,
					    pBackingGC, srcx, srcy, w, h,
					    dstx, dsty, plane);

    if (exposed != NULL)
	REGION_TRANSLATE(pDst->pScreen, exposed, odstx - dstx, odsty - dsty);
d235 2
a236 1
    return exposed;
d240 1
a240 1
cwPolyPoint(DrawablePtr pDst, GCPtr pGC, int mode, int npt, xPoint *ppt)
d247 1
a247 1
	CW_OFFSET_XYPOINTS(ppt, npt);
d249 1
a249 1
	CW_OFFSET_XYPOINTS(ppt, 1);
d251 1
a251 1
    (*pBackingGC->ops->PolyPoint)(pBackingDst, pBackingGC, mode, npt, ppt);
d264 1
a264 1
	CW_OFFSET_XYPOINTS(ppt, npt);
d266 1
a266 1
	CW_OFFSET_XYPOINTS(ppt, 1);
d268 1
a268 1
    (*pBackingGC->ops->Polylines)(pBackingDst, pBackingGC, mode, npt, ppt);
d274 1
a274 1
cwPolySegment(DrawablePtr pDst, GCPtr pGC, int nseg, xSegment *pSegs)
d282 1
a282 1
    (*pBackingGC->ops->PolySegment)(pBackingDst, pBackingGC, nseg, pSegs);
d296 1
a296 1
    (*pBackingGC->ops->PolyRectangle)(pBackingDst, pBackingGC, nrects, pRects);
d302 1
a302 1
cwPolyArc(DrawablePtr pDst, GCPtr pGC, int narcs, xArc *pArcs)
d310 1
a310 1
    (*pBackingGC->ops->PolyArc)(pBackingDst, pBackingGC, narcs, pArcs);
d317 1
a317 1
	      DDXPointPtr ppt)
d324 1
a324 1
	CW_OFFSET_XYPOINTS(ppt, npt);
d326 1
a326 1
	CW_OFFSET_XYPOINTS(ppt, 1);
d328 2
a329 2
    (*pBackingGC->ops->FillPolygon)(pBackingDst, pBackingGC, shape, mode, npt,
				    ppt);
d343 1
a343 1
    (*pBackingGC->ops->PolyFillRect)(pBackingDst, pBackingGC, nrects, pRects);
d349 1
a349 1
cwPolyFillArc(DrawablePtr pDst, GCPtr pGC, int narcs, xArc *parcs)
d357 1
a357 1
    (*pBackingGC->ops->PolyFillArc)(pBackingDst, pBackingGC, narcs, parcs);
d366 1
d373 2
a374 2
    result = (*pBackingGC->ops->PolyText8)(pBackingDst, pBackingGC, x, y,
					   count, chars);
d383 1
a383 1
	     unsigned short *chars)
d386 1
d393 2
a394 2
    result = (*pBackingGC->ops->PolyText16)(pBackingDst, pBackingGC, x, y,
					    count, chars);
d409 2
a410 2
    (*pBackingGC->ops->ImageText8)(pBackingDst, pBackingGC, x, y, count,
				   chars);
d417 1
a417 1
	     unsigned short *chars)
d425 2
a426 2
    (*pBackingGC->ops->ImageText16)(pBackingDst, pBackingGC, x, y, count,
				    chars);
d433 1
a433 1
		CharInfoPtr *ppci, pointer pglyphBase)
d441 2
a442 2
    (*pBackingGC->ops->ImageGlyphBlt)(pBackingDst, pBackingGC, x, y, nglyph,
				      ppci, pglyphBase);
d449 1
a449 1
	       CharInfoPtr *ppci, pointer pglyphBase)
d457 2
a458 2
    (*pBackingGC->ops->PolyGlyphBlt)(pBackingDst, pBackingGC, x, y, nglyph,
				      ppci, pglyphBase);
d465 1
a465 1
	     int x, int y)
d473 2
a474 2
    (*pBackingGC->ops->PushPixels)(pBackingGC, pBitMap, pBackingDst, w, h,
				   x, y);
a477 1

@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d22 1
a32 1
#include "mi.h"
d188 1
a188 1
    int		osrcx, osrcy;
a195 2
    osrcx = srcx;
    osrcy = srcy;
d199 7
a205 4
    (*pBackingGC->ops->CopyArea)(pBackingSrc, pBackingDst,
				 pBackingGC, srcx, srcy, w, h,
				 dstx, dsty);
    
d208 1
a208 3
    return miHandleExposures(pSrc, pDst, pGC,
			     osrcx, osrcy, w, h,
			     odstx, odsty, 0);
d216 1
a216 1
    int		osrcx, osrcy;
a223 2
    osrcx = srcx;
    osrcy = srcy;
d227 6
a232 3
    (*pBackingGC->ops->CopyPlane)(pBackingSrc, pBackingDst,
				  pBackingGC, srcx, srcy, w, h,
				  dstx, dsty, plane);
d236 1
a236 3
    return miHandleExposures(pSrc, pDst, pGC,
			     osrcx, osrcy, w, h,
			     odstx, odsty, plane);
@

