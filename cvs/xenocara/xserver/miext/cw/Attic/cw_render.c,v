head	1.6;
access;
symbols
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.06.07.17.28.55;	author matthieu;	state dead;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.30;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.06;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.57.05;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@/*
 * Copyright Â© 2004 Eric Anholt
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Eric Anholt not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Eric Anholt makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * ERIC ANHOLT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL ERIC ANHOLT BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <string.h>

#include "gcstruct.h"
#include "windowstr.h"
#include "cw.h"

#define cwPsDecl(pScreen)	\
    PictureScreenPtr	ps = GetPictureScreen (pScreen);	\
    cwScreenPtr		pCwScreen = getCwScreen (pScreen)

#define cwPicturePrivate					\
    cwPicturePtr    pPicturePrivate = getCwPicture(pPicture)

#define cwSrcPictureDecl							\
    int		    src_picture_x_off, src_picture_y_off;			\
    PicturePtr	    pBackingSrcPicture = cwGetBackingPicture(pSrcPicture,	\
							     &src_picture_x_off,\
							     &src_picture_y_off)

#define cwDstPictureDecl							\
    int		    dst_picture_x_off, dst_picture_y_off;			\
    PicturePtr	    pBackingDstPicture = cwGetBackingPicture(pDstPicture,	\
							     &dst_picture_x_off,\
							     &dst_picture_y_off)

#define cwMskPictureDecl							\
    int		    msk_picture_x_off = 0, msk_picture_y_off = 0;		\
    PicturePtr	    pBackingMskPicture = (!pMskPicture ? 0 :	    		\
					  cwGetBackingPicture(pMskPicture,	\
							      &msk_picture_x_off,\
							      &msk_picture_y_off))

#define cwPsUnwrap(elt) {	\
    ps->elt = pCwScreen->elt;	\
}

#define cwPsWrap(elt,func) {	\
    pCwScreen->elt = ps->elt;	\
    ps->elt = func;		\
}

static cwPicturePtr
cwCreatePicturePrivate(PicturePtr pPicture)
{
    WindowPtr pWindow = (WindowPtr) pPicture->pDrawable;
    PixmapPtr pPixmap = getCwPixmap(pWindow);
    int error;
    cwPicturePtr pPicturePrivate;

    pPicturePrivate = malloc(sizeof(cwPictureRec));
    if (!pPicturePrivate)
        return NULL;

    pPicturePrivate->pBackingPicture = CreatePicture(0, &pPixmap->drawable,
                                                     pPicture->pFormat,
                                                     0, 0, serverClient,
                                                     &error);
    if (!pPicturePrivate->pBackingPicture) {
        free(pPicturePrivate);
        return NULL;
    }

    /*
     * Ensure that this serial number does not match the window's
     */
    pPicturePrivate->serialNumber = pPixmap->drawable.serialNumber;
    pPicturePrivate->stateChanges = (1 << (CPLastBit + 1)) - 1;

    setCwPicture(pPicture, pPicturePrivate);

    return pPicturePrivate;
}

static void
cwDestroyPicturePrivate(PicturePtr pPicture)
{
    cwPicturePrivate;

    if (pPicturePrivate) {
        if (pPicturePrivate->pBackingPicture)
            FreePicture(pPicturePrivate->pBackingPicture, 0);
        free(pPicturePrivate);
        setCwPicture(pPicture, NULL);
    }
}

static PicturePtr
cwGetBackingPicture(PicturePtr pPicture, int *x_off, int *y_off)
{
    cwPicturePrivate;

    if (pPicturePrivate) {
        DrawablePtr pDrawable = pPicture->pDrawable;
        WindowPtr pWindow = (WindowPtr) pDrawable;
        PixmapPtr pPixmap = getCwPixmap(pWindow);

        *x_off = pDrawable->x - pPixmap->screen_x;
        *y_off = pDrawable->y - pPixmap->screen_y;

        return pPicturePrivate->pBackingPicture;
    }
    else {
        *x_off = *y_off = 0;
        return pPicture;
    }
}

static void
cwDestroyPicture(PicturePtr pPicture)
{
    ScreenPtr pScreen = pPicture->pDrawable->pScreen;

    cwPsDecl(pScreen);

    cwPsUnwrap(DestroyPicture);
    cwDestroyPicturePrivate(pPicture);
    (*ps->DestroyPicture) (pPicture);
    cwPsWrap(DestroyPicture, cwDestroyPicture);
}

static void
cwChangePicture(PicturePtr pPicture, Mask mask)
{
    ScreenPtr pScreen = pPicture->pDrawable->pScreen;

    cwPsDecl(pScreen);
    cwPicturePtr pPicturePrivate = getCwPicture(pPicture);

    cwPsUnwrap(ChangePicture);
    (*ps->ChangePicture) (pPicture, mask);
    if (pPicturePrivate)
        pPicturePrivate->stateChanges |= mask;
    cwPsWrap(ChangePicture, cwChangePicture);
}

static void
cwValidatePicture(PicturePtr pPicture, Mask mask)
{
    DrawablePtr pDrawable = pPicture->pDrawable;
    ScreenPtr pScreen = pDrawable->pScreen;

    cwPsDecl(pScreen);
    cwPicturePrivate;

    cwPsUnwrap(ValidatePicture);

    /*
     * Must call ValidatePicture to ensure pPicture->pCompositeClip is valid
     */
    (*ps->ValidatePicture) (pPicture, mask);

    if (!cwDrawableIsRedirWindow(pDrawable)) {
        if (pPicturePrivate)
            cwDestroyPicturePrivate(pPicture);
    }
    else {
        PicturePtr pBackingPicture;
        DrawablePtr pBackingDrawable;
        int x_off, y_off;

        pBackingDrawable = cwGetBackingDrawable(pDrawable, &x_off, &y_off);

        if (pPicturePrivate &&
            pPicturePrivate->pBackingPicture->pDrawable != pBackingDrawable) {
            cwDestroyPicturePrivate(pPicture);
            pPicturePrivate = 0;
        }

        if (!pPicturePrivate) {
            pPicturePrivate = cwCreatePicturePrivate(pPicture);
            if (!pPicturePrivate) {
                cwPsWrap(ValidatePicture, cwValidatePicture);
                return;
            }
        }

        pBackingPicture = pPicturePrivate->pBackingPicture;

        /*
         * Always copy transform and filters because there's no
         * indication of when they've changed
         */
        SetPictureTransform(pBackingPicture, pPicture->transform);

        if (pBackingPicture->filter != pPicture->filter ||
            pPicture->filter_nparams > 0) {
            char *filter = PictureGetFilterName(pPicture->filter);

            SetPictureFilter(pBackingPicture,
                             filter, strlen(filter),
                             pPicture->filter_params, pPicture->filter_nparams);
        }

        pPicturePrivate->stateChanges |= mask;

        if (pPicturePrivate->serialNumber != pDrawable->serialNumber ||
            (pPicturePrivate->
             stateChanges & (CPClipXOrigin | CPClipYOrigin | CPClipMask))) {
            SetPictureClipRegion(pBackingPicture, x_off - pDrawable->x,
                                 y_off - pDrawable->y,
                                 pPicture->pCompositeClip);

            pPicturePrivate->serialNumber = pDrawable->serialNumber;
            pPicturePrivate->stateChanges &=
                ~(CPClipXOrigin | CPClipYOrigin | CPClipMask);
        }

        CopyPicture(pPicture, pPicturePrivate->stateChanges, pBackingPicture);

        ValidatePicture(pBackingPicture);
    }
    cwPsWrap(ValidatePicture, cwValidatePicture);
}

static void
cwComposite(CARD8 op,
            PicturePtr pSrcPicture,
            PicturePtr pMskPicture,
            PicturePtr pDstPicture,
            INT16 xSrc,
            INT16 ySrc,
            INT16 xMsk,
            INT16 yMsk, INT16 xDst, INT16 yDst, CARD16 width, CARD16 height)
{
    ScreenPtr pScreen = pDstPicture->pDrawable->pScreen;

    cwPsDecl(pScreen);
    cwSrcPictureDecl;
    cwMskPictureDecl;
    cwDstPictureDecl;

    cwPsUnwrap(Composite);
    (*ps->Composite) (op, pBackingSrcPicture, pBackingMskPicture,
                      pBackingDstPicture, xSrc + src_picture_x_off,
                      ySrc + src_picture_y_off, xMsk + msk_picture_x_off,
                      yMsk + msk_picture_y_off, xDst + dst_picture_x_off,
                      yDst + dst_picture_y_off, width, height);
    cwPsWrap(Composite, cwComposite);
}

static void
cwCompositeRects(CARD8 op,
                 PicturePtr pDstPicture,
                 xRenderColor * color, int nRect, xRectangle *rects)
{
    ScreenPtr pScreen = pDstPicture->pDrawable->pScreen;

    cwPsDecl(pScreen);
    cwDstPictureDecl;
    int i;

    cwPsUnwrap(CompositeRects);
    for (i = 0; i < nRect; i++) {
        rects[i].x += dst_picture_x_off;
        rects[i].y += dst_picture_y_off;
    }
    (*ps->CompositeRects) (op, pBackingDstPicture, color, nRect, rects);
    cwPsWrap(CompositeRects, cwCompositeRects);
}

static void
cwTrapezoids(CARD8 op,
             PicturePtr pSrcPicture,
             PicturePtr pDstPicture,
             PictFormatPtr maskFormat,
             INT16 xSrc, INT16 ySrc, int ntrap, xTrapezoid * traps)
{
    ScreenPtr pScreen = pDstPicture->pDrawable->pScreen;

    cwPsDecl(pScreen);
    cwSrcPictureDecl;
    cwDstPictureDecl;
    int i;

    cwPsUnwrap(Trapezoids);
    if (dst_picture_x_off || dst_picture_y_off) {
        for (i = 0; i < ntrap; i++) {
            traps[i].top += dst_picture_y_off << 16;
            traps[i].bottom += dst_picture_y_off << 16;
            traps[i].left.p1.x += dst_picture_x_off << 16;
            traps[i].left.p1.y += dst_picture_y_off << 16;
            traps[i].left.p2.x += dst_picture_x_off << 16;
            traps[i].left.p2.y += dst_picture_y_off << 16;
            traps[i].right.p1.x += dst_picture_x_off << 16;
            traps[i].right.p1.y += dst_picture_y_off << 16;
            traps[i].right.p2.x += dst_picture_x_off << 16;
            traps[i].right.p2.y += dst_picture_y_off << 16;
        }
    }
    (*ps->Trapezoids) (op, pBackingSrcPicture, pBackingDstPicture, maskFormat,
                       xSrc + src_picture_x_off, ySrc + src_picture_y_off,
                       ntrap, traps);
    cwPsWrap(Trapezoids, cwTrapezoids);
}

static void
cwTriangles(CARD8 op,
            PicturePtr pSrcPicture,
            PicturePtr pDstPicture,
            PictFormatPtr maskFormat,
            INT16 xSrc, INT16 ySrc, int ntri, xTriangle * tris)
{
    ScreenPtr pScreen = pDstPicture->pDrawable->pScreen;

    cwPsDecl(pScreen);
    cwSrcPictureDecl;
    cwDstPictureDecl;
    int i;

    cwPsUnwrap(Triangles);
    if (dst_picture_x_off || dst_picture_y_off) {
        for (i = 0; i < ntri; i++) {
            tris[i].p1.x += dst_picture_x_off << 16;
            tris[i].p1.y += dst_picture_y_off << 16;
            tris[i].p2.x += dst_picture_x_off << 16;
            tris[i].p2.y += dst_picture_y_off << 16;
            tris[i].p3.x += dst_picture_x_off << 16;
            tris[i].p3.y += dst_picture_y_off << 16;
        }
    }
    (*ps->Triangles) (op, pBackingSrcPicture, pBackingDstPicture, maskFormat,
                      xSrc + src_picture_x_off, ySrc + src_picture_y_off,
                      ntri, tris);
    cwPsWrap(Triangles, cwTriangles);
}

void
cwInitializeRender(ScreenPtr pScreen)
{
    cwPsDecl(pScreen);

    cwPsWrap(DestroyPicture, cwDestroyPicture);
    cwPsWrap(ChangePicture, cwChangePicture);
    cwPsWrap(ValidatePicture, cwValidatePicture);
    cwPsWrap(Composite, cwComposite);
    cwPsWrap(CompositeRects, cwCompositeRects);
    cwPsWrap(Trapezoids, cwTrapezoids);
    cwPsWrap(Triangles, cwTriangles);
    /* There is no need to wrap AddTraps as far as we can tell.  AddTraps can
     * only be done on alpha-only pictures, and we won't be getting
     * alpha-only window pictures, so there's no need to translate.
     */
}

void
cwFiniRender(ScreenPtr pScreen)
{
    cwPsDecl(pScreen);

    cwPsUnwrap(DestroyPicture);
    cwPsUnwrap(ChangePicture);
    cwPsUnwrap(ValidatePicture);
    cwPsUnwrap(Composite);
    cwPsUnwrap(CompositeRects);
    cwPsUnwrap(Trapezoids);
    cwPsUnwrap(Triangles);
}
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.4
log
@Update to xserver 1.11.2
@
text
@d69 1
a69 1
cwCreatePicturePrivate (PicturePtr pPicture)
d71 4
a74 4
    WindowPtr	    pWindow = (WindowPtr) pPicture->pDrawable;
    PixmapPtr	    pPixmap = getCwPixmap (pWindow);
    int		    error;
    cwPicturePtr    pPicturePrivate;
d76 1
a76 1
    pPicturePrivate = malloc(sizeof (cwPictureRec));
d78 9
a86 10
	return NULL;
    
    pPicturePrivate->pBackingPicture = CreatePicture (0, &pPixmap->drawable, 
						      pPicture->pFormat,
						      0, 0, serverClient,
						      &error);
    if (!pPicturePrivate->pBackingPicture)
    {
	free(pPicturePrivate);
	return NULL;
d94 1
a94 1
    
d101 1
a101 1
cwDestroyPicturePrivate (PicturePtr pPicture)
d105 5
a109 6
    if (pPicturePrivate)
    {
	if (pPicturePrivate->pBackingPicture)
	    FreePicture (pPicturePrivate->pBackingPicture, 0);
	free(pPicturePrivate);
	setCwPicture(pPicture, NULL);
d114 1
a114 1
cwGetBackingPicture (PicturePtr pPicture, int *x_off, int *y_off)
d118 4
a121 5
    if (pPicturePrivate)
    {
	DrawablePtr pDrawable = pPicture->pDrawable;
	WindowPtr   pWindow = (WindowPtr) pDrawable;
	PixmapPtr   pPixmap = getCwPixmap (pWindow);
d123 2
a124 2
	*x_off = pDrawable->x - pPixmap->screen_x;
	*y_off = pDrawable->y - pPixmap->screen_y;
d126 1
a126 1
	return pPicturePrivate->pBackingPicture;
d128 3
a130 4
    else
    {
	*x_off = *y_off = 0;
	return pPicture;
d133 1
a133 1
    
d135 1
a135 1
cwDestroyPicture (PicturePtr pPicture)
d137 2
a138 1
    ScreenPtr		pScreen = pPicture->pDrawable->pScreen;
d140 1
a140 1
    
d142 1
a142 1
    cwDestroyPicturePrivate (pPicture);
d148 1
a148 1
cwChangePicture (PicturePtr pPicture, Mask mask)
d150 2
a151 1
    ScreenPtr		pScreen = pPicture->pDrawable->pScreen;
d153 2
a154 2
    cwPicturePtr	pPicturePrivate = getCwPicture(pPicture);
    
d158 1
a158 1
	pPicturePrivate->stateChanges |= mask;
a161 1

d163 1
a163 2
cwValidatePicture (PicturePtr pPicture,
		   Mask       mask)
d165 3
a167 2
    DrawablePtr		pDrawable = pPicture->pDrawable;
    ScreenPtr		pScreen = pDrawable->pScreen;
d170 1
a170 1
    
d177 4
a180 5
    
    if (!cwDrawableIsRedirWindow (pDrawable))
    {
	if (pPicturePrivate)
	    cwDestroyPicturePrivate (pPicture);
d182 51
a232 57
    else
    {
	PicturePtr  pBackingPicture;
	DrawablePtr pBackingDrawable;
	int	    x_off, y_off;
	
	pBackingDrawable = cwGetBackingDrawable(pDrawable, &x_off, &y_off);

	if (pPicturePrivate && 
	    pPicturePrivate->pBackingPicture->pDrawable != pBackingDrawable)
	{
	    cwDestroyPicturePrivate (pPicture);
	    pPicturePrivate = 0;
	}

	if (!pPicturePrivate)
	{
	    pPicturePrivate = cwCreatePicturePrivate (pPicture);
	    if (!pPicturePrivate)
	    {
		cwPsWrap(ValidatePicture, cwValidatePicture);
		return;
	    }
	}

	pBackingPicture = pPicturePrivate->pBackingPicture;

	/*
	 * Always copy transform and filters because there's no
	 * indication of when they've changed
	 */
	SetPictureTransform(pBackingPicture, pPicture->transform);
	
	if (pBackingPicture->filter != pPicture->filter ||
	    pPicture->filter_nparams > 0)
	{
	    char    *filter = PictureGetFilterName (pPicture->filter);
	    
	    SetPictureFilter(pBackingPicture,
			     filter, strlen (filter),
			     pPicture->filter_params,
			     pPicture->filter_nparams);
	}

	pPicturePrivate->stateChanges |= mask;

	if (pPicturePrivate->serialNumber != pDrawable->serialNumber ||
	    (pPicturePrivate->stateChanges & (CPClipXOrigin|CPClipYOrigin|CPClipMask)))
	{
	    SetPictureClipRegion (pBackingPicture, 
				  x_off - pDrawable->x,
				  y_off - pDrawable->y,
				  pPicture->pCompositeClip);
    
	    pPicturePrivate->serialNumber = pDrawable->serialNumber;
	    pPicturePrivate->stateChanges &= ~(CPClipXOrigin | CPClipYOrigin | CPClipMask);
	}
d234 1
a234 1
	CopyPicture(pPicture, pPicturePrivate->stateChanges, pBackingPicture);
d236 1
a236 1
	ValidatePicture (pBackingPicture);
d242 8
a249 12
cwComposite (CARD8	op,
	     PicturePtr pSrcPicture,
	     PicturePtr pMskPicture,
	     PicturePtr pDstPicture,
	     INT16	xSrc,
	     INT16	ySrc,
	     INT16	xMsk,
	     INT16	yMsk,
	     INT16	xDst,
	     INT16	yDst,
	     CARD16	width,
	     CARD16	height)
d251 2
a252 1
    ScreenPtr	pScreen = pDstPicture->pDrawable->pScreen;
d257 1
a257 1
    
d259 5
a263 5
    (*ps->Composite) (op, pBackingSrcPicture, pBackingMskPicture, pBackingDstPicture,
		      xSrc + src_picture_x_off, ySrc + src_picture_y_off,
		      xMsk + msk_picture_x_off, yMsk + msk_picture_y_off,
		      xDst + dst_picture_x_off, yDst + dst_picture_y_off,
		      width, height);
d268 3
a270 5
cwCompositeRects (CARD8		op,
		  PicturePtr	pDstPicture,
		  xRenderColor  *color,
		  int		nRect,
		  xRectangle	*rects)
d272 2
a273 1
    ScreenPtr	pScreen = pDstPicture->pDrawable->pScreen;
d277 1
a277 1
    
d279 3
a281 4
    for (i = 0; i < nRect; i++)
    {
	rects[i].x += dst_picture_x_off;
	rects[i].y += dst_picture_y_off;
d288 5
a292 8
cwTrapezoids (CARD8	    op,
	      PicturePtr    pSrcPicture,
	      PicturePtr    pDstPicture,
	      PictFormatPtr maskFormat,
	      INT16	    xSrc,
	      INT16	    ySrc,
	      int	    ntrap,
	      xTrapezoid    *traps)
d294 2
a295 1
    ScreenPtr	pScreen = pDstPicture->pDrawable->pScreen;
d300 1
a300 1
    
d303 12
a314 13
	for (i = 0; i < ntrap; i++)
	{
	    traps[i].top += dst_picture_y_off << 16;
	    traps[i].bottom += dst_picture_y_off << 16;
	    traps[i].left.p1.x += dst_picture_x_off << 16;
	    traps[i].left.p1.y += dst_picture_y_off << 16;
	    traps[i].left.p2.x += dst_picture_x_off << 16;
	    traps[i].left.p2.y += dst_picture_y_off << 16;
	    traps[i].right.p1.x += dst_picture_x_off << 16;
	    traps[i].right.p1.y += dst_picture_y_off << 16;
	    traps[i].right.p2.x += dst_picture_x_off << 16;
	    traps[i].right.p2.y += dst_picture_y_off << 16;
	}
d317 2
a318 2
		       xSrc + src_picture_x_off, ySrc + src_picture_y_off,
		       ntrap, traps);
d323 5
a327 8
cwTriangles (CARD8	    op,
	     PicturePtr	    pSrcPicture,
	     PicturePtr	    pDstPicture,
	     PictFormatPtr  maskFormat,
	     INT16	    xSrc,
	     INT16	    ySrc,
	     int	    ntri,
	     xTriangle	   *tris)
d329 2
a330 1
    ScreenPtr	pScreen = pDstPicture->pDrawable->pScreen;
d335 1
a335 1
    
d338 8
a345 9
	for (i = 0; i < ntri; i++)
	{
	    tris[i].p1.x += dst_picture_x_off << 16;
	    tris[i].p1.y += dst_picture_y_off << 16;
	    tris[i].p2.x += dst_picture_x_off << 16;
	    tris[i].p2.y += dst_picture_y_off << 16;
	    tris[i].p3.x += dst_picture_x_off << 16;
	    tris[i].p3.y += dst_picture_y_off << 16;
	}
d348 2
a349 2
		      xSrc + src_picture_x_off, ySrc + src_picture_y_off,
		      ntri, tris);
d354 1
a354 1
cwInitializeRender (ScreenPtr pScreen)
d356 1
a356 1
    cwPsDecl (pScreen);
d372 1
a372 1
cwFiniRender (ScreenPtr pScreen)
d374 1
a374 1
    cwPsDecl (pScreen);
a383 1

@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a373 60
static void
cwTriStrip (CARD8	    op,
	    PicturePtr	    pSrcPicture,
	    PicturePtr	    pDstPicture,
	    PictFormatPtr   maskFormat,
	    INT16	    xSrc,
	    INT16	    ySrc,
	    int		    npoint,
	    xPointFixed    *points)
{
    ScreenPtr	pScreen = pDstPicture->pDrawable->pScreen;
    cwPsDecl(pScreen);
    cwSrcPictureDecl;
    cwDstPictureDecl;
    int i;

    cwPsUnwrap(TriStrip);
    if (dst_picture_x_off || dst_picture_y_off) {
	for (i = 0; i < npoint; i++)
	{
	    points[i].x += dst_picture_x_off << 16;
	    points[i].y += dst_picture_y_off << 16;
	}
    }
    (*ps->TriStrip) (op, pBackingSrcPicture, pBackingDstPicture, maskFormat,
		     xSrc + src_picture_x_off, ySrc + src_picture_y_off,
		     npoint, points);
    cwPsWrap(TriStrip, cwTriStrip);
}

static void
cwTriFan (CARD8		 op,
	  PicturePtr	 pSrcPicture,
	  PicturePtr	 pDstPicture,
	  PictFormatPtr  maskFormat,
	  INT16		 xSrc,
	  INT16		 ySrc,
	  int		 npoint,
	  xPointFixed   *points)
{
    ScreenPtr	pScreen = pDstPicture->pDrawable->pScreen;
    cwPsDecl(pScreen);
    cwSrcPictureDecl;
    cwDstPictureDecl;
    int i;

    cwPsUnwrap(TriFan);
    if (dst_picture_x_off || dst_picture_y_off) {
	for (i = 0; i < npoint; i++)
	{
	    points[i].x += dst_picture_x_off << 16;
	    points[i].y += dst_picture_y_off << 16;
	}
    }
    (*ps->TriFan) (op, pBackingSrcPicture, pBackingDstPicture, maskFormat,
		   xSrc + src_picture_x_off, ySrc + src_picture_y_off,
		   npoint, points);
    cwPsWrap(TriFan, cwTriFan);
}

a385 2
    cwPsWrap(TriStrip, cwTriStrip);
    cwPsWrap(TriFan, cwTriFan);
a403 2
    cwPsUnwrap(TriStrip);
    cwPsUnwrap(TriFan);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a32 2
#ifdef RENDER

d76 1
a76 1
    pPicturePrivate = xalloc (sizeof (cwPictureRec));
d86 1
a86 1
	xfree (pPicturePrivate);
d110 1
a110 1
	xfree (pPicturePrivate);
a469 1
#endif /* RENDER */
@


1.1
log
@Initial revision
@
text
@a21 1
/* $Header$ */
a282 28
cwGlyphs (CARD8      op,
	  PicturePtr pSrcPicture,
	  PicturePtr pDstPicture,
	  PictFormatPtr  maskFormat,
	  INT16      xSrc,
	  INT16      ySrc,
	  int	nlists,
	  GlyphListPtr   lists,
	  GlyphPtr	*glyphs)
{
    ScreenPtr	pScreen = pDstPicture->pDrawable->pScreen;
    cwPsDecl(pScreen);
    cwSrcPictureDecl;
    cwDstPictureDecl;
    
    cwPsUnwrap(Glyphs);
    if (nlists)
    {
	lists->xOff += dst_picture_x_off;
	lists->yOff += dst_picture_y_off;
    }
    (*ps->Glyphs) (op, pBackingSrcPicture, pBackingDstPicture, maskFormat,
		   xSrc + src_picture_x_off, ySrc + src_picture_y_off,
		   nlists, lists, glyphs);
    cwPsWrap(Glyphs, cwGlyphs);
}

static void
a444 1
    cwPsWrap(Glyphs, cwGlyphs);
a464 1
    cwPsUnwrap(Glyphs);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d22 1
@

