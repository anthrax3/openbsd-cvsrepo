head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.10
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.8
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@/*
 * Copyright Â© 2010 NVIDIA Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#ifndef _MISYNC_H_
#define _MISYNC_H_

typedef struct _SyncFence SyncFence;
typedef struct _SyncTrigger SyncTrigger;

typedef void (*SyncScreenCreateFenceFunc) (ScreenPtr pScreen,
                                           SyncFence * pFence,
                                           Bool initially_triggered);
typedef void (*SyncScreenDestroyFenceFunc) (ScreenPtr pScreen,
                                            SyncFence * pFence);

typedef struct _syncScreenFuncs {
    SyncScreenCreateFenceFunc CreateFence;
    SyncScreenDestroyFenceFunc DestroyFence;
} SyncScreenFuncsRec, *SyncScreenFuncsPtr;


extern _X_EXPORT void
miSyncScreenCreateFence(ScreenPtr pScreen, SyncFence * pFence,
                        Bool initially_triggered);
extern _X_EXPORT void
 miSyncScreenDestroyFence(ScreenPtr pScreen, SyncFence * pFence);

typedef void (*SyncFenceSetTriggeredFunc) (SyncFence * pFence);
typedef void (*SyncFenceResetFunc) (SyncFence * pFence);
typedef Bool (*SyncFenceCheckTriggeredFunc) (SyncFence * pFence);
typedef void (*SyncFenceAddTriggerFunc) (SyncTrigger * pTrigger);
typedef void (*SyncFenceDeleteTriggerFunc) (SyncTrigger * pTrigger);

typedef struct _syncFenceFuncs {
    SyncFenceSetTriggeredFunc SetTriggered;
    SyncFenceResetFunc Reset;
    SyncFenceCheckTriggeredFunc CheckTriggered;
    SyncFenceAddTriggerFunc AddTrigger;
    SyncFenceDeleteTriggerFunc DeleteTrigger;
} SyncFenceFuncsRec, *SyncFenceFuncsPtr;

extern _X_EXPORT void

miSyncInitFence(ScreenPtr pScreen, SyncFence * pFence,
                Bool initially_triggered);
extern _X_EXPORT void
 miSyncDestroyFence(SyncFence * pFence);
extern _X_EXPORT void
 miSyncTriggerFence(SyncFence * pFence);

extern _X_EXPORT SyncScreenFuncsPtr miSyncGetScreenFuncs(ScreenPtr pScreen);
extern _X_EXPORT Bool
 miSyncSetup(ScreenPtr pScreen);

Bool
miSyncFenceCheckTriggered(SyncFence * pFence);

void
miSyncFenceSetTriggered(SyncFence * pFence);

void
miSyncFenceReset(SyncFence * pFence);

void
miSyncFenceAddTrigger(SyncTrigger * pTrigger);

void
miSyncFenceDeleteTrigger(SyncTrigger * pTrigger);

int
miSyncInitFenceFromFD(DrawablePtr pDraw, SyncFence *pFence, int fd, BOOL initially_triggered);

int
miSyncFDFromFence(DrawablePtr pDraw, SyncFence *pFence);

#endif                          /* _MISYNC_H_ */
@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d45 1
a46 1

d78 21
@


1.1
log
@Update to xserver 1.11.2
@
text
@d35 2
a36 2
					   SyncFence* pFence,
					   Bool initially_triggered);
d38 1
a38 1
					    SyncFence* pFence);
d41 2
a42 2
    SyncScreenCreateFenceFunc	CreateFence;
    SyncScreenDestroyFenceFunc	DestroyFence;
d46 3
a48 2
miSyncScreenCreateFence(ScreenPtr pScreen, SyncFence* pFence,
			Bool initially_triggered);
d50 1
a50 1
miSyncScreenDestroyFence(ScreenPtr pScreen, SyncFence* pFence);
d52 5
a56 5
typedef void (*SyncFenceSetTriggeredFunc) (SyncFence* pFence);
typedef void (*SyncFenceResetFunc) (SyncFence* pFence);
typedef Bool (*SyncFenceCheckTriggeredFunc) (SyncFence* pFence);
typedef void (*SyncFenceAddTriggerFunc) (SyncTrigger* pTrigger);
typedef void (*SyncFenceDeleteTriggerFunc) (SyncTrigger* pTrigger);
d59 5
a63 5
    SyncFenceSetTriggeredFunc	SetTriggered;
    SyncFenceResetFunc		Reset;
    SyncFenceCheckTriggeredFunc	CheckTriggered;
    SyncFenceAddTriggerFunc	AddTrigger;
    SyncFenceDeleteTriggerFunc	DeleteTrigger;
d67 3
a69 1
miSyncInitFence(ScreenPtr pScreen, SyncFence* pFence, Bool initially_triggered);
d71 1
a71 1
miSyncDestroyFence(SyncFence* pFence);
d73 1
a73 1
miSyncTriggerFence(SyncFence* pFence);
d75 1
a75 2
extern _X_EXPORT SyncScreenFuncsPtr
miSyncGetScreenFuncs(ScreenPtr pScreen);
d77 1
a77 1
miSyncSetup(ScreenPtr pScreen);
d79 1
a79 1
#endif /* _MISYNC_H_ */
@

