head	1.2;
access;
symbols
	OPENBSD_5_2:1.1.1.1.0.22
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2012.11.02.18.59.05;	author matthieu;	state dead;
branches;
next	1.1;

1.1
date	2006.11.25.16.16.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.16.16.04;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove things that are no longer linked to the build: imake,cf and pciids
@
text
@XCOMM $XFree86: xc/config/cf/lnxdoc.rules,v 3.27 2003/01/15 03:17:29 dawes Exp $
XCOMM
XCOMM Rules for formatting Linuxdoc-SGML documentation
XCOMM

#include <lnxdoc.tmpl>

#ifdef DontInstallLinuxDoc
#define LinuxDocInstall(file,dest)	/* do nothing */
#define LinuxDocInstallMultiple(files,dest)	/* do nothing */
#define LinuxDocInstallIfExists(file,dest)	/* do nothing */
#else
#define LinuxDocInstall(file,dest)	InstallNonExecFile(file,dest)
#define LinuxDocInstallMultiple(files,dest)				@@@@\
InstallMultipleDest(install,files,dest)

#define LinuxDocInstallIfExists(file,dir)				@@@@\
install::								@@@@\
	MakeDir($(DESTDIR)dir)						@@@@\
	@@if [ -f file ]; then set -x; \					@@@@\
	  $(INSTALL) $(INSTALLFLAGS) $(INSTDATFLAGS) \			@@@@\
		file $(DESTDIR)dir; \					@@@@\
	fi
#endif

/* Version for sgmlfmt */

#if BuildLinuxDocPS
#define LinuxDocSgmlToPs(sgmlfile,base) 				@@@@\
all:: base.ps PdfTarget(base)						@@@@\
									@@@@\
base.ps: sgmlfile $(SGMLDEPENDS)					@@@@\
	RemoveFile(_$@@ $@@)						@@@@\
	@@(BASE=`basename sgmlfile .sgml`;\				@@@@\
	  set -x;\							@@@@\
	  RemoveFile($$BASE.ps);\					@@@@\
	  $(SGMLFMTCMD) -f ps sgmlfile && \				@@@@\
		$(MV) $$BASE.ps _$@@ && $(MV) _$@@ $@@)			@@@@\
									@@@@\
LinuxDocInstall(base.ps,$(XFREE86PSDOCDIR))				@@@@\
									@@@@\
ConvertPsToPdf(base)							@@@@\
									@@@@\
LinuxDocInstallIfExists(base.pdf,$(XFREE86PDFDOCDIR))			@@@@\
									@@@@\
clean::									@@@@\
	RemoveFile(Concat(_,base.ps) base.ps)
#else
#define LinuxDocSgmlToPs(sgmlfile,base) /**/
#endif

#if BuildLinuxDocText
#define LinuxDocSgmlToText(sgmlfile,textfile)				@@@@\
AllTarget(textfile)							@@@@\
									@@@@\
textfile: sgmlfile $(SGMLDEPENDS)					@@@@\
	RemoveFiles(_$@@ $@@)						@@@@\
	@@(BASE=`basename sgmlfile .sgml`;\				@@@@\
	  set -x;\							@@@@\
	  RemoveFile($$BASE.latin1);\					@@@@\
	  $(SGMLFMTCMD) -f latin1 -b -n sgmlfile && \			@@@@\
	  $(CVSIDENTFIX) < $$BASE.latin1 | $(XORGIDENTFIX) | $(XFREE86IDENTFIX) > _$@@ && $(MV) _$@@ $@@ && \	@@@@\
	  RemoveFile($$BASE.latin1))					@@@@\
									@@@@\
LinuxDocInstall(textfile,$(XFREE86DOCDIR))				@@@@\
									@@@@\
clean::									@@@@\
	@@(file=textfile; set -x; RemoveFiles(_$$file $$file))
#else
#define LinuxDocSgmlToText(sgmlfile,textfile) /**/
#endif

#if BuildLinuxDocHtml
#define LinuxDocSgmlToHtml(sgmlfile,base)				@@@@\
AllTarget(base.html)							@@@@\
									@@@@\
base.html: sgmlfile $(SGMLDEPENDS)					@@@@\
	@@if [ sgmlfile != base.sgml ]; then $(LN) sgmlfile base.sgml; fi @@@@\
	RemoveFiles(base*.html)						@@@@\
	$(SGMLFMTCMD) -f html base.sgml || RemoveFile($@@)		@@@@\
	@@if [ sgmlfile != base.sgml ]; then RemoveFile(base.sgml); fi	@@@@\
									@@@@\
LinuxDocInstallMultiple(base*.html,$(XFREE86HTMLDOCDIR))		@@@@\
									@@@@\
clean::									@@@@\
	RemoveFiles(base*.html)
#else
#define LinuxDocSgmlToHtml(sgmlfile,base) /**/
#endif

/*
 * Rule for maintainers to use to updated formatted copies of docs in the
 * source tree.  Use with care.
 */

#ifndef UpdateFormattedDocLong
#define UpdateFormattedDocLong(textfile,dstdir,dstfile)			@@@@\
update.docs:: textfile							@@@@\
	-@@if [ -f dstdir/dstfile ]; then \				@@@@\
	    if [ "$(FORCEUPDATE)" = yes ]; then set -x; \		@@@@\
		if [ "$(FOLLOWLINK)" = no ]; then \			@@@@\
			$(RM) dstdir/dstfile; \				@@@@\
		fi; \							@@@@\
		cp textfile dstdir/dstfile; \				@@@@\
		echo "" >> dstdir/dstfile; \				@@@@\
		echo "\$$XdotOrg\$$" >> dstdir/dstfile; \		@@@@\
	    else \							@@@@\
		$(RM) __tmp1__ __tmp2__; \				@@@@\
		fgrep -v "\$$XdotOrg:" textfile > __tmp1__; \		@@@@\
		fgrep -v "\$$XdotOrg:" dstdir/dstfile > __tmp2__; \	@@@@\
		if diff -B __tmp1__ __tmp2__ > /dev/null 2>&1; then :; \	@@@@\
		else set -x; \						@@@@\
			if [ "$(FOLLOWLINK)" = no ]; then \		@@@@\
				$(RM) dstdir/dstfile; \			@@@@\
			fi; \						@@@@\
			cp textfile dstdir/dstfile ; \			@@@@\
			echo "" >> dstdir/dstfile; \			@@@@\
			echo "\$$XdotOrg"": \$$" >> dstdir/dstfile; \	@@@@\
		fi; \							@@@@\
	    fi; \							@@@@\
	fi								@@@@\
	@@$(RM) __tmp1__ __tmp2__
#endif

#ifndef UpdateFormattedDoc
#define UpdateFormattedDoc(textfile,dstdir)				@@@@\
UpdateFormattedDocLong(textfile,dstdir,textfile)
#endif

/*
 * Avoid using LinuxDocTargetLong with base != sgmlfile because HTML
 * index generation assumes that base == sgmlfile.
 */
#define LinuxDocTargetLong(sgmlfile,textfile,base)			@@@@\
LinuxDocSgmlToText(sgmlfile,textfile)					@@@@\
LinuxDocSgmlToHtml(sgmlfile,base)					@@@@\
LinuxDocSgmlToPs(sgmlfile,base)						@@@@\
UpdateFormattedDoc(textfile,$(FORMATTEDDIR))

#define LinuxDocReadmeTarget(base)					@@@@\
LinuxDocTargetLong(base.sgml,ReadmeFile(base),base)

#define LinuxDocTarget(base)						@@@@\
LinuxDocTargetLong(base.sgml,base,base)

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@
