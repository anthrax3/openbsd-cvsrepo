head	1.2;
access;
symbols
	OPENBSD_5_2:1.1.1.1.0.22
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2012.11.02.18.59.05;	author matthieu;	state dead;
branches;
next	1.1;

1.1
date	2006.11.25.16.15.57;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.16.15.57;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove things that are no longer linked to the build: imake,cf and pciids
@
text
@XCOMM $Xorg: xf86.rules,v 1.3 2000/08/17 19:41:48 cpqbld Exp $




XCOMM $XFree86: xc/config/cf/xf86.rules,v 3.34tsi Exp $

/*
 * Rules needed to build the XFree86 X Servers
 */

#ifndef ObjectMapIncludeFromSpecialSource
#define ObjectMapIncludeFromSpecialSource(dst,src,flags)		@@@@\
dst.c:	src.c								@@@@\
	RemoveFile($@@)							@@@@\
	echo "#include \"mfbmap.h\"" > $@@				@@@@\
	echo "#include \"$?\"" >> $@@					@@@@\
									@@@@\
SpecialCObjectRule(dst,NullParameter,flags)				@@@@\
									@@@@\
depend::	dst.c							@@@@\
									@@@@\
clean::									@@@@\
	RemoveFile(dst.c)
#endif


/*
 * Rules for building config files from scripts
 */

#ifndef Depend
# define Depend depend
#endif
 
#ifndef ConfigTargetLong
#define ConfigTargetLong(target,dep,script,args,extra)			@@@@\
all:: Configure								@@@@\
									@@@@\
Configure:: target.o							@@@@\
									@@@@\
target.c: script dep							@@@@\
	$(MAKE) $(MFLAGS) Makefile					@@@@\
	$(MAKE) $(MFLAGS) extra Concat(Build,target)			@@@@\
									@@@@\
Concat(Build,target):							@@@@\
	$(RM) target.c							@@@@\
	$(SHELL) script args						@@@@\
									@@@@\
clean::									@@@@\
	$(RM) target.c
#endif

#define ConfigTarget(target,dep,script,args) ConfigTargetLong(target,dep,script,args,Depend)

#define ConfigTargetNoDepend(target,dep,script,args) ConfigTargetLong(target,dep,script,args,)

#ifndef DriverObjectList
#define DriverObjectList(drivers,list)					@@@@\
list: $(ICONFIGFILES) drivers						@@@@\
	RemoveFile(list)						@@@@\
	@@echo Creating list for drivers; \				@@@@\
	DRIVERS="drivers"; \						@@@@\
	if [ x"$$DRIVERS" != x ]; then \				@@@@\
	  for i in $$DRIVERS; do \					@@@@\
	    DRIVER="$$i/*_drv.o"; \					@@@@\
	    for j in $$DRIVER; do \					@@@@\
	      echo $$j >> list; \					@@@@\
	    done; \							@@@@\
	  done; \							@@@@\
	else \								@@@@\
	  echo "" > list; \						@@@@\
	fi								@@@@\
									@@@@\
clean::									@@@@\
	RemoveFile(list)
#endif

/*
 * Rules for installing Driver SDK parts (target is install.sdk)
 */

#ifndef InstallDriverSDKNonExecFile
#if !DoLoadableServer
#define InstallDriverSDKNonExecFile(file,dest)				/**/
#else
#define InstallDriverSDKNonExecFile(file,dest)				@@@@\
install.sdk:: file							@@@@\
	MakeDir($(DESTDIR)dest)						@@@@\
	$(INSTALL) -c $(INSTDATFLAGS) file $(DESTDIR)dest
#endif
#endif

#ifndef InstallDriverSDKLibrary
#if !DoLoadableServer
#define InstallDriverSDKLibrary(libname,dest)				/**/
#else
#define InstallDriverSDKLibrary(libname,dest)				@@@@\
install.sdk:: Concat(lib,libname.a)					@@@@\
	MakeDir($(DESTDIR)dest)						@@@@\
	$(INSTALL) -c $(INSTLIBFLAGS) Concat(lib,libname.a) $(DESTDIR)dest @@@@\
	RanLibrary($(RANLIBINSTFLAGS) Concat($(DESTDIR)dest/lib,libname.a))
#endif
#endif

#ifndef InstallDriverSDKNamedLibrary
#if !DoLoadableServer
#define InstallDriverSDKNamedLibrary(libname,dlibname,dest)		/**/
#else
#define InstallDriverSDKNamedLibrary(libname,dlibname,dest)		@@@@\
install.sdk:: Concat(lib,libname.a)					@@@@\
	MakeDir($(DESTDIR)dest)						@@@@\
	$(INSTALL) -c $(INSTLIBFLAGS) Concat(lib,libname.a) \		@@@@\
	  Concat($(DESTDIR)dest/lib,dlibname.a)				@@@@\
	RanLibrary($(RANLIBINSTFLAGS) Concat($(DESTDIR)dest/lib,dlibname.a))
#endif
#endif

#ifndef InstallDriverSDKNamedNonExec
#if !DoLoadableServer
#define InstallDriverSDKNamedNonExec(srcname,dstname,dest)		/**/
#else
#define InstallDriverSDKNamedNonExec(srcname,dstname,dest)		@@@@\
install.sdk:: srcname							@@@@\
	MakeDir($(DESTDIR)dest)						@@@@\
	$(INSTALL) -c $(INSTDATFLAGS) srcname $(DESTDIR)dest/dstname
#endif
#endif

#ifndef InstallDriverSDKNamedProg
#if !DoLoadableServer
#define InstallDriverSDKNamedProg(srcname,dstname,dest)			/**/
#else
#define InstallDriverSDKNamedProg(srcname,dstname,dest)			@@@@\
install.sdk:: srcname							@@@@\
	MakeDir($(DESTDIR)dest)						@@@@\
	$(INSTALL) -c $(INSTBINFLAGS) srcname $(DESTDIR)dest/dstname
#endif
#endif

#ifndef InstallDriverSDKSubdirs
#if !DoLoadableServer
#define InstallDriverSDKSubdirs(dirs)					/**/
#else
#define InstallDriverSDKSubdirs(dirs) \
NamedTargetSubdirs(install.sdk,dirs,"installing driver SDK",DESTDIR='$(DESTDIR)',install.sdk)
#endif
#endif

#ifndef InstallDriverSDKMultipleDestFlags
#if !DoLoadableServer
#define InstallDriverSDKMultipleDestFlags(list,dest,flags)		/**/
#else
#define InstallDriverSDKMultipleDestFlags(list,dest,flags) \
InstallMultipleDestFlags(install.sdk,list,dest,flags)
#endif
#endif

#ifndef InstallDriverSDKDynamicModule
#if !DoLoadableServer
#define InstallDriverSDKDynamicModule(module,dest,subdir)		/**/
#else
#define InstallDriverSDKDynamicModule(module,dest,subdir)		@@@@\
install.sdk:: module							@@@@\
	MakeDir($(DESTDIR)dest/subdir)					@@@@\
	$(INSTALL) -c module $(DESTDIR)dest/subdir
#endif
#endif

#ifndef InstallDriverSDKObjectModule
#if !DoLoadableServer
#define InstallDriverSDKObjectModule(module,dest,subdir)		/**/
#else
#if MakeDllModules
#define InstallDriverSDKObjectModule(module,dest,subdir)		@@@@\
InstallDriverSDKDynamicModule(Concat(module,_drv.so),dest,subdir)
#else
#define InstallDriverSDKObjectModule(module,dest,subdir)		@@@@\
InstallDriverSDKDynamicModule(Concat(module,_drv.o),dest,subdir)
#endif
#endif
#endif


#ifndef InstallDriverSDKObjectSubModule
#if !DoLoadableServer
#define InstallDriverSDKObjectSubModule(module,dest,subdir)		/**/
#else
#if MakeDllModules
#define InstallDriverSDKObjectSubModule(module,dest,subdir)		@@@@\
InstallDriverSDKDynamicModule(Concat(module,.so),dest,subdir)
#else
#define InstallDriverSDKObjectSubModule(module,dest,subdir)		@@@@\
InstallDriverSDKDynamicModule(Concat(module,.o),dest,subdir)
#endif
#endif
#endif

#ifndef InstallDriverSDKLibraryModule
#if !DoLoadableServer
#define InstallDriverSDKLibraryModule(module,dest,subdir)		/**/
#else
#if MakeDllModules
#define InstallDriverSDKLibraryModule(module,dest,subdir)		@@@@\
InstallDriverSDKDynamicModule(Concat3(lib,module,.so),dest,subdir)
#else
#define InstallDriverSDKLibraryModule(module,dest,subdir)		@@@@\
InstallDriverSDKDynamicModule(ModuleLibraryTargetName(module),dest,subdir)
#endif
#endif
#endif

#ifndef ServerDriverSDKTarget
#if !DoLoadableServer
#define ServerDriverSDKTarget(program)					/**/
#else
#define ServerDriverSDKTarget(program)					@@@@\
InstallDriverSDKProgramWithFlags(program,$(DRIVERSDKDIR),$(_NOOP_))
#endif
#endif

#ifndef InstallDriverSDKProgramWithFlags
#if !DoLoadableServer
#define InstallDriverSDKProgramWithFlags(program,dest,flags)		/**/
#else
#define InstallDriverSDKProgramWithFlags(program,dest,flags)		@@@@\
InstallTarget(install.sdk,ProgramTargetName(program),$(INSTPGMFLAGS) flags,dest)
#endif
#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@
